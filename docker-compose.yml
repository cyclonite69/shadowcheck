

services:
  postgres:
    image: postgis/postgis:18-3.6
    container_name: shadowcheck_postgres_18
    environment:
      POSTGRES_DB: shadowcheck
      POSTGRES_USER: shadowcheck
      POSTGRES_PASSWORD: your_secure_password_here
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C --auth-host=scram-sha-256"
      # Performance environment variables
      POSTGRES_SHARED_BUFFERS: "4GB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "12GB"
      POSTGRES_WORK_MEM: "128MB"
      POSTGRES_MAINTENANCE_WORK_MEM: "1GB"
    volumes:
      - shadowcheck_postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./config/postgres-config:/etc/postgresql/conf.d:ro
      - /dev/shm:/dev/shm  # Use host shared memory for better performance
    networks:
      - shadowcheck_network
    ports:
      - "127.0.0.1:5432:5432"  # Bind only to localhost
    restart: unless-stopped
    # Resource limits optimized for Ryzen 5 + 16GB RAM
    deploy:
      resources:
        limits:
          cpus: '8'        # Allow use of most CPU cores
          memory: 14G       # Reserve 2GB for OS
        reservations:
          cpus: '6'         # Guarantee 6 cores
          memory: 8G        # Guarantee 8GB
    # Performance optimizations
    shm_size: 2g            # Larger shared memory for spatial operations
    tmpfs:
      - /tmp:size=1g,exec   # Fast temporary storage

    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shadowcheck -d shadowcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # BACKEND API - Node.js + Express + PostGIS Integration
  # ============================================================================
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: production
    container_name: shadowcheck_backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://shadowcheck:${POSTGRES_PASSWORD}@postgres:5432/shadowcheck
      # Optional overrides
      DB_POOL_MIN: ${DB_POOL_MIN:-5}
      DB_POOL_MAX: ${DB_POOL_MAX:-20}
      DB_RETRY_ATTEMPTS: ${DB_RETRY_ATTEMPTS:-5}
      DB_RETRY_DELAY: ${DB_RETRY_DELAY:-2000}
    volumes:
      - ./logs:/app/logs
      - npm-cache:/root/.npm
    networks:
      - shadowcheck_network
    ports:
      - "127.0.0.1:5000:5000"  # Bind only to localhost
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/api/v1/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M

  # ============================================================================
  # FRONTEND - Vite + React
  # ============================================================================
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: production
    container_name: shadowcheck_frontend
    environment:
      VITE_API_URL: http://localhost:5000
    networks:
      - shadowcheck_network
    ports:
      - "127.0.0.1:3001:80"  # Bind only to localhost
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ============================================================================
  # MONITORING STACK - Prometheus, Grafana, Loki
  # ============================================================================

  # Prometheus - Time-series metrics collection
  prometheus:
    image: prom/prometheus:v2.51.0
    container_name: shadowcheck_prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - shadowcheck_network
    ports:
      - "127.0.0.1:9091:9090"  # Prometheus UI on port 9091 to avoid conflicts
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.6
    container_name: shadowcheck_loki
    volumes:
      - ./docker/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - shadowcheck_network
    ports:
      - "127.0.0.1:3100:3100"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail - Log shipper for Loki
  promtail:
    image: grafana/promtail:2.9.6
    container_name: shadowcheck_promtail
    volumes:
      - ./docker/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/shadowcheck:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - shadowcheck_network
    restart: unless-stopped
    depends_on:
      - loki

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.4.1
    container_name: shadowcheck_grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-KZQvo7+1Vj5lEw9P4dVwJi40OcHYA6kJR1iCULWza4k=}
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_SECURITY_COOKIE_SAMESITE: lax
      GF_INSTALL_PLUGINS: ''
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./docker/grafana/config/grafana.ini:/etc/grafana/grafana.ini:ro
    networks:
      - shadowcheck_network
    ports:
      - "127.0.0.1:3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:8.4
    container_name: shadowcheck_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@shadowcheck.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - shadowcheck_pgadmin:/var/lib/pgadmin
    networks:
      - shadowcheck_network
    ports:
      - "127.0.0.1:8080:80"  # Bind only to localhost
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - admin

networks:
  shadowcheck_network:
    driver: bridge

volumes:
  shadowcheck_postgres_data:
    external: true
  shadowcheck_pgadmin:
    driver: local
  npm-cache:
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local