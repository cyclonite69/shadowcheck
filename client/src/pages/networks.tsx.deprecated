import { useState, useMemo } from 'react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { 
  Network, 
  Search, 
  SortAsc, 
  SortDesc, 
  Filter,
  Wifi,
  Signal,
  Shield,
  MapPin,
  Calendar
} from 'lucide-react';
import { bssidToColor, bestlevelToDbm, formatBSSID, getBSSIDOctets, calculateColorSimilarity } from '@/utils/bssid-color';

interface NetworkEntry {
  id: string;
  bssid: string;
  ssid?: string;
  encryption?: string; // Updated from capabilities
  signal_strength?: number; // Updated from bestlevel
  frequency?: number;
  channel?: number;
  latitude?: string; // Updated from lastlat
  longitude?: string; // Updated from lastlon
  observed_at?: string; // Updated from lasttime
  created_at?: string;
  type?: string; // Radio type field
  radio_type?: string; // Alternative radio type field
  network_count?: number;
}

type SortField = 'bssid' | 'ssid' | 'signal_strength' | 'security' | 'frequency' | 'last_seen';
type SortDirection = 'asc' | 'desc';

export default function NetworksPage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [sortField, setSortField] = useState<SortField>('bssid');
  const [sortDirection, setSortDirection] = useState<SortDirection>('asc');
  const [securityFilter, setSecurityFilter] = useState<string>('all');
  const [radioTypeFilter, setRadioTypeFilter] = useState<string>('all');
  const [selectedOctet, setSelectedOctet] = useState<number | null>(null);
  const [selectedNetworks, setSelectedNetworks] = useState<Set<string>>(new Set());

  const { data: networksData, isLoading } = useQuery({
    queryKey: ['/api/v1/networks'],
    refetchInterval: 30000,
  });

  const networks = useMemo(() => {
    if (!networksData || !(networksData as any)?.data) return [];
    return (networksData as any).data as NetworkEntry[];
  }, [networksData]);

  // Filter and sort networks
  const filteredAndSortedNetworks = useMemo(() => {
    let filtered = networks.filter((network) => {
      // Search filter
      const searchMatch = !searchTerm || 
        network.bssid.toLowerCase().includes(searchTerm.toLowerCase()) ||
        network.ssid?.toLowerCase().includes(searchTerm.toLowerCase());

      // Security filter  
      const securityMatch = securityFilter === 'all' || 
        (securityFilter === 'encrypted' && network.encryption && network.encryption !== 'OPEN') ||
        (securityFilter === 'open' && (!network.encryption || network.encryption === 'OPEN')) ||
        (securityFilter === 'wpa' && network.encryption?.includes('WPA')) ||
        (securityFilter === 'wep' && network.encryption?.includes('WEP'));

      // Radio type filter
      const radioType = network.radio_type || network.type || 'wifi'; // Default to wifi
      const radioMatch = radioTypeFilter === 'all' ||
        (radioTypeFilter === 'wifi' && (radioType === 'W' || radioType === 'wifi' || radioType === 'WiFi')) ||
        (radioTypeFilter === 'bluetooth' && (radioType === 'BT' || radioType === 'bluetooth' || radioType === 'Bluetooth')) ||
        (radioTypeFilter === 'ble' && (radioType === 'BLE' || radioType === 'ble')) ||
        (radioTypeFilter === 'cellular' && (radioType.includes('Cell') || radioType === 'cellular'));

      return searchMatch && securityMatch && radioMatch;
    });

    // Sort networks
    filtered.sort((a, b) => {
      let aVal: any, bVal: any;

      switch (sortField) {
        case 'bssid':
          aVal = a.bssid;
          bVal = b.bssid;
          break;
        case 'ssid':
          aVal = a.ssid || '';
          bVal = b.ssid || '';
          break;
        case 'signal_strength':
          aVal = a.signal_strength || 0;
          bVal = b.signal_strength || 0;
          break;
        case 'security':
          aVal = a.encryption || '';
          bVal = b.encryption || '';
          break;
        case 'frequency':
          aVal = a.frequency || 0;
          bVal = b.frequency || 0;
          break;
        case 'last_seen':
          aVal = a.observed_at || '';
          bVal = b.observed_at || '';
          break;
        default:
          aVal = a.bssid;
          bVal = b.bssid;
      }

      if (typeof aVal === 'string' && typeof bVal === 'string') {
        return sortDirection === 'asc' 
          ? aVal.localeCompare(bVal)
          : bVal.localeCompare(aVal);
      }

      return sortDirection === 'asc' 
        ? aVal - bVal
        : bVal - aVal;
    });

    return filtered;
  }, [networks, searchTerm, sortField, sortDirection, securityFilter, radioTypeFilter]);

  // Group by BSSID octet for forensic analysis
  const octetGroups = useMemo(() => {
    const groups: { [key: string]: NetworkEntry[] } = {};
    
    filteredAndSortedNetworks.forEach(network => {
      const octets = getBSSIDOctets(network.bssid);
      if (octets.length === 6) {
        const groupKey = selectedOctet !== null 
          ? octets[selectedOctet] 
          : octets.slice(0, 3).join(':'); // Group by OUI by default
        
        if (!groups[groupKey]) {
          groups[groupKey] = [];
        }
        groups[groupKey].push(network);
      }
    });

    return groups;
  }, [filteredAndSortedNetworks, selectedOctet]);

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const getSortIcon = (field: SortField) => {
    if (sortField !== field) return null;
    return sortDirection === 'asc' ? <SortAsc className="h-4 w-4" /> : <SortDesc className="h-4 w-4" />;
  };

  const getSecurityLevel = (encryption: string) => {
    if (!encryption || encryption === 'OPEN') return 'Open';
    if (encryption.includes('WPA')) return 'WPA';
    if (encryption.includes('WEP')) return 'WEP';
    return 'Other';
  };

  const toggleNetworkSelection = (bssid: string) => {
    const newSelected = new Set(selectedNetworks);
    if (newSelected.has(bssid)) {
      newSelected.delete(bssid);
    } else {
      newSelected.add(bssid);
    }
    setSelectedNetworks(newSelected);
  };

  const getSignalStrengthColor = (signal: number) => {
    if (signal >= -40) return '#16a34a'; // Strong signal - conservative green
    if (signal >= -60) return '#ca8a04'; // Medium signal - conservative amber
    if (signal >= -80) return '#ea580c'; // Weak signal - conservative orange
    return '#dc2626'; // Very weak signal - conservative red
  };

  const getFrequencyBand = (frequency: number) => {
    if (frequency > 5000) return '5G';
    if (frequency > 2000) return '2.4G';
    return '?';
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <div className="animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full mx-auto mb-2"></div>
          <p className="text-sm text-muted-foreground">Loading network data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col overflow-hidden bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
      <main className="flex-1 overflow-y-auto">
        <div className="max-w-7xl mx-auto px-6 py-8 space-y-8">
          {/* Page Title */}
          <div className="flex items-center gap-4 mb-2">
            <div className="icon-container w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 shadow-lg shadow-purple-500/30">
              <Network className="h-6 w-6 text-white" />
            </div>
            <div className="flex-1">
              <h1 className="text-3xl font-bold bg-gradient-to-r from-white via-slate-200 to-slate-400 bg-clip-text text-transparent drop-shadow-[0_2px_8px_rgba(59,130,246,0.5)]">
                Network Intelligence
              </h1>
              <p className="text-sm text-slate-400 cyber-text tracking-wide mt-1">
                Comprehensive network observations and forensic analysis
              </p>
            </div>
            <div className="flex items-center gap-2">
              <div className="silver-accent px-3 py-1 rounded-full">
                <span className="text-xs font-semibold text-slate-700">{filteredAndSortedNetworks.length} networks</span>
              </div>
              <div className="silver-accent px-3 py-1 rounded-full">
                <span className="text-xs font-semibold text-slate-700">{networks.reduce((total, network) => total + (network.network_count || 1), 0)} total sightings</span>
              </div>
            </div>
          </div>

      {/* Filters and Search */}
      <div className="premium-card">
        <CardContent className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            {/* Search */}
            <div className="relative">
              <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search BSSID or SSID..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-9"
                data-testid="input-search-networks"
              />
            </div>

            {/* Security Filter */}
            <Select value={securityFilter} onValueChange={setSecurityFilter}>
              <SelectTrigger data-testid="select-security-filter">
                <Filter className="h-4 w-4 mr-2" />
                <SelectValue placeholder="Security type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Security</SelectItem>
                <SelectItem value="encrypted">Encrypted</SelectItem>
                <SelectItem value="open">Open Networks</SelectItem>
                <SelectItem value="wpa">WPA/WPA2</SelectItem>
                <SelectItem value="wep">WEP</SelectItem>
              </SelectContent>
            </Select>

            {/* Radio Type Filter */}
            <Select value={radioTypeFilter} onValueChange={setRadioTypeFilter}>
              <SelectTrigger data-testid="select-radio-filter">
                <Signal className="h-4 w-4 mr-2" />
                <SelectValue placeholder="Radio type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Radio Types</SelectItem>
                <SelectItem value="wifi">WiFi</SelectItem>
                <SelectItem value="bluetooth">Bluetooth</SelectItem>
                <SelectItem value="ble">BLE</SelectItem>
                <SelectItem value="cellular">Cellular</SelectItem>
              </SelectContent>
            </Select>

            {/* Octet Grouping */}
            <Select 
              value={selectedOctet?.toString() || 'oui'} 
              onValueChange={(value) => setSelectedOctet(value === 'oui' ? null : parseInt(value))}
            >
              <SelectTrigger data-testid="select-octet-group">
                <SelectValue placeholder="Group by..." />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="oui">Group by OUI</SelectItem>
                <SelectItem value="0">1st Octet</SelectItem>
                <SelectItem value="1">2nd Octet</SelectItem>
                <SelectItem value="2">3rd Octet</SelectItem>
                <SelectItem value="3">4th Octet</SelectItem>
                <SelectItem value="4">5th Octet</SelectItem>
                <SelectItem value="5">6th Octet</SelectItem>
              </SelectContent>
            </Select>

            {/* Sort Controls */}
            <div className="flex gap-2">
              <Select value={sortField} onValueChange={(value) => setSortField(value as SortField)}>
                <SelectTrigger data-testid="select-sort-field">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="bssid">BSSID</SelectItem>
                  <SelectItem value="ssid">SSID</SelectItem>
                  <SelectItem value="signal_strength">Signal</SelectItem>
                  <SelectItem value="security">Security</SelectItem>
                  <SelectItem value="frequency">Frequency</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </div>

      {/* Network List */}
      <TooltipProvider>
        <div className="premium-card">
          <CardHeader>
            <CardTitle className="text-slate-300 flex items-center gap-2">
              <div className="icon-container w-8 h-8 mr-2">
                <Wifi className="h-4 w-4 text-green-300" />
              </div>
              Network Directory
              <div className="silver-accent px-3 py-1 rounded-full ml-auto">
                <span className="text-xs font-semibold text-slate-700">{filteredAndSortedNetworks.length} networks</span>
              </div>
              {selectedNetworks.size > 0 && (
                <div className="gold-accent px-3 py-1 rounded-full ml-2">
                  <span className="text-xs font-semibold text-slate-800">{selectedNetworks.size} selected</span>
                </div>
              )}
            </CardTitle>
          </CardHeader>
          <CardContent className="p-0">
            <div className="space-y-0">
              {filteredAndSortedNetworks.map((network, index) => {
                const color = bssidToColor(network.bssid);
                const securityLevel = getSecurityLevel(network.encryption || '');
                const dbmSignal = network.signal_strength || 0;
                const isSelected = selectedNetworks.has(network.bssid);
                
                return (
                  <Tooltip key={`${network.bssid}-${index}`}>
                    <TooltipTrigger asChild>
                      <div
                        className={`flex items-center gap-3 p-3 border-b border-border/20 cursor-pointer transition-all duration-200 hover:bg-background/30 ${
                          isSelected ? 'bg-background/50' : ''
                        }`}
                        style={{
                          backgroundColor: isSelected 
                            ? `${color.hex}10` 
                            : 'transparent',
                          borderLeft: `3px solid ${color.hex}`
                        }}
                        onClick={() => toggleNetworkSelection(network.bssid)}
                        data-testid={`network-${network.bssid.replace(/:/g, '-')}`}
                      >
                        {/* Color Circle */}
                        <div
                          className="w-3 h-3 rounded-full border border-border/30"
                          style={{ backgroundColor: color.hex }}
                        />

                        {/* BSSID */}
                        <div className="w-36">
                          <p className="font-mono text-xs font-medium text-foreground">
                            {formatBSSID(network.bssid)}
                          </p>
                        </div>

                        {/* SSID */}
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium text-foreground truncate">
                            {network.ssid || 'Hidden Network'}
                          </p>
                        </div>

                        {/* Security Badge */}
                        <div className="w-16">
                          <Badge 
                            variant={securityLevel === 'Open' ? 'destructive' : 'secondary'}
                            className="text-xs h-5"
                          >
                            {securityLevel}
                          </Badge>
                        </div>

                        {/* Signal Strength */}
                        <div className="w-20 text-right">
                          <p 
                            className="text-xs font-medium"
                            style={{ color: getSignalStrengthColor(dbmSignal) }}
                          >
                            {dbmSignal} dBm
                          </p>
                        </div>

                        {/* Frequency */}
                        <div className="w-16 text-right">
                          <p className="text-xs text-muted-foreground">
                            {getFrequencyBand(network.frequency ?? 0)}
                          </p>
                        </div>

                        {/* Sighting Count */}
                        {network.network_count && network.network_count > 1 && (
                          <div className="w-12 text-right">
                            <span className="text-xs bg-muted/50 px-1.5 py-0.5 rounded">
                              {network.network_count}
                            </span>
                          </div>
                        )}
                      </div>
                    </TooltipTrigger>
                    <TooltipContent side="left" className="max-w-80">
                      <div className="space-y-2">
                        <div className="font-medium text-sm border-b border-border/20 pb-1">
                          {network.ssid || 'Hidden Network'}
                        </div>
                        <div className="grid grid-cols-2 gap-2 text-xs">
                          <div>
                            <span className="text-muted-foreground">BSSID:</span>
                            <br />
                            <span className="font-mono">{formatBSSID(network.bssid)}</span>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Security:</span>
                            <br />
                            <span>{network.encryption || 'OPEN'}</span>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Signal:</span>
                            <br />
                            <span style={{ color: getSignalStrengthColor(dbmSignal) }}>
                              {dbmSignal} dBm
                            </span>
                          </div>
                          <div>
                            <span className="text-muted-foreground">Frequency:</span>
                            <br />
                            <span>{network.frequency ? `${network.frequency} MHz` : 'Unknown'}</span>
                          </div>
                          {network.latitude && network.longitude && (
                            <div className="col-span-2">
                              <span className="text-muted-foreground">Location:</span>
                              <br />
                              <span className="font-mono">
                                {parseFloat(network.latitude).toFixed(6)}, {parseFloat(network.longitude).toFixed(6)}
                              </span>
                            </div>
                          )}
                          {network.network_count && network.network_count > 1 && (
                            <div>
                              <span className="text-muted-foreground">Sightings:</span>
                              <br />
                              <span>{network.network_count}</span>
                            </div>
                          )}
                        </div>
                      </div>
                    </TooltipContent>
                  </Tooltip>
                );
              })}
            </div>
          </CardContent>
        </div>
      </TooltipProvider>

      {filteredAndSortedNetworks.length === 0 && (
        <div className="premium-card">
          <CardContent className="p-8 text-center">
            <div className="icon-container mx-auto mb-6">
              <Network className="h-8 w-8 text-slate-300" />
            </div>
            <h3 className="text-lg font-medium text-slate-200 mb-2">No Networks Found</h3>
            <p className="text-slate-300">
              Try adjusting your search terms or filters to see more results.
            </p>
          </CardContent>
        </div>
      )}
        </div>
      </main>
    </div>
  );
}