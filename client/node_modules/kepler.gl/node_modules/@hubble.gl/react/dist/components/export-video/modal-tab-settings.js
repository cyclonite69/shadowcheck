// hubble.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
import React, { useState } from 'react';
import { estimateFileSize } from "./utils.js";
import { StyledLabelCell, StyledValueCell, InputGrid } from "./styled-components.js";
import { FORMATS, RESOLUTIONS, ASPECT_RATIOS, DEFAULT_PREVIEW_RESOLUTIONS } from "./constants.js";
import { WithKeplerUI } from "../inject-kepler.js";
const getOptionValue = (r) => r.value;
const displayOption = (r) => r.label;
const getSelectedItems = (options, value) => options.find(o => o.value === value);
function SettingsTab({ settings, resolution, disabled }) {
    const [aspRatio, setAspRatio] = useState(ASPECT_RATIOS['16_9']);
    return (React.createElement(WithKeplerUI, null, ({ Input, ItemSelector }) => (React.createElement(React.Fragment, null,
        React.createElement(InputGrid, { "$rows": 5 },
            React.createElement(StyledLabelCell, null, "File Name"),
            React.createElement(Input, { value: settings.fileName, placeholder: settings.fileNamePlaceholder, onChange: (e) => settings.setFileName(e.target.value), disabled: disabled }),
            React.createElement(StyledLabelCell, null, "Media Type"),
            React.createElement(ItemSelector, { selectedItems: getSelectedItems(FORMATS, settings.mediaType), options: FORMATS, getOptionValue: getOptionValue, displayOption: displayOption, multiSelect: false, searchable: false, onChange: settings.setMediaType, disabled: disabled }),
            React.createElement(StyledLabelCell, null, "Ratio"),
            React.createElement(ItemSelector, { selectedItems: aspRatio, options: [ASPECT_RATIOS['4_3'], ASPECT_RATIOS['16_9']], multiSelect: false, searchable: false, onChange: ratio => {
                    setAspRatio(ratio);
                    settings.setResolution(DEFAULT_PREVIEW_RESOLUTIONS[ratio]);
                }, disabled: disabled }),
            React.createElement(StyledLabelCell, null, "Quality"),
            React.createElement(ItemSelector, { selectedItems: getSelectedItems(RESOLUTIONS, settings.resolution), options: RESOLUTIONS.filter(o => o.aspectRatio === aspRatio), getOptionValue: getOptionValue, displayOption: displayOption, multiSelect: false, searchable: false, onChange: settings.setResolution, disabled: disabled }),
            React.createElement(StyledLabelCell, null, "File Size"),
            React.createElement(StyledValueCell, null,
                "Approx.",
                ' ',
                estimateFileSize(settings.frameRate, resolution, settings.durationMs, settings.mediaType)))))));
}
export default SettingsTab;
