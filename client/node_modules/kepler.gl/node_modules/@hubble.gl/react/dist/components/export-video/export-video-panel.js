// hubble.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
import React from 'react';
import { withTheme } from 'styled-components';
import { PanelCloseInner, StyledTitle, PanelBodyInner, Panel, ButtonGroup, TimelineControls, timelinePlayButtonStyle, ExportVideoPanelHeader } from "./styled-components.js";
import { DEFAULT_ICON_BUTTON_HEIGHT } from "./constants.js";
import ExportVideoPanelSettings from "./export-video-panel-settings.js";
import { ExportVideoPanelPreview } from "./export-video-panel-preview.js";
import { Play, Stop } from "../icons/index.js";
import { WithKeplerUI } from "../inject-kepler.js";
const PanelClose = ({ handleClose }) => (React.createElement(WithKeplerUI, null, ({ IconButton, Icons }) => (React.createElement(PanelCloseInner, { className: "export-video-panel__close" },
    React.createElement(IconButton, { style: { alignItems: 'start' }, className: "export-video-panel__button", link: true, onClick: handleClose },
        React.createElement(Icons.Delete, { height: DEFAULT_ICON_BUTTON_HEIGHT }))))));
const PanelBody = ({ exportVideoWidth, mapData, adapter, setViewState, settings, resolution, viewState, deckProps, mapProps, disableBaseMap, mapboxLayerBeforeId, handlePreviewVideo, handleRenderVideo, handleStop, rendering, previewing, saving }) => (React.createElement(WithKeplerUI, null, ({ Button }) => (React.createElement(PanelBodyInner, { className: "export-video-panel__body", "$exportVideoWidth": exportVideoWidth },
    React.createElement(ExportVideoPanelPreview, { mapData: mapData, adapter: adapter, setViewState: setViewState, exportVideoWidth: exportVideoWidth, resolution: resolution, viewState: viewState, rendering: rendering, saving: saving, durationMs: settings.durationMs, deckProps: deckProps, mapProps: mapProps, disableBaseMap: disableBaseMap, mapboxLayerBeforeId: mapboxLayerBeforeId }),
    React.createElement(ExportVideoPanelSettings, { settings: settings, resolution: resolution, disabled: rendering || previewing }),
    React.createElement(TimelineControls, { className: "timeline-controls" }, rendering || previewing ? (React.createElement(Stop, { style: timelinePlayButtonStyle, onClick: () => handleStop({}) })) : (React.createElement(Play, { style: timelinePlayButtonStyle, onClick: handlePreviewVideo }))),
    React.createElement(ButtonGroup, null,
        React.createElement(Button, { style: { marginTop: '16px', width: '100%', height: '32px' }, className: 'export-video-button', onClick: handleRenderVideo, disabled: rendering || previewing }, "Render"))))));
const ExportVideoPanel = ({ theme, 
// UI Props
exportVideoWidth, handleClose, header, 
// Map Props
mapData, setViewState, mapboxLayerBeforeId, 
// Settings Props
settings, 
// Hubble Props
adapter, handlePreviewVideo, handleRenderVideo, handleStop, rendering, previewing, saving, resolution, viewState, deckProps, mapProps, disableBaseMap }) => {
    return (React.createElement(Panel, { "$exportVideoWidth": exportVideoWidth, className: "export-video-panel" },
        header !== false ? (React.createElement(ExportVideoPanelHeader, { className: "export-video-panel__header" },
            React.createElement(StyledTitle, { className: "export-video-panel__title" }, "Export Video"),
            React.createElement(PanelClose, { handleClose: handleClose }))) : null,
        React.createElement(PanelBody, { exportVideoWidth: exportVideoWidth, mapData: mapData, adapter: adapter, settings: settings, setViewState: setViewState, resolution: resolution, viewState: viewState, deckProps: deckProps, mapProps: mapProps, disableBaseMap: disableBaseMap, mapboxLayerBeforeId: mapboxLayerBeforeId, handlePreviewVideo: handlePreviewVideo, handleRenderVideo: handleRenderVideo, handleStop: handleStop, rendering: rendering, previewing: previewing, saving: saving })));
};
// TODO fix with react 18
const ThemedExportVideoPanel = withTheme(ExportVideoPanel);
export default ThemedExportVideoPanel;
