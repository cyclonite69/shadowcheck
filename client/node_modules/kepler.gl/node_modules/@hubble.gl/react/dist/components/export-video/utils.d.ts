import type { MapViewState } from '@deck.gl/core/typed';
export declare function scaleToVideoExport(viewState: MapViewState, container: {
    width: number;
    height: number;
}): {
    height: any;
    width: any;
    latitude: any;
    longitude: any;
    pitch: number;
    zoom: any;
    bearing: number;
    altitude: any;
};
/**
 * Parses camera type and creates keyframe for Hubble to use
 * @param strCameraType of user-selected camera option ex: "Orbit (90ยบ)"
 * @param viewState keyframe JSON that contains long, lat, zoom, bearing, pitch
 */
export declare function parseSetCameraType(strCameraType: string, viewState: MapViewState): {
    longitude: number;
    latitude: number;
    zoom: number;
    pitch?: number;
    bearing?: number;
    minZoom?: number;
    maxZoom?: number;
    minPitch?: number;
    maxPitch?: number;
    position?: number[];
    transitionDuration?: number | "auto";
    transitionInterpolator?: import("@deck.gl/core/typed").TransitionInterpolator;
    transitionEasing?: (t: number) => number;
    transitionInterruption?: 1 | 2 | 3;
    onTransitionStart?: (transition: import("@deck.gl/core/typed/transitions/transition").default) => void;
    onTransitionInterrupt?: (transition: import("@deck.gl/core/typed/transitions/transition").default) => void;
    onTransitionEnd?: (transition: import("@deck.gl/core/typed/transitions/transition").default) => void;
};
/**
 * Used to convert durationMs to [hh:]mm:ss[.ms]
 * @param durationMs duration of animation in milliseconds
 * @param showMs optionally show milliseconds
 * @returns time in format hh:mm:ss.ms
 */
export declare function printDuration(durationMs: number, showMs?: boolean): string;
/**
 * Estimates file size of resulting animation. All formulas are approximations
 * created with small sample of animations on default NY taxi trips data and
 * based off hubble's default framerate and the bitrate/depth of 3rd party encoders
 * @param frameRate frame rate of animation (set by developer)
 * @param resolution [width, height] of animation
 * @param durationMs duration of animation (set by developer)
 * @param mediaType 'GIF', 'WEBM', etc.
 * @returns size in MB
 */
export declare function estimateFileSize(frameRate: number, resolution: [number, number], durationMs: number, mediaType: string): string;
//# sourceMappingURL=utils.d.ts.map