// hubble.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* global window */
import React, { Component, createRef } from 'react';
import Modal from 'react-modal';
import { ThemeProvider } from 'styled-components';
import { ModalContainer } from "./styled-components.js";
import { createSelector } from 'reselect';
class ExportVideoModal extends Component {
    constructor() {
        super(...arguments);
        this.root = createRef();
        this.settingsPosSelector = createSelector(this.showSettingsSelector, this.themeSelector, (showSettings, theme = {}) => {
            const { defaultSettingsPos, bottomBuffer, settingsHeight } = this.props;
            if (showSettings === false || !this.root || !this.root.current)
                return defaultSettingsPos;
            const { sidePanelInnerPadding = 16, sidePanel = {}, sidePanelScrollBarWidth = 10 } = theme;
            const sidePanelLeft = (sidePanel.margin || {}).left || 20;
            const offsetX = sidePanelInnerPadding + sidePanelLeft + sidePanelScrollBarWidth;
            // find component Root position
            const bounding = this.root.current.getBoundingClientRect();
            const { x, y, width } = bounding;
            // set the top so it won't collide with bottom widget
            const top = y + settingsHeight <= window.innerHeight - bottomBuffer
                ? y
                : window.innerHeight - bottomBuffer - settingsHeight;
            return { top: `${top}px`, left: `${x + width + offsetX}px` };
        });
        this.modalStylesSelector = createSelector(this.themeSelector, theme => ({
            content: {
                top: 'auto',
                left: 'auto',
                right: '50%',
                bottom: '50%',
                transform: 'translate(50%, 50%)',
                padding: '0px 0px 0px 0px',
                border: 0,
                backgroundColor: theme.sidePanelBg,
                borderRadius: theme.panelBorderRadius || '2px'
            },
            overlay: {
                backgroundColor: 'rgba(0, 0, 0, .5)',
                zIndex: (this.props.theme && this.props.theme.modalOverLayZ) || 1000
            }
        }));
    }
    static { this.defaultProps = {
        defaultSettingsPos: { top: '320px', left: '320px' },
        bottomBuffer: 212
    }; }
    // derive settings position based on root component
    showSettingsSelector(props) {
        return props.showSettings;
    }
    themeSelector(props) {
        return props.theme;
    }
    render() {
        const { isOpen, theme, children } = this.props;
        const modalStyles = this.modalStylesSelector(this.props);
        return (React.createElement(ThemeProvider, { theme: theme },
            React.createElement(ModalContainer, { className: "export-video-modal", ref: this.root }, this.root.current ? (React.createElement(Modal, { isOpen: isOpen, style: modalStyles, ariaHideApp: false, parentSelector: () => {
                    return (this.root.current ||
                        {
                            removeChild: () => { },
                            appendChild: () => { },
                            contains: () => { }
                        });
                } }, children)) : null)));
    }
}
export default ExportVideoModal;
