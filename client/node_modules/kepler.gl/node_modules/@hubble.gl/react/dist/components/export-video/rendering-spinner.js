// hubble.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* global window */
import { WithKeplerUI } from "../inject-kepler.js";
import React, { useEffect, useState } from 'react';
import { LoaderWrapper, RenderingFeedbackContainer } from "./styled-components.js";
/**
 * @param props
 * @returns React Component that gives user feedback after they click the "Render" button
 */
export function RenderingSpinner({ rendering, saving, width, height, adapter, durationMs }) {
    const percentRendered = Math.floor((adapter.videoCapture.timeMs / durationMs) * 100).toFixed(0);
    const showRenderingPercent = adapter.videoCapture.timeMs < durationMs && adapter.enabled;
    const [message, setMessage] = useState('Saving...');
    useEffect(() => {
        let waitTimeout;
        if (saving) {
            // Appears after "Saving..." message has been showing for at least 2s
            waitTimeout = window.setTimeout(() => setMessage('Saving...Hang Tight.'), 2000);
        }
        else {
            setMessage('Saving...');
            if (waitTimeout)
                window.clearTimeout(waitTimeout);
        }
        return () => {
            if (waitTimeout)
                window.clearTimeout(waitTimeout);
        };
    }, [saving]);
    return (React.createElement(WithKeplerUI, null, ({ LoadingSpinner }) => (React.createElement(LoaderWrapper, { className: "loader-wrapper", "$width": width, "$height": height, "$rendering": rendering },
        React.createElement(LoadingSpinner, null),
        React.createElement(RenderingFeedbackContainer, { className: "rendering-feedback-container", "$height": height },
            showRenderingPercent && React.createElement("div", { className: "rendering-percent" },
                percentRendered,
                " %"),
            saving && React.createElement("div", { className: "saving-message" }, message))))));
}
