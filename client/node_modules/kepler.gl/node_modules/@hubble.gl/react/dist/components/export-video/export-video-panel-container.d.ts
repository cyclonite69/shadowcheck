import React, { Component } from 'react';
import { DeckAdapter, FormatConfigs, Timecode } from '@hubble.gl/core';
import type { MapProps } from 'react-map-gl';
import type { DeckProps, MapViewState } from '@deck.gl/core/typed';
export type ExportVideoSettings = {
    mediaType?: string;
    cameraPreset?: string;
    fileName?: string;
    resolution?: string;
    durationMs?: number;
};
type ExportVideoPanelContainerProps = {
    initialState?: Partial<ExportVideoPanelContainerState>;
    glContext?: WebGLRenderingContext;
    exportVideoWidth: number;
    handleClose: () => void;
    mapData: any;
    header: boolean;
    deckProps?: DeckProps;
    mapProps: MapProps;
    disableBaseMap: boolean;
    mapboxLayerBeforeId?: string;
    defaultFileName: string;
    animatableFilters: any;
    onTripFrameUpdate: any;
    onFilterFrameUpdate: any;
    getTimeRangeFilterKeyframes: any;
    onSettingsChange: (settings: ExportVideoSettings) => void;
};
type ExportVideoPanelContainerState = {
    adapter?: DeckAdapter;
    durationMs: number;
    mediaType: string;
    cameraPreset: string;
    fileName: string;
    resolution: string;
    viewState?: MapViewState;
    rendering: boolean;
    previewing: boolean;
    saving: boolean;
    memo?: {
        viewState: MapViewState;
    };
};
export declare class ExportVideoPanelContainer extends Component<ExportVideoPanelContainerProps, ExportVideoPanelContainerState> {
    constructor(props: ExportVideoPanelContainerProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    getFileName(): string;
    getCanvasSize(): {
        width: number;
        height: number;
    };
    _getContainer(): {
        height: number;
        width: number;
    };
    getFormatConfigs(): Partial<FormatConfigs>;
    getTimecode(): Timecode;
    getEncoder(): any;
    getCameraKeyframes(): {
        timings: number[];
        keyframes: {
            longitude: number;
            latitude: number;
            zoom: number;
            pitch?: number;
            bearing?: number;
            minZoom?: number;
            maxZoom?: number;
            minPitch?: number;
            maxPitch?: number;
            position?: number[];
            transitionDuration?: number | "auto";
            transitionInterpolator?: import("@deck.gl/core/typed").TransitionInterpolator;
            transitionEasing?: (t: number) => number;
            transitionInterruption?: 1 | 2 | 3;
            onTransitionStart?: (transition: import("@deck.gl/core/typed/transitions/transition").default) => void;
            onTransitionInterrupt?: (transition: import("@deck.gl/core/typed/transitions/transition").default) => void;
            onTransitionEnd?: (transition: import("@deck.gl/core/typed/transitions/transition").default) => void;
        }[];
        easings: import("popmotion").Easing[];
        width: number;
        height: number;
    };
    getFilterKeyframes(): {
        filters: any;
        filterKeyframes: any;
    } | {
        filters?: undefined;
        filterKeyframes?: undefined;
    };
    getTripKeyframes(): {
        animationConfig: any;
        tripKeyframe: {
            timings: number[];
        };
    } | {
        animationConfig?: undefined;
        tripKeyframe?: undefined;
    };
    setStateAndNotify(update: ExportVideoSettings): void;
    setMediaType(mediaType: string): void;
    setCameraPreset(cameraPreset: string): void;
    setFileName(fileName: string): void;
    setResolution(resolution: string): void;
    setViewState(viewState: MapViewState): void;
    onPreviewVideo(): void;
    onRenderVideo(): void;
    onStop({ abort }: {
        abort?: boolean;
    }): void;
    setDuration(durationMs: number): void;
    render(): React.JSX.Element;
}
export {};
//# sourceMappingURL=export-video-panel-container.d.ts.map