import { RefObject } from 'react';
import { DeckAdapter, DeckAnimation, DeckAnimationConstructor } from '@hubble.gl/core';
import type { Layer, MapViewState, Deck } from '@deck.gl/core/typed';
import type { MapRef } from 'react-map-gl';
export declare function useNextFrame(): () => void;
export declare function useDeckAdapter(deckAnimation: DeckAnimation, initialViewState?: MapViewState): {
    adapter: DeckAdapter;
    layers: Layer<{}>[];
    cameraFrame: MapViewState;
    setCameraFrame: import("react").Dispatch<import("react").SetStateAction<MapViewState>>;
};
export declare function useDeckAnimation(params: DeckAnimationConstructor): DeckAnimation;
export declare function useHubbleGl<ReactMapRef extends MapRef>({ deckRef, mapRef, deckAnimation, initialViewState }: {
    deckRef: RefObject<Deck>;
    mapRef?: RefObject<ReactMapRef>;
    deckAnimation: DeckAnimation;
    initialViewState?: MapViewState;
}): {
    adapter: DeckAdapter;
    cameraFrame: MapViewState;
    setCameraFrame: import("react").Dispatch<import("react").SetStateAction<MapViewState>>;
    mapProps: {
        onLoad?: undefined;
        preventStyleDiffing?: undefined;
    };
    deckProps: {
        id?: string;
        width?: string | number;
        height?: string | number;
        style?: Partial<CSSStyleDeclaration>;
        useDevicePixels?: number | boolean;
        pickingRadius?: number;
        parameters?: any;
        layerFilter?: (context: import("@deck.gl/core/typed").FilterContext) => boolean;
        parent?: HTMLDivElement;
        canvas?: string | HTMLCanvasElement;
        gl?: WebGLRenderingContext;
        glOptions?: WebGLContextAttributes;
        layers?: import("@deck.gl/core/typed").LayersList;
        effects?: import("@deck.gl/core/typed").Effect[];
        views?: import("@deck.gl/core/typed").View<import("@deck.gl/core/typed/controllers/transition-manager").TransitionProps, {}> | import("@deck.gl/core/typed").View<import("@deck.gl/core/typed/controllers/transition-manager").TransitionProps, {}>[];
        controller?: boolean | import("@deck.gl/core/typed")._ConstructorOf<import("@deck.gl/core/typed").Controller<any>> | (import("@deck.gl/core/typed/controllers/controller").ControllerOptions & {
            type?: import("@deck.gl/core/typed")._ConstructorOf<import("@deck.gl/core/typed").Controller<any>>;
        });
        viewState?: any;
        initialViewState?: any;
        touchAction?: string;
        eventRecognizerOptions?: {
            [type: string]: import("mjolnir.js").RecognizerOptions;
        };
        _framebuffer?: any;
        _animate?: boolean;
        _pickable?: boolean;
        _typedArrayManagerProps?: import("@deck.gl/core/typed/utils/typed-array-manager").TypedArrayManagerOptions;
        onWebGLInitialized?: (gl: WebGLRenderingContext) => void;
        onResize?: (dimensions: {
            width: number;
            height: number;
        }) => void;
        onViewStateChange?: (params: import("@deck.gl/core/typed/controllers/controller").ViewStateChangeParameters & {
            viewId: string;
        }) => any;
        onInteractionStateChange?: (state: import("@deck.gl/core/typed/controllers/controller").InteractionState) => void;
        onBeforeRender?: (context: {
            gl: WebGLRenderingContext;
        }) => void;
        onAfterRender?: (context: {
            gl: WebGLRenderingContext;
        }) => void;
        onLoad?: () => void;
        onError?: (error: Error, layer?: Layer<{}>) => void;
        onHover?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirPointerEvent) => void;
        onClick?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        onDragStart?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        onDrag?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        onDragEnd?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        _customRender?: (reason: string) => void;
        _onMetrics?: (metrics: import("@deck.gl/core/typed/lib/deck").DeckMetrics) => void;
        getCursor?: (state: {
            isHovering: boolean;
            isDragging: boolean;
        }) => string;
        getTooltip?: (info: import("@deck.gl/core/typed").PickingInfo) => import("@deck.gl/core/typed/lib/tooltip").TooltipContent;
        debug?: boolean;
        drawPickingColors?: boolean;
    };
    onMapLoad?: undefined;
} | {
    adapter: DeckAdapter;
    cameraFrame: MapViewState;
    setCameraFrame: import("react").Dispatch<import("react").SetStateAction<MapViewState>>;
    onMapLoad: () => void;
    mapProps: {
        onLoad: () => void;
        preventStyleDiffing: boolean;
    };
    deckProps: {
        id?: string;
        width?: string | number;
        height?: string | number;
        style?: Partial<CSSStyleDeclaration>;
        useDevicePixels?: number | boolean;
        pickingRadius?: number;
        parameters?: any;
        layerFilter?: (context: import("@deck.gl/core/typed").FilterContext) => boolean;
        parent?: HTMLDivElement;
        canvas?: string | HTMLCanvasElement;
        gl?: WebGLRenderingContext;
        glOptions?: WebGLContextAttributes;
        layers?: import("@deck.gl/core/typed").LayersList;
        effects?: import("@deck.gl/core/typed").Effect[];
        views?: import("@deck.gl/core/typed").View<import("@deck.gl/core/typed/controllers/transition-manager").TransitionProps, {}> | import("@deck.gl/core/typed").View<import("@deck.gl/core/typed/controllers/transition-manager").TransitionProps, {}>[];
        controller?: boolean | import("@deck.gl/core/typed")._ConstructorOf<import("@deck.gl/core/typed").Controller<any>> | (import("@deck.gl/core/typed/controllers/controller").ControllerOptions & {
            type?: import("@deck.gl/core/typed")._ConstructorOf<import("@deck.gl/core/typed").Controller<any>>;
        });
        viewState?: any;
        initialViewState?: any;
        touchAction?: string;
        eventRecognizerOptions?: {
            [type: string]: import("mjolnir.js").RecognizerOptions;
        };
        _framebuffer?: any;
        _animate?: boolean;
        _pickable?: boolean;
        _typedArrayManagerProps?: import("@deck.gl/core/typed/utils/typed-array-manager").TypedArrayManagerOptions;
        onWebGLInitialized?: (gl: WebGLRenderingContext) => void;
        onResize?: (dimensions: {
            width: number;
            height: number;
        }) => void;
        onViewStateChange?: (params: import("@deck.gl/core/typed/controllers/controller").ViewStateChangeParameters & {
            viewId: string;
        }) => any;
        onInteractionStateChange?: (state: import("@deck.gl/core/typed/controllers/controller").InteractionState) => void;
        onBeforeRender?: (context: {
            gl: WebGLRenderingContext;
        }) => void;
        onAfterRender?: (context: {
            gl: WebGLRenderingContext;
        }) => void;
        onLoad?: () => void;
        onError?: (error: Error, layer?: Layer<{}>) => void;
        onHover?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirPointerEvent) => void;
        onClick?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        onDragStart?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        onDrag?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        onDragEnd?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        _customRender?: (reason: string) => void;
        _onMetrics?: (metrics: import("@deck.gl/core/typed/lib/deck").DeckMetrics) => void;
        getCursor?: (state: {
            isHovering: boolean;
            isDragging: boolean;
        }) => string;
        getTooltip?: (info: import("@deck.gl/core/typed").PickingInfo) => import("@deck.gl/core/typed/lib/tooltip").TooltipContent;
        debug?: boolean;
        drawPickingColors?: boolean;
    };
};
//# sourceMappingURL=hooks.d.ts.map