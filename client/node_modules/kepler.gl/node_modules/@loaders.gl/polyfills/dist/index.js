/* eslint-disable dot-notation */
import { isBrowser } from "./utils/is-browser.js";
import { TextDecoder, TextEncoder } from "./text-encoder/text-encoder.js";
// Node specific
import { atob, btoa } from "./buffer/btoa.node.js";
import { encodeImageNode } from "./images/encode-image-node.js";
import { parseImageNode, NODE_FORMAT_SUPPORT } from "./images/parse-image-node.js";
// FILESYSTEM POLYFILLS
import { NodeFile } from "./filesystems/node-file.js";
import { NodeFileSystem } from "./filesystems/node-filesystem.js";
import { fetchNode } from "./filesystems/fetch-node.js";
import { NodeHash } from "./crypto/node-hash.js";
// NODE VERSION
// @ts-expect-error
import { versions } from 'node:process';
export const nodeVersion = parseInt(versions.node.split('.')[0]);
// STREAM POLYFILLS
import { makeNodeStream } from "./streams/make-node-stream.js";
// BLOB AND FILE POLYFILLS
export { Blob_ as Blob } from "./file/install-blob-polyfills.js";
export { File_ as File } from "./file/install-file-polyfills.js";
if (isBrowser) {
    // eslint-disable-next-line no-console
    console.error('loaders.gl: The @loaders.gl/polyfills should only be used in Node.js environments');
}
globalThis.loaders = globalThis.loaders || {};
// STREAM POLYFILLS
export { makeNodeStream } from "./streams/make-node-stream.js";
globalThis.loaders.makeNodeStream = makeNodeStream;
// FILESYSTEM POLYFILLS
globalThis.loaders.NodeFile = NodeFile;
globalThis.loaders.NodeFileSystem = NodeFileSystem;
globalThis.loaders.fetchNode = fetchNode;
// CRYPTO POLYFILLS
globalThis.loaders.NodeHash = NodeHash;
// POLYFILLS: TextEncoder, TextDecoder
// - Recent Node versions have these classes but virtually no encodings unless special build.
// - Browser: Edge, IE11 do not have these
if (!globalThis.TextEncoder) {
    // @ts-expect-error
    globalThis.TextEncoder = TextEncoder;
}
if (!globalThis.TextDecoder) {
    // @ts-expect-error
    globalThis.TextDecoder = TextDecoder;
}
if (!globalThis.ReadableStream) {
    globalThis.ReadableStream = ReadableStream;
}
// POLYFILLS: btoa, atob
// - Node: Yes
// - Browser: No
if (!('atob' in globalThis) && atob) {
    globalThis['atob'] = atob;
}
if (!('btoa' in globalThis) && btoa) {
    globalThis['btoa'] = btoa;
}
// NODE IMAGE FUNCTIONS:
// These are not official polyfills but used by the @loaders.gl/images module if installed
// TODO - is there an appropriate Image API we could polyfill using an adapter?
globalThis.loaders.encodeImageNode = encodeImageNode;
globalThis.loaders.parseImageNode = parseImageNode;
globalThis.loaders.imageFormatsNode = NODE_FORMAT_SUPPORT;
// Deprecated, remove after republish
globalThis._parseImageNode = parseImageNode;
globalThis._imageFormatsNode = NODE_FORMAT_SUPPORT;
// LOAD LIBRARY
import { readFileAsArrayBuffer, readFileAsText, requireFromFile, requireFromString } from "./load-library/require-utils.node.js";
globalThis.loaders.readFileAsArrayBuffer = readFileAsArrayBuffer;
globalThis.loaders.readFileAsText = readFileAsText;
globalThis.loaders.requireFromFile = requireFromFile;
globalThis.loaders.requireFromString = requireFromString;
export { installFilePolyfills } from "./file/install-file-polyfills.js";
// DEPRECATED POLYFILL:
// - Node v18+: No, not needed
// - Node v16 and lower: Yes
// - Browsers (evergreen): Not needed.
// - IE11: No. This polyfill is node only, install external polyfill
import { Headers as HeadersNode } from "./fetch/headers-polyfill.js";
import { Response as ResponseNode } from "./fetch/response-polyfill.js";
import { fetchNode as fetchNodePolyfill } from "./fetch/fetch-polyfill.js";
if (nodeVersion < 18) {
    if (!('Headers' in globalThis) && HeadersNode) {
        // @ts-ignore
        globalThis.Headers = HeadersNode;
    }
    if (!('Response' in globalThis) && ResponseNode) {
        // @ts-ignore
        globalThis.Response = ResponseNode;
    }
    if (!('fetch' in globalThis) && fetchNodePolyfill) {
        // @ts-ignore
        globalThis.fetch = fetchNodePolyfill;
    }
}
