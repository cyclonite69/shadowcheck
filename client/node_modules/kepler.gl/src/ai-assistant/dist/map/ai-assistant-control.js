"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = AiAssistantControlFactory;
var _react = _interopRequireWildcard(require("react"));
var _aiStar = _interopRequireDefault(require("../icons/ai-star"));
var _components = require("@kepler.gl/components");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 * AiAssistantControlProps
 * @param mapControls MapControls from kepler.gl
 * @param onToggleMapControl (control: string) => void
 * @param actionIcons AiAssistantControlIcons
 * @returns
 */

AiAssistantControlFactory.deps = [_components.MapControlTooltipFactory];

/**
 * AiAssistantControlFactory
 * @param MapControlTooltip
 * @returns
 */
function AiAssistantControlFactory(MapControlTooltip) {
  var defaultActionIcons = {
    aiAssistantIcon: _aiStar["default"]
  };
  var AiAssistantControl = function AiAssistantControl(_ref) {
    var _mapControls$aiAssist, _mapControls$aiAssist2;
    var mapControls = _ref.mapControls,
      onToggleMapControl = _ref.onToggleMapControl,
      _ref$actionIcons = _ref.actionIcons,
      actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons;
    var onClick = (0, _react.useCallback)(function (event) {
      event.preventDefault();
      onToggleMapControl('aiAssistant');
    }, [onToggleMapControl]);
    var showControl = mapControls === null || mapControls === void 0 || (_mapControls$aiAssist = mapControls.aiAssistant) === null || _mapControls$aiAssist === void 0 ? void 0 : _mapControls$aiAssist.show;
    if (!showControl) {
      return null;
    }
    var active = mapControls === null || mapControls === void 0 || (_mapControls$aiAssist2 = mapControls.aiAssistant) === null || _mapControls$aiAssist2 === void 0 ? void 0 : _mapControls$aiAssist2.active;
    return /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "show-ai-assistant",
      message: active ? 'tooltip.hideAiAssistantPanel' : 'tooltip.showAiAssistantPanel'
    }, /*#__PURE__*/_react["default"].createElement(_components.MapControlButton, {
      className: "map-control-button toggle-ai-assistant",
      onClick: onClick,
      active: active
    }, /*#__PURE__*/_react["default"].createElement(actionIcons.aiAssistantIcon, {
      height: "22px"
    })));
  };
  AiAssistantControl.displayName = 'AiAssistantControl';
  return /*#__PURE__*/_react["default"].memo(AiAssistantControl);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfYWlTdGFyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jb21wb25lbnRzIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiQWlBc3Npc3RhbnRDb250cm9sRmFjdG9yeSIsImRlcHMiLCJNYXBDb250cm9sVG9vbHRpcEZhY3RvcnkiLCJNYXBDb250cm9sVG9vbHRpcCIsImRlZmF1bHRBY3Rpb25JY29ucyIsImFpQXNzaXN0YW50SWNvbiIsIkFpU3RhciIsIkFpQXNzaXN0YW50Q29udHJvbCIsIl9yZWYiLCJfbWFwQ29udHJvbHMkYWlBc3Npc3QiLCJfbWFwQ29udHJvbHMkYWlBc3Npc3QyIiwibWFwQ29udHJvbHMiLCJvblRvZ2dsZU1hcENvbnRyb2wiLCJfcmVmJGFjdGlvbkljb25zIiwiYWN0aW9uSWNvbnMiLCJvbkNsaWNrIiwidXNlQ2FsbGJhY2siLCJldmVudCIsInByZXZlbnREZWZhdWx0Iiwic2hvd0NvbnRyb2wiLCJhaUFzc2lzdGFudCIsInNob3ciLCJhY3RpdmUiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJtZXNzYWdlIiwiTWFwQ29udHJvbEJ1dHRvbiIsImNsYXNzTmFtZSIsImhlaWdodCIsImRpc3BsYXlOYW1lIiwiUmVhY3QiLCJtZW1vIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hcC9haS1hc3Npc3RhbnQtY29udHJvbC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2ssIENvbXBvbmVudFR5cGV9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7TWFwQ29udHJvbHN9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IEFpU3RhciBmcm9tICcuLi9pY29ucy9haS1zdGFyJztcbmltcG9ydCB7TWFwQ29udHJvbEJ1dHRvbiwgTWFwQ29udHJvbFRvb2x0aXBGYWN0b3J5fSBmcm9tICdAa2VwbGVyLmdsL2NvbXBvbmVudHMnO1xuXG50eXBlIEFpQXNzaXN0YW50Q29udHJvbEljb25zID0ge1xuICBhaUFzc2lzdGFudEljb246IENvbXBvbmVudFR5cGU8e1xuICAgIGhlaWdodD86IHN0cmluZztcbiAgICB3aWR0aD86IHN0cmluZztcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xuICB9Pjtcbn07XG5cbi8qKlxuICogQWlBc3Npc3RhbnRDb250cm9sUHJvcHNcbiAqIEBwYXJhbSBtYXBDb250cm9scyBNYXBDb250cm9scyBmcm9tIGtlcGxlci5nbFxuICogQHBhcmFtIG9uVG9nZ2xlTWFwQ29udHJvbCAoY29udHJvbDogc3RyaW5nKSA9PiB2b2lkXG4gKiBAcGFyYW0gYWN0aW9uSWNvbnMgQWlBc3Npc3RhbnRDb250cm9sSWNvbnNcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCB0eXBlIEFpQXNzaXN0YW50Q29udHJvbFByb3BzID0ge1xuICBtYXBDb250cm9sczogTWFwQ29udHJvbHM7XG4gIG9uVG9nZ2xlTWFwQ29udHJvbDogKGNvbnRyb2w6IHN0cmluZykgPT4gdm9pZDtcbiAgYWN0aW9uSWNvbnM6IEFpQXNzaXN0YW50Q29udHJvbEljb25zO1xufTtcblxuQWlBc3Npc3RhbnRDb250cm9sRmFjdG9yeS5kZXBzID0gW01hcENvbnRyb2xUb29sdGlwRmFjdG9yeV07XG5cbi8qKlxuICogQWlBc3Npc3RhbnRDb250cm9sRmFjdG9yeVxuICogQHBhcmFtIE1hcENvbnRyb2xUb29sdGlwXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBaUFzc2lzdGFudENvbnRyb2xGYWN0b3J5KFxuICBNYXBDb250cm9sVG9vbHRpcDogUmV0dXJuVHlwZTx0eXBlb2YgTWFwQ29udHJvbFRvb2x0aXBGYWN0b3J5PlxuKTogUmVhY3QuRkM8QWlBc3Npc3RhbnRDb250cm9sUHJvcHM+IHtcbiAgY29uc3QgZGVmYXVsdEFjdGlvbkljb25zID0ge1xuICAgIGFpQXNzaXN0YW50SWNvbjogQWlTdGFyXG4gIH07XG5cbiAgY29uc3QgQWlBc3Npc3RhbnRDb250cm9sID0gKHtcbiAgICBtYXBDb250cm9scyxcbiAgICBvblRvZ2dsZU1hcENvbnRyb2wsXG4gICAgYWN0aW9uSWNvbnMgPSBkZWZhdWx0QWN0aW9uSWNvbnNcbiAgfTogQWlBc3Npc3RhbnRDb250cm9sUHJvcHMpID0+IHtcbiAgICBjb25zdCBvbkNsaWNrID0gdXNlQ2FsbGJhY2soXG4gICAgICBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uVG9nZ2xlTWFwQ29udHJvbCgnYWlBc3Npc3RhbnQnKTtcbiAgICAgIH0sXG4gICAgICBbb25Ub2dnbGVNYXBDb250cm9sXVxuICAgICk7XG5cbiAgICBjb25zdCBzaG93Q29udHJvbCA9IG1hcENvbnRyb2xzPy5haUFzc2lzdGFudD8uc2hvdztcbiAgICBpZiAoIXNob3dDb250cm9sKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmUgPSBtYXBDb250cm9scz8uYWlBc3Npc3RhbnQ/LmFjdGl2ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPE1hcENvbnRyb2xUb29sdGlwXG4gICAgICAgIGlkPVwic2hvdy1haS1hc3Npc3RhbnRcIlxuICAgICAgICBtZXNzYWdlPXthY3RpdmUgPyAndG9vbHRpcC5oaWRlQWlBc3Npc3RhbnRQYW5lbCcgOiAndG9vbHRpcC5zaG93QWlBc3Npc3RhbnRQYW5lbCd9XG4gICAgICA+XG4gICAgICAgIDxNYXBDb250cm9sQnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPVwibWFwLWNvbnRyb2wtYnV0dG9uIHRvZ2dsZS1haS1hc3Npc3RhbnRcIlxuICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgICAgYWN0aXZlPXthY3RpdmV9XG4gICAgICAgID5cbiAgICAgICAgICA8YWN0aW9uSWNvbnMuYWlBc3Npc3RhbnRJY29uIGhlaWdodD1cIjIycHhcIiAvPlxuICAgICAgICA8L01hcENvbnRyb2xCdXR0b24+XG4gICAgICA8L01hcENvbnRyb2xUb29sdGlwPlxuICAgICk7XG4gIH07XG5cbiAgQWlBc3Npc3RhbnRDb250cm9sLmRpc3BsYXlOYW1lID0gJ0FpQXNzaXN0YW50Q29udHJvbCc7XG4gIHJldHVybiBSZWFjdC5tZW1vKEFpQXNzaXN0YW50Q29udHJvbCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsT0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBQWlGLFNBQUFJLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBTix3QkFBQU0sQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLGdCQUFBSyxPQUFBLENBQUFMLENBQUEsMEJBQUFBLENBQUEsc0JBQUFBLENBQUEsUUFBQUcsQ0FBQSxH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