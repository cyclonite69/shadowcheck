/// <reference types="react" />
import { VisState } from '@kepler.gl/schemas';
import { AiAssistantState } from '../../reducers';
export declare function getKeplerTools(visState: VisState, aiAssistant: AiAssistantState): {
    basemap: import("@openassistant/utils").ExtendedTool<import("zod").ZodObject<{
        styleType: import("zod").ZodEnum<["no_map", "dark-matter", "positron", "voyager", "satellite", "dark", "light", "muted", "muted_night"]>;
    }, "strip", import("zod").ZodTypeAny, {
        styleType: "no_map" | "dark-matter" | "positron" | "voyager" | "satellite" | "dark" | "light" | "muted" | "muted_night";
    }, {
        styleType: "no_map" | "dark-matter" | "positron" | "voyager" | "satellite" | "dark" | "light" | "muted" | "muted_night";
    }>, {
        success: boolean;
        styleType: string;
        details?: string | undefined;
        instruction?: string | undefined;
    }, {
        styleType: string;
    }, never>;
    addLayer: import("@openassistant/utils").ExtendedTool<import("zod").ZodObject<{
        datasetName: import("zod").ZodString;
        latitudeColumn: import("zod").ZodOptional<import("zod").ZodString>;
        longitudeColumn: import("zod").ZodOptional<import("zod").ZodString>;
        layerType: import("zod").ZodEnum<["point", "arc", "line", "grid", "hexagon", "geojson", "cluster", "heatmap", "h3", "trip", "s2"]>;
        colorBy: import("zod").ZodOptional<import("zod").ZodString>;
        colorType: import("zod").ZodOptional<import("zod").ZodEnum<["breaks", "unique"]>>;
        colorMap: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodObject<{
            value: import("zod").ZodUnion<[import("zod").ZodString, import("zod").ZodNumber, import("zod").ZodNull]>;
            color: import("zod").ZodString;
        }, import("zod").UnknownKeysParam, import("zod").ZodTypeAny, {
            color: string;
            value: string | number | null;
        }, {
            color: string;
            value: string | number | null;
        }>, "many">>;
    }, import("zod").UnknownKeysParam, import("zod").ZodTypeAny, {
        datasetName: string;
        layerType: "grid" | "h3" | "line" | "geojson" | "point" | "arc" | "hexagon" | "cluster" | "heatmap" | "trip" | "s2";
        latitudeColumn?: string | undefined;
        longitudeColumn?: string | undefined;
        colorBy?: string | undefined;
        colorType?: "breaks" | "unique" | undefined;
        colorMap?: {
            color: string;
            value: string | number | null;
        }[] | undefined;
    }, {
        datasetName: string;
        layerType: "grid" | "h3" | "line" | "geojson" | "point" | "arc" | "hexagon" | "cluster" | "heatmap" | "trip" | "s2";
        latitudeColumn?: string | undefined;
        longitudeColumn?: string | undefined;
        colorBy?: string | undefined;
        colorType?: "breaks" | "unique" | undefined;
        colorMap?: {
            color: string;
            value: string | number | null;
        }[] | undefined;
    }>, {
        success: boolean;
        layer?: string | undefined;
        details?: string | undefined;
        error?: string | undefined;
        instruction?: string | undefined;
    }, {
        layer: object;
        datasetId: string;
    } | undefined, {
        getDatasets: () => import("@kepler.gl/table").Datasets;
    }>;
    updateLayerColor: {
        context: {
            getLayers: () => import("@kepler.gl/layers/dist/base-layer").default[];
        };
        description: string;
        parameters: import("zod").ZodObject<{
            layerId: import("zod").ZodString;
            numberOfColors: import("zod").ZodNumber;
            customColors: import("zod").ZodArray<import("zod").ZodString, "many">;
        }, "strip", import("zod").ZodTypeAny, {
            layerId: string;
            numberOfColors: number;
            customColors: string[];
        }, {
            layerId: string;
            numberOfColors: number;
            customColors: string[];
        }>;
        execute: import("@openassistant/utils").ExecuteFunction<import("zod").ZodObject<{
            layerId: import("zod").ZodString;
            numberOfColors: import("zod").ZodNumber;
            customColors: import("zod").ZodArray<import("zod").ZodString, "many">;
        }, "strip", import("zod").ZodTypeAny, {
            layerId: string;
            numberOfColors: number;
            customColors: string[];
        }, {
            layerId: string;
            numberOfColors: number;
            customColors: string[];
        }>, {
            success: boolean;
            details?: string | undefined;
            error?: string | undefined;
            instruction?: string | undefined;
        }, {
            layerId: string;
            layer: import("@kepler.gl/layers/dist/base-layer").default;
            newConfig: Partial<import("@kepler.gl/types").LayerBaseConfig>;
            channel: string;
            newVisConfig: Partial<import("@kepler.gl/types").LayerVisConfig>;
        }, {
            getLayers: () => never;
            layerVisualChannelConfigChange: () => never;
        }>;
        component?: import("react").ElementType<any, keyof import("react").JSX.IntrinsicElements> | undefined;
        onToolCompleted?: import("@openassistant/utils").OnToolCompleted | undefined;
    };
    loadData: import("@openassistant/utils").ExtendedTool<import("zod").ZodObject<{
        url: import("zod").ZodString;
    }, import("zod").UnknownKeysParam, import("zod").ZodTypeAny, {
        url: string;
    }, {
        url: string;
    }>, {
        success: boolean;
        url: string;
        details?: string | undefined;
        dataInfo?: object | undefined;
        instruction?: string | undefined;
    }, {
        parsedData: import("@kepler.gl/types").ProtoDataset[];
    } | undefined, {
        getLoaders: () => {
            loaders?: import("@loaders.gl/loader-utils").Loader<any, any, import("@loaders.gl/loader-utils").LoaderOptions>[] | undefined;
            loadOptions?: object | undefined;
        };
    }>;
    mapBoundary: {
        context: {
            getMapBoundary: () => {
                nw: [number, number];
                se: [number, number];
            } | undefined;
        };
        description: string;
        parameters: import("zod").ZodObject<{}, "strip", import("zod").ZodTypeAny, {}, {}>;
        execute: import("@openassistant/utils").ExecuteFunction<import("zod").ZodObject<{}, "strip", import("zod").ZodTypeAny, {}, {}>, {
            success: boolean;
            boundary: never;
            error?: undefined;
            instruction?: undefined;
        }, never, {
            getMapBoundary: () => never;
        }>;
        component?: import("react").ElementType<any, keyof import("react").JSX.IntrinsicElements> | undefined;
        onToolCompleted?: import("@openassistant/utils").OnToolCompleted | undefined;
    };
    saveDataToMap: import("@openassistant/utils").ExtendedTool<import("zod").ZodObject<{
        datasetNames: import("zod").ZodArray<import("zod").ZodString, "many">;
    }, "strip", import("zod").ZodTypeAny, {
        datasetNames: string[];
    }, {
        datasetNames: string[];
    }>, {
        success: boolean;
        savedDatasetName: string;
        details: string;
    }, {
        parsedData: import("@kepler.gl/processors").FileCacheItem[];
    }, never>;
};
