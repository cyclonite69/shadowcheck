"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateLayerColor = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _react = require("react");
var _utils = require("@openassistant/utils");
var _actions = require("@kepler.gl/actions");
var _zod = require("zod");
var _reactRedux = require("react-redux");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// This file is used to call the LAYER_VISUAL_CHANNEL_CHANGE to update the layer style
function UpdateLayerColorToolComponent(_ref) {
  var layer = _ref.layer,
    newConfig = _ref.newConfig,
    channel = _ref.channel,
    newVisConfig = _ref.newVisConfig;
  var dispatch = (0, _reactRedux.useDispatch)();
  (0, _react.useEffect)(function () {
    dispatch((0, _actions.layerVisualChannelConfigChange)(layer, newConfig, channel, newVisConfig));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return null;
}

/**
 * Update the color of a layer
 * NOTE: this tool should be updated to updateLayerStyle including color, size, opacity, etc.
 */
var updateLayerColor = exports.updateLayerColor = (0, _utils.extendedTool)({
  description: 'Update the color of a layer',
  parameters: _zod.z.object({
    layerId: _zod.z.string(),
    numberOfColors: _zod.z.number(),
    customColors: _zod.z.array(_zod.z.string()).describe('An array of hex color values. Please try to generate colors from user description like: van gogh starry night, water color etc.')
  }),
  execute: executeUpdateLayerColor,
  context: {
    getLayers: function getLayers() {
      throw new Error('getLayers() not implemented.');
    },
    layerVisualChannelConfigChange: function layerVisualChannelConfigChange() {
      throw new Error('layerVisualChannelConfigChange() not implemented.');
    }
  },
  component: UpdateLayerColorToolComponent
});
function isUpdateLayerColorArgs(args) {
  return (0, _typeof2["default"])(args) === 'object' && args !== null && typeof args.layerId === 'string' && typeof args.numberOfColors === 'number' && Array.isArray(args.customColors) && args.customColors.every(function (color) {
    return typeof color === 'string';
  });
}
function isUpdateLayerColorFunctionContext(context) {
  return (0, _typeof2["default"])(context) === 'object' && context !== null && typeof context.getLayers === 'function';
}
function executeUpdateLayerColor(_x, _x2) {
  return _executeUpdateLayerColor.apply(this, arguments);
}
function _executeUpdateLayerColor() {
  _executeUpdateLayerColor = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(args, options) {
    var layerId, numberOfColors, customColors, getLayers, layers, layer, channel, newConfig, oldColorRange, newColorRange, newVisConfig;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          if (isUpdateLayerColorArgs(args)) {
            _context.next = 3;
            break;
          }
          throw new Error('Invalid updateLayerColor arguments');
        case 3:
          if (isUpdateLayerColorFunctionContext(options.context)) {
            _context.next = 5;
            break;
          }
          throw new Error('Invalid updateLayerColor function context');
        case 5:
          layerId = args.layerId, numberOfColors = args.numberOfColors, customColors = args.customColors;
          getLayers = options.context.getLayers; // get layer from visState by layerId
          layers = getLayers();
          layer = layers.find(function (l) {
            return l.id === layerId;
          });
          if (layer) {
            _context.next = 11;
            break;
          }
          throw new Error("Layer with id ".concat(layerId, " not found"));
        case 11:
          if (!(numberOfColors !== customColors.length)) {
            _context.next = 13;
            break;
          }
          throw new Error("customColors array must contain exactly ".concat(numberOfColors, " colors"));
        case 13:
          channel = 'color';
          newConfig = {
            // colorScale: 'custom'
          };
          oldColorRange = layer.config.visConfig.colorRange;
          newColorRange = _objectSpread(_objectSpread({}, oldColorRange), {}, {
            colors: customColors
          }, oldColorRange.colorMap ? {
            colorMap: (0, _toConsumableArray2["default"])(oldColorRange.colorMap.map(function (c, i) {
              return [c[0], customColors[i]];
            }))
          } : {});
          newVisConfig = {
            colorRange: newColorRange,
            strokeColorRange: newColorRange
          };
          return _context.abrupt("return", {
            llmResult: {
              success: true,
              details: "Color updated successfully to ".concat(customColors.join(', '), " for layer ").concat(layerId)
            },
            additionalData: {
              layerId: layerId,
              layer: layer,
              newConfig: newConfig,
              channel: channel,
              newVisConfig: newVisConfig
            }
          });
        case 21:
          _context.prev = 21;
          _context.t0 = _context["catch"](0);
          return _context.abrupt("return", {
            llmResult: {
              success: false,
              error: _context.t0 instanceof Error ? _context.t0.message : 'Unknown error',
              instruction: "Try to fix the error. If the error persists, pause the execution and ask the user to try with different prompt and context."
            }
          });
        case 24:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 21]]);
  }));
  return _executeUpdateLayerColor.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,