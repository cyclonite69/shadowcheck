"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapBoundary = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _utils = require("@openassistant/utils");
var _zod = require("zod");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

function isMapBoundaryContext(context) {
  return (0, _typeof2["default"])(context) === 'object' && context !== null && 'getMapBoundary' in context;
}
var mapBoundary = exports.mapBoundary = (0, _utils.extendedTool)({
  description: 'Get the boundary of the map. Northwest and Southeast coordinates in [longitude, latitude] format.',
  parameters: _zod.z.object({}),
  execute: function () {
    var _execute = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(args, options) {
      var getMapBoundary, boundary;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            if (!(!(options !== null && options !== void 0 && options.context) || !isMapBoundaryContext(options.context))) {
              _context.next = 3;
              break;
            }
            throw new Error('context getMapBoundary() not implemented.');
          case 3:
            getMapBoundary = options.context.getMapBoundary;
            boundary = getMapBoundary();
            return _context.abrupt("return", {
              llmResult: {
                success: true,
                boundary: boundary
              }
            });
          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);
            return _context.abrupt("return", {
              llmResult: {
                success: false,
                error: _context.t0 instanceof Error ? _context.t0.message : 'Unknown error',
                instruction: 'Please ask the user to make sure the kepler.gl app has been intialized successfully to get the map boundary.'
              }
            });
          case 11:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 8]]);
    }));
    function execute(_x, _x2) {
      return _execute.apply(this, arguments);
    }
    return execute;
  }(),
  context: {
    getMapBoundary: function getMapBoundary() {
      throw new Error('getMapBoundary() not implemented.');
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbHMiLCJyZXF1aXJlIiwiX3pvZCIsImlzTWFwQm91bmRhcnlDb250ZXh0IiwiY29udGV4dCIsIl90eXBlb2YyIiwibWFwQm91bmRhcnkiLCJleHBvcnRzIiwiZXh0ZW5kZWRUb29sIiwiZGVzY3JpcHRpb24iLCJwYXJhbWV0ZXJzIiwieiIsIm9iamVjdCIsImV4ZWN1dGUiLCJfZXhlY3V0ZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWdlbmVyYXRvciIsIm1hcmsiLCJfY2FsbGVlIiwiYXJncyIsIm9wdGlvbnMiLCJnZXRNYXBCb3VuZGFyeSIsImJvdW5kYXJ5Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIkVycm9yIiwiYWJydXB0IiwibGxtUmVzdWx0Iiwic3VjY2VzcyIsInQwIiwiZXJyb3IiLCJtZXNzYWdlIiwiaW5zdHJ1Y3Rpb24iLCJzdG9wIiwiX3giLCJfeDIiLCJhcHBseSIsImFyZ3VtZW50cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b29scy9rZXBsZXItdG9vbHMvYm91bmRhcnktdG9vbC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IHtleHRlbmRlZFRvb2x9IGZyb20gJ0BvcGVuYXNzaXN0YW50L3V0aWxzJztcbmltcG9ydCB7en0gZnJvbSAnem9kJztcblxudHlwZSBNYXBCb3VuZGFyeUNvbnRleHQgPSB7XG4gIGdldE1hcEJvdW5kYXJ5OiAoKSA9PiB7XG4gICAgbnc6IFtudW1iZXIsIG51bWJlcl07XG4gICAgc2U6IFtudW1iZXIsIG51bWJlcl07XG4gIH07XG59O1xuXG5mdW5jdGlvbiBpc01hcEJvdW5kYXJ5Q29udGV4dChjb250ZXh0OiB1bmtub3duKTogY29udGV4dCBpcyBNYXBCb3VuZGFyeUNvbnRleHQge1xuICByZXR1cm4gdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnICYmIGNvbnRleHQgIT09IG51bGwgJiYgJ2dldE1hcEJvdW5kYXJ5JyBpbiBjb250ZXh0O1xufVxuXG5leHBvcnQgY29uc3QgbWFwQm91bmRhcnkgPSBleHRlbmRlZFRvb2woe1xuICBkZXNjcmlwdGlvbjpcbiAgICAnR2V0IHRoZSBib3VuZGFyeSBvZiB0aGUgbWFwLiBOb3J0aHdlc3QgYW5kIFNvdXRoZWFzdCBjb29yZGluYXRlcyBpbiBbbG9uZ2l0dWRlLCBsYXRpdHVkZV0gZm9ybWF0LicsXG4gIHBhcmFtZXRlcnM6IHoub2JqZWN0KHt9KSxcbiAgZXhlY3V0ZTogYXN5bmMgKGFyZ3MsIG9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFvcHRpb25zPy5jb250ZXh0IHx8ICFpc01hcEJvdW5kYXJ5Q29udGV4dChvcHRpb25zLmNvbnRleHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY29udGV4dCBnZXRNYXBCb3VuZGFyeSgpIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHtnZXRNYXBCb3VuZGFyeX0gPSBvcHRpb25zLmNvbnRleHQ7XG4gICAgICBjb25zdCBib3VuZGFyeSA9IGdldE1hcEJvdW5kYXJ5KCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsbG1SZXN1bHQ6IHtcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgIGJvdW5kYXJ5XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxsbVJlc3VsdDoge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgICAgICBpbnN0cnVjdGlvbjpcbiAgICAgICAgICAgICdQbGVhc2UgYXNrIHRoZSB1c2VyIHRvIG1ha2Ugc3VyZSB0aGUga2VwbGVyLmdsIGFwcCBoYXMgYmVlbiBpbnRpYWxpemVkIHN1Y2Nlc3NmdWxseSB0byBnZXQgdGhlIG1hcCBib3VuZGFyeS4nXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuICBjb250ZXh0OiB7XG4gICAgZ2V0TWFwQm91bmRhcnk6ICgpID0+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZ2V0TWFwQm91bmRhcnkoKSBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgfVxuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLElBQUEsR0FBQUQsT0FBQTtBQUpBO0FBQ0E7O0FBWUEsU0FBU0Usb0JBQW9CQSxDQUFDQyxPQUFnQixFQUFpQztFQUM3RSxPQUFPLElBQUFDLFFBQUEsYUFBT0QsT0FBTyxNQUFLLFFBQVEsSUFBSUEsT0FBTyxLQUFLLElBQUksSUFBSSxnQkFBZ0IsSUFBSUEsT0FBTztBQUN2RjtBQUVPLElBQU1FLFdBQVcsR0FBQUMsT0FBQSxDQUFBRCxXQUFBLEdBQUcsSUFBQUUsbUJBQVksRUFBQztFQUN0Q0MsV0FBVyxFQUNULG1HQUFtRztFQUNyR0MsVUFBVSxFQUFFQyxNQUFDLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN4QkMsT0FBTztJQUFBLElBQUFDLFFBQUEsT0FBQUMsa0JBQUEsMkJBQUFDLFlBQUEsWUFBQUMsSUFBQSxDQUFFLFNBQUFDLFFBQU9DLElBQUksRUFBRUMsT0FBTztNQUFBLElBQUFDLGNBQUEsRUFBQUMsUUFBQTtNQUFBLE9BQUFOLFlBQUEsWUFBQU8sSUFBQSxVQUFBQyxTQUFBQyxRQUFBO1FBQUEsa0JBQUFBLFFBQUEsQ0FBQUMsSUFBQSxHQUFBRCxRQUFBLENBQUFFLElBQUE7VUFBQTtZQUFBRixRQUFBLENBQUFDLElBQUE7WUFBQSxNQUVyQixFQUFDTixPQUFPLGFBQVBBLE9BQU8sZUFBUEEsT0FBTyxDQUFFaEIsT0FBTyxLQUFJLENBQUNELG9CQUFvQixDQUFDaUIsT0FBTyxDQUFDaEIsT0FBTyxDQUFDO2NBQUFxQixRQUFBLENBQUFFLElBQUE7Y0FBQTtZQUFBO1lBQUEsTUFDdkQsSUFBSUMsS0FBSyxDQUFDLDJDQUEyQyxDQUFDO1VBQUE7WUFFdkRQLGNBQWMsR0FBSUQsT0FBTyxDQUFDaEIsT0FBTyxDQUFqQ2lCLGNBQWM7WUFDZkMsUUFBUSxHQUFHRCxjQUFjLENBQUMsQ0FBQztZQUFBLE9BQUFJLFFBQUEsQ0FBQUksTUFBQSxXQUMxQjtjQUNMQyxTQUFTLEVBQUU7Z0JBQ1RDLE9BQU8sRUFBRSxJQUFJO2dCQUNiVCxRQUFRLEVBQVJBO2NBQ0Y7WUFDRixDQUFDO1VBQUE7WUFBQUcsUUFBQSxDQUFBQyxJQUFBO1lBQUFELFFBQUEsQ0FBQU8sRUFBQSxHQUFBUCxRQUFBO1lBQUEsT0FBQUEsUUFBQSxDQUFBSSxNQUFBLFdBRU07Y0FDTEMsU0FBUyxFQUFFO2dCQUNUQyxPQUFPLEVBQUUsS0FBSztnQkFDZEUsS0FBSyxFQUFFUixRQUFBLENBQUFPLEVBQUEsWUFBaUJKLEtBQUssR0FBR0gsUUFBQSxDQUFBTyxFQUFBLENBQU1FLE9BQU8sR0FBRyxlQUFlO2dCQUMvREMsV0FBVyxFQUNUO2NBQ0o7WUFDRixDQUFDO1VBQUE7VUFBQTtZQUFBLE9BQUFWLFFBQUEsQ0FBQVcsSUFBQTtRQUFBO01BQUEsR0FBQWxCLE9BQUE7SUFBQSxDQUVKO0lBQUEsU0F2QkRMLE9BQU9BLENBQUF3QixFQUFBLEVBQUFDLEdBQUE7TUFBQSxPQUFBeEIsUUFBQSxDQUFBeUIsS0FBQSxPQUFBQyxTQUFBO0lBQUE7SUFBQSxPQUFQM0IsT0FBTztFQUFBLEdBdUJOO0VBQ0RULE9BQU8sRUFBRTtJQUNQaUIsY0FBYyxFQUFFLFNBQWhCQSxjQUFjQSxDQUFBLEVBQVE7TUFDcEIsTUFBTSxJQUFJTyxLQUFLLENBQUMsbUNBQW1DLENBQUM7SUFDdEQ7RUFDRjtBQUNGLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==