"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BasemapToolComponent = BasemapToolComponent;
exports.basemap = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _constants = require("@kepler.gl/constants");
var _actions = require("@kepler.gl/actions");
var _utils = require("@openassistant/utils");
var _zod = require("zod");
var _react = require("react");
var _reactRedux = require("react-redux");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var basemap = exports.basemap = (0, _utils.extendedTool)({
  description: 'change basemap',
  parameters: _zod.z.object({
    styleType: _zod.z["enum"](['no_map', 'dark-matter', 'positron', 'voyager', 'satellite', 'dark', 'light', 'muted', 'muted_night'])
  }),
  execute: executeBasemap,
  component: BasemapToolComponent
});
function executeBasemap(_x) {
  return _executeBasemap.apply(this, arguments);
}
function _executeBasemap() {
  _executeBasemap = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref) {
    var styleType;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          styleType = _ref.styleType;
          _context.prev = 1;
          if (_constants.DEFAULT_MAP_STYLES.find(function (style) {
            return style.id === styleType;
          })) {
            _context.next = 4;
            break;
          }
          throw new Error("Invalid basemap style: ".concat(styleType, "."));
        case 4:
          return _context.abrupt("return", {
            llmResult: {
              success: true,
              styleType: styleType,
              details: "basemap style changed to ".concat(styleType, ".")
            },
            additionalData: {
              styleType: styleType
            }
          });
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](1);
          return _context.abrupt("return", {
            llmResult: {
              success: false,
              styleType: styleType,
              details: "Error changing basemap style: ".concat(_context.t0),
              instruction: 'Try to fix the error. If the error persists, pause the execution and ask the user to try with different prompt and context.'
            }
          });
        case 10:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 7]]);
  }));
  return _executeBasemap.apply(this, arguments);
}
function BasemapToolComponent(_ref2) {
  var styleType = _ref2.styleType;
  var dispatch = (0, _reactRedux.useDispatch)();
  (0, _react.useEffect)(function () {
    dispatch((0, _actions.mapStyleChange)(styleType));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uc3RhbnRzIiwicmVxdWlyZSIsIl9hY3Rpb25zIiwiX3V0aWxzIiwiX3pvZCIsIl9yZWFjdCIsIl9yZWFjdFJlZHV4IiwiYmFzZW1hcCIsImV4cG9ydHMiLCJleHRlbmRlZFRvb2wiLCJkZXNjcmlwdGlvbiIsInBhcmFtZXRlcnMiLCJ6Iiwib2JqZWN0Iiwic3R5bGVUeXBlIiwiZXhlY3V0ZSIsImV4ZWN1dGVCYXNlbWFwIiwiY29tcG9uZW50IiwiQmFzZW1hcFRvb2xDb21wb25lbnQiLCJfeCIsIl9leGVjdXRlQmFzZW1hcCIsImFwcGx5IiwiYXJndW1lbnRzIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlZ2VuZXJhdG9yIiwibWFyayIsIl9jYWxsZWUiLCJfcmVmIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIkRFRkFVTFRfTUFQX1NUWUxFUyIsImZpbmQiLCJzdHlsZSIsImlkIiwiRXJyb3IiLCJjb25jYXQiLCJhYnJ1cHQiLCJsbG1SZXN1bHQiLCJzdWNjZXNzIiwiZGV0YWlscyIsImFkZGl0aW9uYWxEYXRhIiwidDAiLCJpbnN0cnVjdGlvbiIsInN0b3AiLCJfcmVmMiIsImRpc3BhdGNoIiwidXNlRGlzcGF0Y2giLCJ1c2VFZmZlY3QiLCJtYXBTdHlsZUNoYW5nZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b29scy9rZXBsZXItdG9vbHMvYmFzZW1hcC10b29sLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge0RFRkFVTFRfTUFQX1NUWUxFU30gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHttYXBTdHlsZUNoYW5nZX0gZnJvbSAnQGtlcGxlci5nbC9hY3Rpb25zJztcbmltcG9ydCB7ZXh0ZW5kZWRUb29sfSBmcm9tICdAb3BlbmFzc2lzdGFudC91dGlscyc7XG5pbXBvcnQge3p9IGZyb20gJ3pvZCc7XG5pbXBvcnQge3VzZUVmZmVjdH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VEaXNwYXRjaH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5leHBvcnQgY29uc3QgYmFzZW1hcCA9IGV4dGVuZGVkVG9vbCh7XG4gIGRlc2NyaXB0aW9uOiAnY2hhbmdlIGJhc2VtYXAnLFxuICBwYXJhbWV0ZXJzOiB6Lm9iamVjdCh7XG4gICAgc3R5bGVUeXBlOiB6LmVudW0oW1xuICAgICAgJ25vX21hcCcsXG4gICAgICAnZGFyay1tYXR0ZXInLFxuICAgICAgJ3Bvc2l0cm9uJyxcbiAgICAgICd2b3lhZ2VyJyxcbiAgICAgICdzYXRlbGxpdGUnLFxuICAgICAgJ2RhcmsnLFxuICAgICAgJ2xpZ2h0JyxcbiAgICAgICdtdXRlZCcsXG4gICAgICAnbXV0ZWRfbmlnaHQnXG4gICAgXSlcbiAgfSksXG4gIGV4ZWN1dGU6IGV4ZWN1dGVCYXNlbWFwLFxuICBjb21wb25lbnQ6IEJhc2VtYXBUb29sQ29tcG9uZW50XG59KTtcblxuZXhwb3J0IHR5cGUgQmFzZW1hcFRvb2wgPSB0eXBlb2YgYmFzZW1hcDtcblxudHlwZSBFeGVjdXRlQmFzZW1hcFJlc3VsdCA9IHtcbiAgbGxtUmVzdWx0OiB7XG4gICAgc3VjY2VzczogYm9vbGVhbjtcbiAgICBzdHlsZVR5cGU6IHN0cmluZztcbiAgICBkZXRhaWxzPzogc3RyaW5nO1xuICAgIGluc3RydWN0aW9uPzogc3RyaW5nO1xuICB9O1xuICBhZGRpdGlvbmFsRGF0YT86IHtcbiAgICBzdHlsZVR5cGU6IHN0cmluZztcbiAgfTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVCYXNlbWFwKHtzdHlsZVR5cGV9KTogUHJvbWlzZTxFeGVjdXRlQmFzZW1hcFJlc3VsdD4ge1xuICB0cnkge1xuICAgIC8vIGNoZWNrIGlmIHN0eWxlVHlwZSBpcyB2YWxpZFxuICAgIGlmICghREVGQVVMVF9NQVBfU1RZTEVTLmZpbmQoc3R5bGUgPT4gc3R5bGUuaWQgPT09IHN0eWxlVHlwZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBiYXNlbWFwIHN0eWxlOiAke3N0eWxlVHlwZX0uYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxsbVJlc3VsdDoge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgIGRldGFpbHM6IGBiYXNlbWFwIHN0eWxlIGNoYW5nZWQgdG8gJHtzdHlsZVR5cGV9LmBcbiAgICAgIH0sXG4gICAgICBhZGRpdGlvbmFsRGF0YToge1xuICAgICAgICBzdHlsZVR5cGVcbiAgICAgIH1cbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBsbG1SZXN1bHQ6IHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgZGV0YWlsczogYEVycm9yIGNoYW5naW5nIGJhc2VtYXAgc3R5bGU6ICR7ZXJyb3J9YCxcbiAgICAgICAgaW5zdHJ1Y3Rpb246XG4gICAgICAgICAgJ1RyeSB0byBmaXggdGhlIGVycm9yLiBJZiB0aGUgZXJyb3IgcGVyc2lzdHMsIHBhdXNlIHRoZSBleGVjdXRpb24gYW5kIGFzayB0aGUgdXNlciB0byB0cnkgd2l0aCBkaWZmZXJlbnQgcHJvbXB0IGFuZCBjb250ZXh0LidcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCYXNlbWFwVG9vbENvbXBvbmVudCh7c3R5bGVUeXBlfSkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBkaXNwYXRjaChtYXBTdHlsZUNoYW5nZShzdHlsZVR5cGUpKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxu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