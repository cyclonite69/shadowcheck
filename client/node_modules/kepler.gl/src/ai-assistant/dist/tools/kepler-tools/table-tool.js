"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableToolComponent = TableToolComponent;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _reactRedux = require("react-redux");
var _react = _interopRequireWildcard(require("react"));
var _duckdb = require("@openassistant/duckdb");
var _actions = require("@kepler.gl/actions");
var _processors = require("@kepler.gl/processors");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

// This component will create a new table using the SQL query which will
// 1. add a new column
// 2. delete a column
// 3. rename a column
// 4. change the variable type of a column
function TableToolComponent(_ref) {
  var sql = _ref.sql,
    dbTableName = _ref.dbTableName,
    newDatasetName = _ref.queryDatasetName;
  var datasets = (0, _reactRedux.useSelector)(function (state) {
    return state.demo.keplerGl.map.visState.datasets;
  });
  var queryInProgress = (0, _react.useRef)(null);
  var dispatch = (0, _reactRedux.useDispatch)();
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    error = _useState2[0],
    setError = _useState2[1];
  (0, _react.useEffect)(function () {
    // check if the newDatasetName is already in the datasets
    var newDatasetId = Object.keys(datasets).find(function (dataId) {
      return datasets[dataId].label === newDatasetName;
    });
    // if the newDatasetName is already in the datasets, return
    if (newDatasetId) return;
    var addTable = /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!queryInProgress.current) {
                _context2.next = 3;
                break;
              }
              _context2.next = 3;
              return queryInProgress.current;
            case 3:
              // Create a new promise for this query
              queryInProgress.current = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
                var duckDB, conn, arrowResult, jsonResult, processedData;
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      _context.prev = 0;
                      _context.next = 3;
                      return (0, _duckdb.getDuckDB)();
                    case 3:
                      duckDB = _context.sent;
                      if (duckDB) {
                        _context.next = 6;
                        break;
                      }
                      throw new Error('DuckDB instance is not initialized');
                    case 6:
                      if (!(dbTableName && sql)) {
                        _context.next = 22;
                        break;
                      }
                      _context.next = 9;
                      return duckDB.connect();
                    case 9:
                      conn = _context.sent;
                      _context.next = 12;
                      return conn.query(sql);
                    case 12:
                      arrowResult = _context.sent;
                      // convert arrowResult to a JSON object
                      jsonResult = arrowResult.toArray().map(function (row) {
                        return (0, _duckdb.convertArrowRowToObject)(row);
                      }); // use processFileData to process the rowObject
                      _context.next = 16;
                      return (0, _processors.processFileData)({
                        content: {
                          fileName: newDatasetName,
                          data: jsonResult
                        },
                        fileCache: []
                      });
                    case 16:
                      processedData = _context.sent;
                      // add the new dataset to the map
                      dispatch((0, _actions.addDataToMap)({
                        datasets: processedData,
                        options: {
                          autoCreateLayers: true,
                          centerMap: true
                        }
                      }));

                      // delete the table from the database
                      _context.next = 20;
                      return conn.query("DROP TABLE ".concat(dbTableName));
                    case 20:
                      _context.next = 22;
                      return conn.close();
                    case 22:
                      _context.next = 28;
                      break;
                    case 24:
                      _context.prev = 24;
                      _context.t0 = _context["catch"](0);
                      console.error(_context.t0);
                      setError(_context.t0 instanceof Error ? _context.t0.message : 'Unknown error occurred');
                    case 28:
                      _context.prev = 28;
                      queryInProgress.current = null;
                      return _context.finish(28);
                    case 31:
                    case "end":
                      return _context.stop();
                  }
                }, _callee, null, [[0, 24, 28, 31]]);
              }))();

              // Wait for the query to complete
              _context2.next = 6;
              return queryInProgress.current;
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return function addTable() {
        return _ref2.apply(this, arguments);
      };
    }();
    addTable();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return error ? /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      color: 'red',
      fontSize: '8px'
    }
  }, error) : null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,