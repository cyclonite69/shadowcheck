"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKeplerTools = getKeplerTools;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _basemapTool = require("./basemap-tool");
var _layerCreationTool = require("./layer-creation-tool");
var _layerStyleTool = require("./layer-style-tool");
var _loaddataTool = require("./loaddata-tool");
var _boundaryTool = require("./boundary-tool");
var _saveDataTool = require("./save-data-tool");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function getKeplerTools(visState, aiAssistant) {
  // context for tools
  var getDatasets = function getDatasets() {
    return visState.datasets;
  };
  var getLayers = function getLayers() {
    return visState.layers;
  };
  var getLoaders = function getLoaders() {
    return {
      loaders: visState.loaders,
      loadOptions: visState.loadOptions
    };
  };

  // tool: addLayer
  var addLayerTool = _objectSpread(_objectSpread({}, _layerCreationTool.addLayer), {}, {
    context: {
      getDatasets: getDatasets
    }
  });

  // tool: updateLayerColor
  var updateLayerColorTool = _objectSpread(_objectSpread({}, _layerStyleTool.updateLayerColor), {}, {
    context: {
      getLayers: getLayers
    }
  });

  // tool: loadData
  var loadDataTool = _objectSpread(_objectSpread({}, _loaddataTool.loadData), {}, {
    context: {
      getLoaders: getLoaders
    },
    component: _loaddataTool.LoadDataToolComponent
  });

  // tool: mapBoundary
  var mapBoundaryTool = _objectSpread(_objectSpread({}, _boundaryTool.mapBoundary), {}, {
    context: {
      getMapBoundary: function getMapBoundary() {
        var _aiAssistant$keplerGl;
        return (_aiAssistant$keplerGl = aiAssistant.keplerGl) === null || _aiAssistant$keplerGl === void 0 ? void 0 : _aiAssistant$keplerGl.mapBoundary;
      }
    }
  });
  return {
    basemap: _basemapTool.basemap,
    addLayer: addLayerTool,
    updateLayerColor: updateLayerColorTool,
    loadData: loadDataTool,
    mapBoundary: mapBoundaryTool,
    saveDataToMap: _saveDataTool.saveToolResults
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmFzZW1hcFRvb2wiLCJyZXF1aXJlIiwiX2xheWVyQ3JlYXRpb25Ub29sIiwiX2xheWVyU3R5bGVUb29sIiwiX2xvYWRkYXRhVG9vbCIsIl9ib3VuZGFyeVRvb2wiLCJfc2F2ZURhdGFUb29sIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRLZXBsZXJUb29scyIsInZpc1N0YXRlIiwiYWlBc3Npc3RhbnQiLCJnZXREYXRhc2V0cyIsImRhdGFzZXRzIiwiZ2V0TGF5ZXJzIiwibGF5ZXJzIiwiZ2V0TG9hZGVycyIsImxvYWRlcnMiLCJsb2FkT3B0aW9ucyIsImFkZExheWVyVG9vbCIsImFkZExheWVyIiwiY29udGV4dCIsInVwZGF0ZUxheWVyQ29sb3JUb29sIiwidXBkYXRlTGF5ZXJDb2xvciIsImxvYWREYXRhVG9vbCIsImxvYWREYXRhIiwiY29tcG9uZW50IiwiTG9hZERhdGFUb29sQ29tcG9uZW50IiwibWFwQm91bmRhcnlUb29sIiwibWFwQm91bmRhcnkiLCJnZXRNYXBCb3VuZGFyeSIsIl9haUFzc2lzdGFudCRrZXBsZXJHbCIsImtlcGxlckdsIiwiYmFzZW1hcCIsInNhdmVEYXRhVG9NYXAiLCJzYXZlVG9vbFJlc3VsdHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdG9vbHMva2VwbGVyLXRvb2xzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7VmlzU3RhdGV9IGZyb20gJ0BrZXBsZXIuZ2wvc2NoZW1hcyc7XG5cbmltcG9ydCB7YmFzZW1hcH0gZnJvbSAnLi9iYXNlbWFwLXRvb2wnO1xuaW1wb3J0IHthZGRMYXllciwgQWRkTGF5ZXJUb29sfSBmcm9tICcuL2xheWVyLWNyZWF0aW9uLXRvb2wnO1xuaW1wb3J0IHt1cGRhdGVMYXllckNvbG9yfSBmcm9tICcuL2xheWVyLXN0eWxlLXRvb2wnO1xuaW1wb3J0IHtsb2FkRGF0YSwgTG9hZERhdGFUb29sLCBMb2FkRGF0YVRvb2xDb21wb25lbnR9IGZyb20gJy4vbG9hZGRhdGEtdG9vbCc7XG5pbXBvcnQge21hcEJvdW5kYXJ5fSBmcm9tICcuL2JvdW5kYXJ5LXRvb2wnO1xuaW1wb3J0IHtzYXZlVG9vbFJlc3VsdHN9IGZyb20gJy4vc2F2ZS1kYXRhLXRvb2wnO1xuaW1wb3J0IHtBaUFzc2lzdGFudFN0YXRlfSBmcm9tICcuLi8uLi9yZWR1Y2Vycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXBsZXJUb29scyh2aXNTdGF0ZTogVmlzU3RhdGUsIGFpQXNzaXN0YW50OiBBaUFzc2lzdGFudFN0YXRlKSB7XG4gIC8vIGNvbnRleHQgZm9yIHRvb2xzXG4gIGNvbnN0IGdldERhdGFzZXRzID0gKCkgPT4ge1xuICAgIHJldHVybiB2aXNTdGF0ZS5kYXRhc2V0cztcbiAgfTtcblxuICBjb25zdCBnZXRMYXllcnMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHZpc1N0YXRlLmxheWVycztcbiAgfTtcblxuICBjb25zdCBnZXRMb2FkZXJzID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBsb2FkZXJzOiB2aXNTdGF0ZS5sb2FkZXJzLFxuICAgICAgbG9hZE9wdGlvbnM6IHZpc1N0YXRlLmxvYWRPcHRpb25zXG4gICAgfTtcbiAgfTtcblxuICAvLyB0b29sOiBhZGRMYXllclxuICBjb25zdCBhZGRMYXllclRvb2w6IEFkZExheWVyVG9vbCA9IHtcbiAgICAuLi5hZGRMYXllcixcbiAgICBjb250ZXh0OiB7XG4gICAgICBnZXREYXRhc2V0c1xuICAgIH1cbiAgfTtcblxuICAvLyB0b29sOiB1cGRhdGVMYXllckNvbG9yXG4gIGNvbnN0IHVwZGF0ZUxheWVyQ29sb3JUb29sID0ge1xuICAgIC4uLnVwZGF0ZUxheWVyQ29sb3IsXG4gICAgY29udGV4dDoge1xuICAgICAgZ2V0TGF5ZXJzXG4gICAgfVxuICB9O1xuXG4gIC8vIHRvb2w6IGxvYWREYXRhXG4gIGNvbnN0IGxvYWREYXRhVG9vbDogTG9hZERhdGFUb29sID0ge1xuICAgIC4uLmxvYWREYXRhLFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIGdldExvYWRlcnNcbiAgICB9LFxuICAgIGNvbXBvbmVudDogTG9hZERhdGFUb29sQ29tcG9uZW50XG4gIH07XG5cbiAgLy8gdG9vbDogbWFwQm91bmRhcnlcbiAgY29uc3QgbWFwQm91bmRhcnlUb29sID0ge1xuICAgIC4uLm1hcEJvdW5kYXJ5LFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIGdldE1hcEJvdW5kYXJ5OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBhaUFzc2lzdGFudC5rZXBsZXJHbD8ubWFwQm91bmRhcnk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYmFzZW1hcCxcbiAgICBhZGRMYXllcjogYWRkTGF5ZXJUb29sLFxuICAgIHVwZGF0ZUxheWVyQ29sb3I6IHVwZGF0ZUxheWVyQ29sb3JUb29sLFxuICAgIGxvYWREYXRhOiBsb2FkRGF0YVRvb2wsXG4gICAgbWFwQm91bmRhcnk6IG1hcEJvdW5kYXJ5VG9vbCxcbiAgICBzYXZlRGF0YVRvTWFwOiBzYXZlVG9vbFJlc3VsdHNcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFLQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxrQkFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsZUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsYUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksYUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssYUFBQSxHQUFBTCxPQUFBO0FBQWlELFNBQUFNLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBWixDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUEsUUFBQWUsZ0JBQUEsYUFBQWhCLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLENBQUFELENBQUEsU0FBQUUsTUFBQSxDQUFBYyx5QkFBQSxHQUFBZCxNQUFBLENBQUFlLGdCQUFBLENBQUFsQixDQUFBLEVBQUFHLE1BQUEsQ0FBQWMseUJBQUEsQ0FBQWYsQ0FBQSxLQUFBSCxPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxHQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQUUsTUFBQSxDQUFBZ0IsY0FBQSxDQUFBbkIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQU4sQ0FBQSxFQUFBRCxDQUFBLGlCQUFBRCxDQUFBLElBVmpEO0FBQ0E7QUFZTyxTQUFTb0IsY0FBY0EsQ0FBQ0MsUUFBa0IsRUFBRUMsV0FBNkIsRUFBRTtFQUNoRjtFQUNBLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFBLEVBQVM7SUFDeEIsT0FBT0YsUUFBUSxDQUFDRyxRQUFRO0VBQzFCLENBQUM7RUFFRCxJQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBQSxFQUFTO0lBQ3RCLE9BQU9KLFFBQVEsQ0FBQ0ssTUFBTTtFQUN4QixDQUFDO0VBRUQsSUFBTUMsVUFBVSxHQUFHLFNBQWJBLFVBQVVBLENBQUEsRUFBUztJQUN2QixPQUFPO01BQ0xDLE9BQU8sRUFBRVAsUUFBUSxDQUFDTyxPQUFPO01BQ3pCQyxXQUFXLEVBQUVSLFFBQVEsQ0FBQ1E7SUFDeEIsQ0FBQztFQUNILENBQUM7O0VBRUQ7RUFDQSxJQUFNQyxZQUEwQixHQUFBbEIsYUFBQSxDQUFBQSxhQUFBLEtBQzNCbUIsMkJBQVE7SUFDWEMsT0FBTyxFQUFFO01BQ1BULFdBQVcsRUFBWEE7SUFDRjtFQUFDLEVBQ0Y7O0VBRUQ7RUFDQSxJQUFNVSxvQkFBb0IsR0FBQXJCLGFBQUEsQ0FBQUEsYUFBQSxLQUNyQnNCLGdDQUFnQjtJQUNuQkYsT0FBTyxFQUFFO01BQ1BQLFNBQVMsRUFBVEE7SUFDRjtFQUFDLEVBQ0Y7O0VBRUQ7RUFDQSxJQUFNVSxZQUEwQixHQUFBdkIsYUFBQSxDQUFBQSxhQUFBLEtBQzNCd0Isc0JBQVE7SUFDWEosT0FBTyxFQUFFO01BQ1BMLFVBQVUsRUFBVkE7SUFDRixDQUFDO0lBQ0RVLFNBQVMsRUFBRUM7RUFBcUIsRUFDakM7O0VBRUQ7RUFDQSxJQUFNQyxlQUFlLEdBQUEzQixhQUFBLENBQUFBLGFBQUEsS0FDaEI0Qix5QkFBVztJQUNkUixPQUFPLEVBQUU7TUFDUFMsY0FBYyxFQUFFLFNBQWhCQSxjQUFjQSxDQUFBLEVBQVE7UUFBQSxJQUFBQyxxQkFBQTtRQUNwQixRQUFBQSxxQkFBQSxHQUFPcEIsV0FBVyxDQUFDcUIsUUFBUSxjQUFBRCxxQkFBQSx1QkFBcEJBLHFCQUFBLENBQXNCRixXQUFXO01BQzFDO0lBQ0Y7RUFBQyxFQUNGO0VBRUQsT0FBTztJQUNMSSxPQUFPLEVBQVBBLG9CQUFPO0lBQ1BiLFFBQVEsRUFBRUQsWUFBWTtJQUN0QkksZ0JBQWdCLEVBQUVELG9CQUFvQjtJQUN0Q0csUUFBUSxFQUFFRCxZQUFZO0lBQ3RCSyxXQUFXLEVBQUVELGVBQWU7SUFDNUJNLGFBQWEsRUFBRUM7RUFDakIsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119