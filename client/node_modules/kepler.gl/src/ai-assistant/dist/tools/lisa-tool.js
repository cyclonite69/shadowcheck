"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LisaToolComponent = LisaToolComponent;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("react");
var _reactRedux = require("react-redux");
var _actions = require("@kepler.gl/actions");
var _utils = require("./utils");
var _layerCreationTool = require("./kepler-tools/layer-creation-tool");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * Use LisaToolComponent adding a customized Lisa map layer to kepler.gl
 */
function LisaToolComponent(props) {
  var datasets = (0, _reactRedux.useSelector)(function (state) {
    return state.demo.keplerGl.map.visState.datasets;
  });
  var layers = (0, _reactRedux.useSelector)(function (state) {
    return state.demo.keplerGl.map.visState.layers;
  });
  var dispatch = (0, _reactRedux.useDispatch)();
  var originalDatasetName = props.originalDatasetName,
    datasetName = props.datasetName,
    significanceThreshold = props.significanceThreshold,
    clusters = props.clusters,
    lagValues = props.lagValues,
    pValues = props.pValues,
    lisaValues = props.lisaValues,
    sigCategories = props.sigCategories,
    nn = props.nn,
    labels = props.labels,
    colors = props.colors;

  // save the result from lisa tool to a new lisa dataset
  (0, _react.useEffect)(function () {
    if (!clusters || !lagValues || !pValues || !lisaValues || !sigCategories || !nn || !labels || !colors) {
      return;
    }
    var lisaData = {
      clusters: clusters,
      lagValues: lagValues,
      pValues: pValues,
      lisaValues: lisaValues,
      sigCategories: sigCategories,
      nn: nn,
      fillColor: clusters.map(function (cluster, index) {
        return pValues[index] < significanceThreshold ? colors[cluster] : colors[0];
      }),
      label: clusters.map(function (cluster, index) {
        return pValues[index] < significanceThreshold ? labels[cluster] : labels[0];
      })
    };
    // create a new geojson layer using clusters with ordinal color scale and customColorScale and colors
    var newDataset = (0, _utils.saveAsDataset)(datasets, layers, originalDatasetName, datasetName, lisaData);
    if (newDataset) {
      // add the new dataset to the map
      dispatch((0, _actions.addDataToMap)({
        datasets: [newDataset],
        options: {
          autoCreateLayers: false,
          centerMap: false
        }
      }));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // create a LISA layer for the new lisa dataset
  (0, _react.useEffect)(function () {
    var datasetId = Object.keys(datasets).find(function (dataId) {
      return datasets[dataId].label === datasetName;
    });
    if (!datasetId || !colors || !labels) return;
    var newDataset = datasets[datasetId];
    if (newDataset) {
      var layerId = "".concat(datasetName, "_lisa");
      // check if the layer already exists?
      if (layers.find(function (l) {
        return l.id === layerId;
      })) {
        return;
      }
      // add a new layer for the new dataset
      var layer = (0, _layerCreationTool.guessDefaultLayer)(newDataset, 'geojson');
      if (!layer) return;
      var colorField = {
        name: 'clusters',
        type: 'integer'
      };
      var colorDomain = Array.from({
        length: colors.length
      }, function (_, i) {
        return i;
      });
      var colorLegends = {};
      for (var i = 0; i < colors.length; i++) {
        colorLegends[colors[i]] = labels[i];
      }
      var colorMap = colors.map(function (color, index) {
        return [index, color];
      });
      var newLayer = {
        id: layerId,
        type: layer.type,
        config: _objectSpread(_objectSpread({}, layer.config), {}, {
          dataId: datasetId,
          columns: Object.keys(layer.config.columns).reduce(function (acc, key) {
            acc[key] = layer.config.columns[key].value;
            return acc;
          }, {}),
          colorScale: 'customOrdinal',
          colorField: colorField,
          strokeColorDomain: colorDomain,
          strokeColorField: colorField,
          strokeColorScale: 'customOrdinal',
          visConfig: _objectSpread(_objectSpread({}, layer.config.visConfig), {}, {
            colorRange: _objectSpread(_objectSpread({}, layer.config.visConfig.colorRange), {}, {
              colorDomain: colorDomain,
              colors: colors,
              colorMap: colorMap,
              colorLegends: colorLegends
            }),
            strokeColorRange: {
              category: 'Custom',
              name: 'custom',
              colors: colors,
              colorMap: colorMap
            },
            strokeOpacity: 1,
            stroked: true,
            strokedWidth: 0.5
          })
        })
      };
      dispatch((0, _actions.addLayer)(newLayer, datasetId));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [datasets]);
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,