"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGeoTools = getGeoTools;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _geoda = require("@openassistant/geoda");
var _osm = require("@openassistant/osm");
var _tables = require("@openassistant/tables");
var _utils = require("@openassistant/utils");
var _actions = require("@kepler.gl/actions");
var _lisaTool = require("./lisa-tool");
var _utils2 = require("./utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function getGeoTools(aiAssistant, datasets, layers, layerData) {
  // tool cache
  var toolCache = _utils.ToolCache.getInstance();

  // context for geo tools
  var getValues = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(datasetName, variableName) {
      var values;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            values = (0, _utils2.getValuesFromDataset)(datasets, layers, datasetName, variableName);
            return _context.abrupt("return", values);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function getValues(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  var getGeometries = /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(datasetName) {
      var geoms, dataset;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            geoms = (0, _utils2.getGeometriesFromDataset)(datasets, layers, layerData, datasetName);
            if (geoms.length === 0) {
              // even though the tool dataset should be saved by 'saveDataToMapTool',
              // we still try to get the dataset from tool cache, e.g. route, isochrone etc.
              dataset = toolCache.getDataset(datasetName); // check if dataset is a GeoJSON object
              if (dataset && dataset.type === 'geojson') {
                geoms = dataset.content.features;
              }
            }
            return _context2.abrupt("return", geoms);
          case 3:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function getGeometries(_x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  var getMapboxToken = function getMapboxToken() {
    if (aiAssistant.config.mapboxToken) {
      return aiAssistant.config.mapboxToken;
    }
    throw new Error('Mapbox token is not provided');
  };

  // onToolCompleted
  var onToolCompleted = function onToolCompleted(toolName, result) {
    toolCache.addDataset(toolName, result);
  };

  // geo tools
  var classifyTool = _objectSpread(_objectSpread({}, _geoda.dataClassify), {}, {
    context: {
      getValues: getValues
    }
  });
  var weightsTool = _objectSpread(_objectSpread({}, _geoda.spatialWeights), {}, {
    context: {
      getGeometries: getGeometries
    }
  });
  var globalMoranTool = _objectSpread(_objectSpread({}, _geoda.globalMoran), {}, {
    context: {
      getValues: getValues
    }
  });
  var regressionTool = _objectSpread(_objectSpread({}, _geoda.spatialRegression), {}, {
    context: {
      getValues: getValues
    }
  });
  var lisaTool = _objectSpread(_objectSpread({}, _geoda.lisa), {}, {
    context: {
      getValues: getValues
    },
    component: _lisaTool.LisaToolComponent
  });
  var spatialJoinTool = _objectSpread(_objectSpread({}, _geoda.spatialJoin), {}, {
    context: {
      getValues: getValues,
      getGeometries: getGeometries
    },
    onToolCompleted: onToolCompleted,
    component: _tables.SpatialJoinComponent
  });
  var spatialFilterTool = _objectSpread(_objectSpread({}, _geoda.spatialFilter), {}, {
    context: {
      getValues: getValues,
      getGeometries: getGeometries
    },
    onToolCompleted: onToolCompleted,
    component: _tables.SpatialJoinComponent
  });
  var routingTool = _objectSpread(_objectSpread({}, _osm.routing), {}, {
    context: {
      getMapboxToken: getMapboxToken
    },
    onToolCompleted: onToolCompleted
  });
  var isochroneTool = _objectSpread(_objectSpread({}, _osm.isochrone), {}, {
    context: {
      getMapboxToken: getMapboxToken
    },
    onToolCompleted: onToolCompleted
  });
  var bufferTool = _objectSpread(_objectSpread({}, _geoda.buffer), {}, {
    context: {
      getGeometries: getGeometries
    },
    onToolCompleted: onToolCompleted
  });
  var centroidTool = _objectSpread(_objectSpread({}, _geoda.centroid), {}, {
    context: {
      getGeometries: getGeometries
    },
    onToolCompleted: onToolCompleted
  });
  var dissolveTool = _objectSpread(_objectSpread({}, _geoda.dissolve), {}, {
    context: {
      getGeometries: getGeometries,
      getValues: getValues
    },
    onToolCompleted: onToolCompleted
  });
  var roadsTool = _objectSpread(_objectSpread({}, _osm.roads), {}, {
    context: {
      getGeometries: getGeometries
    },
    onToolCompleted: onToolCompleted
  });
  var lengthTool = _objectSpread(_objectSpread({}, _geoda.length), {}, {
    context: {
      getGeometries: getGeometries
    }
  });
  var areaTool = _objectSpread(_objectSpread({}, _geoda.area), {}, {
    context: {
      getGeometries: getGeometries
    }
  });
  var perimeterTool = _objectSpread(_objectSpread({}, _geoda.perimeter), {}, {
    context: {
      getGeometries: getGeometries
    }
  });
  var thiessenPolygonsTool = _objectSpread(_objectSpread({}, _geoda.thiessenPolygons), {}, {
    context: {
      getGeometries: getGeometries
    },
    onToolCompleted: onToolCompleted
  });
  var minimumSpanningTreeTool = _objectSpread(_objectSpread({}, _geoda.minimumSpanningTree), {}, {
    context: {
      getGeometries: getGeometries
    },
    onToolCompleted: onToolCompleted
  });
  var cartogramTool = _objectSpread(_objectSpread({}, _geoda.cartogram), {}, {
    context: {
      getGeometries: getGeometries,
      getValues: getValues
    },
    onToolCompleted: onToolCompleted
  });
  var gridTool = _objectSpread(_objectSpread({}, _geoda.grid), {}, {
    context: {
      getGeometries: getGeometries
    },
    onToolCompleted: onToolCompleted
  });
  var getUsStateTool = _objectSpread(_objectSpread({}, _osm.getUsStateGeojson), {}, {
    onToolCompleted: onToolCompleted
  });
  var getUsCountyTool = _objectSpread(_objectSpread({}, _osm.getUsCountyGeojson), {}, {
    onToolCompleted: onToolCompleted
  });
  var getUsZipcodeTool = _objectSpread(_objectSpread({}, _osm.getUsZipcodeGeojson), {}, {
    onToolCompleted: onToolCompleted
  });
  var standardizeVariableTool = _objectSpread(_objectSpread({}, _geoda.standardizeVariable), {}, {
    context: {
      getValues: getValues
    },
    component: CustomDataTableComponent
  });
  var rateTool = _objectSpread(_objectSpread({}, _geoda.rate), {}, {
    context: {
      getValues: getValues
    },
    component: CustomDataTableComponent
  });
  return {
    classifyTool: classifyTool,
    weightsTool: weightsTool,
    globalMoranTool: globalMoranTool,
    regressionTool: regressionTool,
    lisaTool: lisaTool,
    spatialJoinTool: spatialJoinTool,
    spatialFilterTool: spatialFilterTool,
    gridTool: gridTool,
    bufferTool: bufferTool,
    centroidTool: centroidTool,
    dissolveTool: dissolveTool,
    lengthTool: lengthTool,
    areaTool: areaTool,
    perimeterTool: perimeterTool,
    getUsStateTool: getUsStateTool,
    getUsCountyTool: getUsCountyTool,
    getUsZipcodeTool: getUsZipcodeTool,
    queryUSZipcodes: _osm.queryUSZipcodes,
    geocoding: _osm.geocoding,
    routing: routingTool,
    isochrone: isochroneTool,
    roads: roadsTool,
    standardizeVariable: standardizeVariableTool,
    thiessenPolygons: thiessenPolygonsTool,
    minimumSpanningTree: minimumSpanningTreeTool,
    cartogram: cartogramTool,
    rate: rateTool
  };
}

/**
 * Customize the DataTableComponent for StandardizeVariableTool and RateTool
 */
function CustomDataTableComponent(props) {
  var dispatch = (0, _reactRedux.useDispatch)();
  var datasets = (0, _reactRedux.useSelector)(function (state) {
    return state.demo.keplerGl.map.visState.datasets;
  });
  var layers = (0, _reactRedux.useSelector)(function (state) {
    return state.demo.keplerGl.map.visState.layers;
  });
  var originalDatasetName = props.originalDatasetName,
    datasetName = props.datasetName,
    saveData = props.saveData;

  // get data by datasetName
  var dataset = props[datasetName];
  var data = dataset === null || dataset === void 0 ? void 0 : dataset.content;
  (0, _react.useEffect)(function () {
    function saveStandardizedData() {
      return _saveStandardizedData.apply(this, arguments);
    }
    function _saveStandardizedData() {
      _saveStandardizedData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        var dataRecord, columnNames, numberOfRows, i, row, _iterator, _step, key, processedData;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              // convert column-wise data to a row-wise Record<string, number>[]
              dataRecord = [];
              columnNames = Object.keys(data);
              numberOfRows = data[columnNames[0]].length;
              for (i = 0; i < numberOfRows; i++) {
                row = {};
                _iterator = _createForOfIteratorHelper(columnNames);
                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    key = _step.value;
                    row[key] = data[key][i];
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
                dataRecord.push(row);
              }
              _context3.next = 6;
              return (0, _utils2.appendColumnsToDataset)(datasets, layers, originalDatasetName, dataRecord, datasetName);
            case 6:
              processedData = _context3.sent;
              dispatch((0, _actions.addDataToMap)({
                datasets: processedData,
                options: {
                  autoCreateLayers: true,
                  centerMap: false
                }
              }));
            case 8:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      return _saveStandardizedData.apply(this, arguments);
    }
    if (saveData) {
      saveStandardizedData();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react["default"].createElement(_tables.DataTableComponent, props);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,