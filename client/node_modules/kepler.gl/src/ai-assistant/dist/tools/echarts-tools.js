"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEchartsTools = getEchartsTools;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _plots = require("@openassistant/plots");
var _echarts = require("@openassistant/echarts");
var _actions = require("@kepler.gl/actions");
var _utils = require("./utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function getEchartsTools(datasets, layers, dispatch) {
  // context for tools
  var getValues = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(datasetName, variableName) {
      var values;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            values = (0, _utils.getValuesFromDataset)(datasets, layers, datasetName, variableName);
            return _context.abrupt("return", values);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function getValues(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  var onSelected = function onSelected(datasetName, selectedIndices) {
    var triggerLayerReRender = function triggerLayerReRender(layer, isValid) {
      dispatch((0, _actions.layerSetIsValid)(layer, isValid));
    };
    (0, _utils.highlightRows)(datasets, layers, datasetName, selectedIndices, triggerLayerReRender);
  };

  // Create the boxplot tool with the getValues implementation
  var boxplotTool = _objectSpread(_objectSpread({}, _plots.boxplot), {}, {
    context: _objectSpread(_objectSpread({}, _plots.boxplot.context), {}, {
      getValues: getValues,
      onSelected: onSelected
    }),
    component: _echarts.BoxplotComponent
  });

  // Create the bubble chart tool with the getValues implementation
  var bubbleChartTool = _objectSpread(_objectSpread({}, _plots.bubbleChart), {}, {
    context: _objectSpread(_objectSpread({}, _plots.bubbleChart.context), {}, {
      getValues: getValues,
      onSelected: onSelected
    }),
    component: _echarts.BubbleChartComponent
  });
  var histogramTool = _objectSpread(_objectSpread({}, _plots.histogram), {}, {
    context: _objectSpread(_objectSpread({}, _plots.histogram.context), {}, {
      getValues: getValues,
      onSelected: onSelected
    }),
    component: _echarts.HistogramPlotComponent
  });
  var pcpTool = _objectSpread(_objectSpread({}, _plots.pcp), {}, {
    context: _objectSpread(_objectSpread({}, _plots.pcp.context), {}, {
      getValues: getValues,
      onSelected: onSelected
    }),
    component: _echarts.ParallelCoordinateComponent
  });
  var scatterplotTool = _objectSpread(_objectSpread({}, _plots.scatterplot), {}, {
    context: _objectSpread(_objectSpread({}, _plots.scatterplot.context), {}, {
      getValues: getValues,
      onSelected: onSelected
    }),
    component: _echarts.ScatterplotComponent
  });
  return {
    boxplotTool: boxplotTool,
    bubbleChartTool: bubbleChartTool,
    histogramTool: histogramTool,
    pcpTool: pcpTool,
    scatterplotTool: scatterplotTool
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,