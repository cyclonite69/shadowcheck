"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.appendColumnsToDataset = appendColumnsToDataset;
exports.getDatasetContext = getDatasetContext;
exports.getGeometriesFromDataset = getGeometriesFromDataset;
exports.getValuesFromDataset = getValuesFromDataset;
exports.getValuesFromVectorTileLayer = getValuesFromVectorTileLayer;
exports.highlightRows = highlightRows;
exports.highlightRowsByColumnValues = highlightRowsByColumnValues;
exports.interpolateColor = interpolateColor;
exports.saveAsDataset = saveAsDataset;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _colorInterpolate = _interopRequireDefault(require("color-interpolate"));
var _constants = require("@kepler.gl/constants");
var _processors = require("@kepler.gl/processors");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * Interpolate the colors from the original colors with the given number of colors
 * @param originalColors The original colors
 * @param numberOfColors The number of colors
 * @returns The interpolated colors
 */
function interpolateColor(originalColors, numberOfColors) {
  if (originalColors.length === numberOfColors) {
    return originalColors;
  }
  var interp = (0, _colorInterpolate["default"])(originalColors);
  var colors = Array.from({
    length: numberOfColors
  }, function (_, j) {
    return interp(j / (numberOfColors - 1));
  });
  // convert colors from 'rgb(255, 255, 255)' to '#ffffff'
  var hexColors = colors.map(function (color) {
    var rgb = color.match(/\d+/g);
    return "#".concat(rgb === null || rgb === void 0 ? void 0 : rgb.map(function (c) {
      return parseInt(c).toString(16).padStart(2, '0');
    }).join(''));
  });
  return hexColors;
}

/**
 * Get the values from a dataset for a variable
 * @param datasets
 * @param datasetName
 * @param variableName
 * @returns {number[]}
 */
function getValuesFromDataset(datasets, layers, datasetName, variableName) {
  // find which dataset has the variableName
  var datasetId = Object.keys(datasets).find(function (dataId) {
    return datasets[dataId].label === datasetName;
  });
  if (!datasetId) {
    throw new Error("Dataset ".concat(datasetName, " not found"));
  }
  var dataset = datasets[datasetId];
  if (dataset) {
    // check if field exists
    var field = dataset.fields.find(function (field) {
      return field.name === variableName;
    });
    if (!field) {
      throw new Error("Field ".concat(variableName, " not found in dataset ").concat(datasetName));
    }
    // for vector-tile, getting values from layerData
    if (dataset.type === 'vector-tile') {
      // get field from dataset
      var _field = dataset.fields.find(function (field) {
        return field.name === variableName;
      });
      if (_field) {
        return getValuesFromVectorTileLayer(datasetId, layers, _field);
      }
    }
    return Array.from({
      length: dataset.length
    }, function (_, i) {
      return dataset.getValue(variableName, i);
    });
  }
  return [];
}
function isVectorTileLayer(layer) {
  return layer.type === _constants.LAYER_TYPES.vectorTile;
}
function getValuesFromVectorTileLayer(datasetId, layers, field) {
  // get the index of the layer
  var layerIndex = layers.findIndex(function (layer) {
    return layer.config.dataId === datasetId;
  });
  if (layerIndex === -1) return [];
  var layer = layers[layerIndex];
  if (!isVectorTileLayer(layer)) return [];
  var accessor = layer.accessRowValue(field);
  var values = [];
  // @ts-expect-error TODO fix this later in the vector-tile layer
  var _iterator = _createForOfIteratorHelper(layer.tileDataset.tileSet),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var row = _step.value;
      var value = accessor(field, row);
      if (value === null) break;
      values.push(value);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return values;
}

/**
 * Highlight the rows in a dataset
 * @param datasets The kepler.gl datasets
 * @param layers The kepler.gl layers
 * @param datasetName The name of the dataset
 * @param selectedRowIndices The indices of the rows to highlight
 * @param layerSetIsValid The function to set the layer validity
 */
function highlightRows(datasets, layers, datasetName, selectedRowIndices, layerSetIsValid) {
  // update the filteredIndex in the dataset
  var datasetId = Object.keys(datasets).find(function (dataId) {
    return datasets[dataId].label === datasetName;
  });
  if (!datasetId) return;
  var dataset = datasets[datasetId];
  if (dataset) {
    dataset.filteredIndex = selectedRowIndices.length === 0 ? dataset.allIndexes : selectedRowIndices;
    // get all layers that use this dataset
    var selectLayers = layers.filter(function (layer) {
      return layer.config.dataId === dataset.id;
    });
    selectLayers.forEach(function (layer) {
      layer.formatLayerData(datasets);
      // trigger a re-render using layerSetIsValid() to update the top layer
      layerSetIsValid(layer, true);
    });
  }
}

/**
 * Get the dataset context, which is used to provide the dataset information to the AI assistant
 * @param datasets The kepler.gl datasets
 * @param layers The kepler.gl layers
 * @returns The dataset context
 */
function getDatasetContext(datasets, layers) {
  if (!datasets || !layers) return '';
  var context = 'Please remember the following datasets and layers for answering the user question:';
  var dataMeta = Object.values(datasets).map(function (dataset) {
    return {
      datasetName: dataset.label,
      datasetId: dataset.id,
      fields: dataset.fields.map(function (field) {
        return (0, _defineProperty2["default"])({}, field.name, field.type);
      }),
      layers: layers.filter(function (layer) {
        return layer.config.dataId === dataset.id;
      }).map(function (layer) {
        return {
          id: layer.id,
          label: layer.config.label,
          type: layer.type,
          geometryMode: layer.config.columnMode,
          // get the valid geometry columns as string
          geometryColumns: Object.fromEntries(Object.entries(layer.config.columns).filter(function (_ref2) {
            var _ref3 = (0, _slicedToArray2["default"])(_ref2, 2),
              value = _ref3[1];
            return value !== null;
          }).map(function (_ref4) {
            var _ref5 = (0, _slicedToArray2["default"])(_ref4, 2),
              key = _ref5[0],
              value = _ref5[1];
            return [key, (0, _typeof2["default"])(value) === 'object' && value !== null ? Object.fromEntries(Object.entries(value).filter(function (_ref6) {
              var _ref7 = (0, _slicedToArray2["default"])(_ref6, 2),
                v = _ref7[1];
              return v !== null;
            })) : value];
          }))
        };
      })
    };
  });
  return "".concat(context, "\n").concat(JSON.stringify(dataMeta));
}

/**
 * Get the geometries from a dataset
 * @param datasets The kepler.gl datasets
 * @param layers The kepler.gl layers
 * @param layerData The layer data
 * @param datasetName The name of the dataset
 * @returns The geometries
 */
function getGeometriesFromDataset(datasets, layers, layerData, datasetName) {
  var datasetId = Object.keys(datasets).find(function (dataId) {
    return datasets[dataId].label === datasetName;
  });
  if (!datasetId) {
    return [];
  }
  var dataset = datasets[datasetId];

  // if layer is vector-tile, get the geometries from the layer
  if (dataset.type === 'vector-tile') {
    // find the vector-tile layer
    var selected = layers.filter(function (layer) {
      return layer.config.dataId === dataset.id;
    });
    var layer = selected.find(function (layer) {
      return layer.type === _constants.LAYER_TYPES.vectorTile;
    });
    if (!layer) return [];
    var geometries = [];
    // @ts-expect-error TODO fix this later in the vector-tile layer
    var _iterator2 = _createForOfIteratorHelper(layer.tileDataset.tileSet),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var row = _step2.value;
        geometries.push(row);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    return geometries;
  }

  // for non-vector-tile dataset, get the geometries from the possible layer
  var selectedLayers = layers.filter(function (layer) {
    return layer.config.dataId === dataset.id;
  });
  if (selectedLayers.length === 0) return [];

  // find geojson layer, then point layer, then other layers
  var geojsonLayer = selectedLayers.find(function (layer) {
    return layer.type === _constants.LAYER_TYPES.geojson;
  });
  var pointLayer = selectedLayers.find(function (layer) {
    return layer.type === _constants.LAYER_TYPES.point;
  });
  var otherLayers = selectedLayers.filter(function (layer) {
    return layer.type !== _constants.LAYER_TYPES.geojson && layer.type !== _constants.LAYER_TYPES.point;
  });
  var validLayer = geojsonLayer || pointLayer || otherLayers[0];
  if (validLayer) {
    var layerIndex = layers.findIndex(function (layer) {
      return layer.id === validLayer.id;
    });
    var _geometries = layerData[layerIndex];
    return _geometries.data;
  }
  return [];
}

/**
 * Save the data as a new dataset by joining it with the left dataset
 * @param datasets The kepler.gl datasets
 * @param datasetName The name of the left dataset
 * @param data The data to save
 * @param addDataToMap The function to add the data to the map
 */
function saveAsDataset(datasets, layers, datasetName, newDatasetName, data) {
  // find datasetId from datasets
  var datasetId = Object.keys(datasets).find(function (dataId) {
    return datasets[dataId].label === datasetName;
  });
  if (!datasetId) return;

  // check if newDatasetName already exists
  if (Object.keys(datasets).includes(newDatasetName)) return;

  // Save the data as a new dataset by joining it with the left dataset
  var leftDataset = datasets[datasetId];
  var numRows = leftDataset.length;
  var geometries;
  if (leftDataset.type === 'vector-tile') {
    // we need to get geometries from the vector-tile layer
    geometries = getFeaturesFromVectorTile(leftDataset, layers) || [];
    numRows = geometries.length;
  }
  var fields = [].concat((0, _toConsumableArray2["default"])(Object.keys(data).map(function (fieldName, index) {
    return {
      name: fieldName,
      id: "".concat(fieldName, "_").concat(index),
      displayName: fieldName,
      type: determineFieldType(data[fieldName][0])
    };
  })), (0, _toConsumableArray2["default"])(leftDataset.fields.map(function (field, index) {
    return {
      name: field.name,
      id: field.id || "".concat(field.name, "_").concat(index),
      displayName: field.displayName,
      type: field.type
    };
  })), (0, _toConsumableArray2["default"])(leftDataset.type === 'vector-tile' ? [{
    name: '_geojson',
    id: '_geojson',
    displayName: '_geojson',
    type: 'geojson'
  }] : []));

  // Pre-calculate data values array
  var dataValues = Object.values(data);
  var rows = Array(numRows).fill(null).map(function (_, rowIdx) {
    return [].concat((0, _toConsumableArray2["default"])(dataValues.map(function (col) {
      return col[rowIdx];
    })), (0, _toConsumableArray2["default"])(leftDataset.fields.map(function (field) {
      var _geometries$rowIdx$pr;
      return leftDataset.type === 'vector-tile' ? (_geometries$rowIdx$pr = geometries[rowIdx].properties) === null || _geometries$rowIdx$pr === void 0 ? void 0 : _geometries$rowIdx$pr[field.name] : leftDataset.getValue(field.name, rowIdx);
    })), (0, _toConsumableArray2["default"])(leftDataset.type === 'vector-tile' ? [geometries[rowIdx]] : []));
  });

  // create new dataset
  var newDataset = {
    info: {
      id: newDatasetName,
      label: newDatasetName
    },
    data: {
      fields: fields,
      rows: rows
    }
  };
  return newDataset;
}

/**
 * Helper function to determine field type
 * @param value The value to determine the field type
 * @returns The field type
 */
function determineFieldType(value) {
  return typeof value === 'number' ? Number.isInteger(value) ? _constants.ALL_FIELD_TYPES.integer : _constants.ALL_FIELD_TYPES.real : _constants.ALL_FIELD_TYPES.string;
}
function highlightRowsByColumnValues(datasets, layers, datasetName, columnName, selectedValues, layerSetIsValid) {
  var datasetId = Object.keys(datasets).find(function (dataId) {
    return datasets[dataId].label === datasetName;
  });
  if (!datasetId) return;
  var dataset = datasets[datasetId];
  if (dataset) {
    // get the values of the column
    var values = Array.from({
      length: dataset.length
    }, function (_, i) {
      return dataset.getValue(columnName, i);
    });
    // create a dict using the values
    var valueDict = values.reduce(function (acc, value, index) {
      acc[value] = index;
      return acc;
    }, {});
    // need to fix the type error of value here
    var selectedIndices = selectedValues.map(function (value) {
      return valueDict[value];
    });
    // highlight the rows
    highlightRows(datasets, layers, datasetName, selectedIndices, layerSetIsValid);
  }
}
function getFeaturesFromVectorTile(leftDataset, layers) {
  var layerIndex = layers.findIndex(function (layer) {
    return layer.config.dataId === leftDataset.id;
  });
  if (layerIndex === -1) return;
  var layer = layers[layerIndex];
  if (!isVectorTileLayer(layer)) return;
  var features = [];
  // @ts-expect-error TODO fix this later in the vector-tile layer
  var _iterator3 = _createForOfIteratorHelper(layer.tileDataset.tileSet),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var row = _step3.value;
      features.push(row);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return features;
}
function appendColumnsToDataset(_x, _x2, _x3, _x4, _x5) {
  return _appendColumnsToDataset.apply(this, arguments);
}
function _appendColumnsToDataset() {
  _appendColumnsToDataset = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(datasets, layers, datasetName, result, newDatasetName) {
    var datasetId, originalDataset, fields, numRows, rowObjects, columnData, _iterator4, _step4, _field2, i, rowObject, _iterator5, _step5, field, _i, _rowObject, _iterator6, _step6, _field3, value, _loop, _i2, processedData;
    return _regenerator["default"].wrap(function _callee$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          // find datasetId from datasets
          datasetId = Object.keys(datasets).find(function (dataId) {
            return datasets[dataId].label === datasetName;
          });
          if (datasetId) {
            _context2.next = 3;
            break;
          }
          throw new Error("Dataset ".concat(datasetName, " not found"));
        case 3:
          originalDataset = datasets[datasetId];
          fields = originalDataset.fields;
          numRows = originalDataset.length || result.length; // create a rowObjects array to store the original dataset values + query result values
          rowObjects = [];
          if (originalDataset.type === 'vector-tile') {
            columnData = {};
            _iterator4 = _createForOfIteratorHelper(fields);
            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                _field2 = _step4.value;
                // get the values from the vector tile layer
                columnData[_field2.name] = getValuesFromVectorTileLayer(datasetId, layers, _field2);
              }
              // convert columnData to rowObjects
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
            for (i = 0; i < numRows; i++) {
              rowObject = {};
              _iterator5 = _createForOfIteratorHelper(fields);
              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  field = _step5.value;
                  rowObject[field.name] = columnData[field.name][i];
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
              rowObjects.push(rowObject);
            }
          } else {
            for (_i = 0; _i < numRows; _i++) {
              _rowObject = {};
              _iterator6 = _createForOfIteratorHelper(fields);
              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  _field3 = _step6.value;
                  value = originalDataset.getValue(_field3.name, _i);
                  _rowObject[_field3.name] = value;
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
              rowObjects.push(_rowObject);
            }
          }

          // add the query result to the original dataset or update the field values from query result
          _loop = /*#__PURE__*/_regenerator["default"].mark(function _loop() {
            var queryRow, rowObject;
            return _regenerator["default"].wrap(function _loop$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  queryRow = result[_i2];
                  rowObject = rowObjects[_i2]; // iterate over the keys of queryRow
                  Object.keys(queryRow).forEach(function (key) {
                    var value = queryRow[key];
                    rowObject[key] = value;
                  });
                case 3:
                case "end":
                  return _context.stop();
              }
            }, _loop);
          });
          _i2 = 0;
        case 10:
          if (!(_i2 < numRows)) {
            _context2.next = 15;
            break;
          }
          return _context2.delegateYield(_loop(), "t0", 12);
        case 12:
          _i2++;
          _context2.next = 10;
          break;
        case 15:
          _context2.next = 17;
          return (0, _processors.processFileData)({
            content: {
              fileName: newDatasetName,
              data: rowObjects
            },
            fileCache: []
          });
        case 17:
          processedData = _context2.sent;
          return _context2.abrupt("return", processedData);
        case 19:
        case "end":
          return _context2.stop();
      }
    }, _callee);
  }));
  return _appendColumnsToDataset.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,