"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RasterLayerResources = void 0;
exports.bandIndexesToURLParams = bandIndexesToURLParams;
exports.getMeshMaxError = getMeshMaxError;
exports.getSingleCOGUrlParams = getSingleCOGUrlParams;
exports.getStacApiUrlParams = getStacApiUrlParams;
exports.getTerrainUrl = getTerrainUrl;
exports.getTitilerPathMapping = getTitilerPathMapping;
exports.getTitilerUrl = getTitilerUrl;
var _utils = require("@kepler.gl/utils");
var _config = require("./config");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/* Utilities for creating request urls */
/* global URLSearchParams */

var TILE_SIZE = 256;
var STAC_SEARCH_DATA = {
  // Commenting out Microsoft for now
  // microsoft: {
  //   sentinelCollectionName: ['sentinel-2-l2a'],
  //   stacSearchUrl: 'https://planetarycomputer.microsoft.com/api/stac/v1/search'
  // },
  'earth-search': {
    sentinelCollectionName: ['sentinel-s2-l2a-cogs'],
    stacSearchUrl: 'https://earth-search.aws.element84.com/v0/search'
  }
};

/**
 * Construct query parameters to be sent to STAC API instance
 */
function constructStacApiQuery(options) {
  var _STAC_SEARCH_DATA$sta;
  var stac = options.stac,
    startDate = options.startDate,
    endDate = options.endDate,
    stacSearchProvider = options.stacSearchProvider;

  // This is a quick hack to support the same Sentinel 2 STAC object for searching both microsoft
  // and AWS
  var collections = ((_STAC_SEARCH_DATA$sta = STAC_SEARCH_DATA[stacSearchProvider]) === null || _STAC_SEARCH_DATA$sta === void 0 ? void 0 : _STAC_SEARCH_DATA$sta.sentinelCollectionName) || [stac.id];
  return {
    collections: collections,
    datetime: "".concat(startDate, "T00:00:00Z/").concat(endDate, "T23:59:59Z")
  };
}

/**
 * Perform lookup to find url of desired STAC search provider
 */
function getStacApiUrl(stacSearchProvider) {
  return STAC_SEARCH_DATA[stacSearchProvider].stacSearchUrl;
}
function getStacApiUrlParams(options) {
  var stac = options.stac,
    loadAssetIds = options.loadAssetIds,
    stacSearchProvider = options.stacSearchProvider,
    _options$mask = options.mask,
    mask = _options$mask === void 0 ? false : _options$mask;
  var query = options._stacQuery || JSON.stringify(constructStacApiQuery(options));
  var searchUrl = getStacApiUrl(stacSearchProvider);
  if (!searchUrl) {
    return null;
  }
  var bandIndexAssets = loadAssetIds.map(function (assetId) {
    var mapping = _config.DEFAULT_BAND_MAPPINGS[stac.id];
    if (!mapping) {
      // TODO provide a UI to setup custom band mapping
      return assetId;
    }
    var bandIndex = mapping[assetId];
    if (bandIndex) {
      return bandIndex;
    }

    // This is most likely incorrect as BXX is expected, not common name
    return assetId;
  });
  return new URLSearchParams({
    assets: bandIndexAssets.join(','),
    return_mask: String(mask),
    url: searchUrl,
    query: query
  });
}
function bandIndexesToURLParams(urlParams, bandIndexes, useNewFormat) {
  if (useNewFormat) {
    // for newer titiler versions
    bandIndexes.forEach(function (bandIndex) {
      urlParams.append('bidx', String(bandIndex + 1));
    });
  } else {
    // The parameter in titiler is `bands` for landsat/sentinel and `bidx` for COG
    // GDAL/Rasterio/rio-tiler start band indexing at one
    // older titiler versions
    urlParams.append('bidx', bandIndexes.map(function (val) {
      return val + 1;
    }).join(','));
  }
  return urlParams;
}
function getSingleCOGUrlParams(options) {
  var _stac$rasterServerUse;
  var stac = options.stac,
    loadAssetId = options.loadAssetId,
    loadBandIndexes = options.loadBandIndexes,
    _options$mask2 = options.mask,
    mask = _options$mask2 === void 0 ? false : _options$mask2;
  var url = stac.assets[loadAssetId].href;
  if (!url) {
    return null;
  }
  var urlParams = new URLSearchParams({
    return_mask: String(mask),
    url: url
  });
  return bandIndexesToURLParams(urlParams, loadBandIndexes, Boolean((_stac$rasterServerUse = stac.rasterServerUseLatestTitiler) !== null && _stac$rasterServerUse !== void 0 ? _stac$rasterServerUse : (0, _utils.getApplicationConfig)().rasterServerUseLatestTitiler));
}

/**
 * Construct full URL to load tile from a Titiler-based backend
 */
function getTitilerUrl(options) {
  var _stac$rasterTileServe;
  // mask Set to false for mosaics because entire image is assumed to be valid
  var stac = options.stac,
    useSTACSearching = options.useSTACSearching,
    x = options.x,
    y = options.y,
    z = options.z;
  if (!((_stac$rasterTileServe = stac.rasterTileServerUrls) !== null && _stac$rasterTileServe !== void 0 && _stac$rasterTileServe.length)) {
    throw new Error('No raster tile servers');
  }
  var pathStem = getTitilerPathMapping(stac, useSTACSearching);
  var scale = TILE_SIZE === 512 ? '@2x' : '';
  var domain = chooseDomain(stac.rasterTileServerUrls, x, y);
  return {
    url: "".concat(domain, "/").concat(pathStem, "/tiles/WebMercatorQuad/").concat(z, "/").concat(x, "/").concat(y).concat(scale, ".npy"),
    rasterServerUrl: domain
  };
}
function getTitilerPathMapping(stac) {
  var useSTACSearching = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  if (useSTACSearching) {
    return 'stac/mosaic';
  }
  return 'cog';
}

/**
 * Choose from available domains to load images from
 *
 * @param x  x tile index
 * @param y  y tile index
 *
 * @return domain
 */
function chooseDomain(domains, x, y) {
  var index = Math.abs(x + y) % domains.length;
  return domains[index];
}
function getTerrainUrl(rasterTileServerUrls, x, y, z, meshMaxError) {
  var scale = TILE_SIZE === 512 ? '@2x' : '';
  var params = new URLSearchParams({
    url: 'terrarium',
    mesh_max_error: meshMaxError.toFixed(2)
  });
  var domain = chooseDomain(rasterTileServerUrls, x, y);
  var baseUrl = "".concat(domain, "/mesh/tiles/").concat(z, "/").concat(x, "/").concat(y).concat(scale, ".terrain?");
  return {
    url: baseUrl + params.toString(),
    rasterServerUrl: domain
  };
}

/**
 * get mesh max error for z value
 * @param z mercator tile z coord
 * @param multiplier multipler applied to default error
 *
 * Uses suggestion from here
 * https://www.linkedin.com/pulse/fast-cesium-terrain-rendering-new-quantized-mesh-output-alvaro-huarte/
 */
function getMeshMaxError(z, multiplier) {
  return 77067.34 / (1 << z) * multiplier;
}
var RasterLayerResources = exports.RasterLayerResources = {
  rasterColorMap: function rasterColorMap(colormapId) {
    return "".concat((0, _utils.getApplicationConfig)().cdnUrl, "/raster/colormaps/").concat(colormapId, ".png");
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,