"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAssetRequest = getAssetRequest;
exports.getCategoricalColormapDataUrl = getCategoricalColormapDataUrl;
exports.getImageDataURL = getImageDataURL;
exports.getSTACImageRequests = getSTACImageRequests;
exports.loadImages = loadImages;
exports.loadSTACImageData = loadSTACImageData;
exports.loadTerrain = loadTerrain;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _core = require("@loaders.gl/core");
var _terrain = require("@loaders.gl/terrain");
var _memoize = _interopRequireDefault(require("lodash/memoize"));
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
var _utils = require("@kepler.gl/utils");
var _config = require("./config");
var _gpuUtils = require("./gpu-utils");
var _rasterTileUtils = require("./raster-tile-utils");
var _url = require("./url");
var _requestThrottle = require("./request-throttle");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * Utility functions to create objects to pass to deck.gl-raster
 */
/**
 * Create dataUrl image from bitmap array
 * @param bitmap - RGBA byte bitmap array
 * @param width - width of the image
 * @param height - height of the image
 * @returns base64 data url of the image
 */
function getImageDataURL(bitmap, width, height) {
  var canvas = document.createElement('canvas');
  if (!canvas.getContext) {
    return null;
  }
  canvas.setAttribute('width', "".concat(width));
  canvas.setAttribute('height', "".concat(height));
  var ctx = canvas.getContext('2d');
  if (!ctx) {
    return null;
  }
  for (var i = 0; i < width; i++) {
    var _bitmap$subarray = bitmap.subarray(i * 4, i * 4 + 4),
      _bitmap$subarray2 = (0, _slicedToArray2["default"])(_bitmap$subarray, 4),
      r = _bitmap$subarray2[0],
      g = _bitmap$subarray2[1],
      b = _bitmap$subarray2[2],
      a = _bitmap$subarray2[3];
    if (a !== 0) {
      ctx.fillStyle = "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
      ctx.fillRect(i, 0, 1, 1);
    }
  }
  return canvas.toDataURL('image/png');
}

// Global multiplier to be applied to terrain mesh resolution
// A smaller number towards 0 will cause generation of mesh data with a smaller max error and thus a
// higher resolution mesh
var MESH_MULTIPLIER = 0.8;

/**
 * Multiplier used to calculate the height of terrain mesh skirts.
 * The skirt is an extension of the terrain mesh that helps prevent gaps between terrain tiles
 * by extending the mesh edges downward. This multiplier is applied to the mesh's maximum error
 * to determine the skirt height, ensuring no gaps are visible.
 */
var SKIRT_HEIGHT_MULTIPLIER = 3;

/**
 * Load images required for raster tile
 * @param assetRequests - STAC asset requests
 * @param colormapId - colormap id
 * @param categoricalOptions - categorical options requred for making of categorical colormap
 * @returns images map
 */
function loadImages(_x, _x2, _x3) {
  return _loadImages.apply(this, arguments);
}
/**
 * Cache loading of colormap. Each colormap file is very small, on the order of a few hundred bytes,
 * so a global cache like this is not expected to eat up too much memory.
 * Most colormaps are loaded from CDN. In case colormapId is categorical, the image is created from
 * categorical colormap options.
 * NOTE: this implementation will cache promise rejections as well, but since these are small files
 * on the CDN, that's an acceptable risk for the time being.
 */
function _loadImages() {
  _loadImages = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(assetRequests, colormapId, categoricalOptions) {
    var _yield$Promise$all, _yield$Promise$all2, stacImages, colormap, imageColormap;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return Promise.all([loadSTACImageData(assetRequests), colormapId !== _config.CATEGORICAL_COLORMAP_ID && memoizedLoadColormap(colormapId) || null]);
        case 2:
          _yield$Promise$all = _context.sent;
          _yield$Promise$all2 = (0, _slicedToArray2["default"])(_yield$Promise$all, 2);
          stacImages = _yield$Promise$all2[0];
          colormap = _yield$Promise$all2[1];
          imageColormap = colormap;
          if (colormapId === _config.CATEGORICAL_COLORMAP_ID) {
            imageColormap = (0, _gpuUtils.generateCategoricalColormapTexture)(categoricalOptions);
          }
          return _context.abrupt("return", _objectSpread(_objectSpread({}, stacImages), {}, {
            imageColormap: imageColormap
          }));
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _loadImages.apply(this, arguments);
}
var memoizedLoadColormap = (0, _memoize["default"])(function (colormapId) {
  if (colormapId === _config.CATEGORICAL_COLORMAP_ID) {
    return null;
  } else {
    return loadColormap(colormapId);
  }
});

/**
 * Load PNG colormap.
 * Since the colormap files are so small (couple hundred bytes), we load them always, even for an
 * RGB composite where the colormap won't be used. After the first load, the colormap should be
 * loaded from the disk cache. By loading always, we can prevent unnecessarily triggering
 * getTileData, which reduces flashing from reloading the images on the GPU.
 *
 * @param colormapId      ID of colormap PNG
 *
 * @returns image object to pass to Texture2D constructor
 */
function loadColormap(_x4) {
  return _loadColormap.apply(this, arguments);
}
/**
 * Get the request data for loading a single or multi asset STAC metadata object.
 * @param options STAC metadata object and user-defined parameters.
 * @returns Image data, or null if the STAC metadata object is not supported.
 */
function _loadColormap() {
  _loadColormap = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(colormapId) {
    var request;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          if (colormapId) {
            _context2.next = 2;
            break;
          }
          return _context2.abrupt("return", null);
        case 2:
          _context2.next = 4;
          return getAssetRequest({
            url: _url.RasterLayerResources.rasterColorMap(colormapId),
            rasterServerUrl: '',
            options: {}
          });
        case 4:
          request = _context2.sent;
          return _context2.abrupt("return", (0, _gpuUtils.loadImage)(request.url, _gpuUtils.COLORMAP_TEXTURE_PARAMETERS, request.options));
        case 6:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _loadColormap.apply(this, arguments);
}
function getSTACImageRequests(_x5) {
  return _getSTACImageRequests.apply(this, arguments);
} // TODO: image loading should really be _driven by the modules_
// E.g. the user chooses what kind of pipeline they want on the GPU, then from those modules we can
// see whether the user wants the pansharpened band, colormap, etc
/**
 * Load images defined by a STAC metadata object plus user-defined parameters
 */
function _getSTACImageRequests() {
  _getSTACImageRequests = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(options) {
    var loadAssetIds, request;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          loadAssetIds = options.loadAssetIds;
          if (!(loadAssetIds.length === 1)) {
            _context3.next = 6;
            break;
          }
          _context3.next = 4;
          return getSingleAssetSTACRequest(options);
        case 4:
          request = _context3.sent;
          return _context3.abrupt("return", request ? [request] : null);
        case 6:
          _context3.next = 8;
          return getMultiAssetSTACRequest(options);
        case 8:
          return _context3.abrupt("return", _context3.sent);
        case 9:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _getSTACImageRequests.apply(this, arguments);
}
function loadSTACImageData(_x6) {
  return _loadSTACImageData.apply(this, arguments);
}
/**
 * Utility function that forms an asset request based on given parameters.
 */
function _loadSTACImageData() {
  _loadSTACImageData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(requests) {
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          return _context4.abrupt("return", requests.length === 1 ? loadSingleAssetSTAC(requests[0]) : loadMultiAssetSTAC(requests));
        case 1:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _loadSTACImageData.apply(this, arguments);
}
function getAssetRequest(_x7) {
  return _getAssetRequest.apply(this, arguments);
}
/**
 * Utility function for forming a request for a single asset STAC metadata object.
 */
// eslint-disable-next-line complexity, max-statements
function _getAssetRequest() {
  _getAssetRequest = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(_ref) {
    var url, rasterServerUrl, params, options, _ref$useMask, useMask, responseRequiredBandIndices, requestUrl, requestParams, requestOptions, assetUrl;
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          url = _ref.url, rasterServerUrl = _ref.rasterServerUrl, params = _ref.params, options = _ref.options, _ref$useMask = _ref.useMask, useMask = _ref$useMask === void 0 ? true : _ref$useMask, responseRequiredBandIndices = _ref.responseRequiredBandIndices;
          requestUrl = url;
          requestParams = params !== null && params !== void 0 ? params : new URLSearchParams();
          requestOptions = options;
          assetUrl = requestParams ? "".concat(requestUrl, "?").concat(requestParams.toString()) : requestUrl;
          return _context5.abrupt("return", {
            url: assetUrl,
            rasterServerUrl: rasterServerUrl,
            options: requestOptions,
            useMask: useMask,
            responseRequiredBandIndices: responseRequiredBandIndices
          });
        case 6:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return _getAssetRequest.apply(this, arguments);
}
function getSingleAssetSTACRequest(_x8) {
  return _getSingleAssetSTACRequest.apply(this, arguments);
}
/**
 * Utility function for forming requests for a multi asset STAC metadata object.
 */
function _getSingleAssetSTACRequest() {
  _getSingleAssetSTACRequest = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(options) {
    var stac, loadAssetIds, loadBandIndexes, signal, useSTACSearching, _options$index, x, y, z, stacSearchProvider, startDate, endDate, _stacQuery, useMask, urlInfo, urlParams, responseRequiredBandIndices, asset;
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          stac = options.stac, loadAssetIds = options.loadAssetIds, loadBandIndexes = options.loadBandIndexes, signal = options.signal, useSTACSearching = options.useSTACSearching, _options$index = options.index, x = _options$index.x, y = _options$index.y, z = _options$index.z, stacSearchProvider = options.stacSearchProvider, startDate = options.startDate, endDate = options.endDate, _stacQuery = options._stacQuery;
          useMask = true; // Only a single URL because only a single asset
          urlInfo = null;
          urlParams = new URLSearchParams();
          responseRequiredBandIndices = loadBandIndexes;
          if (!(useSTACSearching && stac.type !== 'Feature')) {
            _context6.next = 10;
            break;
          }
          urlParams = (0, _url.getStacApiUrlParams)({
            stac: stac,
            stacSearchProvider: stacSearchProvider,
            startDate: startDate,
            endDate: endDate,
            mask: useMask,
            loadAssetIds: loadAssetIds,
            _stacQuery: _stacQuery
          });
          urlInfo = (0, _url.getTitilerUrl)({
            stac: stac,
            useSTACSearching: useSTACSearching,
            x: x,
            y: y,
            z: z
          });
          _context6.next = 17;
          break;
        case 10:
          if (!(stac.type === 'Feature')) {
            _context6.next = 16;
            break;
          }
          // stac is an Item
          urlParams = (0, _url.getSingleCOGUrlParams)({
            stac: stac,
            loadAssetId: loadAssetIds[0],
            loadBandIndexes: loadBandIndexes,
            mask: useMask
          });
          urlInfo = (0, _url.getTitilerUrl)({
            stac: stac,
            useSTACSearching: useSTACSearching,
            x: x,
            y: y,
            z: z
          });
          responseRequiredBandIndices = null;
          _context6.next = 17;
          break;
        case 16:
          return _context6.abrupt("return", null);
        case 17:
          if (urlInfo.url) {
            _context6.next = 19;
            break;
          }
          return _context6.abrupt("return", null);
        case 19:
          _context6.next = 21;
          return getAssetRequest(_objectSpread(_objectSpread({}, urlInfo), {}, {
            params: urlParams,
            options: {
              signal: signal
            },
            useMask: useMask,
            responseRequiredBandIndices: responseRequiredBandIndices
          }));
        case 21:
          asset = _context6.sent;
          return _context6.abrupt("return", _objectSpread(_objectSpread({}, asset), {}, {
            rasterServerMaxRetries: stac.rasterServerMaxRetries,
            rasterServerRetryDelay: stac.rasterServerRetryDelay,
            rasterServerServerErrorsToRetry: stac.rasterServerServerErrorsToRetry,
            rasterServerMaxPerServerRequests: stac.rasterServerMaxPerServerRequests
          }));
        case 23:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return _getSingleAssetSTACRequest.apply(this, arguments);
}
function getMultiAssetSTACRequest(_x9) {
  return _getMultiAssetSTACRequest.apply(this, arguments);
}
/**
 * Load image data when consolidated in bands within a single STAC Asset
 */
function _getMultiAssetSTACRequest() {
  _getMultiAssetSTACRequest = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(options) {
    var stac, loadAssetIds, loadBandIndexes, signal, useSTACSearching, stacSearchProvider, startDate, endDate, _options$index2, x, y, z, _stacQuery, requestData, requestMask, assets;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          stac = options.stac, loadAssetIds = options.loadAssetIds, loadBandIndexes = options.loadBandIndexes, signal = options.signal, useSTACSearching = options.useSTACSearching, stacSearchProvider = options.stacSearchProvider, startDate = options.startDate, endDate = options.endDate, _options$index2 = options.index, x = _options$index2.x, y = _options$index2.y, z = _options$index2.z, _stacQuery = options._stacQuery; // Multiple urls, one for each asset
          requestData = []; // We assume that there's only one validity mask for the entire asset, and therefore any of the
          // requests would return the same validity bitmap. Therefore we only request a mask for the first
          // asset
          requestMask = new Array(loadAssetIds.length).fill(false);
          requestMask[0] = true;
          if (useSTACSearching && stac.type !== 'Feature') {
            requestData = zip(loadAssetIds, requestMask).map(function (_ref2) {
              var _ref3 = (0, _slicedToArray2["default"])(_ref2, 2),
                assetId = _ref3[0],
                mask = _ref3[1];
              var params = (0, _url.getStacApiUrlParams)({
                stac: stac,
                stacSearchProvider: stacSearchProvider,
                startDate: startDate,
                endDate: endDate,
                mask: mask,
                loadAssetIds: [assetId],
                _stacQuery: _stacQuery
              });
              var urlInfo = (0, _url.getTitilerUrl)({
                stac: stac,
                useSTACSearching: useSTACSearching,
                x: x,
                y: y,
                z: z
              });
              return _objectSpread(_objectSpread({}, urlInfo), {}, {
                params: params
              });
            });
          } else if (stac.type === 'Feature') {
            requestData = zip3(loadAssetIds, loadBandIndexes, requestMask).map(function (_ref4) {
              var _ref5 = (0, _slicedToArray2["default"])(_ref4, 3),
                assetId = _ref5[0],
                bandIndex = _ref5[1],
                mask = _ref5[2];
              var params = (0, _url.getSingleCOGUrlParams)({
                stac: stac,
                loadAssetId: assetId,
                loadBandIndexes: [bandIndex],
                mask: mask
              });
              var urlInfo = (0, _url.getTitilerUrl)({
                stac: stac,
                useSTACSearching: useSTACSearching,
                x: x,
                y: y,
                z: z
              });
              return _objectSpread(_objectSpread({}, urlInfo), {}, {
                params: params
              });
            });
          }
          if (!isValidRequestData(requestData)) {
            _context7.next = 10;
            break;
          }
          _context7.next = 8;
          return Promise.all(requestData.map(function (request) {
            var _request$options;
            return getAssetRequest(_objectSpread(_objectSpread({}, request), {}, {
              options: (_request$options = request.options) !== null && _request$options !== void 0 ? _request$options : {
                signal: signal
              }
            }));
          }));
        case 8:
          assets = _context7.sent;
          return _context7.abrupt("return", assets.map(function (asset) {
            return _objectSpread(_objectSpread({}, asset), {}, {
              rasterServerMaxRetries: options.stac.rasterServerMaxRetries,
              rasterServerRetryDelay: options.stac.rasterServerRetryDelay,
              rasterServerServerErrorsToRetry: options.stac.rasterServerServerErrorsToRetry,
              rasterServerMaxPerServerRequests: options.stac.rasterServerMaxPerServerRequests
            });
          }));
        case 10:
          return _context7.abrupt("return", null);
        case 11:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return _getMultiAssetSTACRequest.apply(this, arguments);
}
function loadSingleAssetSTAC(_x10) {
  return _loadSingleAssetSTAC.apply(this, arguments);
}
/**
 * Load image data when split among multiple STAC Assets
 */
function _loadSingleAssetSTAC() {
  _loadSingleAssetSTAC = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8(request) {
    var imageBands, imageMask, mappedImageBands;
    return _regenerator["default"].wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          _context8.next = 2;
          return (0, _gpuUtils.loadNpyArray)(request, true);
        case 2:
          imageBands = _context8.sent;
          if (imageBands) {
            _context8.next = 5;
            break;
          }
          return _context8.abrupt("return", {
            imageBands: imageBands
          });
        case 5:
          imageMask = request.useMask && imageBands.pop() || null;
          mappedImageBands = imageBands;
          if (request.responseRequiredBandIndices) {
            mappedImageBands = request.responseRequiredBandIndices.map(function (i) {
              return imageBands[i];
            });
          }
          return _context8.abrupt("return", {
            imageBands: mappedImageBands,
            imageMask: imageMask
          });
        case 9:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return _loadSingleAssetSTAC.apply(this, arguments);
}
function loadMultiAssetSTAC(_x11) {
  return _loadMultiAssetSTAC.apply(this, arguments);
}
/**
 * Iterate over two arrays simultaneously, similar to Python's zip builtin
 */
function _loadMultiAssetSTAC() {
  _loadMultiAssetSTAC = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9(requests) {
    var _results$;
    var results, imageMask, imageBands;
    return _regenerator["default"].wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          _context9.next = 2;
          return Promise.all(requests.map(function (request) {
            return (0, _gpuUtils.loadNpyArray)(request, true);
          }));
        case 2:
          results = _context9.sent;
          // The first request includes a mask
          imageMask = ((_results$ = results[0]) === null || _results$ === void 0 ? void 0 : _results$.pop()) || null;
          imageBands = results.flat().filter(function (band) {
            return band !== null;
          });
          return _context9.abrupt("return", {
            imageBands: imageBands,
            imageMask: imageMask
          });
        case 6:
        case "end":
          return _context9.stop();
      }
    }, _callee9);
  }));
  return _loadMultiAssetSTAC.apply(this, arguments);
}
function zip(a, b) {
  return a.map(function (k, i) {
    return [k, b[i]];
  });
}

/**
 * Iterate over three arrays simultaneously, similar to Python's zip builtin
 */
function zip3(a, b, c) {
  return a.map(function (k, i) {
    return [k, b[i], c[i]];
  });
}

/**
 * Type guard to check if all array elements are strings
 */
function isValidRequestData(arr) {
  return arr.every(function (x) {
    return typeof (x === null || x === void 0 ? void 0 : x.url) === 'string' && (x === null || x === void 0 ? void 0 : x.params) !== null;
  });
}

/**
 * Create base64 image data url for categorical colormap
 * @param categoricalOptions - color map configuration and min-max values of categorical band
 * @returns base64 image data url
 */
function getCategoricalColormapDataUrl(categoricalOptions) {
  var bitmap = (0, _rasterTileUtils.generateCategoricalBitmapArray)(categoricalOptions);
  if (!bitmap) {
    return null;
  }
  return getImageDataURL(bitmap, _rasterTileUtils.CATEGORICAL_TEXTURE_WIDTH, 1);
}

/**
 * Load terrain mesh from raster tile server
 * @param props - properties to load terrain data
 * @returns terrain mesh data
 */
function loadTerrain(_x12) {
  return _loadTerrain.apply(this, arguments);
}
function _loadTerrain() {
  _loadTerrain = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee11(props) {
    var _props$index, x, y, z, boundsForGeometry, signal, rasterTileServerUrls, rasterServerMaxRetries, rasterServerMaxPerServerRequests, meshMaxError, terrainUrlInfo, loaderOptions, numAttempts, mesh;
    return _regenerator["default"].wrap(function _callee11$(_context11) {
      while (1) switch (_context11.prev = _context11.next) {
        case 0:
          _props$index = props.index, x = _props$index.x, y = _props$index.y, z = _props$index.z, boundsForGeometry = props.boundsForGeometry, signal = props.signal, rasterTileServerUrls = props.rasterTileServerUrls, rasterServerMaxRetries = props.rasterServerMaxRetries, rasterServerMaxPerServerRequests = props.rasterServerMaxPerServerRequests;
          meshMaxError = (0, _url.getMeshMaxError)(z, MESH_MULTIPLIER);
          terrainUrlInfo = (0, _url.getTerrainUrl)(rasterTileServerUrls, x, y, z, meshMaxError);
          loaderOptions = (0, _constants.getLoaderOptions)();
          numAttempts = 1 + (rasterServerMaxRetries !== null && rasterServerMaxRetries !== void 0 ? rasterServerMaxRetries : (0, _utils.getApplicationConfig)().rasterServerMaxRetries);
          _context11.next = 7;
          return (0, _requestThrottle.getRequestThrottle)().throttleRequest(terrainUrlInfo.rasterServerUrl, /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10() {
            var attempt, _ref7, _props$rasterServerSe, _error$response, _props$rasterServerRe;
            return _regenerator["default"].wrap(function _callee10$(_context10) {
              while (1) switch (_context10.prev = _context10.next) {
                case 0:
                  attempt = 0;
                case 1:
                  if (!(attempt < numAttempts)) {
                    _context10.next = 17;
                    break;
                  }
                  _context10.prev = 2;
                  _context10.next = 5;
                  return (0, _core.load)(terrainUrlInfo.url, _terrain.QuantizedMeshLoader, {
                    fetch: {
                      signal: signal
                    },
                    'quantized-mesh': _objectSpread(_objectSpread({}, loaderOptions['quantized-mesh']), {}, {
                      bounds: boundsForGeometry,
                      skirtHeight: meshMaxError * SKIRT_HEIGHT_MULTIPLIER
                    })
                  });
                case 5:
                  return _context10.abrupt("return", _context10.sent);
                case 8:
                  _context10.prev = 8;
                  _context10.t0 = _context10["catch"](2);
                  if (!(attempt < numAttempts && _context10.t0 instanceof _core.FetchError && (_ref7 = (_props$rasterServerSe = props.rasterServerServerErrorsToRetry) !== null && _props$rasterServerSe !== void 0 ? _props$rasterServerSe : (0, _utils.getApplicationConfig)().rasterServerServerErrorsToRetry) !== null && _ref7 !== void 0 && _ref7.includes((_error$response = _context10.t0.response) === null || _error$response === void 0 ? void 0 : _error$response.status))) {
                    _context10.next = 14;
                    break;
                  }
                  _context10.next = 13;
                  return (0, _commonUtils.sleep)((_props$rasterServerRe = props.rasterServerRetryDelay) !== null && _props$rasterServerRe !== void 0 ? _props$rasterServerRe : (0, _utils.getApplicationConfig)().rasterServerRetryDelay);
                case 13:
                  return _context10.abrupt("continue", 14);
                case 14:
                  attempt++;
                  _context10.next = 1;
                  break;
                case 17:
                  return _context10.abrupt("return", null);
                case 18:
                case "end":
                  return _context10.stop();
              }
            }, _callee10, null, [[2, 8]]);
          })), rasterServerMaxPerServerRequests);
        case 7:
          mesh = _context11.sent;
          return _context11.abrupt("return", mesh);
        case 9:
        case "end":
          return _context11.stop();
      }
    }, _callee11);
  }));
  return _loadTerrain.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,