"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRequestThrottle = getRequestThrottle;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _utils = require("@kepler.gl/utils");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var RequestThrottle = /*#__PURE__*/function () {
  function RequestThrottle() {
    (0, _classCallCheck2["default"])(this, RequestThrottle);
    (0, _defineProperty2["default"])(this, "serverQueues", void 0);
    (0, _defineProperty2["default"])(this, "maxConcurrentRequests", void 0);
    this.serverQueues = {};
    this.maxConcurrentRequests = (0, _utils.getApplicationConfig)().rasterServerMaxPerServerRequests;
  }
  return (0, _createClass2["default"])(RequestThrottle, [{
    key: "getServerQueue",
    value: function getServerQueue(serverKey) {
      if (!this.serverQueues[serverKey]) {
        this.serverQueues[serverKey] = {
          activeRequests: 0,
          queue: []
        };
      }
      return this.serverQueues[serverKey];
    }
  }, {
    key: "getDebugInfo",
    value: function getDebugInfo() {
      var stats = Object.entries(this.serverQueues).map(function (_ref) {
        var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
          serverKey = _ref2[0],
          queue = _ref2[1];
        return "Server: ".concat(serverKey, "\n  Active Requests: ").concat(queue.activeRequests, "\n  Queued Requests: ").concat(queue.queue.length);
      });
      return stats.length > 0 ? "Request Throttle Stats:\n".concat(stats.join('\n')) : 'No active server queues';
    }
  }, {
    key: "throttleRequest",
    value: function () {
      var _throttleRequest = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(serverKey, requestFunction, maxConcurrentRequestsOverride) {
        var serverQueue, maxConcurrentRequests, nextRequest;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              serverQueue = this.getServerQueue(serverKey);
              maxConcurrentRequests = typeof maxConcurrentRequestsOverride === 'number' ? maxConcurrentRequestsOverride : this.maxConcurrentRequests;
              if (!(serverQueue.activeRequests >= maxConcurrentRequests && Boolean(maxConcurrentRequests))) {
                _context2.next = 5;
                break;
              }
              _context2.next = 5;
              return new Promise(function (resolve) {
                serverQueue.queue.push( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
                  var result;
                  return _regenerator["default"].wrap(function _callee$(_context) {
                    while (1) switch (_context.prev = _context.next) {
                      case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return requestFunction();
                      case 3:
                        result = _context.sent;
                        resolve();
                        return _context.abrupt("return", result);
                      case 8:
                        _context.prev = 8;
                        _context.t0 = _context["catch"](0);
                        resolve();
                        return _context.abrupt("return", null);
                      case 12:
                      case "end":
                        return _context.stop();
                    }
                  }, _callee, null, [[0, 8]]);
                })));
              });
            case 5:
              serverQueue.activeRequests++;
              _context2.prev = 6;
              _context2.next = 9;
              return requestFunction();
            case 9:
              return _context2.abrupt("return", _context2.sent);
            case 10:
              _context2.prev = 10;
              serverQueue.activeRequests--;
              // Process next request in queue if any
              nextRequest = serverQueue.queue.shift();
              if (nextRequest) {
                nextRequest();
              }
              return _context2.finish(10);
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[6,, 10, 15]]);
      }));
      function throttleRequest(_x, _x2, _x3) {
        return _throttleRequest.apply(this, arguments);
      }
      return throttleRequest;
    }()
  }]);
}(); // Create a singleton instance
var requestThrottle = null;
function getRequestThrottle() {
  if (!requestThrottle) requestThrottle = new RequestThrottle();
  return requestThrottle;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,