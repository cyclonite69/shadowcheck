"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CSV_NULLS = exports.COLUMN_TYPES_PRIORITIES = void 0;
exports.columnTypeToFieldType = columnTypeToFieldType;
exports.consolidateFieldTypes = consolidateFieldTypes;
exports.extendFieldsWithDuckDBColumnType = extendFieldsWithDuckDBColumnType;
exports.fieldTypeToColumnType = fieldTypeToColumnType;
exports.processCsvRowObject = processCsvRowObject;
exports.processGeojson = processGeojson;
exports.processKeplerglJSONforDuckDb = processKeplerglJSONforDuckDb;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _geojsonNormalize = _interopRequireDefault(require("@mapbox/geojson-normalize"));
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
var _processors = require("@kepler.gl/processors");
var _utils = require("@kepler.gl/utils");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var CSV_NULLS = exports.CSV_NULLS = /^(null|NULL|Null|NaN|\/N||)$/;
var COLUMN_TYPES = /*#__PURE__*/function (COLUMN_TYPES) {
  COLUMN_TYPES["GEOMETRY"] = "GEOMETRY";
  COLUMN_TYPES["BOOLEAN"] = "BOOLEAN";
  COLUMN_TYPES["INTEGER"] = "INTEGER";
  COLUMN_TYPES["FLOAT"] = "FLOAT";
  COLUMN_TYPES["TIME"] = "TIME";
  COLUMN_TYPES["DATE"] = "DATE";
  COLUMN_TYPES["TIMESTAMP"] = "TIMESTAMP";
  COLUMN_TYPES["VARCHAR"] = "VARCHAR";
  return COLUMN_TYPES;
}(COLUMN_TYPES || {}); // https://duckdb.org/docs/data/csv/auto_detection.html#type-detection
var COLUMN_TYPES_PRIORITIES = exports.COLUMN_TYPES_PRIORITIES = ['GEOMETRY', 'BOOLEAN', 'INTEGER', 'FLOAT', 'TIME', 'DATE', 'TIMESTAMP', 'VARCHAR'];
function columnTypeToFieldType(columnType) {
  switch (columnType) {
    case COLUMN_TYPES.BOOLEAN:
      return _constants.ALL_FIELD_TYPES["boolean"];
    case COLUMN_TYPES.DATE:
      return _constants.ALL_FIELD_TYPES.date;
    case COLUMN_TYPES.INTEGER:
      return _constants.ALL_FIELD_TYPES.integer;
    case COLUMN_TYPES.FLOAT:
      return _constants.ALL_FIELD_TYPES.real;
    case COLUMN_TYPES.VARCHAR:
      return _constants.ALL_FIELD_TYPES.string;
    case COLUMN_TYPES.TIMESTAMP:
      return _constants.ALL_FIELD_TYPES.timestamp;
    case COLUMN_TYPES.GEOMETRY:
      return _constants.ALL_FIELD_TYPES.geojson;
    default:
      // is there any other type we didn't cover?
      console.warn("Unsupported DuckDB Column type: ".concat(columnType));
      return null;
  }
}
function fieldTypeToColumnType(fieldType) {
  switch (fieldType) {
    case _constants.ALL_FIELD_TYPES["boolean"]:
      return COLUMN_TYPES.BOOLEAN;
    case _constants.ALL_FIELD_TYPES.date:
      return COLUMN_TYPES.DATE;
    case _constants.ALL_FIELD_TYPES.integer:
      return COLUMN_TYPES.INTEGER;
    case _constants.ALL_FIELD_TYPES.real:
      return COLUMN_TYPES.FLOAT;
    case _constants.ALL_FIELD_TYPES.string:
      return COLUMN_TYPES.VARCHAR;
    case _constants.ALL_FIELD_TYPES.timestamp:
      return COLUMN_TYPES.TIMESTAMP;
    case _constants.ALL_FIELD_TYPES.geojson:
      return COLUMN_TYPES.GEOMETRY;
    default:
      // is there any other type we didn't cover?
      console.warn("Unsupported Field type for DuckDb: ".concat(fieldType));
      return null;
  }
}

/*
 * Process uploaded exported Keplergl json map.
 * We need to populate field with proper DuckDb compatible type.
 */
// TODO: merge with logic from processCsvRowObject. Different formats: [[]] vs [{}]
function processKeplerglJSONforDuckDb(_x) {
  return _processKeplerglJSONforDuckDb.apply(this, arguments);
}
/*
 * Process uploaded csv returned by loaders.gl as row object and string value
 */
function _processKeplerglJSONforDuckDb() {
  _processKeplerglJSONforDuckDb = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(keplerJson) {
    var res, datasets, _iterator, _step, _loop2;
    return _regenerator["default"].wrap(function _callee$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          res = (0, _processors.processKeplerglJSON)(keplerJson);
          datasets = (res === null || res === void 0 ? void 0 : res.datasets) || [];
          _iterator = _createForOfIteratorHelper(datasets);
          _context2.prev = 3;
          _loop2 = /*#__PURE__*/_regenerator["default"].mark(function _loop2() {
            var dataset, rowsAll, fieldsAll, header, sample, schema, fieldsUpd;
            return _regenerator["default"].wrap(function _loop2$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  dataset = _step.value;
                  rowsAll = dataset.data.rows;
                  fieldsAll = dataset.data.fields;
                  header = fieldsAll.map(function (f) {
                    return f.name;
                  });
                  sample = (0, _commonUtils.getSampleForTypeAnalyze)({
                    fields: header,
                    rows: rowsAll
                  });
                  if (!(sample.length > 0)) {
                    _context.next = 11;
                    break;
                  }
                  _context.next = 8;
                  return sniffCsvSchema(sample);
                case 8:
                  _context.t0 = _context.sent;
                  _context.next = 12;
                  break;
                case 11:
                  _context.t0 = fieldsAll.reduce(function (acc, field) {
                    acc[field.name] = fieldTypeToColumnType(field.type);
                    return acc;
                  }, {});
                case 12:
                  schema = _context.t0;
                  fieldsUpd = consolidateFieldTypes(dataset.data.fields, schema);
                  dataset.data.fields = fieldsAll.map(function (f, i) {
                    return _objectSpread(_objectSpread({}, fieldsUpd[i]), f);
                  });
                case 15:
                case "end":
                  return _context.stop();
              }
            }, _loop2);
          });
          _iterator.s();
        case 6:
          if ((_step = _iterator.n()).done) {
            _context2.next = 10;
            break;
          }
          return _context2.delegateYield(_loop2(), "t0", 8);
        case 8:
          _context2.next = 6;
          break;
        case 10:
          _context2.next = 15;
          break;
        case 12:
          _context2.prev = 12;
          _context2.t1 = _context2["catch"](3);
          _iterator.e(_context2.t1);
        case 15:
          _context2.prev = 15;
          _iterator.f();
          return _context2.finish(15);
        case 18:
          return _context2.abrupt("return", res);
        case 19:
        case "end":
          return _context2.stop();
      }
    }, _callee, null, [[3, 12, 15, 18]]);
  }));
  return _processKeplerglJSONforDuckDb.apply(this, arguments);
}
function processCsvRowObject(_x2) {
  return _processCsvRowObject.apply(this, arguments);
}
function _processCsvRowObject() {
  _processCsvRowObject = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(rawData) {
    var header, sample, schema, fieldsWAnalyzerType, fields;
    return _regenerator["default"].wrap(function _callee2$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (!(!Array.isArray(rawData) || !rawData.length)) {
            _context3.next = 2;
            break;
          }
          return _context3.abrupt("return", {
            fields: [],
            rows: []
          });
        case 2:
          header = Object.keys(rawData[0]); // [lat, lng, value]
          // row object can still contain values like `Null` or `N/A`
          cleanUpFalsyCsvValue(rawData);
          sample = (0, _commonUtils.getSampleForTypeAnalyze)({
            fields: header,
            rows: rawData
          }); // add sample data to duckdb and get schema
          _context3.next = 7;
          return sniffCsvSchema(sample);
        case 7:
          schema = _context3.sent;
          fieldsWAnalyzerType = (0, _commonUtils.getFieldsFromData)(sample, header);
          fields = consolidateFieldTypes(fieldsWAnalyzerType, schema);
          return _context3.abrupt("return", {
            rows: rawData,
            fields: fields
          });
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee2);
  }));
  return _processCsvRowObject.apply(this, arguments);
}
function cleanUpFalsyCsvValue(rows) {
  var re = new RegExp(CSV_NULLS, 'g');
  var _loop = function _loop(i) {
    Object.keys(rows[i]).forEach(function (key) {
      // here we parse empty data as null
      if (typeof rows[i][key] === 'string' && rows[i][key].match(re)) {
        rows[i][key] = null;
      }
    });
  };
  for (var i = 0; i < rows.length; i++) {
    _loop(i);
  }
}

// align type analyzer types with DuckDB csv auto detected column types
function consolidateFieldTypes(fields, schema) {
  return fields.map(function (field) {
    var columnName = field.name;
    var detectedColumnType = schema[columnName];

    // TODO columnTypeToFieldType tranforms detected timestamps to string,
    // completely breaking time filter logic.
    // const fieldType = columnTypeToFieldType(detectedColumnType) || field.type;

    return _objectSpread(_objectSpread({}, field), {}, {
      // type: fieldType,
      duckDBColumnType: detectedColumnType
    });
  });
}
function toCSVRow(row) {
  return "".concat(row.map(function (r) {
    var rToStr = (0, _commonUtils.notNullorUndefined)(r) ? String(r).replace(/"/g, '\\"') : '';
    return rToStr.includes(',') ? "\"".concat(rToStr, "\"") : rToStr;
  }).join(','), "\n");
}

// Use DucckDB to detect csv column schema
function sniffCsvSchema(_x3) {
  return _sniffCsvSchema.apply(this, arguments);
}
function _sniffCsvSchema() {
  _sniffCsvSchema = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(sample) {
    var headerRow, csvContent, db, c, fileName, result, schemaResult, columns, schema, i;
    return _regenerator["default"].wrap(function _callee3$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          if (!(!Array.isArray(sample) || sample.length < 0)) {
            _context4.next = 2;
            break;
          }
          return _context4.abrupt("return");
        case 2:
          headerRow = toCSVRow(Object.keys(sample[0]));
          csvContent = sample.reduce(function (accu, row) {
            return "".concat(accu).concat(toCSVRow(Object.values(row)));
          }, headerRow);
          db = (0, _utils.getApplicationConfig)().database;
          if (db) {
            _context4.next = 8;
            break;
          }
          console.error('The database is not configured properly.');
          return _context4.abrupt("return");
        case 8:
          _context4.next = 10;
          return db.connect();
        case 10:
          c = _context4.sent;
          fileName = (0, _commonUtils.generateHashId)();
          _context4.next = 14;
          return db.registerFileText("".concat(fileName, "-").concat(_commonUtils.generateHashId, ".csv"), csvContent);
        case 14:
          _context4.next = 16;
          return c.query("\n        FROM sniff_csv('".concat(fileName, "-").concat(_commonUtils.generateHashId, ".csv', \n        sample_size = 500,\n        auto_type_candidates = ['FLOAT', 'INTEGER', 'TIMESTAMP', 'DATE', 'TIME', 'VARCHAR', 'BOOLEAN']);\n    "));
        case 16:
          result = _context4.sent;
          schemaResult = result.toArray().map(function (row) {
            return row.toJSON();
          });
          columns = schemaResult[0].Columns;
          schema = {};
          for (i = 0; i < columns.length; i++) {
            schema[columns.get(i).name] = columns.get(i).type;
          }
          return _context4.abrupt("return", schema);
        case 22:
        case "end":
          return _context4.stop();
      }
    }, _callee3);
  }));
  return _sniffCsvSchema.apply(this, arguments);
}
function processGeojson(rawData) {
  var normalizedGeojson = (0, _geojsonNormalize["default"])(rawData);
  if (!normalizedGeojson || !Array.isArray(normalizedGeojson.features)) {
    var error = new Error("Read File Failed: File is not a valid GeoJSON. Read more about [supported file format](".concat(_constants.GUIDES_FILE_FORMAT_DOC, ")"));
    throw error;
  }

  // @ts-expect-error Don't pass empty fields, as duck db outputs an empty dataset
  return {
    rows: normalizedGeojson
    // TODO get fields to preserve field names?
    // fields: []
  };
}

/**
 * A utility function to extend existing fields with native DuckDB column type.
 * @param fields Array of fields to extend.
 * @param typeOverrides An optional mapping of DuckDB column types to override.
 * @returns An array of fields with the DuckDB column type extended.
 */
function extendFieldsWithDuckDBColumnType(fields, typeOverrides) {
  var schema = fields.reduce(function (acc, field) {
    acc[field.name] = fieldTypeToColumnType(field.type);
    return acc;
  }, {});
  var updatedFields = consolidateFieldTypes(fields, schema);
  updatedFields.forEach(function (field) {
    if (typeOverrides[field.duckDBColumnType]) {
      field.duckDBColumnType = typeOverrides[field.duckDBColumnType];
    }
  });
  return updatedFields;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,