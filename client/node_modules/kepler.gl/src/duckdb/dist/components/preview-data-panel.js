"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewDataPanel = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = require("styled-components");
var _components = require("@kepler.gl/components");
var _processors = require("@kepler.gl/processors");
var _utils = require("@kepler.gl/utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var DEFAULT_ROWS_TO_CALCULATE_PREVIEW = 100;
// min Cellsize should take into account option button and field token
var minCellSize = 80;
// option buttons and field token
var optionButtonWidth = 20;
var pinButton = 20;
var cellPadding = 20;
var PreviewDataPanelWOTheme = function PreviewDataPanelWOTheme(_ref) {
  var result = _ref.result,
    _ref$rowsToCalculateP = _ref.rowsToCalculatePreview,
    rowsToCalculatePreview = _ref$rowsToCalculateP === void 0 ? DEFAULT_ROWS_TO_CALCULATE_PREVIEW : _ref$rowsToCalculateP,
    _ref$defaultPinnedCol = _ref.defaultPinnedColumns,
    defaultPinnedColumns = _ref$defaultPinnedCol === void 0 ? [] : _ref$defaultPinnedCol,
    theme = _ref.theme;
  var _useState = (0, _react.useState)(defaultPinnedColumns),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    pinnedColumns = _useState2[0],
    setPinnedColumns = _useState2[1];
  var fields = (0, _react.useMemo)(function () {
    return (0, _processors.arrowSchemaToFields)(result.table, result.tableDuckDBTypes);
  }, [result]);
  var dataContainer = (0, _react.useMemo)(function () {
    var cols = (0, _toConsumableArray2["default"])(Array(result.table.numCols).keys()).map(function (i) {
      return result.table.getChildAt(i);
    });
    var dataContainer = (0, _utils.createDataContainer)(cols, {
      fields: fields,
      inputDataFormat: _utils.DataForm.COLS_ARRAY
    });
    return dataContainer;
  }, [result, fields]);
  var columns = (0, _react.useMemo)(function () {
    return fields.map(function (f) {
      return f.name;
    });
  }, [fields]);
  var colMeta = (0, _react.useMemo)(function () {
    return fields.reduce(function (acc, _ref2, colIdx) {
      var name = _ref2.name,
        displayName = _ref2.displayName,
        type = _ref2.type,
        displayFormat = _ref2.displayFormat;
      return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, name, {
        // because '' || 'aaa' = 'aaa'
        name: displayName !== undefined ? displayName : name,
        displayName: displayName,
        displayFormat: displayFormat,
        type: type,
        colIdx: colIdx
      }));
    }, {});
  }, [fields]);
  var copyTableColumn = (0, _react.useCallback)(function (column) {
    var _navigator;
    var _colMeta$column = colMeta[column],
      colIdx = _colMeta$column.colIdx,
      type = _colMeta$column.type;
    var text = dataContainer.mapIndex(function (row) {
      return (0, _utils.parseFieldValue)(dataContainer.valueAt(row.index, colIdx), type);
    }).join('\n');
    (_navigator = navigator) === null || _navigator === void 0 || _navigator.clipboard.writeText(text);
  }, [colMeta, dataContainer]);
  var pinTableColumn = (0, _react.useCallback)(function (column) {
    return pinnedColumns.includes(column) ? setPinnedColumns(pinnedColumns.filter(function (c) {
      return c !== column;
    })) : setPinnedColumns([].concat((0, _toConsumableArray2["default"])(pinnedColumns), [column]));
  }, [pinnedColumns]);

  // TODO Potentially costly operation for non row based data containers. Revisit sorting below.
  var dataTableStyle = (0, _react.useMemo)(function () {
    return {
      minCellSize: minCellSize,
      cellPadding: cellPadding,
      optionsButton: theme.fieldTokenWidth + theme.fieldTokenRightMargin + optionButtonWidth + pinButton,
      fontSize: theme.cellFontSize,
      font: theme.fontFamily
    };
  }, [theme]);
  var cellSizeCache = (0, _react.useMemo)(function () {
    return columns.reduce(function (acc, column) {
      var _colMeta$column2 = colMeta[column],
        colIdx = _colMeta$column2.colIdx,
        displayName = _colMeta$column2.displayName,
        type = _colMeta$column2.type;
      return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, column, (0, _components.renderedSize)(_objectSpread({
        text: {
          dataContainer: dataContainer,
          column: displayName
        },
        colIdx: colIdx,
        type: type,
        numRowsToCalculate: rowsToCalculatePreview
      }, dataTableStyle))));
    }, {});
  }, [columns, colMeta, dataContainer, rowsToCalculatePreview, dataTableStyle]);
  return /*#__PURE__*/_react["default"].createElement(_components.DataTable, {
    colMeta: colMeta,
    columns: columns,
    cellSizeCache: cellSizeCache,
    dataContainer: dataContainer,
    pinnedColumns: pinnedColumns,
    copyTableColumn: copyTableColumn,
    pinTableColumn: pinTableColumn
  });
};
var PreviewDataPanel = exports.PreviewDataPanel = (0, _styledComponents.withTheme)(PreviewDataPanelWOTheme);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9jb21wb25lbnRzIiwiX3Byb2Nlc3NvcnMiLCJfdXRpbHMiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJERUZBVUxUX1JPV1NfVE9fQ0FMQ1VMQVRFX1BSRVZJRVciLCJtaW5DZWxsU2l6ZSIsIm9wdGlvbkJ1dHRvbldpZHRoIiwicGluQnV0dG9uIiwiY2VsbFBhZGRpbmciLCJQcmV2aWV3RGF0YVBhbmVsV09UaGVtZSIsIl9yZWYiLCJyZXN1bHQiLCJfcmVmJHJvd3NUb0NhbGN1bGF0ZVAiLCJyb3dzVG9DYWxjdWxhdGVQcmV2aWV3IiwiX3JlZiRkZWZhdWx0UGlubmVkQ29sIiwiZGVmYXVsdFBpbm5lZENvbHVtbnMiLCJ0aGVtZSIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsInBpbm5lZENvbHVtbnMiLCJzZXRQaW5uZWRDb2x1bW5zIiwiZmllbGRzIiwidXNlTWVtbyIsImFycm93U2NoZW1hVG9GaWVsZHMiLCJ0YWJsZSIsInRhYmxlRHVja0RCVHlwZXMiLCJkYXRhQ29udGFpbmVyIiwiY29scyIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJBcnJheSIsIm51bUNvbHMiLCJtYXAiLCJnZXRDaGlsZEF0IiwiY3JlYXRlRGF0YUNvbnRhaW5lciIsImlucHV0RGF0YUZvcm1hdCIsIkRhdGFGb3JtIiwiQ09MU19BUlJBWSIsImNvbHVtbnMiLCJmIiwibmFtZSIsImNvbE1ldGEiLCJyZWR1Y2UiLCJhY2MiLCJfcmVmMiIsImNvbElkeCIsImRpc3BsYXlOYW1lIiwidHlwZSIsImRpc3BsYXlGb3JtYXQiLCJ1bmRlZmluZWQiLCJjb3B5VGFibGVDb2x1bW4iLCJ1c2VDYWxsYmFjayIsImNvbHVtbiIsIl9uYXZpZ2F0b3IiLCJfY29sTWV0YSRjb2x1bW4iLCJ0ZXh0IiwibWFwSW5kZXgiLCJyb3ciLCJwYXJzZUZpZWxkVmFsdWUiLCJ2YWx1ZUF0IiwiaW5kZXgiLCJqb2luIiwibmF2aWdhdG9yIiwiY2xpcGJvYXJkIiwid3JpdGVUZXh0IiwicGluVGFibGVDb2x1bW4iLCJpbmNsdWRlcyIsImMiLCJjb25jYXQiLCJkYXRhVGFibGVTdHlsZSIsIm9wdGlvbnNCdXR0b24iLCJmaWVsZFRva2VuV2lkdGgiLCJmaWVsZFRva2VuUmlnaHRNYXJnaW4iLCJmb250U2l6ZSIsImNlbGxGb250U2l6ZSIsImZvbnQiLCJmb250RmFtaWx5IiwiY2VsbFNpemVDYWNoZSIsIl9jb2xNZXRhJGNvbHVtbjIiLCJyZW5kZXJlZFNpemUiLCJudW1Sb3dzVG9DYWxjdWxhdGUiLCJjcmVhdGVFbGVtZW50IiwiRGF0YVRhYmxlIiwiUHJldmlld0RhdGFQYW5lbCIsImV4cG9ydHMiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50cy9wcmV2aWV3LWRhdGEtcGFuZWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCAqIGFzIGFycm93IGZyb20gJ2FwYWNoZS1hcnJvdyc7XG5pbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlU3RhdGUsIENTU1Byb3BlcnRpZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7d2l0aFRoZW1lfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7RGF0YVRhYmxlLCByZW5kZXJlZFNpemV9IGZyb20gJ0BrZXBsZXIuZ2wvY29tcG9uZW50cyc7XG5pbXBvcnQge2Fycm93U2NoZW1hVG9GaWVsZHN9IGZyb20gJ0BrZXBsZXIuZ2wvcHJvY2Vzc29ycyc7XG5pbXBvcnQge3BhcnNlRmllbGRWYWx1ZSwgY3JlYXRlRGF0YUNvbnRhaW5lciwgRGF0YUZvcm19IGZyb20gJ0BrZXBsZXIuZ2wvdXRpbHMnO1xuXG50eXBlIEJhc2VDb21wb25lbnRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdHlsZT86IENTU1Byb3BlcnRpZXM7XG59O1xuXG5jb25zdCBERUZBVUxUX1JPV1NfVE9fQ0FMQ1VMQVRFX1BSRVZJRVcgPSAxMDA7XG4vLyBtaW4gQ2VsbHNpemUgc2hvdWxkIHRha2UgaW50byBhY2NvdW50IG9wdGlvbiBidXR0b24gYW5kIGZpZWxkIHRva2VuXG5jb25zdCBtaW5DZWxsU2l6ZSA9IDgwO1xuLy8gb3B0aW9uIGJ1dHRvbnMgYW5kIGZpZWxkIHRva2VuXG5jb25zdCBvcHRpb25CdXR0b25XaWR0aCA9IDIwO1xuY29uc3QgcGluQnV0dG9uID0gMjA7XG5jb25zdCBjZWxsUGFkZGluZyA9IDIwO1xuXG5leHBvcnQgdHlwZSBDb2xNZXRhID0ge1xuICBba2V5OiBzdHJpbmddOiB7XG4gICAgY29sSWR4OiBudW1iZXI7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgRGF0YVRhYmxlU3R5bGUgPSB7XG4gIG1pbkNlbGxTaXplPzogbnVtYmVyO1xuICBjZWxsUGFkZGluZz86IG51bWJlcjtcbiAgZm9udFNpemU/OiBudW1iZXI7XG4gIGZvbnQ/OiBzdHJpbmc7XG4gIG9wdGlvbnNCdXR0b24/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBRdWVyeVJlc3VsdCA9IHtcbiAgdGFibGU6IGFycm93LlRhYmxlO1xuICB0YWJsZUR1Y2tEQlR5cGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xufTtcblxuZXhwb3J0IHR5cGUgUHJldmlld0RhdGFQYW5lbFByb3BzID0gQmFzZUNvbXBvbmVudFByb3BzICYge1xuICByZXN1bHQ6IFF1ZXJ5UmVzdWx0O1xuICByb3dzVG9DYWxjdWxhdGVQcmV2aWV3PzogbnVtYmVyO1xuICB0aGVtZT86IGFueTtcbiAgc2V0Q29sdW1uRGlzcGxheUZvcm1hdD86IChmb3JtYXRzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSkgPT4gdm9pZDtcbiAgZGVmYXVsdFBpbm5lZENvbHVtbnM/OiBzdHJpbmdbXTtcbiAgZGF0YVRhYmxlU3R5bGU6IERhdGFUYWJsZVN0eWxlO1xuICBvbkFkZFJlc3VsdFRvTWFwOiAocmVzdWx0OiBRdWVyeVJlc3VsdCkgPT4gdm9pZDtcbn07XG5cbmNvbnN0IFByZXZpZXdEYXRhUGFuZWxXT1RoZW1lOiBSZWFjdC5GQzxQcmV2aWV3RGF0YVBhbmVsUHJvcHM+ID0gKHtcbiAgcmVzdWx0LFxuICByb3dzVG9DYWxjdWxhdGVQcmV2aWV3ID0gREVGQVVMVF9ST1dTX1RPX0NBTENVTEFURV9QUkVWSUVXLFxuICBkZWZhdWx0UGlubmVkQ29sdW1ucyA9IFtdLFxuICB0aGVtZVxufSkgPT4ge1xuICBjb25zdCBbcGlubmVkQ29sdW1ucywgc2V0UGlubmVkQ29sdW1uc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oZGVmYXVsdFBpbm5lZENvbHVtbnMpO1xuICBjb25zdCBmaWVsZHMgPSB1c2VNZW1vKFxuICAgICgpID0+IGFycm93U2NoZW1hVG9GaWVsZHMocmVzdWx0LnRhYmxlLCByZXN1bHQudGFibGVEdWNrREJUeXBlcyksXG4gICAgW3Jlc3VsdF1cbiAgKTtcbiAgY29uc3QgZGF0YUNvbnRhaW5lciA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGNvbHMgPSBbLi4uQXJyYXkocmVzdWx0LnRhYmxlLm51bUNvbHMpLmtleXMoKV0ubWFwKGkgPT4gcmVzdWx0LnRhYmxlLmdldENoaWxkQXQoaSkpO1xuXG4gICAgY29uc3QgZGF0YUNvbnRhaW5lciA9IGNyZWF0ZURhdGFDb250YWluZXIoY29scywge1xuICAgICAgZmllbGRzLFxuICAgICAgaW5wdXREYXRhRm9ybWF0OiBEYXRhRm9ybS5DT0xTX0FSUkFZXG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGFDb250YWluZXI7XG4gIH0sIFtyZXN1bHQsIGZpZWxkc10pO1xuXG4gIGNvbnN0IGNvbHVtbnMgPSB1c2VNZW1vKCgpID0+IGZpZWxkcy5tYXAoZiA9PiBmLm5hbWUpLCBbZmllbGRzXSk7XG4gIGNvbnN0IGNvbE1ldGEgPSB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICBmaWVsZHMucmVkdWNlKFxuICAgICAgICAoYWNjLCB7bmFtZSwgZGlzcGxheU5hbWUsIHR5cGUsIGRpc3BsYXlGb3JtYXR9LCBjb2xJZHgpID0+ICh7XG4gICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgIFtuYW1lXToge1xuICAgICAgICAgICAgLy8gYmVjYXVzZSAnJyB8fCAnYWFhJyA9ICdhYWEnXG4gICAgICAgICAgICBuYW1lOiBkaXNwbGF5TmFtZSAhPT0gdW5kZWZpbmVkID8gZGlzcGxheU5hbWUgOiBuYW1lLFxuICAgICAgICAgICAgZGlzcGxheU5hbWUsXG4gICAgICAgICAgICBkaXNwbGF5Rm9ybWF0LFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGNvbElkeFxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIHt9XG4gICAgICApLFxuICAgIFtmaWVsZHNdXG4gICk7XG4gIGNvbnN0IGNvcHlUYWJsZUNvbHVtbiA9IHVzZUNhbGxiYWNrKFxuICAgIGNvbHVtbiA9PiB7XG4gICAgICBjb25zdCB7Y29sSWR4LCB0eXBlfSA9IGNvbE1ldGFbY29sdW1uXTtcbiAgICAgIGNvbnN0IHRleHQgPSBkYXRhQ29udGFpbmVyXG4gICAgICAgIC5tYXBJbmRleChyb3cgPT4gcGFyc2VGaWVsZFZhbHVlKGRhdGFDb250YWluZXIudmFsdWVBdChyb3cuaW5kZXgsIGNvbElkeCksIHR5cGUpKVxuICAgICAgICAuam9pbignXFxuJyk7XG4gICAgICBuYXZpZ2F0b3I/LmNsaXBib2FyZC53cml0ZVRleHQodGV4dCk7XG4gICAgfSxcbiAgICBbY29sTWV0YSwgZGF0YUNvbnRhaW5lcl1cbiAgKTtcbiAgY29uc3QgcGluVGFibGVDb2x1bW4gPSB1c2VDYWxsYmFjayhcbiAgICBjb2x1bW4gPT5cbiAgICAgIHBpbm5lZENvbHVtbnMuaW5jbHVkZXMoY29sdW1uKVxuICAgICAgICA/IHNldFBpbm5lZENvbHVtbnMocGlubmVkQ29sdW1ucy5maWx0ZXIoYyA9PiBjICE9PSBjb2x1bW4pKVxuICAgICAgICA6IHNldFBpbm5lZENvbHVtbnMoWy4uLnBpbm5lZENvbHVtbnMsIGNvbHVtbl0pLFxuICAgIFtwaW5uZWRDb2x1bW5zXVxuICApO1xuXG4gIC8vIFRPRE8gUG90ZW50aWFsbHkgY29zdGx5IG9wZXJhdGlvbiBmb3Igbm9uIHJvdyBiYXNlZCBkYXRhIGNvbnRhaW5lcnMuIFJldmlzaXQgc29ydGluZyBiZWxvdy5cbiAgY29uc3QgZGF0YVRhYmxlU3R5bGUgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICBtaW5DZWxsU2l6ZSxcbiAgICAgIGNlbGxQYWRkaW5nLFxuICAgICAgb3B0aW9uc0J1dHRvbjpcbiAgICAgICAgdGhlbWUuZmllbGRUb2tlbldpZHRoICsgdGhlbWUuZmllbGRUb2tlblJpZ2h0TWFyZ2luICsgb3B0aW9uQnV0dG9uV2lkdGggKyBwaW5CdXR0b24sXG4gICAgICBmb250U2l6ZTogdGhlbWUuY2VsbEZvbnRTaXplLFxuICAgICAgZm9udDogdGhlbWUuZm9udEZhbWlseVxuICAgIH0pLFxuICAgIFt0aGVtZV1cbiAgKTtcbiAgY29uc3QgY2VsbFNpemVDYWNoZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBjb2x1bW5zLnJlZHVjZSgoYWNjLCBjb2x1bW4pID0+IHtcbiAgICAgIGNvbnN0IHtjb2xJZHgsIGRpc3BsYXlOYW1lLCB0eXBlfSA9IGNvbE1ldGFbY29sdW1uXTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmFjYyxcbiAgICAgICAgW2NvbHVtbl06IHJlbmRlcmVkU2l6ZSh7XG4gICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgZGF0YUNvbnRhaW5lcixcbiAgICAgICAgICAgIGNvbHVtbjogZGlzcGxheU5hbWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbElkeCxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIG51bVJvd3NUb0NhbGN1bGF0ZTogcm93c1RvQ2FsY3VsYXRlUHJldmlldyxcbiAgICAgICAgICAuLi5kYXRhVGFibGVTdHlsZVxuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9LCB7fSk7XG4gIH0sIFtjb2x1bW5zLCBjb2xNZXRhLCBkYXRhQ29udGFpbmVyLCByb3dzVG9DYWxjdWxhdGVQcmV2aWV3LCBkYXRhVGFibGVTdHlsZV0pO1xuXG4gIHJldHVybiAoXG4gICAgPERhdGFUYWJsZVxuICAgICAgY29sTWV0YT17Y29sTWV0YX1cbiAgICAgIGNvbHVtbnM9e2NvbHVtbnN9XG4gICAgICBjZWxsU2l6ZUNhY2hlPXtjZWxsU2l6ZUNhY2hlfVxuICAgICAgZGF0YUNvbnRhaW5lcj17ZGF0YUNvbnRhaW5lcn1cbiAgICAgIHBpbm5lZENvbHVtbnM9e3Bpbm5lZENvbHVtbnN9XG4gICAgICBjb3B5VGFibGVDb2x1bW49e2NvcHlUYWJsZUNvbHVtbn1cbiAgICAgIHBpblRhYmxlQ29sdW1uPXtwaW5UYWJsZUNvbHVtbn1cbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IFByZXZpZXdEYXRhUGFuZWwgPSB3aXRoVGhlbWUoXG4gIFByZXZpZXdEYXRhUGFuZWxXT1RoZW1lXG4pIGFzIFJlYWN0LkZDPFByZXZpZXdEYXRhUGFuZWxQcm9wcz47XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBSUEsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsaUJBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE1BQUEsR0FBQUosT0FBQTtBQUFnRixTQUFBSyx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQVAsd0JBQUFPLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSxnQkFBQUssT0FBQSxDQUFBTCxDQUFBLDBCQUFBQSxDQUFBLHNCQUFBQSxDQUFBLFFBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQSxPQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBLE9BQUFRLENBQUEsS0FBQUMsU0FBQSxVQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQSxTQUFBRyxDQUFBLEdBQUFQLENBQUEsR0FBQUMsTUFB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