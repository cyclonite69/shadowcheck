"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatasetNode = exports.ColumnNode = void 0;
exports.Tree = Tree;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _reactCollapsible = require("@radix-ui/react-collapsible");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _components = require("@kepler.gl/components");
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// TODO: consider using react-vtree/react-window for virtualization

/**
 * Component that renders a generic tree.
 * @param treeData - The tree data.
 * @param renderNode - A function that renders a tree node.
 */
function Tree(props) {
  var treeData = props.treeData,
    renderNode = props.renderNode;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "flex flex-col"
  }, /*#__PURE__*/_react["default"].createElement(TreeNode, {
    treeData: treeData,
    renderNode: renderNode
  }));
}
var StyledCollapsibleTriggerContent = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  width: 100%;\n  cursor: pointer;\n  align-items: center;\n"])));
/**
 * Component that renders a tree node.
 */
function TreeNode(props) {
  var treeData = props.treeData,
    renderNode = props.renderNode;
  var children = treeData.children;
  var _useState = (0, _react.useState)(Boolean(treeData.isOpen)),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    isOpen = _useState2[0],
    setIsOpen = _useState2[1];
  (0, _react.useEffect)(function () {
    setIsOpen(Boolean(treeData.isOpen));
  }, [treeData.isOpen]);
  if (!children) {
    return renderNode(treeData, isOpen);
  }
  return /*#__PURE__*/_react["default"].createElement(_reactCollapsible.Collapsible, {
    open: isOpen,
    onOpenChange: setIsOpen
  }, /*#__PURE__*/_react["default"].createElement(_reactCollapsible.CollapsibleTrigger, {
    className: "w-full",
    asChild: true
  }, /*#__PURE__*/_react["default"].createElement(StyledCollapsibleTriggerContent, null, /*#__PURE__*/_react["default"].createElement(_components.Icons.ArrowRight, {
    className: (0, _classnames["default"])('flex-shrink-0 text-gray-500', {
      'rotate-90 transform': isOpen
    }),
    height: "18px"
  }), renderNode(treeData, isOpen))), /*#__PURE__*/_react["default"].createElement(_reactCollapsible.CollapsibleContent, {
    className: "pl-4"
  }, isOpen ? children.map(function (child) {
    return /*#__PURE__*/_react["default"].createElement(TreeNode, {
      key: child.key,
      treeData: child,
      renderNode: renderNode
    });
  }) : null));
}
var StyledDatasetNode = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  font-weight: bold;\n"])));
var DatasetNode = exports.DatasetNode = function DatasetNode(_ref) {
  var node = _ref.node;
  return /*#__PURE__*/_react["default"].createElement(StyledDatasetNode, null, node.object.tableName);
};
var StyledColumnNode = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  padding: 4px 0;\n  margin-left: 16px;\n\n  .column-name {\n    margin-left: 8px;\n  }\n"])));
var ColumnNode = exports.ColumnNode = function ColumnNode(_ref2) {
  var node = _ref2.node;
  return /*#__PURE__*/_react["default"].createElement(StyledColumnNode, null, /*#__PURE__*/_react["default"].createElement(_components.FieldToken, {
    type: node.object.fieldType
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: "column-name"
  }, node.object.name));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,