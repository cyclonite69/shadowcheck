"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SqlPanel = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _reactResizablePanels = require("react-resizable-panels");
var _actions = require("@kepler.gl/actions");
var _commonUtils = require("@kepler.gl/common-utils");
var _components = require("@kepler.gl/components");
var _processors = require("@kepler.gl/processors");
var _styles = require("@kepler.gl/styles");
var _utils = require("@kepler.gl/utils");
var _monacoEditor = _interopRequireDefault(require("./monaco-editor"));
var _schemaPanel = require("./schema-panel");
var _previewDataPanel = require("./preview-data-panel");
var _duckdbTableUtils = require("../table/duckdb-table-utils");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var StyledSqlPanel = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  height: 100%;\n  background-color: ", ";\n  border-left: 1px solid #333;\n"])), _styles.sidePanelBg);
var StyledSqlActions = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  flex: 0 0 50px;\n  display: flex;\n  padding-top: 12px;\n  align-items: center;\n  flex-direction: column;\n  justify-content: flex-start;\n  border-bottom: 1px solid #333;\n"])));
var StyledSqlEditor = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  min-width: 0; // Prevents flex child from overflowing\n  height: 100%;\n"])));
var StyledEditorPanel = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: ", ";\n  display: flex;\n  height: 100%;\n  flex-direction: row;\n  gap: 5px;\n  flex-grow: 1;\n"])), _styles.sidePanelBg);
var StyledDataPanel = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n"])));
var StyledEditor = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  padding: 12px 12px 12px 0;\n  background-color: rgb(30, 30, 30);\n  opacity: ", ";\n  width: 100%;\n  height: 100%;\n  min-height: 0; // Prevents flex child from overflowing\n"])), function (props) {
  return props.isRunning ? 0.5 : 1;
});
var StyledResultActions = _styledComponents["default"].div(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: white;\n  padding: 2px 12px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 12px;\n"])));
var StyledResizeHandle = (0, _styledComponents["default"])(_reactResizablePanels.PanelResizeHandle)(_templateObject8 || (_templateObject8 = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: ", ";\n  width: 4px;\n  cursor: col-resize;\n\n  &:hover {\n    background-color: #555;\n  }\n"])), _styles.panelBorderColor);
var StyledVerticalResizeHandle = (0, _styledComponents["default"])(_reactResizablePanels.PanelResizeHandle)(_templateObject9 || (_templateObject9 = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: ", ";\n  height: 4px;\n  cursor: row-resize;\n\n  &:hover {\n    background-color: #555;\n  }\n"])), _styles.panelBorderColor);
var StyledLoadingContainer = _styledComponents["default"].div(_templateObject10 || (_templateObject10 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n"])));
var StyledErrorContainer = _styledComponents["default"].pre(_templateObject11 || (_templateObject11 = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 12px;\n  color: red;\n  font-size: 12px;\n  background-color: ", ";\n  height: 100%;\n  overflow: auto;\n"])), _styles.sidePanelBg);
var StyledFileDropArea = (0, _styledComponents["default"])(_components.FileDrop)(_templateObject12 || (_templateObject12 = (0, _taggedTemplateLiteral2["default"])(["\n  height: 100%;\n  border-width: 1px;\n  border: 1px ", "\n    ", ";\n  .file-drop-target {\n    height: 100%;\n  }\n"])), function (props) {
  return props.dragOver ? 'solid' : 'dashed';
}, function (props) {
  return props.dragOver ? props.theme.subtextColorLT : 'transparent';
});
var SCHEMA_PANEL_STYLE = {
  overflow: 'auto'
};
var SqlPanel = exports.SqlPanel = function SqlPanel(_ref) {
  var _ref$initialSql = _ref.initialSql,
    initialSql = _ref$initialSql === void 0 ? '' : _ref$initialSql;
  var _useState = (0, _react.useState)(function () {
      var params = new URLSearchParams(window.location.search);
      return params.get('sql') || initialSql;
    }),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    sql = _useState2[0],
    setSql = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    droppedFile = _useState4[0],
    setDroppedFile = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    dragState = _useState6[0],
    setDragState = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
    result = _useState8[0],
    setResult = _useState8[1];
  var _useState9 = (0, _react.useState)(0),
    _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
    schemaUpdateTrigger = _useState10[0],
    setSchemaUpdateTrigger = _useState10[1];
  var _useState11 = (0, _react.useState)(null),
    _useState12 = (0, _slicedToArray2["default"])(_useState11, 2),
    error = _useState12[0],
    setError = _useState12[1];
  var _useState13 = (0, _react.useState)(0),
    _useState14 = (0, _slicedToArray2["default"])(_useState13, 2),
    counter = _useState14[0],
    setCounter = _useState14[1];
  var _useState15 = (0, _react.useState)([]),
    _useState16 = (0, _slicedToArray2["default"])(_useState15, 2),
    tableSchema = _useState16[0],
    setTableSchema = _useState16[1];
  var _useState17 = (0, _react.useState)(false),
    _useState18 = (0, _slicedToArray2["default"])(_useState17, 2),
    isRunning = _useState18[0],
    setIsRunning = _useState18[1];
  var _useState19 = (0, _react.useState)(function () {
      return (0, _utils.isAppleDevice)();
    }),
    _useState20 = (0, _slicedToArray2["default"])(_useState19, 1),
    isMac = _useState20[0];
  var dispatch = (0, _reactRedux.useDispatch)();
  var droppedFileAreaRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    var currentUrl = new URL(window.location.href);
    if (sql) {
      currentUrl.searchParams.set('sql', sql);
    } else {
      currentUrl.searchParams["delete"]('sql');
    }
    window.history.replaceState({}, '', currentUrl.toString());
  }, [sql]);
  var runQuery = (0, _react.useCallback)( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var adjustedQuery, db, connection, tempTableName, sqlStatements, arrowResult, tableDuckDBTypes, _iterator, _step, statement, isLastQuery, duckDbColumns, _adjustedQuery;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          setIsRunning(true);
          _context.prev = 1;
          adjustedQuery = sql ? (0, _duckdbTableUtils.removeSQLComments)(sql) : null;
          if (adjustedQuery) {
            _context.next = 6;
            break;
          }
          setError(new Error('Query is empty'));
          return _context.abrupt("return");
        case 6:
          db = (0, _utils.getApplicationConfig)().database;
          if (db) {
            _context.next = 10;
            break;
          }
          setError(new Error('The database is not configured properly.'));
          return _context.abrupt("return");
        case 10:
          _context.next = 12;
          return db.connect();
        case 12:
          connection = _context.sent;
          // TODO find a cheap way to get DuckDb types with a single query to a remote resource - temp table? cte?
          tempTableName = 'temp_keplergl_table'; // remove comments
          sqlStatements = (0, _duckdbTableUtils.splitSqlStatements)(adjustedQuery);
          arrowResult = null;
          tableDuckDBTypes = {};
          _iterator = _createForOfIteratorHelper(sqlStatements);
          _context.prev = 18;
          _iterator.s();
        case 20:
          if ((_step = _iterator.n()).done) {
            _context.next = 48;
            break;
          }
          statement = _step.value;
          isLastQuery = statement === sqlStatements[sqlStatements.length - 1];
          _context.t0 = isLastQuery;
          if (!_context.t0) {
            _context.next = 28;
            break;
          }
          _context.next = 27;
          return (0, _duckdbTableUtils.checkIsSelectQuery)(connection, statement);
        case 27:
          _context.t0 = _context.sent;
        case 28:
          if (!_context.t0) {
            _context.next = 44;
            break;
          }
          _context.next = 31;
          return connection.query("CREATE OR REPLACE TABLE '".concat(tempTableName, "' AS ").concat(statement));
        case 31:
          _context.next = 33;
          return (0, _duckdbTableUtils.getDuckDBColumnTypes)(connection, tempTableName);
        case 33:
          duckDbColumns = _context.sent;
          tableDuckDBTypes = (0, _duckdbTableUtils.getDuckDBColumnTypesMap)(duckDbColumns);

          // 3) cast GEOMETRY columns to WKB and BigInt to double.
          _adjustedQuery = (0, _duckdbTableUtils.castDuckDBTypesForKepler)(tempTableName, duckDbColumns);
          _context.next = 38;
          return connection.query(_adjustedQuery);
        case 38:
          arrowResult = _context.sent;
          // 4) set geoarrow extension for the arrow table as DuckDB doesn't support the geoarrow extension.
          (0, _duckdbTableUtils.setGeoArrowWKBExtension)(arrowResult, duckDbColumns);

          // 5) remove temp table
          _context.next = 42;
          return connection.query("DROP TABLE ".concat(tempTableName, ";"));
        case 42:
          _context.next = 46;
          break;
        case 44:
          _context.next = 46;
          return connection.query(statement);
        case 46:
          _context.next = 20;
          break;
        case 48:
          _context.next = 53;
          break;
        case 50:
          _context.prev = 50;
          _context.t1 = _context["catch"](18);
          _iterator.e(_context.t1);
        case 53:
          _context.prev = 53;
          _iterator.f();
          return _context.finish(53);
        case 56:
          // Show preview only for the result of the last query
          if (arrowResult) {
            setResult({
              table: arrowResult,
              tableDuckDBTypes: tableDuckDBTypes
            });
            setError(null);
          }
          _context.next = 59;
          return connection.close();
        case 59:
          _context.next = 64;
          break;
        case 61:
          _context.prev = 61;
          _context.t2 = _context["catch"](1);
          setError(_context.t2);
        case 64:
          _context.prev = 64;
          setIsRunning(false);
          return _context.finish(64);
        case 67:
          // Indicate that there may be a possible change in DuckDB.
          setSchemaUpdateTrigger(Date.now());
        case 68:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 61, 64, 67], [18, 50, 53, 56]]);
  })), [sql]);
  var onChange = (0, _react.useCallback)(function (value) {
    setSql(value);
  }, [setSql]);
  var onAddResultToMap = (0, _react.useCallback)(function () {
    if (!result) return;
    var keplerFields = (0, _processors.arrowSchemaToFields)(result.table, result.tableDuckDBTypes);
    var datasetToAdd = {
      data: {
        fields: keplerFields,
        // TODO type AddDataToMapPayload -> rows -> + arrow.Table
        rows: result.table
      },
      info: {
        id: (0, _commonUtils.generateHashId)(),
        label: "query_result".concat(counter > 0 ? "_".concat(counter) : ''),
        format: 'arrow'
      }
    };
    dispatch((0, _actions.addDataToMap)({
      datasets: [datasetToAdd]
    }));
    setCounter(counter + 1);
  }, [result, counter, dispatch]);
  var isValidFileType = (0, _react.useCallback)(function (filename) {
    var fileExt = _duckdbTableUtils.SUPPORTED_DUCKDB_DROP_EXTENSIONS.find(function (ext) {
      return filename.endsWith(ext);
    });
    return Boolean(fileExt);
  }, []);
  var createTableFromDroppedFile = (0, _react.useCallback)( /*#__PURE__*/function () {
    var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(droppedFile) {
      var _error;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!droppedFile) {
              _context2.next = 5;
              break;
            }
            _context2.next = 3;
            return (0, _duckdbTableUtils.tableFromFile)(droppedFile);
          case 3:
            _error = _context2.sent;
            if (_error) {
              setError(_error);
            } else {
              setError(null);
            }
          case 5:
            setDroppedFile(null);
            setDragState(false);
          case 7:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), []);
  (0, _react.useEffect)(function () {
    createTableFromDroppedFile(droppedFile);
  }, [droppedFile, createTableFromDroppedFile]);
  var handleFileInput = (0, _react.useCallback)(function (fileList, event) {
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
    var files = (0, _toConsumableArray2["default"])(fileList).filter(Boolean);
    var disableExtensionFilter = false;
    var filesToLoad = [];
    var errorFiles = [];
    var _iterator2 = _createForOfIteratorHelper(files),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var file = _step2.value;
        if (disableExtensionFilter || isValidFileType(file.name)) {
          filesToLoad.push(file);
        } else {
          errorFiles.push(file.name);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    if (filesToLoad.length > 0) {
      setDroppedFile(filesToLoad[0]);
    } else if (errorFiles.length > 0) {
      setError(new Error("Unsupported file formats: ".concat(errorFiles.join(', '))));
    }
  }, [isValidFileType]);
  return /*#__PURE__*/_react["default"].createElement(StyledSqlPanel, null, /*#__PURE__*/_react["default"].createElement(_reactResizablePanels.PanelGroup, {
    direction: "horizontal"
  }, /*#__PURE__*/_react["default"].createElement(_reactResizablePanels.Panel, {
    defaultSize: 20,
    minSize: 15,
    style: SCHEMA_PANEL_STYLE,
    className: "schema-panel"
  }, /*#__PURE__*/_react["default"].createElement(StyledFileDropArea, {
    dragOver: dragState,
    onDragOver: function onDragOver() {
      return setDragState(true);
    },
    onDragLeave: function onDragLeave() {
      return setDragState(false);
    },
    frame: droppedFileAreaRef.current || document,
    onDrop: handleFileInput,
    className: "file-uploader__file-drop"
  }, /*#__PURE__*/_react["default"].createElement(_schemaPanel.SchemaPanel, {
    setTableSchema: setTableSchema,
    droppedFile: droppedFile,
    schemaUpdateTrigger: schemaUpdateTrigger
  }))), /*#__PURE__*/_react["default"].createElement(StyledResizeHandle, null), /*#__PURE__*/_react["default"].createElement(_reactResizablePanels.Panel, {
    minSize: 40
  }, /*#__PURE__*/_react["default"].createElement(StyledSqlEditor, null, /*#__PURE__*/_react["default"].createElement(_reactResizablePanels.PanelGroup, {
    direction: "vertical"
  }, /*#__PURE__*/_react["default"].createElement(_reactResizablePanels.Panel, {
    defaultSize: 30,
    className: "editor-panel"
  }, /*#__PURE__*/_react["default"].createElement(StyledEditorPanel, null, /*#__PURE__*/_react["default"].createElement(StyledSqlActions, null, /*#__PURE__*/_react["default"].createElement(_components.IconButton, {
    "data-tip": true,
    "data-for": "run-query-tooltip",
    onClick: runQuery,
    disabled: isRunning || !sql
  }, /*#__PURE__*/_react["default"].createElement(_components.Icons.Play, {
    height: "18px"
  }), /*#__PURE__*/_react["default"].createElement(_components.Tooltip, {
    id: "run-query-tooltip",
    place: "top",
    effect: "solid"
  }, "Run Query (", isMac ? '⌘Enter' : 'Ctrl+Enter', " or Shift+Enter)"))), /*#__PURE__*/_react["default"].createElement(StyledEditor, {
    isRunning: isRunning
  }, /*#__PURE__*/_react["default"].createElement(_monacoEditor["default"], {
    isReadOnly: isRunning,
    onRunQuery: runQuery,
    onChange: onChange,
    tableSchema: tableSchema,
    code: sql
  })))), /*#__PURE__*/_react["default"].createElement(StyledVerticalResizeHandle, null), /*#__PURE__*/_react["default"].createElement(_reactResizablePanels.Panel, {
    className: "preview-panel"
  }, isRunning ? /*#__PURE__*/_react["default"].createElement(StyledLoadingContainer, null, /*#__PURE__*/_react["default"].createElement(_components.LoadingSpinner, null)) : error ? /*#__PURE__*/_react["default"].createElement(StyledErrorContainer, null, /*#__PURE__*/_react["default"].createElement("div", null, error.message)) : result ? /*#__PURE__*/_react["default"].createElement(StyledDataPanel, null, /*#__PURE__*/_react["default"].createElement(StyledResultActions, null, /*#__PURE__*/_react["default"].createElement(_components.Button, {
    secondary: true,
    onClick: onAddResultToMap
  }, "Add to Map"), /*#__PURE__*/_react["default"].createElement("div", null, result.table.numRows, " rows")), /*#__PURE__*/_react["default"].createElement(_previewDataPanel.PreviewDataPanel, {
    result: result,
    dataTableStyle: {},
    onAddResultToMap: onAddResultToMap
  })) : null))))));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,