"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = _interopRequireDefault(require("@monaco-editor/react"));
var monaco = _interopRequireWildcard(require("monaco-editor"));
var _uniq = _interopRequireDefault(require("lodash/uniq"));
var _uniqBy = _interopRequireDefault(require("lodash/uniqBy"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// import {tableSchema as DEFAULT_SCHEMA} from './table-schema';
var MONACO_OPTIONS = {
  minimap: {
    enabled: false
  },
  language: 'sql',
  contextmenu: false,
  renderLineHighlight: 'none',
  scrollBeyondLastLine: false,
  scrollbar: {
    alwaysConsumeMouseWheel: false
  },
  overviewRulerLanes: 0,
  automaticLayout: true,
  acceptSuggestionOnEnter: 'on',
  quickSuggestionsDelay: 400,
  matchOnWordStartOnly: false,
  tabCompletion: 'off',
  lineNumbers: 'off'
};
function parseSqlAndFindTableNameAndAliases(sql) {
  var regex = /\b(?:FROM|JOIN)\s+([^\s.]+(?:\.[^\s.]+)?)\s*(?:AS)?\s*([^\s,]+)?/gi;
  var tables = [];
  while (true) {
    var match = regex.exec(sql);
    if (!match) {
      break;
    }
    var table_name = match[1];
    if (!/\(/.test(table_name)) {
      // exclude function calls
      var alias = match[2];
      if (alias && /on|where|inner|left|right|join/.test(alias)) {
        alias = null;
      }
      tables.push({
        table_name: table_name,
        alias: alias || table_name
      });
    }
  }
  return tables;
}
var MonacoEditor = function MonacoEditor(_ref) {
  var onRunQuery = _ref.onRunQuery,
    onChange = _ref.onChange,
    code = _ref.code,
    tableSchema = _ref.tableSchema,
    isReadOnly = _ref.isReadOnly;
  // private editor?: monaco.editor.IStandaloneCodeEditor;
  var schemaTableNames = (0, _react.useMemo)(function () {
    return tableSchema ? (0, _uniq["default"])(tableSchema.map(function (d) {
      return d.table_name;
    })) : [];
  }, [tableSchema]);
  var schemaTableNamesSet = (0, _react.useMemo)(function () {
    return new Set(schemaTableNames);
  }, [schemaTableNames]);
  var handleRunQueryRef = (0, _react.useRef)(onRunQuery);
  handleRunQueryRef.current = onRunQuery;
  var handleEditorDidMount = (0, _react.useCallback)(function (editor) {
    // this.editor = editor;
    editor.focus();
    editor.addAction({
      id: 'run-query',
      label: 'Run Query',
      keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, monaco.KeyMod.Shift | monaco.KeyCode.Enter],
      contextMenuGroupId: 'custom',
      contextMenuOrder: 0,
      run: function run() {
        return handleRunQueryRef.current();
      }
    });
    monaco.languages.registerCompletionItemProvider('*', {
      provideCompletionItems: function provideCompletionItems(model, position, _context, _cancelationToken) {
        var _thisLine$trim$split$, _exec, _exec2;
        var suggestions = [{
          label: 'myCustomSnippet',
          kind: monaco.languages.CompletionItemKind.Snippet,
          insertText: 'This is a piece of custom code',
          insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
          documentation: 'This is a piece of custom code'
          // TODO: range is missing
        }];
        var fullQueryText = model.getValue();
        var tableNamesAndAliases = new Map(parseSqlAndFindTableNameAndAliases(fullQueryText).map(function (_ref2) {
          var table_name = _ref2.table_name,
            alias = _ref2.alias;
          return [alias, table_name];
        }));
        var thisLine = model.getValueInRange({
          startLineNumber: position.lineNumber,
          startColumn: 1,
          endLineNumber: position.lineNumber,
          endColumn: position.column
        });
        var thisToken = ((_thisLine$trim$split$ = thisLine.trim().split(' ').slice(-1)) === null || _thisLine$trim$split$ === void 0 ? void 0 : _thisLine$trim$split$[0]) || '';
        var lastTokenBeforeSpace = (_exec = /\s?(\w+)\s+\w+$/.exec(thisLine.trim())) === null || _exec === void 0 ? void 0 : _exec[1];
        var lastTokenBeforeDot = (_exec2 = /(\w+)\.\w*$/.exec(thisToken)) === null || _exec2 === void 0 ? void 0 : _exec2[1];

        // console.log(tableNamesAndAliases, thisToken, lastTokenBeforeSpace, lastTokenBeforeDot);

        if (lastTokenBeforeSpace && /from|join|update|into/.test(lastTokenBeforeSpace)) {
          suggestions.push.apply(suggestions, (0, _toConsumableArray2["default"])(schemaTableNames.map(function (table_name) {
            return {
              label: table_name,
              kind: monaco.languages.CompletionItemKind.Field,
              insertText: table_name
              // TODO: range is missing
            };
          })));
        }
        if (lastTokenBeforeDot) {
          var table_name = null;
          if (schemaTableNamesSet.has(lastTokenBeforeDot)) {
            table_name = lastTokenBeforeDot;
          } else if (tableNamesAndAliases.get(lastTokenBeforeDot)) {
            table_name = tableNamesAndAliases.get(lastTokenBeforeDot);
          }
          if (table_name && tableSchema) {
            suggestions.push.apply(suggestions, (0, _toConsumableArray2["default"])(tableSchema.filter(function (d) {
              return d.table_name === table_name;
            }).map(function (_ref3) {
              var column_name = _ref3.column_name;
              return {
                label: column_name,
                kind: monaco.languages.CompletionItemKind.Field,
                insertText: column_name
                // TODO: range is missing
              };
            })));
          }
        }
        return {
          suggestions: (0, _uniqBy["default"])(suggestions, function (s) {
            return s.insertText;
          })
        };
      }
    });
  }, [tableSchema, schemaTableNames, schemaTableNamesSet]);
  return /*#__PURE__*/_react["default"].createElement(_react2["default"], {
    height: "100%",
    theme: "vs-dark",
    defaultLanguage: "sql",
    defaultValue: code,
    onChange: onChange,
    onMount: handleEditorDidMount,
    options: _objectSpread(_objectSpread({}, MONACO_OPTIONS), {}, {
      readOnly: isReadOnly
    })
  });
};
var _default = exports["default"] = MonacoEditor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,