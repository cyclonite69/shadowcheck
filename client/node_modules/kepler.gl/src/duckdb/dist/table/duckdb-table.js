"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.restoreGeoarrowMetadata = exports.KeplerGlDuckDbTable = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var arrow = _interopRequireWildcard(require("apache-arrow"));
var _constants = require("@kepler.gl/constants");
var _processors = require("@kepler.gl/processors");
var _table = require("@kepler.gl/table");
var _utils = require("@kepler.gl/utils");
var _dataProcessor = require("../processors/data-processor");
var _duckdbTableUtils = require("./duckdb-table-utils");
var _duckdbTableUtils2 = require("../table/duckdb-table-utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof3(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// TODO use files from disk or url directly, without parsing by loaders and then ingection into DeckDb

/**
 * Default DuckDb geometry columns created by ST_READ
 */
var DUCKDB_GEOM_COLUMN = 'geom';
var DUCKDB_WKB_COLUMN = 'wkb_geometry';

/**
 Default column name for processed geojson in Kepler.
 Use this name to rename default 'geom' column from DuckDb
 in order to support Kepler maps saved before introduction of DuckDb plugin.
 */
var KEPLER_GEOM_FROM_GEOJSON_COLUMN = '_geojson';

/**
 * Names of columns that most likely contain binary wkb geometry
 */
var SUGGESTED_GEOM_COLUMNS = (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, KEPLER_GEOM_FROM_GEOJSON_COLUMN, _constants.GEOARROW_EXTENSIONS.WKB), DUCKDB_GEOM_COLUMN, _constants.GEOARROW_EXTENSIONS.WKB), "geometry", _constants.GEOARROW_EXTENSIONS.WKB);
var KeplerGlDuckDbTable = exports.KeplerGlDuckDbTable = /*#__PURE__*/function (_KeplerTable) {
  function KeplerGlDuckDbTable(props) {
    (0, _classCallCheck2["default"])(this, KeplerGlDuckDbTable);
    return _callSuper(this, KeplerGlDuckDbTable, [props]);
  }
  (0, _inherits2["default"])(KeplerGlDuckDbTable, _KeplerTable);
  return (0, _createClass2["default"])(KeplerGlDuckDbTable, [{
    key: "importRowData",
    value: function () {
      var _importRowData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref) {
        var data, db, c, fields, rows, rowsForDb, columns, createTableSql;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              data = _ref.data, db = _ref.db, c = _ref.c;
              _context.prev = 1;
              fields = data.fields, rows = data.rows; // DATASET_FORMATS.keplergl loads data as any[][] instead of [{}]
              // TODO potential memory usage explosion: original data, new object and then DuckDb table
              rowsForDb = Array.isArray(rows[0]) ? rows.map(function (row) {
                var newRow = {};
                row.forEach(function (value, index) {
                  newRow[fields[index].name] = value;
                });
                return newRow;
              }) : rows;
              _context.next = 6;
              return db.registerFileText(this.id, JSON.stringify(rowsForDb));
            case 6:
              columns = fields.reduce(function (acc, field, index) {
                // @ts-expect-error TODO extend fields to contain duckDBColumnType
                return "".concat(acc).concat(index > 0 ? ',' : '', " '").concat(field.name, "': '").concat(field.duckDBColumnType, "'");
              }, '');
              createTableSql = "\n        CREATE TABLE '".concat(this.label, "' AS\n        SELECT *\n        FROM read_json('").concat(this.id, "',\n                       columns = {").concat(columns, "});\n      ");
              _context.next = 10;
              return c.query(createTableSql);
            case 10:
              _context.next = 16;
              break;
            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](1);
              console.log('importRowData', _context.t0);
              throw _context.t0;
            case 16:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[1, 12]]);
      }));
      function importRowData(_x) {
        return _importRowData.apply(this, arguments);
      }
      return importRowData;
    }()
  }, {
    key: "importGeoJsonData",
    value: function () {
      var _importGeoJsonData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(_ref2) {
        var data, db, c, rows, createTableSql;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              data = _ref2.data, db = _ref2.db, c = _ref2.c;
              _context2.prev = 1;
              rows = data.rows;
              _context2.next = 5;
              return db.registerFileText(this.id, JSON.stringify(rows));
            case 5:
              createTableSql = "\n        install spatial;\n        load spatial;\n        CREATE TABLE '".concat(this.label, "' AS \n        SELECT *\n        FROM ST_READ('").concat(this.id, "', keep_wkb = TRUE);\n        ALTER TABLE '").concat(this.label, "' RENAME '").concat(DUCKDB_WKB_COLUMN, "' TO '").concat(KEPLER_GEOM_FROM_GEOJSON_COLUMN, "';\n      ");
              _context2.next = 8;
              return c.query(createTableSql);
            case 8:
              _context2.next = 14;
              break;
            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](1);
              console.error('importGeoJsonData', _context2.t0);
              throw _context2.t0;
            case 14:
              return _context2.abrupt("return", {
                // _geojson column is created from geometry with keep_wkb flag and contains valid WKB data.
                geoarrowMetadata: (0, _defineProperty2["default"])({}, KEPLER_GEOM_FROM_GEOJSON_COLUMN, _constants.GEOARROW_EXTENSIONS.WKB)
              });
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[1, 10]]);
      }));
      function importGeoJsonData(_x2) {
        return _importGeoJsonData.apply(this, arguments);
      }
      return importGeoJsonData;
    }()
  }, {
    key: "importArrowData",
    value: function () {
      var _importArrowData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(_ref3) {
        var data, c, adjustedMetadata, arrowTable, setupSql;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              data = _ref3.data, c = _ref3.c;
              adjustedMetadata = {};
              _context3.prev = 2;
              // 1) data.rows contains an arrow table created by Add to Map data from DuckDb query.
              // 2) arrow table is in cols & fields when a file is dragged & dropped into Add Data To Map dialog.
              arrowTable = data.rows instanceof arrow.Table ? data.rows : (0, _duckdbTableUtils2.restoreArrowTable)(data.cols || [], data.fields, data.arrowSchema); // remove unsupported extensions from an arrow table that throw exceptions in DuckDB.
              adjustedMetadata = (0, _duckdbTableUtils2.removeUnsupportedExtensions)(arrowTable);
              setupSql = "\n        install spatial;\n        load spatial;\n      ";
              _context3.next = 8;
              return c.query(setupSql);
            case 8:
              _context3.next = 10;
              return c.insertArrowTable(arrowTable, {
                name: this.label
              });
            case 10:
              // restore unsupported extensions that throw exceptions in DuckDb
              (0, _duckdbTableUtils2.restoreUnsupportedExtensions)(arrowTable, adjustedMetadata);
              _context3.next = 17;
              break;
            case 13:
              _context3.prev = 13;
              _context3.t0 = _context3["catch"](2);
              // Known issues:
              // 1) Arrow Type with extension name: geoarrow.point and format: +w:2 is not currently supported in DuckDB.
              console.error('importArrowData', _context3.t0);
              throw _context3.t0;
            case 17:
              return _context3.abrupt("return", {
                geoarrowMetadata: _objectSpread(_objectSpread({}, SUGGESTED_GEOM_COLUMNS), adjustedMetadata),
                // use fields generated from the created arrow table
                useNewFields: true
              });
            case 18:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[2, 13]]);
      }));
      function importArrowData(_x3) {
        return _importArrowData.apply(this, arguments);
      }
      return importArrowData;
    }()
    /**
     * Creates a table from data, returns an arrow table with the data
     * @param data
     * @returns {Promise<{fields: Field[], cols: any[]}>}
     */
  }, {
    key: "createTableAndGetArrow",
    value: (function () {
      var _createTableAndGetArrow = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(data) {
        var db, c, tableName, format, _data$rows, _data$rows2, _data$rows3, _data$cols, importDetails, fields, cols, _data$fields, _ref4, _ref4$geoarrowMetadat, geoarrowMetadata, _ref4$useNewFields, useNewFields, duckDbColumns, tableDuckDBTypes, adjustedQuery, arrowResult;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return (0, _utils.getApplicationConfig)().database;
            case 2:
              db = _context4.sent;
              if (db) {
                _context4.next = 6;
                break;
              }
              console.error('The database is not configured properly.');
              return _context4.abrupt("return", {
                fields: [],
                cols: []
              });
            case 6:
              _context4.next = 8;
              return db.connect();
            case 8:
              c = _context4.sent;
              tableName = this.label;
              _context4.next = 12;
              return (0, _duckdbTableUtils2.dropTableIfExists)(c, tableName);
            case 12:
              format = this.metadata.format;
              if (!format) {
                // format is missing when we load Kepler.gl examples
                if (Array.isArray((_data$rows = data.rows) === null || _data$rows === void 0 ? void 0 : _data$rows[0]) || (0, _typeof2["default"])((_data$rows2 = data.rows) === null || _data$rows2 === void 0 ? void 0 : _data$rows2[0]) === 'object') {
                  format = _constants.DATASET_FORMATS.row;
                } else if (((_data$rows3 = data.rows) === null || _data$rows3 === void 0 ? void 0 : _data$rows3.type) === 'FeatureCollection') {
                  format = _constants.DATASET_FORMATS.geojson;
                } else if (((_data$cols = data.cols) === null || _data$cols === void 0 ? void 0 : _data$cols[0]) instanceof arrow.Vector) {
                  format = _constants.DATASET_FORMATS.arrow;
                }
              }
              if (!(format === _constants.DATASET_FORMATS.row)) {
                _context4.next = 19;
                break;
              }
              _context4.next = 17;
              return this.importRowData({
                data: data,
                db: db,
                c: c
              });
            case 17:
              _context4.next = 32;
              break;
            case 19:
              if (!(format === _constants.DATASET_FORMATS.geojson)) {
                _context4.next = 25;
                break;
              }
              _context4.next = 22;
              return this.importGeoJsonData({
                data: data,
                db: db,
                c: c
              });
            case 22:
              importDetails = _context4.sent;
              _context4.next = 32;
              break;
            case 25:
              if (!(format === _constants.DATASET_FORMATS.arrow)) {
                _context4.next = 31;
                break;
              }
              _context4.next = 28;
              return this.importArrowData({
                data: data,
                db: db,
                c: c
              });
            case 28:
              importDetails = _context4.sent;
              _context4.next = 32;
              break;
            case 31:
              console.error('Unrecognized format', format);
            case 32:
              fields = [];
              cols = [];
              _context4.prev = 34;
              _ref4 = importDetails || {}, _ref4$geoarrowMetadat = _ref4.geoarrowMetadata, geoarrowMetadata = _ref4$geoarrowMetadat === void 0 ? {} : _ref4$geoarrowMetadat, _ref4$useNewFields = _ref4.useNewFields, useNewFields = _ref4$useNewFields === void 0 ? false : _ref4$useNewFields;
              _context4.next = 38;
              return (0, _duckdbTableUtils2.getDuckDBColumnTypes)(c, tableName);
            case 38:
              duckDbColumns = _context4.sent;
              tableDuckDBTypes = (0, _duckdbTableUtils2.getDuckDBColumnTypesMap)(duckDbColumns);
              adjustedQuery = (0, _duckdbTableUtils2.castDuckDBTypesForKepler)(tableName, duckDbColumns);
              _context4.next = 43;
              return c.query(adjustedQuery);
            case 43:
              arrowResult = _context4.sent;
              // TODO if format is an arrow table then just use the original one, instead of the new table from the query?

              restoreGeoarrowMetadata(arrowResult, geoarrowMetadata);
              fields = useNewFields ? (0, _processors.arrowSchemaToFields)(arrowResult, tableDuckDBTypes) : (_data$fields = data.fields) !== null && _data$fields !== void 0 ? _data$fields : (0, _processors.arrowSchemaToFields)(arrowResult, tableDuckDBTypes);
              cols = (0, _toConsumableArray2["default"])(Array(arrowResult.numCols).keys()).map(function (i) {
                return arrowResult.getChildAt(i);
              }).filter(function (col) {
                return col;
              });
              _context4.next = 53;
              break;
            case 49:
              _context4.prev = 49;
              _context4.t0 = _context4["catch"](34);
              console.error('DuckDB table: createTableAndGetArrow', _context4.t0);
              throw _context4.t0;
            case 53:
              _context4.next = 55;
              return c.close();
            case 55:
              return _context4.abrupt("return", {
                fields: fields,
                cols: cols
              });
            case 56:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this, [[34, 49]]);
      }));
      function createTableAndGetArrow(_x4) {
        return _createTableAndGetArrow.apply(this, arguments);
      }
      return createTableAndGetArrow;
    }())
  }, {
    key: "importData",
    value: function () {
      var _importData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(_ref5) {
        var data, _yield$this$createTab, fields, cols;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              data = _ref5.data;
              if (!(this.type === _constants.DatasetType.VECTOR_TILE)) {
                _context5.next = 4;
                break;
              }
              _superPropGet(KeplerGlDuckDbTable, "importData", this, 3)([{
                data: _objectSpread(_objectSpread({}, data), {}, {
                  rows: []
                })
              }]);
              return _context5.abrupt("return");
            case 4:
              _context5.next = 6;
              return this.createTableAndGetArrow(data);
            case 6:
              _yield$this$createTab = _context5.sent;
              fields = _yield$this$createTab.fields;
              cols = _yield$this$createTab.cols;
              _superPropGet(KeplerGlDuckDbTable, "importData", this, 3)([{
                data: {
                  fields: fields,
                  cols: cols,
                  rows: []
                }
              }]);
            case 10:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function importData(_x5) {
        return _importData.apply(this, arguments);
      }
      return importData;
    }()
  }, {
    key: "update",
    value: function () {
      var _update = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(data) {
        var _yield$this$createTab2, cols;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!(this.type === _constants.DatasetType.VECTOR_TILE)) {
                _context6.next = 3;
                break;
              }
              _superPropGet(KeplerGlDuckDbTable, "importData", this, 3)([{
                data: data
              }]);
              return _context6.abrupt("return", this);
            case 3:
              _context6.next = 5;
              return this.createTableAndGetArrow(data);
            case 5:
              _yield$this$createTab2 = _context6.sent;
              cols = _yield$this$createTab2.cols;
              return _context6.abrupt("return", _superPropGet(KeplerGlDuckDbTable, "update", this, 3)([{
                cols: cols,
                rows: [],
                fields: []
              }]));
            case 8:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function update(_x6) {
        return _update.apply(this, arguments);
      }
      return update;
    }()
  }]);
}(_table.KeplerTable);
/**
 * Try to restore geoarrow metadata lost during DuckDb ingestion.
 * Note that this function can generate wrong geometry types.
 * @param arrowTable Arrow table to update.
 * @param geoarrowMetadata A map with field names that usually used to store geoarrow geometry.
 */
(0, _defineProperty2["default"])(KeplerGlDuckDbTable, "getFileProcessor", function (data, inputFormat) {
  var processor;
  var format;
  if (inputFormat === _constants.DATASET_FORMATS.arrow || (0, _processors.isArrowData)(data)) {
    format = _constants.DATASET_FORMATS.arrow;
    processor = _processors.processArrowBatches;
  } else if (inputFormat === _constants.DATASET_FORMATS.keplergl || (0, _processors.isKeplerGlMap)(data)) {
    format = _constants.DATASET_FORMATS.keplergl;
    processor = _dataProcessor.processKeplerglJSONforDuckDb;
  } else if (inputFormat === _constants.DATASET_FORMATS.row || (0, _processors.isRowObject)(data)) {
    // csv file goes here
    format = _constants.DATASET_FORMATS.row;
    processor = _dataProcessor.processCsvRowObject; // directly import json object into duckdb-wasm
  } else if (inputFormat === _constants.DATASET_FORMATS.geojson || (0, _processors.isGeoJson)(data)) {
    format = _constants.DATASET_FORMATS.geojson;
    processor = _dataProcessor.processGeojson;
  }
  return {
    processor: processor,
    format: format
  };
});
(0, _defineProperty2["default"])(KeplerGlDuckDbTable, "getInputDataValidator", function () {
  // In DuckDB mode data is validated later during import.
  return function (d) {
    return d;
  };
});
var restoreGeoarrowMetadata = exports.restoreGeoarrowMetadata = function restoreGeoarrowMetadata(arrowTable, geoarrowMetadata) {
  arrowTable.schema.fields.forEach(function (f) {
    if (arrow.DataType.isBinary(f.type) && geoarrowMetadata[f.name]) {
      f.metadata.set(_constants.GEOARROW_METADATA_KEY, geoarrowMetadata[f.name]);
    } else if ((0, _duckdbTableUtils.isGeoArrowPoint)(f.type)) {
      f.metadata.set(_constants.GEOARROW_METADATA_KEY, _constants.GEOARROW_EXTENSIONS.POINT);
    } else if ((0, _duckdbTableUtils.isGeoArrowLineString)(f.type)) {
      f.metadata.set(_constants.GEOARROW_METADATA_KEY, _constants.GEOARROW_EXTENSIONS.LINESTRING);
    } else if ((0, _duckdbTableUtils.isGeoArrowPolygon)(f.type)) {
      f.metadata.set(_constants.GEOARROW_METADATA_KEY, _constants.GEOARROW_EXTENSIONS.POLYGON);
    } else if ((0, _duckdbTableUtils.isGeoArrowMultiPoint)(f.type)) {
      f.metadata.set(_constants.GEOARROW_METADATA_KEY, _constants.GEOARROW_EXTENSIONS.MULTIPOINT);
    } else if ((0, _duckdbTableUtils.isGeoArrowMultiLineString)(f.type)) {
      f.metadata.set(_constants.GEOARROW_METADATA_KEY, _constants.GEOARROW_EXTENSIONS.MULTILINESTRING);
    } else if ((0, _duckdbTableUtils.isGeoArrowMultiPolygon)(f.type)) {
      f.metadata.set(_constants.GEOARROW_METADATA_KEY, _constants.GEOARROW_EXTENSIONS.MULTIPOLYGON);
    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,