"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DuckDBWasmAdapter = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _duckdbWasm = _interopRequireWildcard(require("@duckdb/duckdb-wasm"));
var duckdb = _duckdbWasm;
var _perf = require("../utils/perf");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var Connection = /*#__PURE__*/function () {
  function Connection(connection) {
    (0, _classCallCheck2["default"])(this, Connection);
    (0, _defineProperty2["default"])(this, "connection", void 0);
    this.connection = connection;
  }
  return (0, _createClass2["default"])(Connection, [{
    key: "query",
    value: function () {
      var _query = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(statement) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.connection.query(statement));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function query(_x) {
        return _query.apply(this, arguments);
      }
      return query;
    }()
  }, {
    key: "insertArrowTable",
    value: function () {
      var _insertArrowTable = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(arrowTable, params) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.connection.insertArrowTable(arrowTable, params);
            case 2:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function insertArrowTable(_x2, _x3) {
        return _insertArrowTable.apply(this, arguments);
      }
      return insertArrowTable;
    }()
  }, {
    key: "close",
    value: function () {
      var _close = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.connection.close();
            case 2:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function close() {
        return _close.apply(this, arguments);
      }
      return close;
    }()
  }]);
}();
var DuckDBWasmAdapter = exports.DuckDBWasmAdapter = /*#__PURE__*/function () {
  function DuckDBWasmAdapter(options) {
    (0, _classCallCheck2["default"])(this, DuckDBWasmAdapter);
    (0, _defineProperty2["default"])(this, "duckDB", void 0);
    // pass existing AsyncDuckDB object created elsewhere
    if (options instanceof Promise || options instanceof _duckdbWasm.AsyncDuckDB) {
      this.duckDB = options;
      return;
    }

    // or create a new AsyncDuckDB object
    var _ref = options || {},
      _ref$debug = _ref.debug,
      debug = _ref$debug === void 0 ? false : _ref$debug,
      config = _ref.config;
    this.duckDB = initializeDuckDbWasm(config, debug);
  }
  return (0, _createClass2["default"])(DuckDBWasmAdapter, [{
    key: "connect",
    value: function () {
      var _connect = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
        var db, c;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.duckDB;
            case 2:
              db = _context4.sent;
              _context4.next = 5;
              return db.connect();
            case 5:
              c = _context4.sent;
              return _context4.abrupt("return", new Connection(c));
            case 7:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function connect() {
        return _connect.apply(this, arguments);
      }
      return connect;
    }()
  }, {
    key: "registerFileText",
    value: function () {
      var _registerFileText = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(filename, content) {
        var db;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.duckDB;
            case 2:
              db = _context5.sent;
              _context5.next = 5;
              return db.registerFileText(filename, content);
            case 5:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function registerFileText(_x4, _x5) {
        return _registerFileText.apply(this, arguments);
      }
      return registerFileText;
    }()
  }, {
    key: "registerFileHandle",
    value: function () {
      var _registerFileHandle = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(name, handle, protocol, directIO) {
        var db;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.duckDB;
            case 2:
              db = _context6.sent;
              _context6.next = 5;
              return db.registerFileHandle(name, handle, protocol, directIO);
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function registerFileHandle(_x6, _x7, _x8, _x9) {
        return _registerFileHandle.apply(this, arguments);
      }
      return registerFileHandle;
    }()
  }]);
}();
/**
 * Initialize DuckDB with a browser-specific Wasm bundle.
 */
var initializeDuckDbWasm = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(config, debug) {
    var start, JSDELIVR_BUNDLES, bundle, worker_url, worker, logger, db, res, buffer, fileNameMatch;
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          start = performance.now(); // Select a bundle based on browser checks
          JSDELIVR_BUNDLES = duckdb.getJsDelivrBundles();
          _context7.next = 4;
          return duckdb.selectBundle(JSDELIVR_BUNDLES);
        case 4:
          bundle = _context7.sent;
          if (bundle.mainWorker) {
            _context7.next = 7;
            break;
          }
          throw new Error('Failed to initialize DuckDB');
        case 7:
          worker_url = URL.createObjectURL(new Blob(["importScripts(\"".concat(bundle.mainWorker, "\");")], {
            type: 'text/javascript'
          })); // Instantiate the async version of DuckDB-wasm
          worker = new Worker(worker_url);
          logger = debug ? new duckdb.ConsoleLogger() : new duckdb.VoidLogger();
          db = new _duckdbWasm.AsyncDuckDB(logger, worker);
          _context7.next = 13;
          return db.instantiate(bundle.mainModule, bundle.pthreadWorker);
        case 13:
          URL.revokeObjectURL(worker_url);
          if (!config) {
            _context7.next = 28;
            break;
          }
          if (!config.path) {
            _context7.next = 26;
            break;
          }
          _context7.next = 18;
          return fetch(config.path);
        case 18:
          res = _context7.sent;
          _context7.next = 21;
          return res.arrayBuffer();
        case 21:
          buffer = _context7.sent;
          fileNameMatch = config.path.match(/[^/]*$/);
          if (fileNameMatch) {
            config.path = fileNameMatch[0];
          }
          _context7.next = 26;
          return db.registerFileBuffer(config.path, new Uint8Array(buffer));
        case 26:
          _context7.next = 28;
          return db.open(config);
        case 28:
          if (debug) {
            (0, _perf.logElapsedTime)('DuckDB initialized', start);
            if (config) {
              console.debug("DuckDbConfig: ".concat(JSON.stringify(config, null, 2)));
            }
          }
          return _context7.abrupt("return", db);
        case 30:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return function initializeDuckDbWasm(_x10, _x11) {
    return _ref2.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,