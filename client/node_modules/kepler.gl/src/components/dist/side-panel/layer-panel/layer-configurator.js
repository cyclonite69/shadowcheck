"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AggregationTypeSelector = void 0;
exports["default"] = LayerConfiguratorFactory;
exports.getVisConfiguratorProps = exports.getLayerFields = exports.getLayerDataset = exports.getLayerConfiguratorProps = exports.getLayerChannelConfigProps = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _localization = require("@kepler.gl/localization");
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _itemSelector = _interopRequireDefault(require("../../common/item-selector/item-selector"));
var _styledComponents2 = require("../../common/styled-components");
var _sourceDataSelector = _interopRequireDefault(require("../common/source-data-selector"));
var _aggrScaleSelector = _interopRequireDefault(require("./aggr-scale-selector"));
var _channelByValueSelector = _interopRequireDefault(require("./channel-by-value-selector"));
var _howToButton = _interopRequireDefault(require("./how-to-button"));
var _layerColorSelector = require("./layer-color-selector");
var _layerColumnModeConfig = _interopRequireDefault(require("./layer-column-mode-config"));
var _layerConfigGroup = _interopRequireWildcard(require("./layer-config-group"));
var _layerErrorMessage = _interopRequireDefault(require("./layer-error-message"));
var _layerTypeSelector = _interopRequireDefault(require("./layer-type-selector"));
var _textLabelPanel = _interopRequireDefault(require("./text-label-panel"));
var _visConfigSlider = _interopRequireDefault(require("./vis-config-slider"));
var _visConfigSwitch = _interopRequireDefault(require("./vis-config-switch"));
var _rasterTileLayerConfigurator = _interopRequireDefault(require("./raster-tile-layer-configurator"));
var _vectorTileLayerConfigurator = _interopRequireDefault(require("./vector-tile-layer-configurator"));
var _constants = require("@kepler.gl/constants");
var _table = require("@kepler.gl/table");
var _utils = require("@kepler.gl/utils");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/* eslint-disable complexity */
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var StyledLayerConfigurator = _styledComponents["default"].div.attrs({
  className: 'layer-panel__config'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  margin-top: ", ";\n  padding: ", ";\n  border-left: ", " dashed\n    ", ";\n"])), function (props) {
  return props.theme.layerConfiguratorMargin;
}, function (props) {
  return props.theme.layerConfiguratorPadding;
}, function (props) {
  return props.theme.layerConfiguratorBorder;
}, function (props) {
  return props.theme.layerConfiguratorBorderColor;
});
var StyledLayerVisualConfigurator = _styledComponents["default"].div.attrs({
  className: 'layer-panel__config__visualC-config'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-top: 12px;\n"])));
var getLayerFields = exports.getLayerFields = function getLayerFields(datasets, layer) {
  var _layer$config;
  return datasets[((_layer$config = layer.config) === null || _layer$config === void 0 ? void 0 : _layer$config.dataId) || ''] ? datasets[layer.config.dataId].fields : [];
};

/** Return any to be able to customize the Dataset entity */
var getLayerDataset = exports.getLayerDataset = function getLayerDataset(datasets, layer) {
  var _layer$config2;
  return datasets[((_layer$config2 = layer.config) === null || _layer$config2 === void 0 ? void 0 : _layer$config2.dataId) || ''];
};
var getLayerConfiguratorProps = exports.getLayerConfiguratorProps = function getLayerConfiguratorProps(props) {
  return {
    layer: props.layer,
    fields: getLayerFields(props.datasets, props.layer),
    onChange: props.updateLayerConfig,
    setColorUI: props.updateLayerColorUI
  };
};
var getVisConfiguratorProps = exports.getVisConfiguratorProps = function getVisConfiguratorProps(props) {
  return {
    layer: props.layer,
    fields: getLayerFields(props.datasets, props.layer),
    onChange: props.updateLayerVisConfig,
    setColorUI: props.updateLayerColorUI
  };
};
var getLayerChannelConfigProps = exports.getLayerChannelConfigProps = function getLayerChannelConfigProps(props) {
  return {
    layer: props.layer,
    dataset: getLayerDataset(props.datasets, props.layer),
    fields: getLayerFields(props.datasets, props.layer),
    onChange: props.updateLayerVisualChannelConfig,
    setColorUI: props.updateLayerColorUI
  };
};
LayerConfiguratorFactory.deps = [_sourceDataSelector["default"], _visConfigSlider["default"], _textLabelPanel["default"], _layerConfigGroup["default"], _channelByValueSelector["default"], _layerColumnModeConfig["default"], _layerTypeSelector["default"], _visConfigSwitch["default"], _layerColorSelector.LayerColorSelectorFactory, _layerColorSelector.LayerColorRangeSelectorFactory, _layerColorSelector.ArcLayerColorSelectorFactory, _aggrScaleSelector["default"], _vectorTileLayerConfigurator["default"], _rasterTileLayerConfigurator["default"]];
function LayerConfiguratorFactory(SourceDataSelector, VisConfigSlider, TextLabelPanel, LayerConfigGroup, ChannelByValueSelector, LayerColumnModeConfig, LayerTypeSelector, VisConfigSwitch, LayerColorSelector, LayerColorRangeSelector, ArcLayerColorSelector, AggrScaleSelector, VectorTileLayerConfigurator, RasterTileLayerConfigurator) {
  var LayerConfigurator = /*#__PURE__*/function (_Component) {
    function LayerConfigurator() {
      var _this;
      (0, _classCallCheck2["default"])(this, LayerConfigurator);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, LayerConfigurator, [].concat(args));
      (0, _defineProperty2["default"])(_this, "handleSelectColumnMode", function (key) {
        var updateLayerConfig = _this.props.updateLayerConfig;
        updateLayerConfig({
          columnMode: key
        });
      });
      return _this;
    }
    (0, _inherits2["default"])(LayerConfigurator, _Component);
    return (0, _createClass2["default"])(LayerConfigurator, [{
      key: "_renderPointLayerConfig",
      value: function _renderPointLayerConfig(props) {
        return this._renderScatterplotLayerConfig(props, true);
      }
    }, {
      key: "_renderIconLayerConfig",
      value: function _renderIconLayerConfig(props) {
        return this._renderScatterplotLayerConfig(props, false);
      }
    }, {
      key: "_renderVectorTileLayerConfig",
      value: function _renderVectorTileLayerConfig(props) {
        return /*#__PURE__*/_react["default"].createElement(VectorTileLayerConfigurator, props);
      }
    }, {
      key: "_renderRasterTileLayerConfig",
      value: function _renderRasterTileLayerConfig(props) {
        return /*#__PURE__*/_react["default"].createElement(RasterTileLayerConfigurator, props);
      }
    }, {
      key: "_renderScatterplotLayerConfig",
      value: function _renderScatterplotLayerConfig(_ref, showInteractionControls) {
        var layer = _ref.layer,
          visConfiguratorProps = _ref.visConfiguratorProps,
          layerChannelConfigProps = _ref.layerChannelConfigProps,
          layerConfiguratorProps = _ref.layerConfiguratorProps;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.filled || {
          label: 'layer.color'
        }, visConfiguratorProps, {
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), layer.type === _constants.LAYER_TYPES.point ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.outline, visConfiguratorProps, {
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.strokeColor
        }, layerChannelConfigProps)), layer.config.strokeColorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          property: "strokeColorRange"
        })) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          selectedColor: layer.config.visConfig.strokeColor,
          property: "strokeColor"
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          disabled: !layer.config.visConfig.outline
        })))) : null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.radius',
          collapsible: true
        }, !layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radius, visConfiguratorProps, {
          label: false,
          disabled: Boolean(layer.config.sizeField)
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radiusRange, visConfiguratorProps, {
          label: false,
          disabled: !layer.config.sizeField || layer.config.visConfig.fixedRadius
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)), layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fixedRadius, visConfiguratorProps)) : null, /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.billboard, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(TextLabelPanel, {
          id: layer.id,
          fields: visConfiguratorProps.fields,
          updateLayerTextLabel: this.props.updateLayerTextLabel,
          textLabel: layer.config.textLabel
        }), showInteractionControls ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.interaction',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.allowHover, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.showNeighborOnHover, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.showHighlightColor, visConfiguratorProps)))) : null);
      }
    }, {
      key: "_renderClusterLayerConfig",
      value: function _renderClusterLayerConfig(_ref2) {
        var layer = _ref2.layer,
          visConfiguratorProps = _ref2.visConfiguratorProps,
          layerChannelConfigProps = _ref2.layerChannelConfigProps;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.color',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps), /*#__PURE__*/_react["default"].createElement(AggrScaleSelector, (0, _extends2["default"])({}, layerChannelConfigProps, {
          channel: layer.visualChannels.color
        })), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, layer.visConfigSettings.colorAggregation.condition(layer.config) ? /*#__PURE__*/_react["default"].createElement(AggregationTypeSelector, (0, _extends2["default"])({}, layer.visConfigSettings.colorAggregation, layerChannelConfigProps, {
          channel: layer.visualChannels.color
        })) : null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.radius',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.clusterRadius, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radiusRange, visConfiguratorProps)))));
      }
    }, {
      key: "_renderHeatmapLayerConfig",
      value: function _renderHeatmapLayerConfig(_ref3) {
        var layer = _ref3.layer,
          visConfiguratorProps = _ref3.visConfiguratorProps,
          layerChannelConfigProps = _ref3.layerChannelConfigProps;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.color',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.radius'
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radius, visConfiguratorProps, {
          label: false
        }))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.weight'
        }, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.weight
        }, layerChannelConfigProps))));
      }
    }, {
      key: "_renderGridLayerConfig",
      value: function _renderGridLayerConfig(props) {
        return this._renderAggregationLayerConfig(props);
      }
    }, {
      key: "_renderHexagonLayerConfig",
      value: function _renderHexagonLayerConfig(props) {
        return this._renderAggregationLayerConfig(props);
      }
    }, {
      key: "_renderAggregationLayerConfig",
      value: function _renderAggregationLayerConfig(_ref4) {
        var layer = _ref4.layer,
          visConfiguratorProps = _ref4.visConfiguratorProps,
          layerChannelConfigProps = _ref4.layerChannelConfigProps;
        var config = layer.config;
        var _config$visConfig = config.visConfig,
          enable3d = _config$visConfig.enable3d,
          fixedHeight = _config$visConfig.fixedHeight;
        var elevationByDescription = 'layer.elevationByDescription';
        var colorByDescription = 'layer.colorByDescription';
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.color',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), /*#__PURE__*/_react["default"].createElement(AggrScaleSelector, (0, _extends2["default"])({}, layerChannelConfigProps, {
          channel: layer.visualChannels.color
        })), /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, layer.visConfigSettings.colorAggregation.condition(layer.config) ? /*#__PURE__*/_react["default"].createElement(AggregationTypeSelector, (0, _extends2["default"])({}, layer.visConfigSettings.colorAggregation, layerChannelConfigProps, {
          description: colorByDescription,
          channel: layer.visualChannels.color
        })) : null, layer.visConfigSettings.percentile && layer.visConfigSettings.percentile.condition(layer.config) ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.percentile, visConfiguratorProps)) : null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.radius',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.worldUnitSize, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.coverage, visConfiguratorProps)))), layer.visConfigSettings.enable3d ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.enable3d, visConfiguratorProps, {
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps, {
          label: 'layerVisConfigs.heightMultiplier'
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({}, layerChannelConfigProps, {
          channel: layer.visualChannels.size,
          description: elevationByDescription,
          disabled: !enable3d
        })), layer.visConfigSettings.sizeAggregation.condition(layer.config) ? /*#__PURE__*/_react["default"].createElement(AggregationTypeSelector, (0, _extends2["default"])({}, layer.visConfigSettings.sizeAggregation, layerChannelConfigProps, {
          channel: layer.visualChannels.size
        })) : null, /*#__PURE__*/_react["default"].createElement(AggrScaleSelector, (0, _extends2["default"])({}, layerChannelConfigProps, {
          channel: layer.visualChannels.size,
          label: 'Height Scale'
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          label: 'layerVisConfigs.heightRange',
          disabled: fixedHeight
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fixedHeight, visConfiguratorProps)), layer.visConfigSettings.elevationPercentile.condition(layer.config) ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationPercentile, visConfiguratorProps)) : null)) : null);
      }

      // TODO: Shan move these into layer class
    }, {
      key: "_renderHexagonIdLayerConfig",
      value: function _renderHexagonIdLayerConfig(_ref5) {
        var layer = _ref5.layer,
          visConfiguratorProps = _ref5.visConfiguratorProps,
          layerConfiguratorProps = _ref5.layerConfiguratorProps,
          layerChannelConfigProps = _ref5.layerChannelConfigProps;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.filled, visConfiguratorProps, {
          label: 'layer.fillColor',
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps, {
          disabled: !layer.config.visConfig.filled
        })))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.outline, visConfiguratorProps, {
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.strokeColor
        }, layerChannelConfigProps)), layer.config.strokeColorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          property: "strokeColorRange"
        })) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          selectedColor: layer.config.visConfig.strokeColor,
          property: "strokeColor"
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.strokeOpacity, visConfiguratorProps, {
          disabled: !layer.config.visConfig.outline
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          disabled: !layer.config.visConfig.outline
        })))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.coverage',
          collapsible: true
        }, !layer.config.coverageField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.coverage, visConfiguratorProps, {
          label: false
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.coverageRange, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.coverage
        }, layerChannelConfigProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.enable3d, visConfiguratorProps, {
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps, {
          label: 'layerVisConfigs.heightMultiplier'
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          label: "layerVisConfigs.heightRange"
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fixedHeight, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(TextLabelPanel, {
          id: layer.id,
          fields: visConfiguratorProps.fields,
          updateLayerTextLabel: this.props.updateLayerTextLabel,
          textLabel: layer.config.textLabel
        }));
      }
    }, {
      key: "_renderArcLayerConfig",
      value: function _renderArcLayerConfig(args) {
        return this._renderLineLayerConfig(args);
      }
    }, {
      key: "_renderLineLayerConfig",
      value: function _renderLineLayerConfig(_ref6) {
        var layer = _ref6.layer,
          visConfiguratorProps = _ref6.visConfiguratorProps,
          layerConfiguratorProps = _ref6.layerConfiguratorProps,
          layerChannelConfigProps = _ref6.layerChannelConfigProps;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.color',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.sourceColor
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(ArcLayerColorSelector, {
          layer: layer,
          setColorUI: layerConfiguratorProps.setColorUI,
          onChangeConfig: layerConfiguratorProps.onChange,
          onChangeVisConfig: visConfiguratorProps.onChange
        }), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.stroke',
          collapsible: true
        }, layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          disabled: !layer.config.sizeField,
          label: false
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)))), layer.visConfigSettings.elevationScale ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: "layerVisConfigs.elevationScale",
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps))) : null);
      }
    }, {
      key: "_renderTripLayerConfig",
      value: function _renderTripLayerConfig(_ref7) {
        var layer = _ref7.layer,
          visConfiguratorProps = _ref7.visConfiguratorProps,
          layerConfiguratorProps = _ref7.layerConfiguratorProps,
          layerChannelConfigProps = _ref7.layerChannelConfigProps;
        var _layer$meta$featureTy = layer.meta.featureTypes,
          featureTypes = _layer$meta$featureTy === void 0 ? {} : _layer$meta$featureTy;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.color',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, {
          label: "layer.strokeWidth",
          collapsible: true
        }), layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          label: false
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.billboard, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, featureTypes.polygon ? layer.visConfigSettings.stroked : {}, {
          label: "layer.trailLength",
          description: "layer.trailLengthDescription",
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.trailLength, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fadeTrail, visConfiguratorProps)))));
      }
    }, {
      key: "_renderGeojsonLayerConfig",
      value: function _renderGeojsonLayerConfig(_ref8) {
        var layer = _ref8.layer,
          visConfiguratorProps = _ref8.visConfiguratorProps,
          layerConfiguratorProps = _ref8.layerConfiguratorProps,
          layerChannelConfigProps = _ref8.layerChannelConfigProps;
        var _layer$meta$featureTy2 = layer.meta.featureTypes,
          featureTypes = _layer$meta$featureTy2 === void 0 ? {} : _layer$meta$featureTy2,
          visConfig = layer.config.visConfig;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, featureTypes.polygon || featureTypes.point ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.filled, visConfiguratorProps, {
          label: "layer.fillColor",
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))) : null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.stroked, visConfiguratorProps, {
          label: "layer.strokeColor",
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.strokeColor
        }, layerChannelConfigProps)), layer.config.strokeColorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          property: "strokeColorRange"
        })) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          selectedColor: layer.config.visConfig.strokeColor,
          property: "strokeColor"
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.strokeOpacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, featureTypes.polygon ? layer.visConfigSettings.stroked : {}, {
          label: "layer.strokeWidth",
          collapsible: true
        }), layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          label: false
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)))), featureTypes.polygon ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, layer.visConfigSettings.enable3d, {
          disabled: !visConfig.filled,
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.height
        }, layerChannelConfigProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fixedHeight, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, visConfiguratorProps, layer.visConfigSettings.wireframe)))) : null, featureTypes.point ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.radius',
          collapsible: true
        }, !layer.config.radiusField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radius, visConfiguratorProps, {
          label: false,
          disabled: Boolean(layer.config.radiusField)
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radiusRange, visConfiguratorProps, {
          label: false,
          disabled: !layer.config.radiusField
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.radius
        }, layerChannelConfigProps)))) : null);
      }
    }, {
      key: "_render3DLayerConfig",
      value: function _render3DLayerConfig(_ref9) {
        var layer = _ref9.layer,
          visConfiguratorProps = _ref9.visConfiguratorProps;
        return /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.3DModel',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.Input, {
          type: "file",
          accept: ".glb,.gltf",
          onChange: function onChange(e) {
            if (e.target.files && e.target.files[0]) {
              var url = URL.createObjectURL(e.target.files[0]);
              visConfiguratorProps.onChange({
                scenegraph: url
              });
            }
          }
        })), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.3DModelOptions',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeScale, visConfiguratorProps, {
          disabled: false
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.angleX, visConfiguratorProps, {
          disabled: false
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.angleY, visConfiguratorProps, {
          disabled: false
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.angleZ, visConfiguratorProps, {
          disabled: false
        }))));
      }
    }, {
      key: "_renderS2LayerConfig",
      value: function _renderS2LayerConfig(_ref10) {
        var layer = _ref10.layer,
          visConfiguratorProps = _ref10.visConfiguratorProps,
          layerConfiguratorProps = _ref10.layerConfiguratorProps,
          layerChannelConfigProps = _ref10.layerChannelConfigProps;
        var visConfig = layer.config.visConfig;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.filled, visConfiguratorProps, {
          label: "layer.fillColor",
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.stroked, visConfiguratorProps, {
          label: "layer.strokeColor",
          collapsible: true
        }), layer.config.strokeColorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          property: "strokeColorRange"
        })) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          selectedColor: layer.config.visConfig.strokeColor,
          property: "strokeColor"
        })), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.strokeColor
        }, layerChannelConfigProps))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, {
          label: "layer.strokeWidth",
          collapsible: true
        }), layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          label: false
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, layer.visConfigSettings.enable3d, {
          disabled: !visConfig.filled,
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.height
        }, layerChannelConfigProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps, {
          label: 'layerVisConfigs.heightMultiplier'
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.heightRange, visConfiguratorProps, {
          label: "layerVisConfigs.heightRange"
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fixedHeight, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, visConfiguratorProps, layer.visConfigSettings.wireframe)))));
      }
    }, {
      key: "_renderWmsLayerConfig",
      value: function _renderWmsLayerConfig(_ref11) {
        var layer = _ref11.layer,
          visConfiguratorProps = _ref11.visConfiguratorProps,
          layerChannelConfigProps = _ref11.layerChannelConfigProps,
          layerConfiguratorProps = _ref11.layerConfiguratorProps;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.service'
        }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
          id: 'layer.layer'
        })), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
          selectedItems: layer.config.visConfig.wmsLayer,
          options: layerChannelConfigProps.dataset.metadata.layers,
          displayOption: "title",
          getOptionValue: "name",
          multiSelect: false,
          searchable: false,
          onChange: function onChange(value) {
            if (!value) {
              return;
            }
            var selectedLayer = layerChannelConfigProps.dataset.metadata.layers.find(function (l) {
              return l.name === value;
            });
            if (!selectedLayer) {
              return;
            }
            layerConfiguratorProps.onChange({
              visConfig: _objectSpread(_objectSpread({}, layer.config.visConfig), {}, {
                wmsLayer: selectedLayer
              })
            });
          }
        })), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.appearance'
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({
          label: 'layerVisConfigs.transparentBackground'
        }, layer.visConfigSettings.transparent, visConfiguratorProps, {
          property: "transparent"
        }))));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          layer = _this$props.layer,
          datasets = _this$props.datasets,
          openModal = _this$props.openModal,
          updateLayerConfig = _this$props.updateLayerConfig,
          layerTypeOptions = _this$props.layerTypeOptions,
          updateLayerType = _this$props.updateLayerType,
          _this$props$disableTy = _this$props.disableTypeSelect,
          disableTypeSelect = _this$props$disableTy === void 0 ? false : _this$props$disableTy;
        var _ref12 = layer.config.dataId ? datasets[layer.config.dataId] : {},
          _ref12$fields = _ref12.fields,
          fields = _ref12$fields === void 0 ? [] : _ref12$fields,
          _ref12$fieldPairs = _ref12.fieldPairs,
          fieldPairs = _ref12$fieldPairs === void 0 ? undefined : _ref12$fieldPairs;
        var config = layer.config;
        var visConfiguratorProps = getVisConfiguratorProps(this.props);
        var layerConfiguratorProps = getLayerConfiguratorProps(this.props);
        var layerChannelConfigProps = getLayerChannelConfigProps(this.props);
        var dataset = getLayerDataset(datasets, layer);
        var renderTemplate = layer.type && "_render".concat((0, _utils.capitalizeFirstLetter)(layer.type), "LayerConfig");

        // show only datasets that can be used by the layer
        var sourceDataSelectorOptions = Object.keys(datasets).reduce(function (acc, id) {
          return (0, _table.matchDatasetType)(datasets[id], layer) ? _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, id, datasets[id])) : acc;
        }, {});
        return /*#__PURE__*/_react["default"].createElement(StyledLayerConfigurator, null, layer.layerInfoModal && !layer.supportedColumnModes ?
        /*#__PURE__*/
        // TODO figure out handler type. String or return type of layer.layerInfoModal ?
        _react["default"].createElement(_howToButton["default"], {
          onClick: function onClick() {
            return openModal(layer.layerInfoModal);
          }
        }) : null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.basic',
          collapsible: true,
          expanded: !layer.hasAllColumns()
        }, /*#__PURE__*/_react["default"].createElement(LayerTypeSelector, {
          selected: layer.type,
          disabled: disableTypeSelect,
          options: layerTypeOptions
          // @ts-ignore
          ,
          onSelect: updateLayerType
        }), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(SourceDataSelector, {
          datasets: sourceDataSelectorOptions,
          id: layer.id,
          dataId: config.dataId
          // @ts-ignore
          ,
          onSelect: function onSelect(value) {
            return updateLayerConfig({
              dataId: value
            });
          }
        }), /*#__PURE__*/_react["default"].createElement(LayerColumnModeConfig, {
          layer: layer,
          supportedColumnModes: layer.supportedColumnModes,
          id: layer.id,
          layerConfig: layer.config
          // TODO figure out handler type. String or return type of layer.layerInfoModal ?
          ,
          openModal: openModal,
          updateLayerConfig: updateLayerConfig,
          updateLayerType: updateLayerType,
          fields: fields,
          fieldPairs: fieldPairs
        })), layer.errorMessage ? /*#__PURE__*/_react["default"].createElement(_layerErrorMessage["default"], {
          errorMessage: layer.errorMessage
        }) : null), renderTemplate && this[renderTemplate] && this[renderTemplate]({
          layer: layer,
          dataset: dataset,
          visConfiguratorProps: visConfiguratorProps,
          layerChannelConfigProps: layerChannelConfigProps,
          layerConfiguratorProps: layerConfiguratorProps
        }));
      }
    }]);
  }(_react.Component);
  return LayerConfigurator;
}
var AggregationTypeSelector = exports.AggregationTypeSelector = function AggregationTypeSelector(_ref13) {
  var channel = _ref13.channel,
    layer = _ref13.layer,
    _onChange = _ref13.onChange;
  var field = channel.field,
    aggregation = channel.aggregation,
    key = channel.key;
  var selectedField = layer.config[field];
  var visConfig = layer.config.visConfig;

  // aggregation should only be selectable when field is selected
  var layerAggregationTypes = layer.getAggregationOptions(key);
  var aggregationOptions = _constants.AGGREGATION_TYPE_OPTIONS.filter(function (_ref14) {
    var id = _ref14.id;
    return layerAggregationTypes.includes(id);
  });
  var selectedAggregation = aggregation ? aggregationOptions.find(function (_ref15) {
    var id = _ref15.id;
    return id === visConfig[aggregation];
  }) : [];
  return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: 'layer.aggregateBy',
    values: {
      field: selectedField.displayName
    }
  })), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
    selectedItems: selectedAggregation,
    options: aggregationOptions,
    displayOption: "label",
    getOptionValue: "id",
    multiSelect: false,
    searchable: false,
    onChange: function onChange(value) {
      return _onChange({
        visConfig: _objectSpread(_objectSpread({}, layer.config.visConfig), {}, (0, _defineProperty2["default"])({}, aggregation, value))
      }, channel.key);
    }
  }));
};
/* eslint-enable max-params */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9jYWxpemF0aW9uIiwicmVxdWlyZSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3N0eWxlZENvbXBvbmVudHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2l0ZW1TZWxlY3RvciIsIl9zdHlsZWRDb21wb25lbnRzMiIsIl9zb3VyY2VEYXRhU2VsZWN0b3IiLCJfYWdnclNjYWxlU2VsZWN0b3IiLCJfY2hhbm5lbEJ5VmFsdWVTZWxlY3RvciIsIl9ob3dUb0J1dHRvbiIsIl9sYXllckNvbG9yU2VsZWN0b3IiLCJfbGF5ZXJDb2x1bW5Nb2RlQ29uZmlnIiwiX2xheWVyQ29uZmlnR3JvdXAiLCJfbGF5ZXJFcnJvck1lc3NhZ2UiLCJfbGF5ZXJUeXBlU2VsZWN0b3IiLCJfdGV4dExhYmVsUGFuZWwiLCJfdmlzQ29uZmlnU2xpZGVyIiwiX3Zpc0NvbmZpZ1N3aXRjaCIsIl9yYXN0ZXJUaWxlTGF5ZXJDb25maWd1cmF0b3IiLCJfdmVjdG9yVGlsZUxheWVyQ29uZmlndXJhdG9yIiwiX2NvbnN0YW50cyIsIl90YWJsZSIsIl91dGlscyIsIl90ZW1wbGF0ZU9iamVjdCIsIl90ZW1wbGF0ZU9iamVjdDIiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfY2FsbFN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3IiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsIlN0eWxlZExheWVyQ29uZmlndXJhdG9yIiwic3R5bGVkIiwiZGl2IiwiYXR0cnMiLCJjbGFzc05hbWUiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsMiIsInByb3BzIiwidGhlbWUiLCJsYXllckNvbmZpZ3VyYXRvck1hcmdpbiIsImxheWVyQ29uZmlndXJhdG9yUGFkZGluZyIsImxheWVyQ29uZmlndXJhdG9yQm9yZGVyIiwibGF5ZXJDb25maWd1cmF0b3JCb3JkZXJDb2xvciIsIlN0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yIiwiZ2V0TGF5ZXJGaWVsZHMiLCJleHBvcnRzIiwiZGF0YXNldHMiLCJsYXllciIsIl9sYXllciRjb25maWciLCJjb25maWciLCJkYXRhSWQiLCJmaWVsZHMiLCJnZXRMYXllckRhdGFzZXQiLCJfbGF5ZXIkY29uZmlnMiIsImdldExheWVyQ29uZmlndXJhdG9yUHJvcHMiLCJvbkNoYW5nZSIsInVwZGF0ZUxheWVyQ29uZmlnIiwic2V0Q29sb3JVSSIsInVwZGF0ZUxheWVyQ29sb3JVSSIsImdldFZpc0NvbmZpZ3VyYXRvclByb3BzIiwidXBkYXRlTGF5ZXJWaXNDb25maWciLCJnZXRMYXllckNoYW5uZWxDb25maWdQcm9wcyIsImRhdGFzZXQiLCJ1cGRhdGVMYXllclZpc3VhbENoYW5uZWxDb25maWciLCJMYXllckNvbmZpZ3VyYXRvckZhY3RvcnkiLCJkZXBzIiwiU291cmNlRGF0YVNlbGVjdG9yRmFjdG9yeSIsIlZpc0NvbmZpZ1NsaWRlckZhY3RvcnkiLCJUZXh0TGFiZWxQYW5lbEZhY3RvcnkiLCJMYXllckNvbmZpZ0dyb3VwRmFjdG9yeSIsIkNoYW5uZWxCeVZhbHVlU2VsZWN0b3JGYWN0b3J5IiwiTGF5ZXJDb2x1bW5Nb2RlQ29uZmlnRmFjdG9yeSIsIkxheWVyVHlwZVNlbGVjdG9yRmFjdG9yeSIsIlZpc0NvbmZpZ1N3aXRjaEZhY3RvcnkiLCJMYXllckNvbG9yU2VsZWN0b3JGYWN0b3J5IiwiTGF5ZXJDb2xvclJhbmdlU2VsZWN0b3JGYWN0b3J5IiwiQXJjTGF5ZXJDb2xvclNlbGVjdG9yRmFjdG9yeSIsIkFnZ3JTY2FsZVNlbGVjdG9yRmFjdG9yeSIsIlZlY3RvclRpbGVMYXllckNvbmZpZ3VyYXRvckZhY3RvcnkiLCJSYXN0ZXJUaWxlTGF5ZXJDb25maWd1cmF0b3JGYWN0b3J5IiwiU291cmNlRGF0YVNlbGVjdG9yIiwiVmlzQ29uZmlnU2xpZGVyIiwiVGV4dExhYmVsUGFuZWwiLCJMYXllckNvbmZpZ0dyb3VwIiwiQ2hhbm5lbEJ5VmFsdWVTZWxlY3RvciIsIkxheWVyQ29sdW1uTW9kZUNvbmZpZyIsIkxheWVyVHlwZVNlbGVjdG9yIiwiVmlzQ29uZmlnU3dpdGNoIiwiTGF5ZXJDb2xvclNlbGVjdG9yIiwiTGF5ZXJDb2xvclJhbmdlU2VsZWN0b3IiLCJBcmNMYXllckNvbG9yU2VsZWN0b3IiLCJBZ2dyU2NhbGVTZWxlY3RvciIsIlZlY3RvclRpbGVMYXllckNvbmZpZ3VyYXRvciIsIlJhc3RlclRpbGVMYXllckNvbmZpZ3VyYXRvciIsIkxheWVyQ29uZmlndXJhdG9yIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0Iiwia2V5IiwiY29sdW1uTW9kZSIsIl9pbmhlcml0czIiLCJfY3JlYXRlQ2xhc3MyIiwidmFsdWUiLCJfcmVuZGVyUG9pbnRMYXllckNvbmZpZyIsIl9yZW5kZXJTY2F0dGVycGxvdExheWVyQ29uZmlnIiwiX3JlbmRlckljb25MYXllckNvbmZpZyIsIl9yZW5kZXJWZWN0b3JUaWxlTGF5ZXJDb25maWciLCJjcmVhdGVFbGVtZW50IiwiX3JlbmRlclJhc3RlclRpbGVMYXllckNvbmZpZyIsIl9yZWYiLCJzaG93SW50ZXJhY3Rpb25Db250cm9scyIsInZpc0NvbmZpZ3VyYXRvclByb3BzIiwibGF5ZXJDaGFubmVsQ29uZmlnUHJvcHMiLCJsYXllckNvbmZpZ3VyYXRvclByb3BzIiwiX2V4dGVuZHMyIiwidmlzQ29uZmlnU2V0dGluZ3MiLCJmaWxsZWQiLCJsYWJlbCIsImNvbGxhcHNpYmxlIiwiY2hhbm5lbCIsInZpc3VhbENoYW5uZWxzIiwiY29sb3IiLCJjb2xvckZpZWxkIiwiQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQiLCJvcGFjaXR5IiwidHlwZSIsIkxBWUVSX1RZUEVTIiwicG9pbnQiLCJvdXRsaW5lIiwic3Ryb2tlQ29sb3IiLCJzdHJva2VDb2xvckZpZWxkIiwicHJvcGVydHkiLCJzZWxlY3RlZENvbG9yIiwidmlzQ29uZmlnIiwidGhpY2tuZXNzIiwiZGlzYWJsZWQiLCJzaXplRmllbGQiLCJyYWRpdXMiLCJyYWRpdXNSYW5nZSIsImZpeGVkUmFkaXVzIiwic2l6ZSIsImJpbGxib2FyZCIsImlkIiwidXBkYXRlTGF5ZXJUZXh0TGFiZWwiLCJ0ZXh0TGFiZWwiLCJhbGxvd0hvdmVyIiwic2hvd05laWdoYm9yT25Ib3ZlciIsInNob3dIaWdobGlnaHRDb2xvciIsIl9yZW5kZXJDbHVzdGVyTGF5ZXJDb25maWciLCJfcmVmMiIsImNvbG9yQWdncmVnYXRpb24iLCJjb25kaXRpb24iLCJBZ2dyZWdhdGlvblR5cGVTZWxlY3RvciIsImNsdXN0ZXJSYWRpdXMiLCJfcmVuZGVySGVhdG1hcExheWVyQ29uZmlnIiwiX3JlZjMiLCJ3ZWlnaHQiLCJfcmVuZGVyR3JpZExheWVyQ29uZmlnIiwiX3JlbmRlckFnZ3JlZ2F0aW9uTGF5ZXJDb25maWciLCJfcmVuZGVySGV4YWdvbkxheWVyQ29uZmlnIiwiX3JlZjQiLCJfY29uZmlnJHZpc0NvbmZpZyIsImVuYWJsZTNkIiwiZml4ZWRIZWlnaHQiLCJlbGV2YXRpb25CeURlc2NyaXB0aW9uIiwiY29sb3JCeURlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJwZXJjZW50aWxlIiwid29ybGRVbml0U2l6ZSIsImNvdmVyYWdlIiwiZWxldmF0aW9uU2NhbGUiLCJzaXplQWdncmVnYXRpb24iLCJzaXplUmFuZ2UiLCJlbGV2YXRpb25QZXJjZW50aWxlIiwiX3JlbmRlckhleGFnb25JZExheWVyQ29uZmlnIiwiX3JlZjUiLCJzdHJva2VPcGFjaXR5IiwiY292ZXJhZ2VGaWVsZCIsImNvdmVyYWdlUmFuZ2UiLCJfcmVuZGVyQXJjTGF5ZXJDb25maWciLCJfcmVuZGVyTGluZUxheWVyQ29uZmlnIiwiX3JlZjYiLCJzb3VyY2VDb2xvciIsIm9uQ2hhbmdlQ29uZmlnIiwib25DaGFuZ2VWaXNDb25maWciLCJfcmVuZGVyVHJpcExheWVyQ29uZmlnIiwiX3JlZjciLCJfbGF5ZXIkbWV0YSRmZWF0dXJlVHkiLCJtZXRhIiwiZmVhdHVyZVR5cGVzIiwicG9seWdvbiIsInN0cm9rZWQiLCJ0cmFpbExlbmd0aCIsImZhZGVUcmFpbCIsIl9yZW5kZXJHZW9qc29uTGF5ZXJDb25maWciLCJfcmVmOCIsIl9sYXllciRtZXRhJGZlYXR1cmVUeTIiLCJoZWlnaHQiLCJ3aXJlZnJhbWUiLCJyYWRpdXNGaWVsZCIsIl9yZW5kZXIzRExheWVyQ29uZmlnIiwiX3JlZjkiLCJGcmFnbWVudCIsIklucHV0IiwiYWNjZXB0IiwidGFyZ2V0IiwiZmlsZXMiLCJ1cmwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJzY2VuZWdyYXBoIiwic2l6ZVNjYWxlIiwiYW5nbGVYIiwiYW5nbGVZIiwiYW5nbGVaIiwiX3JlbmRlclMyTGF5ZXJDb25maWciLCJfcmVmMTAiLCJoZWlnaHRSYW5nZSIsIl9yZW5kZXJXbXNMYXllckNvbmZpZyIsIl9yZWYxMSIsIlBhbmVsTGFiZWwiLCJGb3JtYXR0ZWRNZXNzYWdlIiwic2VsZWN0ZWRJdGVtcyIsIndtc0xheWVyIiwib3B0aW9ucyIsIm1ldGFkYXRhIiwibGF5ZXJzIiwiZGlzcGxheU9wdGlvbiIsImdldE9wdGlvblZhbHVlIiwibXVsdGlTZWxlY3QiLCJzZWFyY2hhYmxlIiwic2VsZWN0ZWRMYXllciIsImZpbmQiLCJsIiwibmFtZSIsInRyYW5zcGFyZW50IiwicmVuZGVyIiwiX3RoaXMkcHJvcHMiLCJvcGVuTW9kYWwiLCJsYXllclR5cGVPcHRpb25zIiwidXBkYXRlTGF5ZXJUeXBlIiwiX3RoaXMkcHJvcHMkZGlzYWJsZVR5IiwiZGlzYWJsZVR5cGVTZWxlY3QiLCJfcmVmMTIiLCJfcmVmMTIkZmllbGRzIiwiX3JlZjEyJGZpZWxkUGFpcnMiLCJmaWVsZFBhaXJzIiwidW5kZWZpbmVkIiwicmVuZGVyVGVtcGxhdGUiLCJjYXBpdGFsaXplRmlyc3RMZXR0ZXIiLCJzb3VyY2VEYXRhU2VsZWN0b3JPcHRpb25zIiwicmVkdWNlIiwiYWNjIiwibWF0Y2hEYXRhc2V0VHlwZSIsImxheWVySW5mb01vZGFsIiwic3VwcG9ydGVkQ29sdW1uTW9kZXMiLCJvbkNsaWNrIiwiZXhwYW5kZWQiLCJoYXNBbGxDb2x1bW5zIiwic2VsZWN0ZWQiLCJvblNlbGVjdCIsImxheWVyQ29uZmlnIiwiZXJyb3JNZXNzYWdlIiwiQ29tcG9uZW50IiwiX3JlZjEzIiwiZmllbGQiLCJhZ2dyZWdhdGlvbiIsInNlbGVjdGVkRmllbGQiLCJsYXllckFnZ3JlZ2F0aW9uVHlwZXMiLCJnZXRBZ2dyZWdhdGlvbk9wdGlvbnMiLCJhZ2dyZWdhdGlvbk9wdGlvbnMiLCJBR0dSRUdBVElPTl9UWVBFX09QVElPTlMiLCJfcmVmMTQiLCJpbmNsdWRlcyIsInNlbGVjdGVkQWdncmVnYXRpb24iLCJfcmVmMTUiLCJTaWRlUGFuZWxTZWN0aW9uIiwidmFsdWVzIiwiZGlzcGxheU5hbWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2lkZS1wYW5lbC9sYXllci1wYW5lbC9sYXllci1jb25maWd1cmF0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbXBsZXhpdHkgKi9cbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50LCBGcmFnbWVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCBJdGVtU2VsZWN0b3IgZnJvbSAnLi4vLi4vY29tbW9uL2l0ZW0tc2VsZWN0b3IvaXRlbS1zZWxlY3Rvcic7XG5pbXBvcnQge0lucHV0LCBQYW5lbExhYmVsLCBTaWRlUGFuZWxTZWN0aW9ufSBmcm9tICcuLi8uLi9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgU291cmNlRGF0YVNlbGVjdG9yRmFjdG9yeSBmcm9tICcuLi9jb21tb24vc291cmNlLWRhdGEtc2VsZWN0b3InO1xuaW1wb3J0IEFnZ3JTY2FsZVNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL2FnZ3Itc2NhbGUtc2VsZWN0b3InO1xuaW1wb3J0IENoYW5uZWxCeVZhbHVlU2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vY2hhbm5lbC1ieS12YWx1ZS1zZWxlY3Rvcic7XG5pbXBvcnQgSG93VG9CdXR0b24gZnJvbSAnLi9ob3ctdG8tYnV0dG9uJztcbmltcG9ydCB7XG4gIEFyY0xheWVyQ29sb3JTZWxlY3RvckZhY3RvcnksXG4gIExheWVyQ29sb3JSYW5nZVNlbGVjdG9yRmFjdG9yeSxcbiAgTGF5ZXJDb2xvclNlbGVjdG9yRmFjdG9yeVxufSBmcm9tICcuL2xheWVyLWNvbG9yLXNlbGVjdG9yJztcbmltcG9ydCBMYXllckNvbHVtbk1vZGVDb25maWdGYWN0b3J5IGZyb20gJy4vbGF5ZXItY29sdW1uLW1vZGUtY29uZmlnJztcbmltcG9ydCBMYXllckNvbmZpZ0dyb3VwRmFjdG9yeSwge0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50fSBmcm9tICcuL2xheWVyLWNvbmZpZy1ncm91cCc7XG5pbXBvcnQgTGF5ZXJFcnJvck1lc3NhZ2UgZnJvbSAnLi9sYXllci1lcnJvci1tZXNzYWdlJztcbmltcG9ydCBMYXllclR5cGVTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9sYXllci10eXBlLXNlbGVjdG9yJztcbmltcG9ydCBUZXh0TGFiZWxQYW5lbEZhY3RvcnkgZnJvbSAnLi90ZXh0LWxhYmVsLXBhbmVsJztcbmltcG9ydCBWaXNDb25maWdTbGlkZXJGYWN0b3J5IGZyb20gJy4vdmlzLWNvbmZpZy1zbGlkZXInO1xuaW1wb3J0IFZpc0NvbmZpZ1N3aXRjaEZhY3RvcnkgZnJvbSAnLi92aXMtY29uZmlnLXN3aXRjaCc7XG5cbmltcG9ydCBSYXN0ZXJUaWxlTGF5ZXJDb25maWd1cmF0b3JGYWN0b3J5IGZyb20gJy4vcmFzdGVyLXRpbGUtbGF5ZXItY29uZmlndXJhdG9yJztcbmltcG9ydCBWZWN0b3JUaWxlTGF5ZXJDb25maWd1cmF0b3JGYWN0b3J5IGZyb20gJy4vdmVjdG9yLXRpbGUtbGF5ZXItY29uZmlndXJhdG9yJztcblxuaW1wb3J0IHtBY3Rpb25IYW5kbGVyLCB0b2dnbGVNb2RhbH0gZnJvbSAnQGtlcGxlci5nbC9hY3Rpb25zJztcbmltcG9ydCB7QUdHUkVHQVRJT05fVFlQRV9PUFRJT05TLCBMQVlFUl9UWVBFU30gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtBZ2dyZWdhdGlvbkxheWVyLCBMYXllciwgTGF5ZXJCYXNlQ29uZmlnLCBWaXN1YWxDaGFubmVsfSBmcm9tICdAa2VwbGVyLmdsL2xheWVycyc7XG5cbmltcG9ydCB7bWF0Y2hEYXRhc2V0VHlwZSwgRGF0YXNldHN9IGZyb20gJ0BrZXBsZXIuZ2wvdGFibGUnO1xuaW1wb3J0IHtDb2xvclVJLCBMYXllclZpc0NvbmZpZywgTmVzdGVkUGFydGlhbH0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge2NhcGl0YWxpemVGaXJzdExldHRlcn0gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5cbnR5cGUgTGF5ZXJDb25maWd1cmF0b3JQcm9wcyA9IHtcbiAgbGF5ZXI6IExheWVyO1xuICBkYXRhc2V0czogRGF0YXNldHM7XG4gIGxheWVyVHlwZU9wdGlvbnM6IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgaWNvbjogUmVhY3QuRWxlbWVudFR5cGU7XG4gICAgcmVxdWlyZURhdGE6IGJvb2xlYW47XG4gIH1bXTtcbiAgb3Blbk1vZGFsOiBBY3Rpb25IYW5kbGVyPHR5cGVvZiB0b2dnbGVNb2RhbD47XG4gIHVwZGF0ZUxheWVyQ29uZmlnOiAobmV3Q29uZmlnOiBQYXJ0aWFsPExheWVyQmFzZUNvbmZpZz4pID0+IHZvaWQ7XG4gIHVwZGF0ZUxheWVyVHlwZTogKG5ld1R5cGU6IHN0cmluZykgPT4gdm9pZDtcbiAgdXBkYXRlTGF5ZXJWaXNDb25maWc6IChuZXdWaXNDb25maWc6IFBhcnRpYWw8TGF5ZXJWaXNDb25maWc+KSA9PiB2b2lkO1xuICB1cGRhdGVMYXllclZpc3VhbENoYW5uZWxDb25maWc6IChcbiAgICBuZXdDb25maWc6IFBhcnRpYWw8TGF5ZXJCYXNlQ29uZmlnPixcbiAgICBjaGFubmVsOiBzdHJpbmcsXG4gICAgbmV3VmlzQ29uZmlnPzogUGFydGlhbDxMYXllclZpc0NvbmZpZz5cbiAgKSA9PiB2b2lkO1xuICB1cGRhdGVMYXllckNvbG9yVUk6IChwcm9wOiBzdHJpbmcsIG5ld0NvbmZpZzogTmVzdGVkUGFydGlhbDxDb2xvclVJPikgPT4gdm9pZDtcbiAgdXBkYXRlTGF5ZXJUZXh0TGFiZWw6IChpZHg6IG51bWJlciB8ICdhbGwnLCBwcm9wOiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gIGRpc2FibGVUeXBlU2VsZWN0PzogYm9vbGVhbjtcbn07XG5cbnR5cGUgQWdncmVnYXRpb25TZWxlY3RvclByb3BzID0ge1xuICBjaGFubmVsOiBWaXN1YWxDaGFubmVsO1xuICBsYXllcjogQWdncmVnYXRpb25MYXllcjtcbiAgb25DaGFuZ2U6IChcbiAgICB2YWw6IFJlY29yZDxcbiAgICAgIHN0cmluZyxcbiAgICAgIHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBvYmplY3QgfCByZWFkb25seSAoc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IG9iamVjdClbXSB8IG51bGxcbiAgICA+LFxuICAgIGtleTogc3RyaW5nXG4gICkgPT4gdm9pZDtcbn07XG5cbmNvbnN0IFN0eWxlZExheWVyQ29uZmlndXJhdG9yID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ2xheWVyLXBhbmVsX19jb25maWcnXG59KWBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW4tdG9wOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmxheWVyQ29uZmlndXJhdG9yTWFyZ2lufTtcbiAgcGFkZGluZzogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5sYXllckNvbmZpZ3VyYXRvclBhZGRpbmd9O1xuICBib3JkZXItbGVmdDogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5sYXllckNvbmZpZ3VyYXRvckJvcmRlcn0gZGFzaGVkXG4gICAgJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5sYXllckNvbmZpZ3VyYXRvckJvcmRlckNvbG9yfTtcbmA7XG5cbmNvbnN0IFN0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gIGNsYXNzTmFtZTogJ2xheWVyLXBhbmVsX19jb25maWdfX3Zpc3VhbEMtY29uZmlnJ1xufSlgXG4gIG1hcmdpbi10b3A6IDEycHg7XG5gO1xuXG5leHBvcnQgY29uc3QgZ2V0TGF5ZXJGaWVsZHMgPSAoZGF0YXNldHM6IERhdGFzZXRzLCBsYXllcjogTGF5ZXIpID0+XG4gIGRhdGFzZXRzW2xheWVyLmNvbmZpZz8uZGF0YUlkIHx8ICcnXSA/IGRhdGFzZXRzW2xheWVyLmNvbmZpZy5kYXRhSWRdLmZpZWxkcyA6IFtdO1xuXG4vKiogUmV0dXJuIGFueSB0byBiZSBhYmxlIHRvIGN1c3RvbWl6ZSB0aGUgRGF0YXNldCBlbnRpdHkgKi9cbmV4cG9ydCBjb25zdCBnZXRMYXllckRhdGFzZXQgPSAoZGF0YXNldHM6IERhdGFzZXRzLCBsYXllcjogTGF5ZXIpOiBhbnkgPT5cbiAgZGF0YXNldHNbbGF5ZXIuY29uZmlnPy5kYXRhSWQgfHwgJyddO1xuXG5leHBvcnQgY29uc3QgZ2V0TGF5ZXJDb25maWd1cmF0b3JQcm9wcyA9IChwcm9wczogTGF5ZXJDb25maWd1cmF0b3JQcm9wcykgPT4gKHtcbiAgbGF5ZXI6IHByb3BzLmxheWVyLFxuICBmaWVsZHM6IGdldExheWVyRmllbGRzKHByb3BzLmRhdGFzZXRzLCBwcm9wcy5sYXllciksXG4gIG9uQ2hhbmdlOiBwcm9wcy51cGRhdGVMYXllckNvbmZpZyxcbiAgc2V0Q29sb3JVSTogcHJvcHMudXBkYXRlTGF5ZXJDb2xvclVJXG59KTtcblxuZXhwb3J0IGNvbnN0IGdldFZpc0NvbmZpZ3VyYXRvclByb3BzID0gKHByb3BzOiBMYXllckNvbmZpZ3VyYXRvclByb3BzKSA9PiAoe1xuICBsYXllcjogcHJvcHMubGF5ZXIsXG4gIGZpZWxkczogZ2V0TGF5ZXJGaWVsZHMocHJvcHMuZGF0YXNldHMsIHByb3BzLmxheWVyKSxcbiAgb25DaGFuZ2U6IHByb3BzLnVwZGF0ZUxheWVyVmlzQ29uZmlnLFxuICBzZXRDb2xvclVJOiBwcm9wcy51cGRhdGVMYXllckNvbG9yVUlcbn0pO1xuXG5leHBvcnQgY29uc3QgZ2V0TGF5ZXJDaGFubmVsQ29uZmlnUHJvcHMgPSAocHJvcHM6IExheWVyQ29uZmlndXJhdG9yUHJvcHMpID0+ICh7XG4gIGxheWVyOiBwcm9wcy5sYXllcixcbiAgZGF0YXNldDogZ2V0TGF5ZXJEYXRhc2V0KHByb3BzLmRhdGFzZXRzLCBwcm9wcy5sYXllciksXG4gIGZpZWxkczogZ2V0TGF5ZXJGaWVsZHMocHJvcHMuZGF0YXNldHMsIHByb3BzLmxheWVyKSxcbiAgb25DaGFuZ2U6IHByb3BzLnVwZGF0ZUxheWVyVmlzdWFsQ2hhbm5lbENvbmZpZyxcbiAgc2V0Q29sb3JVSTogcHJvcHMudXBkYXRlTGF5ZXJDb2xvclVJXG59KTtcblxuTGF5ZXJDb25maWd1cmF0b3JGYWN0b3J5LmRlcHMgPSBbXG4gIFNvdXJjZURhdGFTZWxlY3RvckZhY3RvcnksXG4gIFZpc0NvbmZpZ1NsaWRlckZhY3RvcnksXG4gIFRleHRMYWJlbFBhbmVsRmFjdG9yeSxcbiAgTGF5ZXJDb25maWdHcm91cEZhY3RvcnksXG4gIENoYW5uZWxCeVZhbHVlU2VsZWN0b3JGYWN0b3J5LFxuICBMYXllckNvbHVtbk1vZGVDb25maWdGYWN0b3J5LFxuICBMYXllclR5cGVTZWxlY3RvckZhY3RvcnksXG4gIFZpc0NvbmZpZ1N3aXRjaEZhY3RvcnksXG4gIExheWVyQ29sb3JTZWxlY3RvckZhY3RvcnksXG4gIExheWVyQ29sb3JSYW5nZVNlbGVjdG9yRmFjdG9yeSxcbiAgQXJjTGF5ZXJDb2xvclNlbGVjdG9yRmFjdG9yeSxcbiAgQWdnclNjYWxlU2VsZWN0b3JGYWN0b3J5LFxuICBWZWN0b3JUaWxlTGF5ZXJDb25maWd1cmF0b3JGYWN0b3J5LFxuICBSYXN0ZXJUaWxlTGF5ZXJDb25maWd1cmF0b3JGYWN0b3J5XG5dO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMYXllckNvbmZpZ3VyYXRvckZhY3RvcnkoXG4gIFNvdXJjZURhdGFTZWxlY3RvcjogUmV0dXJuVHlwZTx0eXBlb2YgU291cmNlRGF0YVNlbGVjdG9yRmFjdG9yeT4sXG4gIFZpc0NvbmZpZ1NsaWRlcjogUmV0dXJuVHlwZTx0eXBlb2YgVmlzQ29uZmlnU2xpZGVyRmFjdG9yeT4sXG4gIFRleHRMYWJlbFBhbmVsOiBSZXR1cm5UeXBlPHR5cGVvZiBUZXh0TGFiZWxQYW5lbEZhY3Rvcnk+LFxuICBMYXllckNvbmZpZ0dyb3VwOiBSZXR1cm5UeXBlPHR5cGVvZiBMYXllckNvbmZpZ0dyb3VwRmFjdG9yeT4sXG4gIENoYW5uZWxCeVZhbHVlU2VsZWN0b3I6IFJldHVyblR5cGU8dHlwZW9mIENoYW5uZWxCeVZhbHVlU2VsZWN0b3JGYWN0b3J5PixcbiAgTGF5ZXJDb2x1bW5Nb2RlQ29uZmlnOiBSZXR1cm5UeXBlPHR5cGVvZiBMYXllckNvbHVtbk1vZGVDb25maWdGYWN0b3J5PixcbiAgTGF5ZXJUeXBlU2VsZWN0b3I6IFJldHVyblR5cGU8dHlwZW9mIExheWVyVHlwZVNlbGVjdG9yRmFjdG9yeT4sXG4gIFZpc0NvbmZpZ1N3aXRjaDogUmV0dXJuVHlwZTx0eXBlb2YgVmlzQ29uZmlnU3dpdGNoRmFjdG9yeT4sXG4gIExheWVyQ29sb3JTZWxlY3RvcjogUmV0dXJuVHlwZTx0eXBlb2YgTGF5ZXJDb2xvclNlbGVjdG9yRmFjdG9yeT4sXG4gIExheWVyQ29sb3JSYW5nZVNlbGVjdG9yOiBSZXR1cm5UeXBlPHR5cGVvZiBMYXllckNvbG9yUmFuZ2VTZWxlY3RvckZhY3Rvcnk+LFxuICBBcmNMYXllckNvbG9yU2VsZWN0b3I6IFJldHVyblR5cGU8dHlwZW9mIEFyY0xheWVyQ29sb3JTZWxlY3RvckZhY3Rvcnk+LFxuICBBZ2dyU2NhbGVTZWxlY3RvcjogUmV0dXJuVHlwZTx0eXBlb2YgQWdnclNjYWxlU2VsZWN0b3JGYWN0b3J5PixcbiAgVmVjdG9yVGlsZUxheWVyQ29uZmlndXJhdG9yOiBSZXR1cm5UeXBlPHR5cGVvZiBWZWN0b3JUaWxlTGF5ZXJDb25maWd1cmF0b3JGYWN0b3J5PixcbiAgUmFzdGVyVGlsZUxheWVyQ29uZmlndXJhdG9yOiBSZXR1cm5UeXBlPHR5cGVvZiBSYXN0ZXJUaWxlTGF5ZXJDb25maWd1cmF0b3JGYWN0b3J5PlxuKTogUmVhY3QuQ29tcG9uZW50VHlwZTxMYXllckNvbmZpZ3VyYXRvclByb3BzPiB7XG4gIGNsYXNzIExheWVyQ29uZmlndXJhdG9yIGV4dGVuZHMgQ29tcG9uZW50PExheWVyQ29uZmlndXJhdG9yUHJvcHM+IHtcbiAgICBfcmVuZGVyUG9pbnRMYXllckNvbmZpZyhwcm9wcykge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlclNjYXR0ZXJwbG90TGF5ZXJDb25maWcocHJvcHMsIHRydWUpO1xuICAgIH1cblxuICAgIF9yZW5kZXJJY29uTGF5ZXJDb25maWcocHJvcHMpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJTY2F0dGVycGxvdExheWVyQ29uZmlnKHByb3BzLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgX3JlbmRlclZlY3RvclRpbGVMYXllckNvbmZpZyhwcm9wcykge1xuICAgICAgcmV0dXJuIDxWZWN0b3JUaWxlTGF5ZXJDb25maWd1cmF0b3Igey4uLnByb3BzfSAvPjtcbiAgICB9XG5cbiAgICBfcmVuZGVyUmFzdGVyVGlsZUxheWVyQ29uZmlnKHByb3BzKSB7XG4gICAgICByZXR1cm4gPFJhc3RlclRpbGVMYXllckNvbmZpZ3VyYXRvciB7Li4ucHJvcHN9IC8+O1xuICAgIH1cblxuICAgIF9yZW5kZXJTY2F0dGVycGxvdExheWVyQ29uZmlnKFxuICAgICAge2xheWVyLCB2aXNDb25maWd1cmF0b3JQcm9wcywgbGF5ZXJDaGFubmVsQ29uZmlnUHJvcHMsIGxheWVyQ29uZmlndXJhdG9yUHJvcHN9LFxuICAgICAgc2hvd0ludGVyYWN0aW9uQ29udHJvbHNcbiAgICApIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICAgICB7LyogRmlsbCBDb2xvciAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cFxuICAgICAgICAgICAgey4uLihsYXllci52aXNDb25maWdTZXR0aW5ncy5maWxsZWQgfHwge2xhYmVsOiAnbGF5ZXIuY29sb3InfSl9XG4gICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLmNvbG9yfVxuICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge2xheWVyLmNvbmZpZy5jb2xvckZpZWxkID8gKFxuICAgICAgICAgICAgICA8TGF5ZXJDb2xvclJhbmdlU2VsZWN0b3Igey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JTZWxlY3RvciB7Li4ubGF5ZXJDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlciB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Mub3BhY2l0eX0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG5cbiAgICAgICAgICB7Lyogb3V0bGluZSBjb2xvciAqL31cbiAgICAgICAgICB7bGF5ZXIudHlwZSA9PT0gTEFZRVJfVFlQRVMucG9pbnQgPyAoXG4gICAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cFxuICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Mub3V0bGluZX1cbiAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLnN0cm9rZUNvbG9yfVxuICAgICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge2xheWVyLmNvbmZpZy5zdHJva2VDb2xvckZpZWxkID8gKFxuICAgICAgICAgICAgICAgIDxMYXllckNvbG9yUmFuZ2VTZWxlY3RvciB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IHByb3BlcnR5PVwic3Ryb2tlQ29sb3JSYW5nZVwiIC8+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPExheWVyQ29sb3JTZWxlY3RvclxuICAgICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDb2xvcj17bGF5ZXIuY29uZmlnLnZpc0NvbmZpZy5zdHJva2VDb2xvcn1cbiAgICAgICAgICAgICAgICAgIHByb3BlcnR5PVwic3Ryb2tlQ29sb3JcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MudGhpY2tuZXNzfVxuICAgICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFsYXllci5jb25maWcudmlzQ29uZmlnLm91dGxpbmV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgICApIDogbnVsbH1cblxuICAgICAgICAgIHsvKiBSYWRpdXMgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci5yYWRpdXMnfSBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgIHshbGF5ZXIuY29uZmlnLnNpemVGaWVsZCA/IChcbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5yYWRpdXN9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17Qm9vbGVhbihsYXllci5jb25maWcuc2l6ZUZpZWxkKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MucmFkaXVzUmFuZ2V9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWxheWVyLmNvbmZpZy5zaXplRmllbGQgfHwgbGF5ZXIuY29uZmlnLnZpc0NvbmZpZy5maXhlZFJhZGl1c31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuc2l6ZX1cbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIHtsYXllci5jb25maWcuc2l6ZUZpZWxkID8gKFxuICAgICAgICAgICAgICAgIDxWaXNDb25maWdTd2l0Y2hcbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5maXhlZFJhZGl1c31cbiAgICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaCB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuYmlsbGJvYXJkfSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiB0ZXh0IGxhYmVsICovfVxuICAgICAgICAgIDxUZXh0TGFiZWxQYW5lbFxuICAgICAgICAgICAgaWQ9e2xheWVyLmlkfVxuICAgICAgICAgICAgZmllbGRzPXt2aXNDb25maWd1cmF0b3JQcm9wcy5maWVsZHN9XG4gICAgICAgICAgICB1cGRhdGVMYXllclRleHRMYWJlbD17dGhpcy5wcm9wcy51cGRhdGVMYXllclRleHRMYWJlbH1cbiAgICAgICAgICAgIHRleHRMYWJlbD17bGF5ZXIuY29uZmlnLnRleHRMYWJlbH1cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgey8qIEludGVyYWN0aW9uICovfVxuICAgICAgICAgIHtzaG93SW50ZXJhY3Rpb25Db250cm9scyA/IChcbiAgICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPXsnbGF5ZXIuaW50ZXJhY3Rpb24nfSBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaCB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuYWxsb3dIb3Zlcn0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaFxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnNob3dOZWlnaGJvck9uSG92ZXJ9XG4gICAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8VmlzQ29uZmlnU3dpdGNoXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc2hvd0hpZ2hsaWdodENvbG9yfVxuICAgICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvU3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICApO1xuICAgIH1cblxuICAgIF9yZW5kZXJDbHVzdGVyTGF5ZXJDb25maWcoe2xheWVyLCB2aXNDb25maWd1cmF0b3JQcm9wcywgbGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICAgICAgey8qIENvbG9yICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPXsnbGF5ZXIuY29sb3InfSBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgIDxMYXllckNvbG9yUmFuZ2VTZWxlY3RvciB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICA8QWdnclNjYWxlU2VsZWN0b3Igey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfSBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5jb2xvcn0gLz5cbiAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLmNvbG9yfVxuICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICB7bGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuY29sb3JBZ2dyZWdhdGlvbi5jb25kaXRpb24obGF5ZXIuY29uZmlnKSA/IChcbiAgICAgICAgICAgICAgICA8QWdncmVnYXRpb25UeXBlU2VsZWN0b3JcbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5jb2xvckFnZ3JlZ2F0aW9ufVxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuY29sb3J9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXIgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLm9wYWNpdHl9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIENsdXN0ZXIgUmFkaXVzICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPXsnbGF5ZXIucmFkaXVzJ30gY29sbGFwc2libGU+XG4gICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5jbHVzdGVyUmFkaXVzfSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXIgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnJhZGl1c1JhbmdlfSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgPC9TdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgX3JlbmRlckhlYXRtYXBMYXllckNvbmZpZyh7bGF5ZXIsIHZpc0NvbmZpZ3VyYXRvclByb3BzLCBsYXllckNoYW5uZWxDb25maWdQcm9wc30pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICAgICB7LyogQ29sb3IgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci5jb2xvcid9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAgPExheWVyQ29sb3JSYW5nZVNlbGVjdG9yIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlciB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Mub3BhY2l0eX0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICAgey8qIFJhZGl1cyAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCBsYWJlbD17J2xheWVyLnJhZGl1cyd9PlxuICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MucmFkaXVzfVxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuICAgICAgICAgIHsvKiBXZWlnaHQgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci53ZWlnaHQnfT5cbiAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLndlaWdodH1cbiAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgIDwvU3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICApO1xuICAgIH1cblxuICAgIF9yZW5kZXJHcmlkTGF5ZXJDb25maWcocHJvcHMpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJBZ2dyZWdhdGlvbkxheWVyQ29uZmlnKHByb3BzKTtcbiAgICB9XG5cbiAgICBfcmVuZGVySGV4YWdvbkxheWVyQ29uZmlnKHByb3BzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVuZGVyQWdncmVnYXRpb25MYXllckNvbmZpZyhwcm9wcyk7XG4gICAgfVxuXG4gICAgX3JlbmRlckFnZ3JlZ2F0aW9uTGF5ZXJDb25maWcoe2xheWVyLCB2aXNDb25maWd1cmF0b3JQcm9wcywgbGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9KSB7XG4gICAgICBjb25zdCB7Y29uZmlnfSA9IGxheWVyO1xuICAgICAgY29uc3Qge1xuICAgICAgICB2aXNDb25maWc6IHtlbmFibGUzZCwgZml4ZWRIZWlnaHR9XG4gICAgICB9ID0gY29uZmlnO1xuICAgICAgY29uc3QgZWxldmF0aW9uQnlEZXNjcmlwdGlvbiA9ICdsYXllci5lbGV2YXRpb25CeURlc2NyaXB0aW9uJztcbiAgICAgIGNvbnN0IGNvbG9yQnlEZXNjcmlwdGlvbiA9ICdsYXllci5jb2xvckJ5RGVzY3JpcHRpb24nO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICAgICAgey8qIENvbG9yICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPXsnbGF5ZXIuY29sb3InfSBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLmNvbG9yfVxuICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEFnZ3JTY2FsZVNlbGVjdG9yIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc30gY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuY29sb3J9IC8+XG4gICAgICAgICAgICA8TGF5ZXJDb2xvclJhbmdlU2VsZWN0b3Igey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuXG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIHtsYXllci52aXNDb25maWdTZXR0aW5ncy5jb2xvckFnZ3JlZ2F0aW9uLmNvbmRpdGlvbihsYXllci5jb25maWcpID8gKFxuICAgICAgICAgICAgICAgIDxBZ2dyZWdhdGlvblR5cGVTZWxlY3RvclxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmNvbG9yQWdncmVnYXRpb259XG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj17Y29sb3JCeURlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuY29sb3J9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgIHtsYXllci52aXNDb25maWdTZXR0aW5ncy5wZXJjZW50aWxlICYmXG4gICAgICAgICAgICAgIGxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnBlcmNlbnRpbGUuY29uZGl0aW9uKGxheWVyLmNvbmZpZykgPyAoXG4gICAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnBlcmNlbnRpbGV9XG4gICAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXIgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLm9wYWNpdHl9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIENlbGwgc2l6ZSAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCBsYWJlbD17J2xheWVyLnJhZGl1cyd9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlciB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Mud29ybGRVbml0U2l6ZX0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5jb3ZlcmFnZX0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG5cbiAgICAgICAgICB7LyogRWxldmF0aW9uICovfVxuICAgICAgICAgIHtsYXllci52aXNDb25maWdTZXR0aW5ncy5lbmFibGUzZCA/IChcbiAgICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwXG4gICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5lbmFibGUzZH1cbiAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmVsZXZhdGlvblNjYWxlfVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBsYWJlbD17J2xheWVyVmlzQ29uZmlncy5oZWlnaHRNdWx0aXBsaWVyJ31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5zaXplfVxuICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb249e2VsZXZhdGlvbkJ5RGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWVuYWJsZTNkfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAge2xheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnNpemVBZ2dyZWdhdGlvbi5jb25kaXRpb24obGF5ZXIuY29uZmlnKSA/IChcbiAgICAgICAgICAgICAgICAgIDxBZ2dyZWdhdGlvblR5cGVTZWxlY3RvclxuICAgICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc2l6ZUFnZ3JlZ2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLnNpemV9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgICAgIDxBZ2dyU2NhbGVTZWxlY3RvclxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuc2l6ZX1cbiAgICAgICAgICAgICAgICAgIGxhYmVsPXsnSGVpZ2h0IFNjYWxlJ31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5zaXplUmFuZ2V9XG4gICAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgICBsYWJlbD17J2xheWVyVmlzQ29uZmlncy5oZWlnaHRSYW5nZSd9XG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17Zml4ZWRIZWlnaHR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8VmlzQ29uZmlnU3dpdGNoXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZml4ZWRIZWlnaHR9XG4gICAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB7bGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZWxldmF0aW9uUGVyY2VudGlsZS5jb25kaXRpb24obGF5ZXIuY29uZmlnKSA/IChcbiAgICAgICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmVsZXZhdGlvblBlcmNlbnRpbGV9XG4gICAgICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvU3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFNoYW4gbW92ZSB0aGVzZSBpbnRvIGxheWVyIGNsYXNzXG4gICAgX3JlbmRlckhleGFnb25JZExheWVyQ29uZmlnKHtcbiAgICAgIGxheWVyLFxuICAgICAgdmlzQ29uZmlndXJhdG9yUHJvcHMsXG4gICAgICBsYXllckNvbmZpZ3VyYXRvclByb3BzLFxuICAgICAgbGF5ZXJDaGFubmVsQ29uZmlnUHJvcHNcbiAgICB9KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICAgICAgey8qIEZpbGwgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXBcbiAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5maWxsZWR9XG4gICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICBsYWJlbD17J2xheWVyLmZpbGxDb2xvcid9XG4gICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLmNvbG9yfVxuICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge2xheWVyLmNvbmZpZy5jb2xvckZpZWxkID8gKFxuICAgICAgICAgICAgICA8TGF5ZXJDb2xvclJhbmdlU2VsZWN0b3Igey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JTZWxlY3RvciB7Li4ubGF5ZXJDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Mub3BhY2l0eX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFsYXllci5jb25maWcudmlzQ29uZmlnLmZpbGxlZH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIE91dGxpbmUgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXBcbiAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5vdXRsaW5lfVxuICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgY29sbGFwc2libGVcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5zdHJva2VDb2xvcn1cbiAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtsYXllci5jb25maWcuc3Ryb2tlQ29sb3JGaWVsZCA/IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JSYW5nZVNlbGVjdG9yIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gcHJvcGVydHk9XCJzdHJva2VDb2xvclJhbmdlXCIgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxMYXllckNvbG9yU2VsZWN0b3JcbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRDb2xvcj17bGF5ZXIuY29uZmlnLnZpc0NvbmZpZy5zdHJva2VDb2xvcn1cbiAgICAgICAgICAgICAgICBwcm9wZXJ0eT1cInN0cm9rZUNvbG9yXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc3Ryb2tlT3BhY2l0eX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFsYXllci5jb25maWcudmlzQ29uZmlnLm91dGxpbmV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MudGhpY2tuZXNzfVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWxheWVyLmNvbmZpZy52aXNDb25maWcub3V0bGluZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIENvdmVyYWdlICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPXsnbGF5ZXIuY292ZXJhZ2UnfSBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgIHshbGF5ZXIuY29uZmlnLmNvdmVyYWdlRmllbGQgPyAoXG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuY292ZXJhZ2V9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuY292ZXJhZ2VSYW5nZX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5jb3ZlcmFnZX1cbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiBoZWlnaHQgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXBcbiAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5lbmFibGUzZH1cbiAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgIGNvbGxhcHNpYmxlXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuc2l6ZX1cbiAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmVsZXZhdGlvblNjYWxlfVxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIGxhYmVsPXsnbGF5ZXJWaXNDb25maWdzLmhlaWdodE11bHRpcGxpZXInfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5zaXplUmFuZ2V9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGxhYmVsPVwibGF5ZXJWaXNDb25maWdzLmhlaWdodFJhbmdlXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaCB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZml4ZWRIZWlnaHR9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIHRleHQgbGFiZWwgKi99XG4gICAgICAgICAgPFRleHRMYWJlbFBhbmVsXG4gICAgICAgICAgICBpZD17bGF5ZXIuaWR9XG4gICAgICAgICAgICBmaWVsZHM9e3Zpc0NvbmZpZ3VyYXRvclByb3BzLmZpZWxkc31cbiAgICAgICAgICAgIHVwZGF0ZUxheWVyVGV4dExhYmVsPXt0aGlzLnByb3BzLnVwZGF0ZUxheWVyVGV4dExhYmVsfVxuICAgICAgICAgICAgdGV4dExhYmVsPXtsYXllci5jb25maWcudGV4dExhYmVsfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvU3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICApO1xuICAgIH1cblxuICAgIF9yZW5kZXJBcmNMYXllckNvbmZpZyhhcmdzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVuZGVyTGluZUxheWVyQ29uZmlnKGFyZ3MpO1xuICAgIH1cblxuICAgIF9yZW5kZXJMaW5lTGF5ZXJDb25maWcoe1xuICAgICAgbGF5ZXIsXG4gICAgICB2aXNDb25maWd1cmF0b3JQcm9wcyxcbiAgICAgIGxheWVyQ29uZmlndXJhdG9yUHJvcHMsXG4gICAgICBsYXllckNoYW5uZWxDb25maWdQcm9wc1xuICAgIH0pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICAgICB7LyogQ29sb3IgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci5jb2xvcid9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuc291cmNlQ29sb3J9XG4gICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7bGF5ZXIuY29uZmlnLmNvbG9yRmllbGQgPyAoXG4gICAgICAgICAgICAgIDxMYXllckNvbG9yUmFuZ2VTZWxlY3RvciB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8QXJjTGF5ZXJDb2xvclNlbGVjdG9yXG4gICAgICAgICAgICAgICAgbGF5ZXI9e2xheWVyfVxuICAgICAgICAgICAgICAgIHNldENvbG9yVUk9e2xheWVyQ29uZmlndXJhdG9yUHJvcHMuc2V0Q29sb3JVSX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZUNvbmZpZz17bGF5ZXJDb25maWd1cmF0b3JQcm9wcy5vbkNoYW5nZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZVZpc0NvbmZpZz17dmlzQ29uZmlndXJhdG9yUHJvcHMub25DaGFuZ2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5vcGFjaXR5fSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiB0aGlja25lc3MgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci5zdHJva2UnfSBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgIHtsYXllci5jb25maWcuc2l6ZUZpZWxkID8gKFxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnNpemVSYW5nZX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFsYXllci5jb25maWcuc2l6ZUZpZWxkfVxuICAgICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MudGhpY2tuZXNzfVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBsYWJlbD17ZmFsc2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLnNpemV9XG4gICAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG5cbiAgICAgICAgICB7LyogZWxldmF0aW9uIHNjYWxlICovfVxuICAgICAgICAgIHtsYXllci52aXNDb25maWdTZXR0aW5ncy5lbGV2YXRpb25TY2FsZSA/IChcbiAgICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPVwibGF5ZXJWaXNDb25maWdzLmVsZXZhdGlvblNjYWxlXCIgY29sbGFwc2libGU+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZWxldmF0aW9uU2NhbGV9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L1N0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBfcmVuZGVyVHJpcExheWVyQ29uZmlnKHtcbiAgICAgIGxheWVyLFxuICAgICAgdmlzQ29uZmlndXJhdG9yUHJvcHMsXG4gICAgICBsYXllckNvbmZpZ3VyYXRvclByb3BzLFxuICAgICAgbGF5ZXJDaGFubmVsQ29uZmlnUHJvcHNcbiAgICB9KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1ldGE6IHtmZWF0dXJlVHlwZXMgPSB7fX1cbiAgICAgIH0gPSBsYXllcjtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFN0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yPlxuICAgICAgICAgIHsvKiBDb2xvciAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCBsYWJlbD17J2xheWVyLmNvbG9yJ30gY29sbGFwc2libGU+XG4gICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5jb2xvcn1cbiAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtsYXllci5jb25maWcuY29sb3JGaWVsZCA/IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JSYW5nZVNlbGVjdG9yIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxMYXllckNvbG9yU2VsZWN0b3Igey4uLmxheWVyQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5vcGFjaXR5fSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiBTdHJva2UgV2lkdGggKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSBsYWJlbD1cImxheWVyLnN0cm9rZVdpZHRoXCIgY29sbGFwc2libGU+XG4gICAgICAgICAgICB7bGF5ZXIuY29uZmlnLnNpemVGaWVsZCA/IChcbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5zaXplUmFuZ2V9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MudGhpY2tuZXNzfVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBsYWJlbD17ZmFsc2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTd2l0Y2ggey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmJpbGxib2FyZH0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLnNpemV9XG4gICAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG5cbiAgICAgICAgICB7LyogVHJhaWwgTGVuZ3RoKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXBcbiAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgIHsuLi4oZmVhdHVyZVR5cGVzLnBvbHlnb24gPyBsYXllci52aXNDb25maWdTZXR0aW5ncy5zdHJva2VkIDoge30pfVxuICAgICAgICAgICAgbGFiZWw9XCJsYXllci50cmFpbExlbmd0aFwiXG4gICAgICAgICAgICBkZXNjcmlwdGlvbj1cImxheWVyLnRyYWlsTGVuZ3RoRGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgY29sbGFwc2libGVcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy50cmFpbExlbmd0aH1cbiAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICBsYWJlbD17ZmFsc2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU3dpdGNoIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5mYWRlVHJhaWx9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuICAgICAgICA8L1N0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBfcmVuZGVyR2VvanNvbkxheWVyQ29uZmlnKHtcbiAgICAgIGxheWVyLFxuICAgICAgdmlzQ29uZmlndXJhdG9yUHJvcHMsXG4gICAgICBsYXllckNvbmZpZ3VyYXRvclByb3BzLFxuICAgICAgbGF5ZXJDaGFubmVsQ29uZmlnUHJvcHNcbiAgICB9KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1ldGE6IHtmZWF0dXJlVHlwZXMgPSB7fX0sXG4gICAgICAgIGNvbmZpZzoge3Zpc0NvbmZpZ31cbiAgICAgIH0gPSBsYXllcjtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFN0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yPlxuICAgICAgICAgIHsvKiBGaWxsIENvbG9yICovfVxuICAgICAgICAgIHtmZWF0dXJlVHlwZXMucG9seWdvbiB8fCBmZWF0dXJlVHlwZXMucG9pbnQgPyAoXG4gICAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cFxuICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZmlsbGVkfVxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIGxhYmVsPVwibGF5ZXIuZmlsbENvbG9yXCJcbiAgICAgICAgICAgICAgY29sbGFwc2libGVcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5jb2xvcn1cbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIHtsYXllci5jb25maWcuY29sb3JGaWVsZCA/IChcbiAgICAgICAgICAgICAgICA8TGF5ZXJDb2xvclJhbmdlU2VsZWN0b3Igey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDxMYXllckNvbG9yU2VsZWN0b3Igey4uLmxheWVyQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5vcGFjaXR5fSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICAgKSA6IG51bGx9XG5cbiAgICAgICAgICB7Lyogc3Ryb2tlIGNvbG9yICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwXG4gICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc3Ryb2tlZH1cbiAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgIGxhYmVsPVwibGF5ZXIuc3Ryb2tlQ29sb3JcIlxuICAgICAgICAgICAgY29sbGFwc2libGVcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5zdHJva2VDb2xvcn1cbiAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtsYXllci5jb25maWcuc3Ryb2tlQ29sb3JGaWVsZCA/IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JSYW5nZVNlbGVjdG9yIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gcHJvcGVydHk9XCJzdHJva2VDb2xvclJhbmdlXCIgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxMYXllckNvbG9yU2VsZWN0b3JcbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRDb2xvcj17bGF5ZXIuY29uZmlnLnZpc0NvbmZpZy5zdHJva2VDb2xvcn1cbiAgICAgICAgICAgICAgICBwcm9wZXJ0eT1cInN0cm9rZUNvbG9yXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc3Ryb2tlT3BhY2l0eX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiBTdHJva2UgV2lkdGggKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXBcbiAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgIHsuLi4oZmVhdHVyZVR5cGVzLnBvbHlnb24gPyBsYXllci52aXNDb25maWdTZXR0aW5ncy5zdHJva2VkIDoge30pfVxuICAgICAgICAgICAgbGFiZWw9XCJsYXllci5zdHJva2VXaWR0aFwiXG4gICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsYXllci5jb25maWcuc2l6ZUZpZWxkID8gKFxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnNpemVSYW5nZX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy50aGlja25lc3N9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuc2l6ZX1cbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiBFbGV2YXRpb24gKi99XG4gICAgICAgICAge2ZlYXR1cmVUeXBlcy5wb2x5Z29uID8gKFxuICAgICAgICAgICAgPExheWVyQ29uZmlnR3JvdXBcbiAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZW5hYmxlM2R9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXshdmlzQ29uZmlnLmZpbGxlZH1cbiAgICAgICAgICAgICAgY29sbGFwc2libGVcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5lbGV2YXRpb25TY2FsZX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLmhlaWdodH1cbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxWaXNDb25maWdTd2l0Y2hcbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5maXhlZEhlaWdodH1cbiAgICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxWaXNDb25maWdTd2l0Y2ggey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Mud2lyZWZyYW1lfSAvPlxuICAgICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuICAgICAgICAgICkgOiBudWxsfVxuXG4gICAgICAgICAgey8qIFJhZGl1cyAqL31cbiAgICAgICAgICB7ZmVhdHVyZVR5cGVzLnBvaW50ID8gKFxuICAgICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci5yYWRpdXMnfSBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgICAgeyFsYXllci5jb25maWcucmFkaXVzRmllbGQgPyAoXG4gICAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnJhZGl1c31cbiAgICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtCb29sZWFuKGxheWVyLmNvbmZpZy5yYWRpdXNGaWVsZCl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MucmFkaXVzUmFuZ2V9XG4gICAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgICBsYWJlbD17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWxheWVyLmNvbmZpZy5yYWRpdXNGaWVsZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLnJhZGl1c31cbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L1N0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBfcmVuZGVyM0RMYXllckNvbmZpZyh7bGF5ZXIsIHZpc0NvbmZpZ3VyYXRvclByb3BzfSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPXsnbGF5ZXIuM0RNb2RlbCd9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgIHR5cGU9XCJmaWxlXCJcbiAgICAgICAgICAgICAgYWNjZXB0PVwiLmdsYiwuZ2x0ZlwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuZmlsZXMgJiYgZS50YXJnZXQuZmlsZXNbMF0pIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZS50YXJnZXQuZmlsZXNbMF0pO1xuICAgICAgICAgICAgICAgICAgdmlzQ29uZmlndXJhdG9yUHJvcHMub25DaGFuZ2Uoe3NjZW5lZ3JhcGg6IHVybH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPXsnbGF5ZXIuM0RNb2RlbE9wdGlvbnMnfSBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnNpemVTY2FsZX1cbiAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZmFsc2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuYW5nbGVYfVxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtmYWxzZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5hbmdsZVl9XG4gICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2ZhbHNlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmFuZ2xlWn1cbiAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZmFsc2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgX3JlbmRlclMyTGF5ZXJDb25maWcoe1xuICAgICAgbGF5ZXIsXG4gICAgICB2aXNDb25maWd1cmF0b3JQcm9wcyxcbiAgICAgIGxheWVyQ29uZmlndXJhdG9yUHJvcHMsXG4gICAgICBsYXllckNoYW5uZWxDb25maWdQcm9wc1xuICAgIH0pIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY29uZmlnOiB7dmlzQ29uZmlnfVxuICAgICAgfSA9IGxheWVyO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICAgICAgey8qIENvbG9yICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwXG4gICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZmlsbGVkfVxuICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgbGFiZWw9XCJsYXllci5maWxsQ29sb3JcIlxuICAgICAgICAgICAgY29sbGFwc2libGVcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5jb2xvcn1cbiAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtsYXllci5jb25maWcuY29sb3JGaWVsZCA/IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JSYW5nZVNlbGVjdG9yIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxMYXllckNvbG9yU2VsZWN0b3Igey4uLmxheWVyQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5vcGFjaXR5fSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiBTdHJva2UgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXBcbiAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5zdHJva2VkfVxuICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgbGFiZWw9XCJsYXllci5zdHJva2VDb2xvclwiXG4gICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtsYXllci5jb25maWcuc3Ryb2tlQ29sb3JGaWVsZCA/IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JSYW5nZVNlbGVjdG9yIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gcHJvcGVydHk9XCJzdHJva2VDb2xvclJhbmdlXCIgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxMYXllckNvbG9yU2VsZWN0b3JcbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRDb2xvcj17bGF5ZXIuY29uZmlnLnZpc0NvbmZpZy5zdHJva2VDb2xvcn1cbiAgICAgICAgICAgICAgICBwcm9wZXJ0eT1cInN0cm9rZUNvbG9yXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5zdHJva2VDb2xvcn1cbiAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG5cbiAgICAgICAgICB7LyogU3Ryb2tlIFdpZHRoICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gbGFiZWw9XCJsYXllci5zdHJva2VXaWR0aFwiIGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAge2xheWVyLmNvbmZpZy5zaXplRmllbGQgPyAoXG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc2l6ZVJhbmdlfVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBsYWJlbD17ZmFsc2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnRoaWNrbmVzc31cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5zaXplfVxuICAgICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIEVsZXZhdGlvbiAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cFxuICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmVuYWJsZTNkfVxuICAgICAgICAgICAgZGlzYWJsZWQ9eyF2aXNDb25maWcuZmlsbGVkfVxuICAgICAgICAgICAgY29sbGFwc2libGVcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5oZWlnaHR9XG4gICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5lbGV2YXRpb25TY2FsZX1cbiAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICBsYWJlbD17J2xheWVyVmlzQ29uZmlncy5oZWlnaHRNdWx0aXBsaWVyJ31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuaGVpZ2h0UmFuZ2V9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGxhYmVsPVwibGF5ZXJWaXNDb25maWdzLmhlaWdodFJhbmdlXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaCB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZml4ZWRIZWlnaHR9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaCB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy53aXJlZnJhbWV9IC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgPC9TdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgX3JlbmRlcldtc0xheWVyQ29uZmlnKHtcbiAgICAgIGxheWVyLFxuICAgICAgdmlzQ29uZmlndXJhdG9yUHJvcHMsXG4gICAgICBsYXllckNoYW5uZWxDb25maWdQcm9wcyxcbiAgICAgIGxheWVyQ29uZmlndXJhdG9yUHJvcHNcbiAgICB9KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci5zZXJ2aWNlJ30+XG4gICAgICAgICAgICA8UGFuZWxMYWJlbD5cbiAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9eydsYXllci5sYXllcid9IC8+XG4gICAgICAgICAgICA8L1BhbmVsTGFiZWw+XG4gICAgICAgICAgICA8SXRlbVNlbGVjdG9yXG4gICAgICAgICAgICAgIHNlbGVjdGVkSXRlbXM9e2xheWVyLmNvbmZpZy52aXNDb25maWcud21zTGF5ZXJ9XG4gICAgICAgICAgICAgIG9wdGlvbnM9e2xheWVyQ2hhbm5lbENvbmZpZ1Byb3BzLmRhdGFzZXQubWV0YWRhdGEubGF5ZXJzfVxuICAgICAgICAgICAgICBkaXNwbGF5T3B0aW9uPVwidGl0bGVcIlxuICAgICAgICAgICAgICBnZXRPcHRpb25WYWx1ZT1cIm5hbWVcIlxuICAgICAgICAgICAgICBtdWx0aVNlbGVjdD17ZmFsc2V9XG4gICAgICAgICAgICAgIHNlYXJjaGFibGU9e2ZhbHNlfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRMYXllciA9IGxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzLmRhdGFzZXQubWV0YWRhdGEubGF5ZXJzLmZpbmQoXG4gICAgICAgICAgICAgICAgICBsID0+IGwubmFtZSA9PT0gdmFsdWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmICghc2VsZWN0ZWRMYXllcikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxheWVyQ29uZmlndXJhdG9yUHJvcHMub25DaGFuZ2Uoe1xuICAgICAgICAgICAgICAgICAgdmlzQ29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmxheWVyLmNvbmZpZy52aXNDb25maWcsXG4gICAgICAgICAgICAgICAgICAgIHdtc0xheWVyOiBzZWxlY3RlZExheWVyXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCBsYWJlbD17J2xheWVyLmFwcGVhcmFuY2UnfT5cbiAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXIgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLm9wYWNpdHl9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDxWaXNDb25maWdTd2l0Y2hcbiAgICAgICAgICAgICAgbGFiZWw9eydsYXllclZpc0NvbmZpZ3MudHJhbnNwYXJlbnRCYWNrZ3JvdW5kJ31cbiAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnRyYW5zcGFyZW50fVxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIHByb3BlcnR5PVwidHJhbnNwYXJlbnRcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgIDwvU3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICApO1xuICAgIH1cblxuICAgIGhhbmRsZVNlbGVjdENvbHVtbk1vZGUgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IHt1cGRhdGVMYXllckNvbmZpZ30gPSB0aGlzLnByb3BzO1xuICAgICAgdXBkYXRlTGF5ZXJDb25maWcoe2NvbHVtbk1vZGU6IGtleX0pO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGxheWVyLFxuICAgICAgICBkYXRhc2V0cyxcbiAgICAgICAgb3Blbk1vZGFsLFxuICAgICAgICB1cGRhdGVMYXllckNvbmZpZyxcbiAgICAgICAgbGF5ZXJUeXBlT3B0aW9ucyxcbiAgICAgICAgdXBkYXRlTGF5ZXJUeXBlLFxuICAgICAgICBkaXNhYmxlVHlwZVNlbGVjdCA9IGZhbHNlXG4gICAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IHtmaWVsZHMgPSBbXSwgZmllbGRQYWlycyA9IHVuZGVmaW5lZH0gPSBsYXllci5jb25maWcuZGF0YUlkXG4gICAgICAgID8gZGF0YXNldHNbbGF5ZXIuY29uZmlnLmRhdGFJZF1cbiAgICAgICAgOiB7fTtcbiAgICAgIGNvbnN0IHtjb25maWd9ID0gbGF5ZXI7XG5cbiAgICAgIGNvbnN0IHZpc0NvbmZpZ3VyYXRvclByb3BzID0gZ2V0VmlzQ29uZmlndXJhdG9yUHJvcHModGhpcy5wcm9wcyk7XG4gICAgICBjb25zdCBsYXllckNvbmZpZ3VyYXRvclByb3BzID0gZ2V0TGF5ZXJDb25maWd1cmF0b3JQcm9wcyh0aGlzLnByb3BzKTtcbiAgICAgIGNvbnN0IGxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzID0gZ2V0TGF5ZXJDaGFubmVsQ29uZmlnUHJvcHModGhpcy5wcm9wcyk7XG4gICAgICBjb25zdCBkYXRhc2V0ID0gZ2V0TGF5ZXJEYXRhc2V0KGRhdGFzZXRzLCBsYXllcik7XG4gICAgICBjb25zdCByZW5kZXJUZW1wbGF0ZSA9IGxheWVyLnR5cGUgJiYgYF9yZW5kZXIke2NhcGl0YWxpemVGaXJzdExldHRlcihsYXllci50eXBlKX1MYXllckNvbmZpZ2A7XG5cbiAgICAgIC8vIHNob3cgb25seSBkYXRhc2V0cyB0aGF0IGNhbiBiZSB1c2VkIGJ5IHRoZSBsYXllclxuICAgICAgY29uc3Qgc291cmNlRGF0YVNlbGVjdG9yT3B0aW9ucyA9IE9iamVjdC5rZXlzKGRhdGFzZXRzKS5yZWR1Y2UoXG4gICAgICAgIChhY2MsIGlkKSA9PiAobWF0Y2hEYXRhc2V0VHlwZShkYXRhc2V0c1tpZF0sIGxheWVyKSA/IHsuLi5hY2MsIFtpZF06IGRhdGFzZXRzW2lkXX0gOiBhY2MpLFxuICAgICAgICB7fVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFN0eWxlZExheWVyQ29uZmlndXJhdG9yPlxuICAgICAgICAgIHtsYXllci5sYXllckluZm9Nb2RhbCAmJiAhbGF5ZXIuc3VwcG9ydGVkQ29sdW1uTW9kZXMgPyAoXG4gICAgICAgICAgICAvLyBUT0RPIGZpZ3VyZSBvdXQgaGFuZGxlciB0eXBlLiBTdHJpbmcgb3IgcmV0dXJuIHR5cGUgb2YgbGF5ZXIubGF5ZXJJbmZvTW9kYWwgP1xuICAgICAgICAgICAgPEhvd1RvQnV0dG9uIG9uQ2xpY2s9eygpID0+IG9wZW5Nb2RhbChsYXllci5sYXllckluZm9Nb2RhbCBhcyBhbnkpfSAvPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPXsnbGF5ZXIuYmFzaWMnfSBjb2xsYXBzaWJsZSBleHBhbmRlZD17IWxheWVyLmhhc0FsbENvbHVtbnMoKX0+XG4gICAgICAgICAgICA8TGF5ZXJUeXBlU2VsZWN0b3JcbiAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2xheWVyLnR5cGV9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlVHlwZVNlbGVjdH1cbiAgICAgICAgICAgICAgb3B0aW9ucz17bGF5ZXJUeXBlT3B0aW9uc31cbiAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICBvblNlbGVjdD17dXBkYXRlTGF5ZXJUeXBlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPFNvdXJjZURhdGFTZWxlY3RvclxuICAgICAgICAgICAgICAgIGRhdGFzZXRzPXtzb3VyY2VEYXRhU2VsZWN0b3JPcHRpb25zfVxuICAgICAgICAgICAgICAgIGlkPXtsYXllci5pZH1cbiAgICAgICAgICAgICAgICBkYXRhSWQ9e2NvbmZpZy5kYXRhSWR9XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIG9uU2VsZWN0PXsodmFsdWU6IHN0cmluZykgPT4gdXBkYXRlTGF5ZXJDb25maWcoe2RhdGFJZDogdmFsdWV9KX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPExheWVyQ29sdW1uTW9kZUNvbmZpZ1xuICAgICAgICAgICAgICAgIGxheWVyPXtsYXllcn1cbiAgICAgICAgICAgICAgICBzdXBwb3J0ZWRDb2x1bW5Nb2Rlcz17bGF5ZXIuc3VwcG9ydGVkQ29sdW1uTW9kZXN9XG4gICAgICAgICAgICAgICAgaWQ9e2xheWVyLmlkfVxuICAgICAgICAgICAgICAgIGxheWVyQ29uZmlnPXtsYXllci5jb25maWd9XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBmaWd1cmUgb3V0IGhhbmRsZXIgdHlwZS4gU3RyaW5nIG9yIHJldHVybiB0eXBlIG9mIGxheWVyLmxheWVySW5mb01vZGFsID9cbiAgICAgICAgICAgICAgICBvcGVuTW9kYWw9e29wZW5Nb2RhbCBhcyBhbnl9XG4gICAgICAgICAgICAgICAgdXBkYXRlTGF5ZXJDb25maWc9e3VwZGF0ZUxheWVyQ29uZmlnfVxuICAgICAgICAgICAgICAgIHVwZGF0ZUxheWVyVHlwZT17dXBkYXRlTGF5ZXJUeXBlfVxuICAgICAgICAgICAgICAgIGZpZWxkcz17ZmllbGRzfVxuICAgICAgICAgICAgICAgIGZpZWxkUGFpcnM9e2ZpZWxkUGFpcnN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAge2xheWVyLmVycm9yTWVzc2FnZSA/IDxMYXllckVycm9yTWVzc2FnZSBlcnJvck1lc3NhZ2U9e2xheWVyLmVycm9yTWVzc2FnZX0gLz4gOiBudWxsfVxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgICB7cmVuZGVyVGVtcGxhdGUgJiZcbiAgICAgICAgICAgIHRoaXNbcmVuZGVyVGVtcGxhdGVdICYmXG4gICAgICAgICAgICB0aGlzW3JlbmRlclRlbXBsYXRlXSh7XG4gICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICBkYXRhc2V0LFxuICAgICAgICAgICAgICB2aXNDb25maWd1cmF0b3JQcm9wcyxcbiAgICAgICAgICAgICAgbGF5ZXJDaGFubmVsQ29uZmlnUHJvcHMsXG4gICAgICAgICAgICAgIGxheWVyQ29uZmlndXJhdG9yUHJvcHNcbiAgICAgICAgICAgIH0pfVxuICAgICAgICA8L1N0eWxlZExheWVyQ29uZmlndXJhdG9yPlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTGF5ZXJDb25maWd1cmF0b3I7XG59XG5cbmV4cG9ydCBjb25zdCBBZ2dyZWdhdGlvblR5cGVTZWxlY3RvciA9ICh7Y2hhbm5lbCwgbGF5ZXIsIG9uQ2hhbmdlfTogQWdncmVnYXRpb25TZWxlY3RvclByb3BzKSA9PiB7XG4gIGNvbnN0IHtmaWVsZCwgYWdncmVnYXRpb24sIGtleX0gPSBjaGFubmVsO1xuICBjb25zdCBzZWxlY3RlZEZpZWxkID0gbGF5ZXIuY29uZmlnW2ZpZWxkXTtcbiAgY29uc3Qge3Zpc0NvbmZpZ30gPSBsYXllci5jb25maWc7XG5cbiAgLy8gYWdncmVnYXRpb24gc2hvdWxkIG9ubHkgYmUgc2VsZWN0YWJsZSB3aGVuIGZpZWxkIGlzIHNlbGVjdGVkXG4gIGNvbnN0IGxheWVyQWdncmVnYXRpb25UeXBlcyA9IGxheWVyLmdldEFnZ3JlZ2F0aW9uT3B0aW9ucyhrZXkpO1xuXG4gIGNvbnN0IGFnZ3JlZ2F0aW9uT3B0aW9ucyA9IEFHR1JFR0FUSU9OX1RZUEVfT1BUSU9OUy5maWx0ZXIoKHtpZH0pID0+XG4gICAgbGF5ZXJBZ2dyZWdhdGlvblR5cGVzLmluY2x1ZGVzKGlkKVxuICApO1xuXG4gIGNvbnN0IHNlbGVjdGVkQWdncmVnYXRpb24gPSBhZ2dyZWdhdGlvblxuICAgID8gYWdncmVnYXRpb25PcHRpb25zLmZpbmQoKHtpZH0pID0+IGlkID09PSB2aXNDb25maWdbYWdncmVnYXRpb25dKVxuICAgIDogW107XG5cbiAgcmV0dXJuIChcbiAgICA8U2lkZVBhbmVsU2VjdGlvbj5cbiAgICAgIDxQYW5lbExhYmVsPlxuICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZVxuICAgICAgICAgIGlkPXsnbGF5ZXIuYWdncmVnYXRlQnknfVxuICAgICAgICAgIHZhbHVlcz17e1xuICAgICAgICAgICAgZmllbGQ6IHNlbGVjdGVkRmllbGQuZGlzcGxheU5hbWVcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9QYW5lbExhYmVsPlxuICAgICAgPEl0ZW1TZWxlY3RvclxuICAgICAgICBzZWxlY3RlZEl0ZW1zPXtzZWxlY3RlZEFnZ3JlZ2F0aW9ufVxuICAgICAgICBvcHRpb25zPXthZ2dyZWdhdGlvbk9wdGlvbnN9XG4gICAgICAgIGRpc3BsYXlPcHRpb249XCJsYWJlbFwiXG4gICAgICAgIGdldE9wdGlvblZhbHVlPVwiaWRcIlxuICAgICAgICBtdWx0aVNlbGVjdD17ZmFsc2V9XG4gICAgICAgIHNlYXJjaGFibGU9e2ZhbHNlfVxuICAgICAgICBvbkNoYW5nZT17dmFsdWUgPT5cbiAgICAgICAgICBvbkNoYW5nZShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmlzQ29uZmlnOiB7XG4gICAgICAgICAgICAgICAgLi4ubGF5ZXIuY29uZmlnLnZpc0NvbmZpZyxcbiAgICAgICAgICAgICAgICBbYWdncmVnYXRpb24gYXMgc3RyaW5nXTogdmFsdWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoYW5uZWwua2V5XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAvPlxuICAgIDwvU2lkZVBhbmVsU2VjdGlvbj5cbiAgKTtcbn07XG4vKiBlc2xpbnQtZW5hYmxlIG1heC1wYXJhbXMgKi9cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSUEsSUFBQUEsYUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsaUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUVBLElBQUFLLGFBQUEsR0FBQUQsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFNLGtCQUFBLEdBQUFOLE9BQUE7QUFFQSxJQUFBTyxtQkFBQSxHQUFBSCxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQVEsa0JBQUEsR0FBQUosc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFTLHVCQUFBLEdBQUFMLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBVSxZQUFBLEdBQUFOLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBVyxtQkFBQSxHQUFBWCxPQUFBO0FBS0EsSUFBQVksc0JBQUEsR0FBQVIsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFhLGlCQUFBLEdBQUFYLHVCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBYyxrQkFBQSxHQUFBVixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQWUsa0JBQUEsR0FBQVgs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