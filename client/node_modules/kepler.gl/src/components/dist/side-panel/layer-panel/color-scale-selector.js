"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _constants = require("@kepler.gl/constants");
var _utils = require("@kepler.gl/utils");
var _colorBreaksPanel = _interopRequireDefault(require("./color-breaks-panel"));
var _dropdownSelect = _interopRequireDefault(require("../../common/item-selector/dropdown-select"));
var _accessor = _interopRequireDefault(require("../../common/item-selector/accessor"));
var _dropdownList = _interopRequireDefault(require("../../common/item-selector/dropdown-list"));
var _lazyTippy = _interopRequireDefault(require("../../map/lazy-tippy"));
var _typeahead = _interopRequireDefault(require("../../common/item-selector/typeahead"));
var _excluded = ["layer", "field", "dataset", "onSelect", "scaleType", "domain", "aggregatedBins", "range", "setColorUI", "colorUIConfig", "channelKey"],
  _excluded2 = ["colorMap"];
var _templateObject, _templateObject2, _templateObject3, _templateObject4; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// 'tippy-js'

var HISTOGRAM_BINS = 30;
var DropdownPropContext = /*#__PURE__*/_react["default"].createContext({});
var POPPER_OPTIONS = {
  modifiers: [
  // zero offsets since they are already added in VerticalToolbar
  {
    name: 'offset',
    options: {
      offset: [0, 0]
    }
  }]
};
var DropdownBottom = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  border-top: 1px solid\n    ", ";\n"])), function (props) {
  return props.light ? props.theme.dropdownListBorderTopLT : props.theme.dropdownListBorderTop;
});
var StyledScaleSelectDropdown = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  box-shadow: ", ";\n  .list-selector {\n    box-shadow: none;\n    border-top: 0;\n  }\n  .list__item {\n    padding: 4px 9px;\n  }\n"])), function (props) {
  return props.theme.dropdownListShadow;
});
var DropdownWrapper = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  border: 0;\n  width: 100%;\n  left: 0;\n  z-index: ", ";\n  position: absolute;\n  margin-top: ", "px;\n"])), function (props) {
  return props.theme.dropdownWrapperZ;
}, function (props) {
  return props.theme.dropdownWapperMargin;
});
var StyledColorScaleSelector = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  .typeahead {\n    // adds padding to bottom of dropdown\n    margin-bottom: 40px;\n  }\n  [data-tippy-root] {\n    width: 100%;\n  }\n"])));
function hideTippy(tippyInstance) {
  if (tippyInstance) {
    tippyInstance.hide();
  }
}
ColorScaleSelectorFactory.deps = [_colorBreaksPanel["default"]];
function ColorScaleSelectorFactory(ColorBreaksPanel) {
  var ColorScaleSelectDropdown = function ColorScaleSelectDropdown(props) {
    return /*#__PURE__*/_react["default"].createElement(StyledScaleSelectDropdown, null, /*#__PURE__*/_react["default"].createElement(_dropdownList["default"], props), /*#__PURE__*/_react["default"].createElement(DropdownPropContext.Consumer, null, function (context) {
      return /*#__PURE__*/_react["default"].createElement(DropdownBottom, null, /*#__PURE__*/_react["default"].createElement(ColorBreaksPanel, context));
    }));
  };
  var ColorScaleSelector = function ColorScaleSelector(_ref) {
    var _colorUIConfig$colorR, _field$filterProps;
    var layer = _ref.layer,
      field = _ref.field,
      dataset = _ref.dataset,
      onSelect = _ref.onSelect,
      scaleType = _ref.scaleType,
      domain = _ref.domain,
      aggregatedBins = _ref.aggregatedBins,
      range = _ref.range,
      setColorUI = _ref.setColorUI,
      colorUIConfig = _ref.colorUIConfig,
      channelKey = _ref.channelKey,
      dropdownSelectProps = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
    var displayOption = _accessor["default"].generateOptionToStringFor(dropdownSelectProps.displayOption);
    var getOptionValue = (0, _react.useMemo)(function () {
      return _accessor["default"].generateOptionToStringFor(dropdownSelectProps.getOptionValue);
    }, [dropdownSelectProps.getOptionValue]);
    var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      tippyInstance = _useState2[0],
      setTippyInstance = _useState2[1];
    var isEditingColorBreaks = colorUIConfig === null || colorUIConfig === void 0 || (_colorUIConfig$colorR = colorUIConfig.colorRangeConfig) === null || _colorUIConfig$colorR === void 0 ? void 0 : _colorUIConfig$colorR.customBreaks;
    var colorScale = (0, _react.useMemo)(function () {
      return (0, _utils.getLayerColorScale)({
        range: range,
        domain: domain,
        scaleType: scaleType,
        layer: layer
      });
    }, [range, domain, scaleType, layer]);
    var colorBreaks = (0, _react.useMemo)(function () {
      var _field$type;
      return colorScale ? (0, _utils.getLegendOfScale)({
        scale: colorScale.byZoom && domain ? colorScale((domain === null || domain === void 0 ? void 0 : domain.length) - 1) : colorScale,
        scaleType: scaleType,
        fieldType: (_field$type = field === null || field === void 0 ? void 0 : field.type) !== null && _field$type !== void 0 ? _field$type : _constants.ALL_FIELD_TYPES.real
      }) : null;
    }, [colorScale, scaleType, field === null || field === void 0 ? void 0 : field.type, domain]);
    var columnStats = field === null || field === void 0 || (_field$filterProps = field.filterProps) === null || _field$filterProps === void 0 ? void 0 : _field$filterProps.columnStats;
    var fieldValueAccessor = (0, _react.useMemo)(function () {
      return field ? function (idx) {
        return dataset.getValue(field.name, idx);
      } : function (idx) {
        return dataset.dataContainer.rowAsArray(idx);
      };
    }, [dataset, field]);
    var ordinalDomain = (0, _react.useMemo)(function () {
      return layer.config[layer.visualChannels[channelKey].domain] || [];
    }, [channelKey, layer.config, layer.visualChannels]);

    // aggregatedBins should be the raw data
    var allBins = (0, _react.useMemo)(function () {
      if ((field === null || field === void 0 ? void 0 : field.type) === _constants.ALL_FIELD_TYPES.string) {
        // Use ordinal bins for string columns, as d3 could potentially generate invalid numeric bins, and crash
        return (0, _utils.histogramFromOrdinal)(ordinalDomain, dataset.allIndexes, fieldValueAccessor);
      }
      if (aggregatedBins) {
        return (0, _utils.histogramFromValues)(Object.values(aggregatedBins).map(function (bin) {
          return bin.i;
        }), HISTOGRAM_BINS, function (idx) {
          return aggregatedBins[idx].value;
        });
      }
      return columnStats !== null && columnStats !== void 0 && columnStats.bins ? columnStats === null || columnStats === void 0 ? void 0 : columnStats.bins : (0, _utils.histogramFromValues)(dataset.allIndexes, HISTOGRAM_BINS, fieldValueAccessor);
    }, [aggregatedBins, columnStats, dataset, fieldValueAccessor, field === null || field === void 0 ? void 0 : field.type, ordinalDomain]);
    var histogramDomain = (0, _react.useMemo)(function () {
      return (0, _utils.getHistogramDomain)({
        aggregatedBins: aggregatedBins,
        columnStats: columnStats,
        dataset: dataset,
        fieldValueAccessor: fieldValueAccessor
      });
    }, [dataset, fieldValueAccessor, aggregatedBins, columnStats]);
    var isFiltered = aggregatedBins ? false : dataset.filteredIndexForDomain.length !== dataset.allIndexes.length;

    // get filteredBins (not apply to aggregate layer)
    var filteredBins = (0, _react.useMemo)(function () {
      if (!isFiltered) {
        return allBins;
      }
      if ((field === null || field === void 0 ? void 0 : field.type) === _constants.ALL_FIELD_TYPES.string) {
        return (0, _utils.histogramFromOrdinal)(ordinalDomain, dataset.filteredIndexForDomain, fieldValueAccessor);
      }
      // numeric thresholds
      var filterEmptyBins = false;
      var thresholds = allBins.map(function (b) {
        return b.x0;
      });
      return (0, _utils.histogramFromThreshold)(thresholds, dataset.filteredIndexForDomain, fieldValueAccessor, filterEmptyBins);
    }, [dataset, fieldValueAccessor, allBins, isFiltered, field === null || field === void 0 ? void 0 : field.type, ordinalDomain]);
    var onSelectScale = (0, _react.useCallback)(function (val) {
      // highlight selected option
      if (!val || isEditingColorBreaks) return;
      var selectedScale = getOptionValue(val);
      if (selectedScale === _constants.SCALE_TYPES.custom) {
        var customPalette = (0, _utils.initCustomPaletteByCustomScale)({
          scale: selectedScale,
          field: field,
          range: range,
          colorBreaks: colorBreaks
        });
        setColorUI({
          showColorChart: true,
          colorRangeConfig: {
            customBreaks: true
          },
          customPalette: customPalette
        });
        onSelect(selectedScale, customPalette);
      } else if ((0, _utils.hasColorMap)(range) && selectedScale !== _constants.SCALE_TYPES.customOrdinal) {
        // not custom
        // remove colorMap
        // eslint-disable-next-line no-unused-vars
        var _ = range.colorMap,
          newRange = (0, _objectWithoutProperties2["default"])(range, _excluded2);
        onSelect(selectedScale, newRange);
      } else {
        onSelect(selectedScale);
      }
    }, [isEditingColorBreaks, field, setColorUI, onSelect, range, getOptionValue, colorBreaks]);
    var onApply = (0, _react.useCallback)(function () {
      onSelect(scaleType, colorUIConfig.customPalette);
      hideTippy(tippyInstance);
    }, [onSelect, colorUIConfig.customPalette, tippyInstance, scaleType]);
    var onCancel = (0, _react.useCallback)(function () {
      hideTippy(tippyInstance);
    }, [tippyInstance]);
    var isCustomBreaks = scaleType === _constants.SCALE_TYPES.custom || scaleType === _constants.SCALE_TYPES.customOrdinal;
    return /*#__PURE__*/_react["default"].createElement(DropdownPropContext.Provider, {
      value: {
        setColorUI: setColorUI,
        colorField: field,
        dataset: dataset,
        colorUIConfig: colorUIConfig,
        colorBreaks: colorBreaks,
        isCustomBreaks: isCustomBreaks,
        allBins: allBins,
        filteredBins: filteredBins,
        isFiltered: isFiltered,
        histogramDomain: histogramDomain,
        ordinalDomain: ordinalDomain,
        onScaleChange: onSelect,
        onApply: onApply,
        onCancel: onCancel
      }
    }, /*#__PURE__*/_react["default"].createElement(StyledColorScaleSelector, null, /*#__PURE__*/_react["default"].createElement(_lazyTippy["default"], {
      trigger: "click",
      placement: "bottom-start",
      appendTo: "parent",
      interactive: true,
      hideOnClick: !isEditingColorBreaks,
      onCreate: setTippyInstance,
      popperOptions: POPPER_OPTIONS,
      render: function render(attrs) {
        return /*#__PURE__*/_react["default"].createElement(DropdownWrapper, attrs, !dropdownSelectProps.disabled && /*#__PURE__*/_react["default"].createElement(_typeahead["default"], (0, _extends2["default"])({}, dropdownSelectProps, {
          displayOption: displayOption
          // @ts-ignore
          ,
          getOptionValue: getOptionValue,
          onOptionSelected: onSelectScale,
          customListComponent: ColorScaleSelectDropdown,
          searchable: false,
          showOptionsWhenEmpty: true
        })));
      }
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "dropdown-select"
    }, /*#__PURE__*/_react["default"].createElement(_dropdownSelect["default"], (0, _extends2["default"])({}, dropdownSelectProps, {
      displayOption: displayOption,
      value: dropdownSelectProps.selectedItems[0]
    }))))));
  };
  return ColorScaleSelector;
}
var _default = exports["default"] = ColorScaleSelectorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,