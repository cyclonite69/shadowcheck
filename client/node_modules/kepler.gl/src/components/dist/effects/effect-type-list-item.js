"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DUMMY_ITEM_ID = void 0;
exports.EffectTypeListItemFactory = EffectTypeListItemFactory;
exports["default"] = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("react"));
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _classnames = _interopRequireDefault(require("classnames"));
var _localization = require("@kepler.gl/localization");
var _utils = require("@kepler.gl/utils");
var _icons = require("../common/icons");
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var DUMMY_ITEM_ID = exports.DUMMY_ITEM_ID = 'dummy';
var StyledListItem = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  border-radius: 2px;\n  height: 89px;\n  transition: background-color 0.4s;\n\n  &:hover {\n    background-color: ", ";\n  }\n\n  .effect-type-selector__item__icon {\n    display: flex;\n    height: ", "px;\n    width: ", "px;\n    border-radius: 2px;\n\n    .effect-preview {\n      height: ", "px;\n      width: ", "px;\n    }\n  }\n\n  .effect-type-selector__item__label {\n    text-transform: capitalize;\n    font-size: 10px;\n    text-align: center;\n    color: ", ";\n    max-width: ", "px;\n    line-height: 14px;\n    padding-top: 2px;\n  }\n"])), function (props) {
  return props.theme.effectTypeIconBgHoverColor;
}, function (props) {
  return props.theme.effectTypeIconSizeL;
}, function (props) {
  return props.theme.effectTypeIconSizeL;
}, function (props) {
  return props.theme.effectTypeIconSizeL;
}, function (props) {
  return props.theme.effectTypeIconSizeL;
}, function (props) {
  return props.theme.effectPanelTextMain;
}, function (props) {
  return props.theme.effectTypeIconSizeL;
});
var StyledAddButton = (0, _styledComponents["default"])(_icons.Add)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-right: 8px;\n  height: 16px;\n"])));
var StyledPlaceholderButton = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n  margin-left: 3px;\n  margin-right: 3px;\n  letter-spacing: 0.3px;\n  font-family: ", ";\n  font-weight: 500;\n"])), function (props) {
  return props.theme.effectPanelAddEffectFontFamily;
});

/**
 * Transforms an effect type from camel case into a name of the image in kebab case.
 * @param {string} type
 * @returns {string}
 */
var getImageUrl = function getImageUrl(type) {
  var kebab = type.replace(/[A-Z]+(?![a-z])|[A-Z]/g, function ($, ofs) {
    return (ofs ? '-' : '') + $.toLowerCase();
  });
  return "".concat((0, _utils.getApplicationConfig)().cdnUrl, "/images/effects/").concat(kebab, ".png");
};
function EffectTypeListItemFactory() {
  var EffectTypeListItem = function EffectTypeListItem(_ref) {
    var value = _ref.value,
      isTile = _ref.isTile,
      className = _ref.className;
    if ((value === null || value === void 0 ? void 0 : value.type) === DUMMY_ITEM_ID) {
      return /*#__PURE__*/_react["default"].createElement(StyledPlaceholderButton, null, /*#__PURE__*/_react["default"].createElement(StyledAddButton, null), /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
        id: 'effectManager.addEffect'
      }));
    }
    return /*#__PURE__*/_react["default"].createElement(StyledListItem, {
      className: (0, _classnames["default"])('effect-type-selector__item__inner', className, {
        list: !isTile
      })
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "effect-type-selector__item__icon"
    }, /*#__PURE__*/_react["default"].createElement("img", {
      className: "effect-preview",
      src: getImageUrl(value.type)
    })), /*#__PURE__*/_react["default"].createElement("div", {
      className: "effect-type-selector__item__label"
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "effect.type.".concat(value.type),
      defaultMessage: value.name
    })));
  };
  return (0, _styledComponents.withTheme)(EffectTypeListItem);
}
var _default = exports["default"] = EffectTypeListItemFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,