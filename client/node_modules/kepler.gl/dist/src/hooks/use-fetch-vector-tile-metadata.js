"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = useFetchVectorTileMetadata;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react");
var _pmtiles = require("@loaders.gl/pmtiles");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/table/src");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var DEFAULT_PROCESS_FUNCTION = function DEFAULT_PROCESS_FUNCTION(json) {
  return _objectSpread({
    metaJson: null,
    bounds: null,
    center: null,
    maxZoom: null,
    minZoom: null,
    fields: []
  }, json);
};
/** Hook to fetch and return mvt or pmtiles metadata. */
function useFetchVectorTileMetadata(_ref) {
  var remoteTileFormat = _ref.remoteTileFormat,
    tilesetUrl = _ref.tilesetUrl,
    metadataUrl = _ref.metadataUrl,
    _ref$process = _ref.process,
    process = _ref$process === void 0 ? DEFAULT_PROCESS_FUNCTION : _ref$process;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    error = _useState2[0],
    setError = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    data = _useState4[0],
    setData = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    loading = _useState6[0],
    setLoading = _useState6[1];
  (0, _react.useEffect)(function () {
    var getAndProcessMetadata = /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var metadata, tileSource, processedMetadata;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              setError(null);
              setData(null);
              if (!metadataUrl) {
                _context.next = 33;
                break;
              }
              setLoading(true);
              _context.prev = 4;
              metadata = null;
              if (!(remoteTileFormat === _src.RemoteTileFormat.MVT)) {
                _context.next = 12;
                break;
              }
              _context.next = 9;
              return (0, _src2.getMVTMetadata)(metadataUrl);
            case 9:
              metadata = _context.sent;
              _context.next = 16;
              break;
            case 12:
              tileSource = _pmtiles.PMTilesSource.createDataSource(metadataUrl, {});
              _context.next = 15;
              return tileSource.metadata;
            case 15:
              metadata = _context.sent;
            case 16:
              if (metadata) {
                _context.next = 18;
                break;
              }
              throw new Error('Failed to fetch metadata');
            case 18:
              processedMetadata = process(metadata);
              if (!(processedMetadata instanceof Error)) {
                _context.next = 23;
                break;
              }
              setError(processedMetadata);
              _context.next = 27;
              break;
            case 23:
              setError(null);
              _context.next = 26;
              return (0, _src2.getFieldsFromTile)({
                remoteTileFormat: remoteTileFormat,
                tilesetUrl: tilesetUrl,
                metadataUrl: metadataUrl,
                metadata: processedMetadata
              });
            case 26:
              setData(processedMetadata);
            case 27:
              _context.next = 32;
              break;
            case 29:
              _context.prev = 29;
              _context.t0 = _context["catch"](4);
              setError(_context.t0);
            case 32:
              setLoading(false);
            case 33:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[4, 29]]);
      }));
      return function getAndProcessMetadata() {
        return _ref2.apply(this, arguments);
      };
    }();
    getAndProcessMetadata();
  }, [metadataUrl, tilesetUrl, remoteTileFormat, setError, setData, process]);
  return {
    data: data,
    loading: loading,
    error: error
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,