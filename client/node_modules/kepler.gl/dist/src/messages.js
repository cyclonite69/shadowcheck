"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.flattenMessages = exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _en = _interopRequireDefault(require("./translations/en"));
var _fi = _interopRequireDefault(require("./translations/fi"));
var _pt = _interopRequireDefault(require("./translations/pt"));
var _es = _interopRequireDefault(require("./translations/es"));
var _ca = _interopRequireDefault(require("./translations/ca"));
var _cn = _interopRequireDefault(require("./translations/cn"));
var _ja = _interopRequireDefault(require("./translations/ja"));
var _ru = _interopRequireDefault(require("./translations/ru"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// Flat messages since react-intl does not seem to support nested structures
// Adapted from https://medium.com/siren-apparel-press/internationalization-and-localization-of-sirenapparel-eu-sirenapparel-us-and-sirenapparel-asia-ddee266066a2
var _flattenMessages = exports.flattenMessages = function flattenMessages(nestedMessages) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return Object.keys(nestedMessages).reduce(function (messages, key) {
    var value = nestedMessages[key];
    var prefixedKey = prefix ? "".concat(prefix, ".").concat(key) : key;
    if (typeof value === 'string') {
      messages[prefixedKey] = value;
    } else {
      Object.assign(messages, _flattenMessages(value, prefixedKey));
    }
    return messages;
  }, {});
};
var enFlat = _flattenMessages(_en["default"]);
var messages = exports.messages = {};
messages.en = enFlat;
messages.fi = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_fi["default"]));
messages.pt = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_pt["default"]));
messages.es = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_es["default"]));
messages.ca = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_ca["default"]));
messages.cn = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_cn["default"]));
messages.ja = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_ja["default"]));
messages.ru = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_ru["default"]));
var _default = exports["default"] = messages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZW4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9maSIsIl9wdCIsIl9lcyIsIl9jYSIsIl9jbiIsIl9qYSIsIl9ydSIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiZmxhdHRlbk1lc3NhZ2VzIiwiZXhwb3J0cyIsIm5lc3RlZE1lc3NhZ2VzIiwicHJlZml4IiwidW5kZWZpbmVkIiwicmVkdWNlIiwibWVzc2FnZXMiLCJrZXkiLCJ2YWx1ZSIsInByZWZpeGVkS2V5IiwiY29uY2F0IiwiYXNzaWduIiwiZW5GbGF0IiwiZW4iLCJmaSIsInB0IiwiZXMiLCJjYSIsImNuIiwiamEiLCJydSIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvY2FsaXphdGlvbi9zcmMvbWVzc2FnZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IGVuIGZyb20gJy4vdHJhbnNsYXRpb25zL2VuJztcbmltcG9ydCBmaSBmcm9tICcuL3RyYW5zbGF0aW9ucy9maSc7XG5pbXBvcnQgcHQgZnJvbSAnLi90cmFuc2xhdGlvbnMvcHQnO1xuaW1wb3J0IGVzIGZyb20gJy4vdHJhbnNsYXRpb25zL2VzJztcbmltcG9ydCBjYSBmcm9tICcuL3RyYW5zbGF0aW9ucy9jYSc7XG5pbXBvcnQgY24gZnJvbSAnLi90cmFuc2xhdGlvbnMvY24nO1xuaW1wb3J0IGphIGZyb20gJy4vdHJhbnNsYXRpb25zL2phJztcbmltcG9ydCBydSBmcm9tICcuL3RyYW5zbGF0aW9ucy9ydSc7XG5cbi8vIEZsYXQgbWVzc2FnZXMgc2luY2UgcmVhY3QtaW50bCBkb2VzIG5vdCBzZWVtIHRvIHN1cHBvcnQgbmVzdGVkIHN0cnVjdHVyZXNcbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL21lZGl1bS5jb20vc2lyZW4tYXBwYXJlbC1wcmVzcy9pbnRlcm5hdGlvbmFsaXphdGlvbi1hbmQtbG9jYWxpemF0aW9uLW9mLXNpcmVuYXBwYXJlbC1ldS1zaXJlbmFwcGFyZWwtdXMtYW5kLXNpcmVuYXBwYXJlbC1hc2lhLWRkZWUyNjYwNjZhMlxuZXhwb3J0IGNvbnN0IGZsYXR0ZW5NZXNzYWdlcyA9IChcbiAgbmVzdGVkTWVzc2FnZXMsXG4gIHByZWZpeCA9ICcnXG4pOiB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZztcbn0gPT4ge1xuICByZXR1cm4gT2JqZWN0LmtleXMobmVzdGVkTWVzc2FnZXMpLnJlZHVjZSgobWVzc2FnZXMsIGtleSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gbmVzdGVkTWVzc2FnZXNba2V5XTtcbiAgICBjb25zdCBwcmVmaXhlZEtleSA9IHByZWZpeCA/IGAke3ByZWZpeH0uJHtrZXl9YCA6IGtleTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgbWVzc2FnZXNbcHJlZml4ZWRLZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5hc3NpZ24obWVzc2FnZXMsIGZsYXR0ZW5NZXNzYWdlcyh2YWx1ZSwgcHJlZml4ZWRLZXkpKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VzO1xuICB9LCB7fSk7XG59O1xuXG5jb25zdCBlbkZsYXQgPSBmbGF0dGVuTWVzc2FnZXMoZW4pO1xuXG5leHBvcnQgY29uc3QgbWVzc2FnZXM6IHtcbiAgW2tleTogc3RyaW5nXToge1xuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgfTtcbn0gPSB7fTtcblxubWVzc2FnZXMuZW4gPSBlbkZsYXQ7XG5tZXNzYWdlcy5maSA9IHsuLi5lbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyhmaSl9O1xubWVzc2FnZXMucHQgPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMocHQpfTtcbm1lc3NhZ2VzLmVzID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKGVzKX07XG5tZXNzYWdlcy5jYSA9IHsuLi5lbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyhjYSl9O1xubWVzc2FnZXMuY24gPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMoY24pfTtcbm1lc3NhZ2VzLmphID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKGphKX07XG5tZXNzYWdlcy5ydSA9IHsuLi5lbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyhydSl9O1xuXG5leHBvcnQgZGVmYXVsdCBtZXNzYWdlcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxJQUFBQSxHQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxHQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxHQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxHQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxHQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxHQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTSxHQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTyxHQUFBLEdBQUFSLHNCQUFBLENBQUFDLE9BQUE7QUFBbUMsU0FBQVEsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQSxRQUFBZSxnQkFBQSxhQUFBaEIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsQ0FBQUQsQ0FBQSxTQUFBRSxNQUFBLENBQUFjLHlCQUFBLEdBQUFkLE1BQUEsQ0FBQWUsZ0JBQUEsQ0FBQWxCLENBQUEsRUFBQUcsTUFBQSxDQUFBYyx5QkFBQSxDQUFBZixDQUFBLEtBQUFILE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLEdBQUFhLE9BQUEsV0FBQWQsQ0FBQSxJQUFBRSxNQUFBLENBQUFnQixjQUFBLENBQUFuQixDQUFBLEVBQUFDLENBQUEsRUFBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBTixDQUFBLEVBQUFELENBQUEsaUJBQUFELENBQUEsSUFWbkM7QUFDQTtBQVdBO0FBQ0E7QUFDTyxJQUFNb0IsZ0JBQWUsR0FBQUMsT0FBQSxDQUFBRCxlQUFBLEdBQUcsU0FBbEJBLGVBQWVBLENBQzFCRSxjQUFjLEVBSVg7RUFBQSxJQUhIQyxNQUFNLEdBQUFWLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFXLFNBQUEsR0FBQVgsU0FBQSxNQUFHLEVBQUU7RUFJWCxPQUFPVixNQUFNLENBQUNDLElBQUksQ0FBQ2tCLGNBQWMsQ0FBQyxDQUFDRyxNQUFNLENBQUMsVUFBQ0MsUUFBUSxFQUFFQyxHQUFHLEVBQUs7SUFDM0QsSUFBTUMsS0FBSyxHQUFHTixjQUFjLENBQUNLLEdBQUcsQ0FBQztJQUNqQyxJQUFNRSxXQUFXLEdBQUdOLE1BQU0sTUFBQU8sTUFBQSxDQUFNUCxNQUFNLE9BQUFPLE1BQUEsQ0FBSUgsR0FBRyxJQUFLQSxHQUFHO0lBQ3JELElBQUksT0FBT0MsS0FBSyxLQUFLLFFBQVEsRUFBRTtNQUM3QkYsUUFBUSxDQUFDRyxXQUFXLENBQUMsR0FBR0QsS0FBSztJQUMvQixDQUFDLE1BQU07TUFDTHpCLE1BQU0sQ0FBQzRCLE1BQU0sQ0FBQ0wsUUFBUSxFQUFFTixnQkFBZSxDQUFDUSxLQUFLLEVBQUVDLFdBQVcsQ0FBQyxDQUFDO0lBQzlEO0lBQ0EsT0FBT0gsUUFBUTtFQUNqQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDUixDQUFDO0FBRUQsSUFBTU0sTUFBTSxHQUFHWixnQkFBZSxDQUFDYSxjQUFFLENBQUM7QUFFM0IsSUFBTVAsUUFJWixHQUFBTCxPQUFBLENBQUFLLFFBQUEsR0FBRyxDQUFDLENBQUM7QUFFTkEsUUFBUSxDQUFDTyxFQUFFLEdBQUdELE1BQU07QUFDcEJOLFFBQVEsQ0FBQ1EsRUFBRSxHQUFBdEIsYUFBQSxDQUFBQSxhQUFBLEtBQU9vQixNQUFNLEdBQUtaLGdCQUFlLENBQUNjLGNBQUUsQ0FBQyxDQUFDO0FBQ2pEUixRQUFRLENBQUNTLEVBQUUsR0FBQXZCLGFBQUEsQ0FBQUEsYUFBQSxLQUFPb0IsTUFBTSxHQUFLWixnQkFBZSxDQUFDZSxjQUFFLENBQUMsQ0FBQztBQUNqRFQsUUFBUSxDQUFDVSxFQUFFLEdBQUF4QixhQUFBLENBQUFBLGFBQUEsS0FBT29CLE1BQU0sR0FBS1osZ0JBQWUsQ0FBQ2dCLGNBQUUsQ0FBQyxDQUFDO0FBQ2pEVixRQUFRLENBQUNXLEVBQUUsR0FBQXpCLGFBQUEsQ0FBQUEsYUFBQSxLQUFPb0IsTUFBTSxHQUFLWixnQkFBZSxDQUFDaUIsY0FBRSxDQUFDLENBQUM7QUFDakRYLFFBQVEsQ0FBQ1ksRUFBRSxHQUFBMUIsYUFBQSxDQUFBQSxhQUFBLEtBQU9vQixNQUFNLEdBQUtaLGdCQUFlLENBQUNrQixjQUFFLENBQUMsQ0FBQztBQUNqRFosUUFBUSxDQUFDYSxFQUFFLEdBQUEzQixhQUFBLENBQUFBLGFBQUEsS0FBT29CLE1BQU0sR0FBS1osZ0JBQWUsQ0FBQ21CLGNBQUUsQ0FBQyxDQUFDO0FBQ2pEYixRQUFRLENBQUNjLEVBQUUsR0FBQTVCLGFBQUEsQ0FBQUEsYUFBQSxLQUFPb0IsTUFBTSxHQUFLWixnQkFBZSxDQUFDb0IsY0FBRSxDQUFDLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUFwQixPQUFBLGNBRW5DSyxRQUFRIiwiaWdub3JlTGlzdCI6W119