"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = GeocoderPanelFactory;
exports.getUpdateVisDataPayload = getUpdateVisDataPayload;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _classnames = _interopRequireDefault(require("classnames"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/processors/src");
var _typed = require("@deck.gl/core/typed");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _src3 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _geocoder = _interopRequireDefault(require("./geocoder/geocoder"));
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ICON_LAYER = {
  id: _src3.GEOCODER_LAYER_ID,
  type: 'icon',
  config: {
    label: 'Geocoder Layer',
    color: _src3.GEOCODER_ICON_COLOR,
    dataId: _src3.GEOCODER_DATASET_NAME,
    columns: {
      lat: 'lt',
      lng: 'ln',
      icon: 'icon',
      label: 'text'
    },
    isVisible: true,
    hidden: true,
    visConfig: {
      radius: _src3.GEOCODER_ICON_SIZE
    }
  }
};
function generateConfig(layerOrder) {
  return {
    visState: {
      layers: [ICON_LAYER],
      layerOrder: [ICON_LAYER.id].concat((0, _toConsumableArray2["default"])(layerOrder))
    }
  };
}
var StyledGeocoderPanel = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  top: ", "px;\n  right: ", ";\n  width: ", "px;\n  box-shadow: ", ";\n  z-index: 100;\n"])), function (props) {
  return props.theme.geocoderTop;
}, function (props) {
  return props.unsyncedViewports ?
  // 2 geocoders: split mode and unsynced viewports
  Number.isFinite(props.index) && props.index === 0 ? "calc(50% + ".concat(props.theme.geocoderRight, "px)") // unsynced left geocoder (index 0)
  : "".concat(props.theme.geocoderRight, "px") // unsynced right geocoder (index 1)
  : // 1 geocoder: single mode OR split mode and synced viewports
  "".concat(props.theme.geocoderRight, "px");
}, function (props) {
  return Number.isFinite(props.width) ? props.width : props.theme.geocoderWidth;
}, function (props) {
  return props.theme.boxShadow;
});
function generateGeocoderDataset(lat, lon, text) {
  var data = (0, _src.processRowObject)([{
    lt: lat,
    ln: lon,
    icon: 'place',
    text: text
  }]);
  if (!data) {
    return null;
  }
  return {
    data: data,
    info: {
      hidden: true,
      id: _src3.GEOCODER_DATASET_NAME,
      label: _src3.GEOCODER_DATASET_NAME
    }
  };
}
function isValid(key) {
  return /pk\..*\..*/.test(key);
}
function getUpdateVisDataPayload(lat, lon, text) {
  var dataset = generateGeocoderDataset(lat, lon, text);
  if (!dataset) {
    return null;
  }
  return [[dataset], {
    keepExistingConfig: true
  }];
}
function GeocoderPanelFactory() {
  var GeocoderPanel = function GeocoderPanel(_ref) {
    var isGeocoderEnabled = _ref.isGeocoderEnabled,
      mapState = _ref.mapState,
      mapboxApiAccessToken = _ref.mapboxApiAccessToken,
      updateVisData = _ref.updateVisData,
      removeDataset = _ref.removeDataset,
      updateMap = _ref.updateMap,
      layerOrder = _ref.layerOrder,
      _ref$transitionDurati = _ref.transitionDuration,
      transitionDuration = _ref$transitionDurati === void 0 ? 3000 : _ref$transitionDurati,
      width = _ref.width,
      className = _ref.className,
      index = _ref.index,
      unsyncedViewports = _ref.unsyncedViewports;
    var removeGeocoderDataset = (0, _react.useCallback)(function () {
      removeDataset(_src3.GEOCODER_DATASET_NAME);
    }, [removeDataset]);
    var onSelected = (0, _react.useCallback)(function () {
      var _viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var geoItem = arguments.length > 1 ? arguments[1] : undefined;
      var _geoItem$center = (0, _slicedToArray2["default"])(geoItem.center, 2),
        lon = _geoItem$center[0],
        lat = _geoItem$center[1],
        text = geoItem.text,
        bbox = geoItem.bbox;
      var updateVisDataPayload = getUpdateVisDataPayload(lat, lon, text);
      if (updateVisDataPayload) {
        removeGeocoderDataset();
        updateVisData.apply(void 0, (0, _toConsumableArray2["default"])(updateVisDataPayload).concat([generateConfig(layerOrder)]));
      }
      var bounds = bbox || [lon - _src3.GEOCODER_GEO_OFFSET, lat - _src3.GEOCODER_GEO_OFFSET, lon + _src3.GEOCODER_GEO_OFFSET, lat + _src3.GEOCODER_GEO_OFFSET];
      var centerAndZoom = (0, _src2.getCenterAndZoomFromBounds)(bounds, {
        width: mapState.width,
        height: mapState.height
      });
      if (!centerAndZoom) {
        // failed to fit bounds
        return;
      }
      updateMap(_objectSpread(_objectSpread({
        latitude: centerAndZoom.center[1],
        longitude: centerAndZoom.center[0]
      }, Number.isFinite(centerAndZoom.zoom) ? {
        zoom: centerAndZoom.zoom
      } : {}), {}, {
        pitch: 0,
        bearing: 0,
        transitionDuration: transitionDuration,
        transitionInterpolator: new _typed.FlyToInterpolator()
      }), index);
    }, [index, layerOrder, mapState, removeGeocoderDataset, transitionDuration, updateMap, updateVisData]);
    return /*#__PURE__*/_react["default"].createElement(StyledGeocoderPanel, {
      className: (0, _classnames["default"])('geocoder-panel', className),
      width: width,
      index: index,
      unsyncedViewports: unsyncedViewports,
      style: {
        display: isGeocoderEnabled ? 'block' : 'none'
      }
    }, isValid(mapboxApiAccessToken) && /*#__PURE__*/_react["default"].createElement(_geocoder["default"], {
      mapboxApiAccessToken: mapboxApiAccessToken,
      onSelected: onSelected,
      onDeleteMarker: removeGeocoderDataset,
      width: width
    }));
  };
  return GeocoderPanel;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,