"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.getDatasetAttributesFromRasterTile = getDatasetAttributesFromRasterTile;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/common-utils/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _src3 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/table/src");
var _src4 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _useFetchRasterTileMetadata = _interopRequireDefault(require("../../hooks/use-fetch-raster-tile-metadata"));
var _common = require("../../common");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var TilesetInputContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: grid;\n  grid-template-rows: repeat(3, 1fr);\n  row-gap: 18px;\n  font-size: 12px;\n"])));
var TilesetInputDescription = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  text-align: center;\n  color: ", ";\n  font-size: 11px;\n"])), function (props) {
  return props.theme.AZURE200;
});
function getDatasetAttributesFromRasterTile(_ref) {
  var name = _ref.name,
    metadataUrl = _ref.metadataUrl,
    rasterTileServerUrls = _ref.rasterTileServerUrls;
  return {
    name: name,
    type: _src2.DatasetType.RASTER_TILE,
    metadata: _objectSpread({
      metadataUrl: metadataUrl
    }, rasterTileServerUrls ? {
      rasterTileServerUrls: rasterTileServerUrls
    } : {})
  };
}
var parseMetadataAllowCollections = function parseMetadataAllowCollections(metadata, _ref2) {
  var metadataUrl = _ref2.metadataUrl,
    rasterTileType = _ref2.rasterTileType;
  return rasterTileType === _src2.RasterTileType.PMTILES ? (0, _src3.parseVectorMetadata)(metadata, {
    tileUrl: metadataUrl
  }) : (0, _src3.parseRasterMetadata)(metadata, {
    allowCollections: true
  });
};
var RasterTileForm = function RasterTileForm(_ref3) {
  var setResponse = _ref3.setResponse;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    tileName = _useState2[0],
    setTileName = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    tileNameWasModified = _useState4[0],
    setTileNameWasModified = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    metadataUrl = _useState6[0],
    setMetadataUrl = _useState6[1];
  var _useState7 = (0, _react.useState)(((0, _src4.getApplicationConfig)().rasterServerUrls || []).join(',')),
    _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
    rasterTileServerUrls = _useState8[0],
    setRasterTileServerUrls = _useState8[1];

  // Remove trailing slash to prevent issues with raster tile servers
  var clearedMetadataUrl = metadataUrl.endsWith('/') ? metadataUrl.slice(0, -1) : metadataUrl;
  var onTileNameChange = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    setTileNameWasModified(true);
    setTileName(event.target.value);
  }, [setTileName]);
  var onMetadataUrlChange = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    var value = event.target.value;
    setMetadataUrl(value);
    if (!tileNameWasModified) {
      setTileName(value.split('/').filter(Boolean).pop() || '');
    }
  }, [tileNameWasModified]);
  var onRasterTileServerUrlsChange = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    setRasterTileServerUrls(event.target.value);
  }, [setRasterTileServerUrls]);
  var _useFetchJson = (0, _useFetchRasterTileMetadata["default"])({
      url: clearedMetadataUrl,
      rasterTileType: (0, _src.isPMTilesUrl)(clearedMetadataUrl) ? _src2.RasterTileType.PMTILES : _src2.RasterTileType.STAC,
      process: parseMetadataAllowCollections
    }),
    metadata = _useFetchJson.data,
    loading = _useFetchJson.loading,
    metaError = _useFetchJson.error;
  (0, _react.useEffect)(function () {
    if (tileName && clearedMetadataUrl) {
      var pmtilesType = metadata === null || metadata === void 0 ? void 0 : metadata.pmtilesType;
      if (pmtilesType === _src2.PMTilesType.MVT) {
        return setResponse({
          metadata: metadata,
          dataset: null,
          loading: loading,
          error: new Error('For .pmtiles in mvt format, please use the Vector Tile form.')
        });
      }
      var error = metaError;

      // check for raster tile servers for STAC items and collections
      var rasterTileServers;
      if (!error
      // We still need raster tile servers for PMTiles when we plan to use elevation
      ) {
        rasterTileServers = rasterTileServerUrls.split(',').map(function (server) {
          return server.trim();
        }).filter(function (server) {
          return server;
        });
        if (rasterTileServers.length < 1 || !rasterTileServers.every(function (server) {
          return (0, _src.validateUrl)(server);
        })) {
          if (pmtilesType) {
            // For raster tiles elevation support is optional
            // TODO display a warning, but not a blocking error
            rasterTileServers = [];
          } else {
            error = new Error('Provide valid raster tile server urls to support STAC and elevations.');
          }
        }
      }
      var dataset = getDatasetAttributesFromRasterTile({
        name: tileName,
        metadataUrl: clearedMetadataUrl,
        rasterTileServerUrls: rasterTileServers
      });
      setResponse({
        metadata: metadata,
        dataset: dataset,
        loading: loading,
        error: error
      });
    } else {
      setResponse({
        metadata: metadata,
        dataset: null,
        loading: loading,
        error: metaError
      });
    }
  }, [metadata, loading, metaError, tileName, clearedMetadataUrl, rasterTileServerUrls, setResponse]);
  return /*#__PURE__*/_react["default"].createElement(TilesetInputContainer, null, /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: "tileset-name"
  }, "Name"), /*#__PURE__*/_react["default"].createElement(_common.InputLight, {
    id: "tileset-name",
    placeholder: "Name your tileset",
    value: tileName,
    onChange: onTileNameChange
  })), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: "tile-metadata"
  }, "Tileset metadata URL"), /*#__PURE__*/_react["default"].createElement(_common.InputLight, {
    id: "tile-metadata",
    placeholder: "Tileset metadata URL",
    value: metadataUrl !== null && metadataUrl !== void 0 ? metadataUrl : undefined,
    onChange: onMetadataUrlChange
  }), /*#__PURE__*/_react["default"].createElement(TilesetInputDescription, null, "Supports raster .pmtiles. Limited support for STAC Items and Collections.")), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: "tileset-raster-servers"
  }, "Raster tile servers"), /*#__PURE__*/_react["default"].createElement(_common.InputLight, {
    id: "tileset-raster-servers",
    placeholder: "Raster tile servers (separated by commas)",
    value: rasterTileServerUrls,
    onChange: onRasterTileServerUrlsChange
  }), /*#__PURE__*/_react["default"].createElement(TilesetInputDescription, null, "Raster tile server URLs for Cloud Optimized GeoTIFF tilesets and elevation.")));
};
var _default = exports["default"] = RasterTileForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,