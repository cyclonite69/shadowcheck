"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _icons = require("../../common/icons");
var _styledComponents = require("../../common/styled-components");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _components = require("./components");
var _exportHtmlMap = _interopRequireDefault(require("./export-html-map"));
var _exportJsonMap = _interopRequireDefault(require("./export-json-map"));
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var style = {
  width: '100%'
};
var NO_OP = function NO_OP() {
  return {};
};
ExportMapModalFactory.deps = [_exportHtmlMap["default"], _exportJsonMap["default"]];
function ExportMapModalFactory(ExportHtmlMap, ExportJsonMap) {
  var ExportMapModalUnmemoized = function ExportMapModalUnmemoized(_ref) {
    var _ref$config = _ref.config,
      config = _ref$config === void 0 ? {} : _ref$config,
      _ref$onChangeExportMa = _ref.onChangeExportMapFormat,
      onChangeExportMapFormat = _ref$onChangeExportMa === void 0 ? NO_OP : _ref$onChangeExportMa,
      _ref$onChangeExportMa2 = _ref.onChangeExportMapHTMLMode,
      onChangeExportMapHTMLMode = _ref$onChangeExportMa2 === void 0 ? NO_OP : _ref$onChangeExportMa2,
      _ref$onEditUserMapbox = _ref.onEditUserMapboxAccessToken,
      onEditUserMapboxAccessToken = _ref$onEditUserMapbox === void 0 ? NO_OP : _ref$onEditUserMapbox,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? {
        format: ''
      } : _ref$options;
    return /*#__PURE__*/_react["default"].createElement(_styledComponents.StyledModalContent, {
      className: "export-map-modal"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      style: style
    }, /*#__PURE__*/_react["default"].createElement(_components.StyledExportMapSection, null, /*#__PURE__*/_react["default"].createElement("div", {
      className: "description"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "title"
    }, /*#__PURE__*/_react["default"].createElement(_src2.FormattedMessage, {
      id: 'modal.exportMap.formatTitle'
    })), /*#__PURE__*/_react["default"].createElement("div", {
      className: "subtitle"
    }, /*#__PURE__*/_react["default"].createElement(_src2.FormattedMessage, {
      id: 'modal.exportMap.formatSubtitle'
    }))), /*#__PURE__*/_react["default"].createElement("div", {
      className: "selection"
    }, _src.EXPORT_MAP_FORMAT_OPTIONS.map(function (op) {
      return /*#__PURE__*/_react["default"].createElement(_styledComponents.StyledType, {
        key: op.id,
        selected: options.format === op.id,
        onClick: function onClick() {
          return op.available && onChangeExportMapFormat(op.id);
        }
      }, /*#__PURE__*/_react["default"].createElement(_icons.FileType, {
        ext: op.label,
        height: "80px",
        fontSize: "11px"
      }), options.format === op.id && /*#__PURE__*/_react["default"].createElement(_styledComponents.CheckMark, null));
    }))), (0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, _src.EXPORT_MAP_FORMATS.HTML, /*#__PURE__*/_react["default"].createElement(ExportHtmlMap, {
      onChangeExportMapHTMLMode: onChangeExportMapHTMLMode,
      onEditUserMapboxAccessToken: onEditUserMapboxAccessToken,
      options: options[options.format]
    })), _src.EXPORT_MAP_FORMATS.JSON, /*#__PURE__*/_react["default"].createElement(ExportJsonMap, {
      config: config
    }))[
    // @ts-ignore
    options.format]));
  };
  ExportMapModalUnmemoized.displayName = 'ExportMapModal';
  var ExportMapModal = _react["default"].memo(ExportMapModalUnmemoized);
  return ExportMapModal;
}
var _default = exports["default"] = ExportMapModalFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,