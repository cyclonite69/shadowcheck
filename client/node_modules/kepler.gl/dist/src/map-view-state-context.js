"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapViewStateContextProvider = exports.MapViewStateContext = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _pick = _interopRequireDefault(require("lodash/pick"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/reducers/src");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var MapViewStateContext = exports.MapViewStateContext = (0, _react.createContext)({
  getInternalViewState: function getInternalViewState() {
    return {
      latitude: 0,
      longitude: 0,
      zoom: 0
    };
  },
  setInternalViewState: function setInternalViewState() {
    return;
  }
});

/**
 * This context provider is used to localize the map view state so
 * that changes to the map view state do not affect the rest of the app,
 * mainly to prevent issues we experienced with basemap/deck viewport syncing.
 */

var MapViewStateContextProvider = exports.MapViewStateContextProvider = function MapViewStateContextProvider(_ref) {
  var mapState = _ref.mapState,
    children = _ref.children;
  var _ref2 = mapState || {},
    isSplit = _ref2.isSplit,
    isViewportSynced = _ref2.isViewportSynced;

  // Store locally map view states by mapIndex
  var _useState = (0, _react.useState)([mapState]),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    viewStates = _useState2[0],
    setViewStates = _useState2[1];

  // Detect and apply outside viewport changes
  // (e.g. from geocoder or when switching to 3d mode)
  (0, _react.useEffect)(function () {
    if (!mapState) return;
    var primaryState = viewStates[0];
    if (primaryState === mapState) return;

    // Define viewport properties that should be compared for changes
    var viewportProps = ['latitude', 'longitude', 'zoom', 'pitch', 'bearing', 'width', 'height'];
    var hasChanged = function hasChanged(a, b) {
      return !(0, _isEqual["default"])((0, _pick["default"])(a, viewportProps), (0, _pick["default"])(b, viewportProps));
    };
    if (isSplit && !isViewportSynced) {
      var _mapState$splitMapVie;
      if ((_mapState$splitMapVie = mapState.splitMapViewports) !== null && _mapState$splitMapVie !== void 0 && _mapState$splitMapVie.some(function (s, i) {
        return hasChanged(s, viewStates[i]);
      })) {
        setViewStates(mapState.splitMapViewports);
      }
    } else if (hasChanged(primaryState, mapState)) {
      // Update internal view state when mapState viewport properties change
      // This ensures synchronization when viewport is updated via fitBoundsUpdater
      setViewStates([(0, _src.pickViewportPropsFromMapState)(mapState)]);
    }
    // Only update internalViewState when viewState changes
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mapState]);
  var value = {
    getInternalViewState: function getInternalViewState() {
      var _viewStates$index;
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return (_viewStates$index = viewStates[index]) !== null && _viewStates$index !== void 0 ? _viewStates$index : viewStates[0];
    },
    setInternalViewState: function setInternalViewState(newViewState) {
      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      setViewStates(function (prevViewStates) {
        if (isSplit && !isViewportSynced) {
          var nextViewStates = (0, _toConsumableArray2["default"])(prevViewStates);
          nextViewStates[index] = newViewState;
          return nextViewStates;
        }
        return [newViewState];
      });
    }
  };
  return /*#__PURE__*/_react["default"].createElement(MapViewStateContext.Provider, {
    value: value
  }, children);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,