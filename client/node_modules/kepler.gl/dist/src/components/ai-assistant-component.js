"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AiAssistantComponent = AiAssistantComponent;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _lib = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-redux/lib");
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/styles/src");
var _core = require("@openassistant/core");
var _ui = require("@openassistant/ui");
require("@openassistant/echarts/dist/index.css");
require("@openassistant/ui/dist/index.css");
var _actions = require("../actions");
var _constants = require("../constants");
var _utils = require("../tools/utils");
var _tools = require("../tools/tools");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var StyledAiAssistantComponent = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  height: 100%;\n  padding-bottom: 4px;\n\n  * {\n    font-size: 11px;\n  }\n"])));
function AiAssistantComponent() {
  var visState = (0, _lib.useSelector)(function (state) {
    return state.demo.keplerGl.map.visState;
  });
  var aiAssistant = (0, _lib.useSelector)(function (state) {
    return state.demo.aiAssistant;
  });
  var dispatch = (0, _lib.useDispatch)();

  // define LLM functions
  var tools = (0, _tools.setupLLMTools)({
    visState: visState,
    aiAssistant: aiAssistant,
    dispatch: dispatch
  });

  // enable voice and screen capture
  var enableVoiceAndScreenCapture = (aiAssistant === null || aiAssistant === void 0 ? void 0 : aiAssistant.config.provider) === 'openai' || (aiAssistant === null || aiAssistant === void 0 ? void 0 : aiAssistant.config.provider) === 'google' || false;

  // define assistant props
  var assistantProps = {
    name: _constants.ASSISTANT_NAME,
    description: _constants.ASSISTANT_DESCRIPTION,
    version: _constants.ASSISTANT_VERSION,
    modelProvider: (aiAssistant === null || aiAssistant === void 0 ? void 0 : aiAssistant.config.provider) || '',
    model: (aiAssistant === null || aiAssistant === void 0 ? void 0 : aiAssistant.config.model) || '',
    apiKey: (aiAssistant === null || aiAssistant === void 0 ? void 0 : aiAssistant.config.apiKey) || '',
    baseUrl: (aiAssistant === null || aiAssistant === void 0 ? void 0 : aiAssistant.config.baseUrl) || '',
    tools: tools
  };
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    datasetMetaData = _useState2[0],
    setDatasetMetaData = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    ideas = _useState4[0],
    setIdeas = _useState4[1];

  // get dataset meta data and re-initialize assistant when datasets or layers change
  (0, _react.useEffect)(function () {
    var metaData = (0, _utils.getDatasetContext)(visState === null || visState === void 0 ? void 0 : visState.datasets, (visState === null || visState === void 0 ? void 0 : visState.layers) || []);
    setDatasetMetaData(metaData);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [visState === null || visState === void 0 ? void 0 : visState.datasets, visState === null || visState === void 0 ? void 0 : visState.layers]);

  // use dataset meta data in LLM instructions
  var instructions = "".concat(_constants.INSTRUCTIONS, "\n\n").concat(datasetMetaData);

  // generate ideas from LLM
  var _useAssistant = (0, _core.useAssistant)(_objectSpread(_objectSpread({}, assistantProps), {}, {
      instructions: instructions
    })),
    temporaryPrompt = _useAssistant.temporaryPrompt;
  var generateIdeas = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      var response, match, json;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return temporaryPrompt({
              prompt: _constants.PROMPT_IDEAS,
              temperature: 1.0
            });
          case 3:
            response = _context.sent;
            // find [{},{}...] in the text and parse it as json, handling whitespace
            match = response === null || response === void 0 ? void 0 : response.match(/\[\s*\{[\s\S]*\}\s*\]/);
            if (match) {
              json = JSON.parse(match[0]);
              setIdeas(json);
            }
            _context.next = 11;
            break;
          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);
            console.error('Error generating ideas', _context.t0);
          case 11:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 8]]);
    }));
    return function generateIdeas() {
      return _ref.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    // get ideas UI component
    if (ideas.length === 0 && datasetMetaData.length > 0) {
      generateIdeas();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [datasetMetaData]);
  var onRestartAssistant = function onRestartAssistant() {
    // clean up aiAssistant state
    dispatch((0, _actions.updateAiAssistantMessages)([]));
  };
  var onMessagesUpdated = function onMessagesUpdated(messages) {
    dispatch((0, _actions.updateAiAssistantMessages)(messages));
  };
  var onScreenshotClick = function onScreenshotClick() {
    dispatch((0, _actions.setStartScreenCapture)(true));
  };
  var onRemoveScreenshot = function onRemoveScreenshot() {
    dispatch((0, _actions.setScreenCaptured)(''));
  };
  return /*#__PURE__*/_react["default"].createElement(StyledAiAssistantComponent, {
    className: "ai-assistant-component"
  }, /*#__PURE__*/_react["default"].createElement(_ui.AiAssistant, (0, _extends2["default"])({}, assistantProps, {
    instructions: instructions,
    theme: _src.theme.textColor === _src.textColorLT ? 'light' : 'dark',
    welcomeMessage: _constants.WELCOME_MESSAGE,
    temperature: (aiAssistant === null || aiAssistant === void 0 ? void 0 : aiAssistant.config.temperature) || 0,
    topP: (aiAssistant === null || aiAssistant === void 0 ? void 0 : aiAssistant.config.topP) || 0,
    initialMessages: aiAssistant === null || aiAssistant === void 0 ? void 0 : aiAssistant.messages,
    onMessagesUpdated: onMessagesUpdated,
    enableVoice: enableVoiceAndScreenCapture,
    enableScreenCapture: enableVoiceAndScreenCapture,
    onScreenshotClick: onScreenshotClick,
    screenCapturedBase64: (aiAssistant === null || aiAssistant === void 0 ? void 0 : aiAssistant.screenshotToAsk.screenCaptured) || '',
    onRemoveScreenshot: onRemoveScreenshot,
    onRestartChat: onRestartAssistant,
    fontSize: 'text-tiny',
    botMessageClassName: '',
    githubIssueLink: 'https://github.com/keplergl/kepler.gl/issues',
    ideas: ideas,
    onRefreshIdeas: generateIdeas
  })));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,