"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AiAssistantConfig = AiAssistantConfig;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _lib = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-redux/lib");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/components/src");
var _apiKey = _interopRequireDefault(require("../icons/api-key"));
var _models = _interopRequireDefault(require("../config/models.json"));
var _usehooksTs = require("usehooks-ts");
var _core = require("@openassistant/core");
var _actions = require("../actions");
var _reactIntl = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-intl");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var SectionTitle = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: ", ";\n  color: ", ";\n  text-transform: capitalize;\n"])), function (props) {
  return props.theme.inputFontSize;
}, function (props) {
  return props.theme.effectPanelTextSecondary1;
});
var StyledAiAssistantConfig = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 12px;\n  font-size: ", ";\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  width: 100%;\n  height: 100%;\n\n  .api-key-input {\n    box-shadow: ", ";\n    width: 100%;\n    .api-key-input__icon {\n      position: absolute;\n      height: ", "px;\n      width: 30px;\n      padding-left: 6px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: ", ";\n    }\n\n    input {\n      padding: 4px 36px;\n      height: ", "px;\n      caret-color: unset;\n    }\n  }\n"])), function (props) {
  return props.theme.primaryBtnFontSizeDefault;
}, function (props) {
  return props.theme.boxShadow;
}, function (props) {
  return props.theme.geocoderInputHeight;
}, function (props) {
  return props.theme.subtextColor;
}, function (props) {
  return props.theme.geocoderInputHeight;
});

// Ollama model input wrapper: checkbox + 'Input Model Name:' + input
// all children element have width based on the content
var OllamaModelInputWrapper = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: row;\n  gap: 4px;\n  align-items: center;\n"])));
var StyledWrapper = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n"])));
var StyledItemSelector = (0, _styledComponents["default"])(_src.ItemSelector)(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  .item-selector__dropdown {\n    padding-left: 10px;\n    border-radius: 4px;\n  }\n  .active {\n    border-color: ", ";\n    border-radius: 4px 4px 0px 0px !important;\n  }\n  width: 100%;\n"])), function (props) {
  return props.theme.activeColor;
});
var StyleSliderWrapper = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 100%;\n  align-self: flex-start;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  .kg-range-slider__input {\n    height: 32px;\n    text-align: center;\n    padding: 3px 6px;\n  }\n  .kg-slider {\n    padding-left: 6px;\n  }\n  .kg-range-slider {\n    padding: 0px !important;\n  }\n"])));
var StyledButton = _styledComponents["default"].div(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 100%;\n  align-self: flex-start;\n  margin-top: 12px;\n\n  button div {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    margin-right: 4px;\n  }\n"])));
var StyleErrorMessage = _styledComponents["default"].div(_templateObject8 || (_templateObject8 = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: ", ";\n  background-color: ", ";\n  border-radius: 4px;\n  padding: 4px 8px;\n  color: ", ";\n"])), function (props) {
  return props.theme.primaryBtnFontSizeDefault;
}, function (props) {
  return props.theme.errorColor;
}, function (props) {
  return props.theme.errorTextColor;
});
var RangeSlider = _src.appInjector.get(_src.RangeSliderFactory);
function AiAssistantConfig() {
  var dispatch = (0, _lib.useDispatch)();
  var aiAssistantConfig = (0, _lib.useSelector)(function (state) {
    return state.demo.aiAssistant.config;
  });
  var intl = (0, _reactIntl.useIntl)();
  var _useLocalStorage = (0, _usehooksTs.useLocalStorage)('ai-assistant-provider', aiAssistantConfig.provider || 'openai'),
    _useLocalStorage2 = (0, _slicedToArray2["default"])(_useLocalStorage, 2),
    provider = _useLocalStorage2[0],
    setProvider = _useLocalStorage2[1];
  var _useLocalStorage3 = (0, _usehooksTs.useLocalStorage)('ai-assistant-model', aiAssistantConfig.model || _models["default"][provider][0]),
    _useLocalStorage4 = (0, _slicedToArray2["default"])(_useLocalStorage3, 2),
    model = _useLocalStorage4[0],
    setModel = _useLocalStorage4[1];
  var _useLocalStorage5 = (0, _usehooksTs.useLocalStorage)('ai-assistant-api-key', aiAssistantConfig.apiKey || ''),
    _useLocalStorage6 = (0, _slicedToArray2["default"])(_useLocalStorage5, 2),
    apiKey = _useLocalStorage6[0],
    setApiKey = _useLocalStorage6[1];
  var _useLocalStorage7 = (0, _usehooksTs.useLocalStorage)('ai-assistant-temperature', aiAssistantConfig.temperature || 0.0),
    _useLocalStorage8 = (0, _slicedToArray2["default"])(_useLocalStorage7, 2),
    temperature = _useLocalStorage8[0],
    setTemperature = _useLocalStorage8[1];
  var _useLocalStorage9 = (0, _usehooksTs.useLocalStorage)('ai-assistant-top-p', aiAssistantConfig.topP || 1.0),
    _useLocalStorage10 = (0, _slicedToArray2["default"])(_useLocalStorage9, 2),
    topP = _useLocalStorage10[0],
    setTopP = _useLocalStorage10[1];
  var _useLocalStorage11 = (0, _usehooksTs.useLocalStorage)('ai-assistant-base-url', aiAssistantConfig.baseUrl || 'http://localhost:11434/api'),
    _useLocalStorage12 = (0, _slicedToArray2["default"])(_useLocalStorage11, 2),
    baseUrl = _useLocalStorage12[0],
    setBaseUrl = _useLocalStorage12[1];
  var _useLocalStorage13 = (0, _usehooksTs.useLocalStorage)('ai-assistant-mapbox-token', aiAssistantConfig.mapboxToken || ''),
    _useLocalStorage14 = (0, _slicedToArray2["default"])(_useLocalStorage13, 2),
    mapboxToken = _useLocalStorage14[0],
    setMapboxToken = _useLocalStorage14[1];
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    ollamaModelInputChecked = _useState2[0],
    setOllamaModelInputChecked = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    ollamaModelInputValue = _useState4[0],
    setOllamaModelInputValue = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    connectionError = _useState6[0],
    setConnectionError = _useState6[1];
  var _useState7 = (0, _react.useState)(''),
    _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
    errorMessage = _useState8[0],
    setErrorMessage = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
    isRunning = _useState10[0],
    setIsRunning = _useState10[1];
  var onAiProviderSelect = function onAiProviderSelect(value) {
    if (typeof value === 'string') {
      setProvider(value);
      setModel(_models["default"][value][0]);
      setConnectionError(false);
      setErrorMessage('');
    }
  };
  var onLLMModelSelect = function onLLMModelSelect(value) {
    if (typeof value === 'string') {
      setModel(value);
    }
  };
  var onApiKeyChange = function onApiKeyChange(e) {
    setApiKey(e.target.value);
    // reset previous key error if any
    setConnectionError(false);
    setErrorMessage('');
  };
  var onTemperatureChange = function onTemperatureChange(value) {
    setTemperature(value[1]);
  };
  var onTopPChange = function onTopPChange(value) {
    setTopP(value[1]);
  };
  var onBaseUrlChange = function onBaseUrlChange(e) {
    setBaseUrl(e.target.value);
    setConnectionError(false);
    setErrorMessage('');
  };
  var onMapboxTokenChange = function onMapboxTokenChange(e) {
    setMapboxToken(e.target.value);
  };
  var onOllamaModelInputChecked = function onOllamaModelInputChecked(e) {
    setOllamaModelInputChecked(e.target.checked);
    if (!e.target.checked) {
      // use model from selector
      setModel('');
    }
  };
  var onOllamaModelInputValueChange = function onOllamaModelInputValueChange(e) {
    setOllamaModelInputValue(e.target.value);
    setModel(e.target.value);
  };
  var onStartChat = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      var timeoutPromise, AssistantModel, success, _errorMessage;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setIsRunning(true);
            _context.prev = 1;
            timeoutPromise = new Promise(function (_, reject) {
              setTimeout(function () {
                return reject(new Error('Connection timeout after 15 seconds'));
              }, 15000);
            });
            AssistantModel = (0, _core.GetAssistantModelByProvider)({
              provider: provider
            });
            _context.next = 6;
            return Promise.race([AssistantModel === null || AssistantModel === void 0 ? void 0 : AssistantModel.testConnection(apiKey, model), timeoutPromise]);
          case 6:
            success = _context.sent;
            _errorMessage = !success ? provider === 'ollama' ? 'Connection failed: maybe invalid Ollama Base URL' : 'Connection failed: maybe invalid API Key' : '';
            setConnectionError(!success);
            setErrorMessage(_errorMessage);
            dispatch((0, _actions.updateAiAssistantConfig)({
              provider: provider,
              model: model,
              apiKey: apiKey,
              baseUrl: baseUrl,
              isReady: success,
              temperature: temperature,
              topP: topP,
              mapboxToken: mapboxToken
            }));
            _context.next = 17;
            break;
          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](1);
            setConnectionError(true);
            setErrorMessage(_context.t0 instanceof Error ? _context.t0.message : 'Connection failed');
          case 17:
            _context.prev = 17;
            setIsRunning(false);
            return _context.finish(17);
          case 20:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[1, 13, 17, 20]]);
    }));
    return function onStartChat() {
      return _ref.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/_react["default"].createElement(StyledAiAssistantConfig, {
    className: "ai-assistant-config__type"
  }, /*#__PURE__*/_react["default"].createElement(_src.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(SectionTitle, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
    id: "aiAssistantManager.aiProvider"
  }))), /*#__PURE__*/_react["default"].createElement(StyledWrapper, null, /*#__PURE__*/_react["default"].createElement(StyledItemSelector, {
    selectedItems: provider,
    options: Object.keys(_models["default"]),
    multiSelect: false,
    disabled: false,
    onChange: onAiProviderSelect,
    filterOption: "name",
    getOptionValue: function getOptionValue(op) {
      return op;
    },
    displayOption: function displayOption(op) {
      return op;
    },
    searchable: false,
    showArrow: true
  })), /*#__PURE__*/_react["default"].createElement(_src.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(SectionTitle, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
    id: "aiAssistantManager.llmModel.title"
  }))), (provider === 'ollama' && !ollamaModelInputChecked || provider !== 'ollama') && /*#__PURE__*/_react["default"].createElement(StyledWrapper, null, /*#__PURE__*/_react["default"].createElement(StyledItemSelector, {
    selectedItems: model,
    options: _models["default"][provider],
    multiSelect: false,
    disabled: provider === 'ollama' ? ollamaModelInputChecked : false,
    placeholder: "Select LLM Model",
    onChange: onLLMModelSelect,
    filterOption: "name",
    getOptionValue: function getOptionValue(op) {
      return op;
    },
    displayOption: function displayOption(op) {
      return op;
    },
    searchable: false,
    showArrow: true
  })), provider === 'ollama' && /*#__PURE__*/_react["default"].createElement(OllamaModelInputWrapper, null, /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      width: '250px'
    }
  }, /*#__PURE__*/_react["default"].createElement(_src.Checkbox, {
    id: "ollama-model-input",
    label: "Input Model Name",
    onChange: onOllamaModelInputChecked,
    checked: ollamaModelInputChecked
  })), /*#__PURE__*/_react["default"].createElement(_src.Input, {
    type: "text",
    onChange: onOllamaModelInputValueChange,
    placeholder: "Enter Model Name",
    value: ollamaModelInputValue,
    disabled: !ollamaModelInputChecked
  })), provider !== 'ollama' ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_src.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(SectionTitle, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
    id: "aiAssistantManager.apiKey.placeholder"
  }))), /*#__PURE__*/_react["default"].createElement("div", {
    className: "api-key-input"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "api-key-input__icon"
  }, /*#__PURE__*/_react["default"].createElement(_apiKey["default"], {
    height: "20px"
  })), /*#__PURE__*/_react["default"].createElement(_src.Input, {
    type: "text",
    onChange: onApiKeyChange,
    placeholder: intl.formatMessage({
      id: 'aiAssistantManager.apiKey.placeholder'
    }),
    value: apiKey
  }))) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_src.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(SectionTitle, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
    id: "aiAssistantManager.baseUrl.placeholder"
  }))), /*#__PURE__*/_react["default"].createElement("div", {
    className: "api-key-input"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "api-key-input__icon"
  }, /*#__PURE__*/_react["default"].createElement(_apiKey["default"], {
    height: "20px"
  })), /*#__PURE__*/_react["default"].createElement(_src.Input, {
    type: "text",
    onChange: onBaseUrlChange,
    placeholder: intl.formatMessage({
      id: 'aiAssistantManager.baseUrl.placeholder'
    }),
    value: baseUrl
  }))), connectionError && /*#__PURE__*/_react["default"].createElement(StyleErrorMessage, {
    className: "error-message"
  }, errorMessage), /*#__PURE__*/_react["default"].createElement(_src.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(SectionTitle, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
    id: "aiAssistantManager.temperature.title"
  }))), /*#__PURE__*/_react["default"].createElement(StyleSliderWrapper, null, /*#__PURE__*/_react["default"].createElement(RangeSlider, {
    showInput: true,
    isRanged: false,
    value0: 0,
    value1: temperature,
    onChange: onTemperatureChange,
    range: [0, 2],
    step: 0.1
  })), /*#__PURE__*/_react["default"].createElement(_src.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(SectionTitle, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
    id: "aiAssistantManager.topP.title"
  }))), /*#__PURE__*/_react["default"].createElement(StyleSliderWrapper, null, /*#__PURE__*/_react["default"].createElement(RangeSlider, {
    showInput: true,
    isRanged: false,
    value0: 0,
    value1: topP,
    onChange: onTopPChange,
    range: [0, 1],
    step: 0.1
  })), /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_src.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(SectionTitle, null, "Mapbox Token (optional for route/isochrone)")), /*#__PURE__*/_react["default"].createElement("div", {
    className: "api-key-input"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "api-key-input__icon"
  }, /*#__PURE__*/_react["default"].createElement(_apiKey["default"], {
    height: "20px"
  })), /*#__PURE__*/_react["default"].createElement(_src.Input, {
    type: "text",
    onChange: onMapboxTokenChange,
    placeholder: "Enter your Mapbox Token",
    value: mapboxToken
  }))), /*#__PURE__*/_react["default"].createElement(StyledButton, null, /*#__PURE__*/_react["default"].createElement(_src.Button, {
    onClick: onStartChat,
    width: '100%'
  }, isRunning && /*#__PURE__*/_react["default"].createElement(_src.LoadingSpinner, {
    size: 12
  }), /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
    id: "aiAssistantManager.startChat"
  }))));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,