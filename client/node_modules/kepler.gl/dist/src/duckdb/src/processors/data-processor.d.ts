import * as arrow from 'apache-arrow';
import { ProtoDatasetField } from '@kepler.gl/types';
import { processKeplerglJSON } from '@kepler.gl/processors';
export declare const CSV_NULLS: RegExp;
declare type RowsAsArray = any[][];
declare type RowsAsObject = Record<string, unknown>[];
declare type RowData = RowsAsArray | RowsAsObject;
export declare type ProcessorResult = {
    cols?: arrow.Vector[];
    rows: RowData;
    fields: ProtoDatasetField[];
};
export declare const COLUMN_TYPES_PRIORITIES: string[];
export declare function columnTypeToFieldType(columnType: string): string | null;
export declare function fieldTypeToColumnType(fieldType: string): string | null;
export declare function processKeplerglJSONforDuckDb(keplerJson: any): Promise<ReturnType<typeof processKeplerglJSON>>;
export declare function processCsvRowObject(rawData: Record<string, string | null>[]): Promise<ProcessorResult>;
export declare function consolidateFieldTypes(fields: any, schema: any): any;
export declare function processGeojson(rawData: unknown): ProcessorResult;
/**
 * A utility function to extend existing fields with native DuckDB column type.
 * @param fields Array of fields to extend.
 * @param typeOverrides An optional mapping of DuckDB column types to override.
 * @returns An array of fields with the DuckDB column type extended.
 */
export declare function extendFieldsWithDuckDBColumnType(fields: ProtoDatasetField[], typeOverrides: Record<string, string>): Promise<ProtoDatasetField[]>;
export {};
