"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.KEPLER_FORMAT = exports.FILE_CONFLICT_MSG = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _upload = _interopRequireDefault(require("./upload"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var NAME = 'cloud-provider';
var DISPLAY_NAME = 'Cloud Provider';
var THUMBNAIL = {
  width: 300,
  height: 200
};
var ICON = _upload["default"];
var KEPLER_FORMAT = exports.KEPLER_FORMAT = 'keplergl';
var FILE_CONFLICT_MSG = exports.FILE_CONFLICT_MSG = 'file_conflict';

/**
 * The default provider class
 * @param {object} props
 * @param {string} props.name
 * @param {string} props.displayName
 * @param {React.Component} props.icon - React element
 * @param {object} props.thumbnail - thumbnail size object
 * @param {number} props.thumbnail.width - thumbnail width in pixels
 * @param {number} props.thumbnail.height - thumbnail height in pixels
 * @public
 * @example
 *
 * const myProvider = new Provider({
 *  name: 'foo',
 *  displayName: 'Foo Storage'
 *  icon: Icon,
 *  thumbnail: {width: 300, height: 200}
 * })
 */
var Provider = exports["default"] = /*#__PURE__*/function () {
  function Provider(props) {
    (0, _classCallCheck2["default"])(this, Provider);
    (0, _defineProperty2["default"])(this, "name", void 0);
    (0, _defineProperty2["default"])(this, "displayName", void 0);
    (0, _defineProperty2["default"])(this, "storageMessage", void 0);
    (0, _defineProperty2["default"])(this, "icon", void 0);
    (0, _defineProperty2["default"])(this, "thumbnail", void 0);
    (0, _defineProperty2["default"])(this, "isNew", false);
    this.name = props.name || NAME;
    this.displayName = props.displayName || DISPLAY_NAME;
    this.storageMessage = props.storageMessage;
    this.icon = props.icon || ICON;
    this.thumbnail = props.thumbnail || THUMBNAIL;
  }

  /**
   * Whether this provider support upload map to a private storage. If truthy, user will be displayed with the storage save icon on the top right of the side bar.
   * @returns
   * @public
   */
  return (0, _createClass2["default"])(Provider, [{
    key: "hasPrivateStorage",
    value: function hasPrivateStorage() {
      return true;
    }

    /**
     * Whether this provider support share map via a public url, if truthy, user will be displayed with a share map via url under the export map option on the top right of the side bar
     * @returns
     * @public
     */
  }, {
    key: "hasSharingUrl",
    value: function hasSharingUrl() {
      return false;
    }

    /**
     * This method is called after user share a map, to display the share url.
     * @param fullUrl - Whether to return the full url with domain, or just the location
     * @returns shareUrl
     * @public
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "getShareUrl",
    value: function getShareUrl() {
      var fullUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return '';
    }

    /**
     * This method is called by kepler.gl demo app to pushes a new location to history, becoming the current location.
     * @returns mapUrl
     * @public
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "getMapUrl",
    value: function getMapUrl(loadParams) {
      return '';
    }

    /**
     * This method is called to determine whether user already logged in to this provider
     * @public
     * @returns {Promise<string>} return the access token if a user already logged in
     */
  }, {
    key: "getAccessToken",
    value: (function () {
      var _getAccessToken = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", Promise.reject('You must implement getAccessToken'));
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function getAccessToken() {
        return _getAccessToken.apply(this, arguments);
      }
      return getAccessToken;
    }()
    /**
     * This method is called to get the user name of the current user. It will be displayed in the cloud provider tile.
     * @public
     * @deprecated please use getUser
     * @returns true if a user already logged in
     */
    )
  }, {
    key: "getUserName",
    value: function getUserName() {
      return '';
    }

    /**
     * return a Promise with the user object
     */
  }, {
    key: "getUser",
    value: (function () {
      var _getUser = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", Promise.reject('You must implement getUser'));
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function getUser() {
        return _getUser.apply(this, arguments);
      }
      return getUser;
    }()
    /**
     * This return a standard error that will trigger the overwrite map modal
     */
    )
  }, {
    key: "getFileConflictError",
    value: function getFileConflictError() {
      return new Error(FILE_CONFLICT_MSG);
    }

    /**
     * This method will be called when user click the login button in the cloud provider tile.
     * Upon login success and return the user Object {name, email, abbreviated}
     * @public
     */
  }, {
    key: "login",
    value: (function () {
      var _login = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", Promise.reject(new Error('you must implement the `login` method')));
            case 1:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function login() {
        return _login.apply(this, arguments);
      }
      return login;
    }()
    /**
     * This method will be called when user click the logout button under the cloud provider tile.
     * Upon login success
     * @public
     */
    )
  }, {
    key: "logout",
    value: (function () {
      var _logout = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", Promise.reject(new Error('you must implement the `logout` method')));
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function logout() {
        return _logout.apply(this, arguments);
      }
      return logout;
    }()
    /**
     * This method will be called to upload map for saving and sharing. Kepler.gl will package map data, config, title, description and thumbnail for upload to storage.
     * With the option to overwrite already saved map, and upload as private or public map.
     *
     * @param {Object} param
     * @param {Object} param.mapData - the map object
     * @param {Object} param.mapData.map - {datasets. config, info: {title, description}}
     * @param {Blob} param.mapData.thumbnail - A thumbnail of current map. thumbnail size can be defined by provider by this.thumbnail
     * @param {object} [param.options]
     * @param {boolean} [param.options.overwrite] - whether user choose to overwrite already saved map under the same name
     * @param {boolean} [param.options.isPublic] - whether user wish to share the map with others. if isPublic is truthy, kepler will call this.getShareUrl() to display an URL they can share with others
     * @public
     */
    )
  }, {
    key: "uploadMap",
    value: (function () {
      var _uploadMap = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(_ref) {
        var mapData, _ref$options, options;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              mapData = _ref.mapData, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options;
              return _context5.abrupt("return", Promise.reject('You must implement uploadMap'));
            case 2:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function uploadMap(_x) {
        return _uploadMap.apply(this, arguments);
      }
      return uploadMap;
    }()
    /**
     * This method is called to get a list of maps saved by the current logged in user.
     * @returns visualizations an array of Viz objects
     * @public
     * @example
     *  async listMaps() {
     *    return [
     *      {
     *        id: 'a',
     *        title: 'My map',
     *        description: 'My first kepler map',
     *        imageUrl: 'http://',
     *        updatedAt: 1582677787000,
     *        privateMap: false,
     *        loadParams: {}
     *      }
     *    ];
     *  }
     */
    )
  }, {
    key: "listMaps",
    value: (function () {
      var _listMaps = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt("return", []);
            case 1:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function listMaps() {
        return _listMaps.apply(this, arguments);
      }
      return listMaps;
    }()
    /**
     * This method will be called when user select a map to load from the storage map viewer
     * @param {*} loadParams - the loadParams property of each visualization object
     * @returns mapResponse - the map object containing dataset config info and format option
     * @public
     * @example
     * async downloadMap(loadParams) {
     *  const mockResponse = {
     *    map: {
     *      datasets: [],
     *      config: {},
     *      info: {
     *        app: 'kepler.gl',
     *        created_at: ''
     *        title: 'test map',
     *        description: 'Hello this is my test dropbox map'
     *      }
     *    },
     *    // pass csv here if your provider currently only support save / load file as csv
     *    format: 'keplergl'
     *  };
     *
     *  return downloadMap;
     * }
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    )
  }, {
    key: "downloadMap",
    value: (function () {
      var _downloadMap = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(loadParams) {
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt("return", Promise.reject('You must implement downloadMap'));
            case 1:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function downloadMap(_x2) {
        return _downloadMap.apply(this, arguments);
      }
      return downloadMap;
    }()
    /**
     * @return {string} return the storage location url for the current provider
     * @public
     */
    )
  }, {
    key: "getManagementUrl",
    value: function getManagementUrl() {
      throw new Error('You must implement getManagementUrl');
    }

    /**
     * @typedef {Object} Viz
     * @property {string} id - An unique id
     * @property {string} title - The title of the map
     * @property {string} description - The description of the map
     * @property {string} imageUrl - The imageUrl of the map
     * @property {number} updatedAt - An epoch timestamp in milliseconds
     * @property {boolean} privateMap - Optional, whether if this map is private to the user, or can be accessed by others via URL
     * @property {*} loadParams - A property to be passed to `downloadMap`
     * @public
     */

    /**
     * The returned object of `downloadMap`. The response object should contain: datasets: [], config: {}, and info: {}
     * each dataset object should be {info: {id, label}, data: {...}}
     * to inform how kepler should process your data object, pass in `format`
     * @typedef {Object} MapResponse
     * @property {Object} map
     * @property {Array<Object>} map.datasets
     * @property {Object} map.config
     * @property {Object} map.info
     * @property {string} format - one of 'csv': csv file string, 'geojson': geojson object, 'row': row object, 'keplergl': datasets array saved using KeplerGlSchema.save
     * @public
     */
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,