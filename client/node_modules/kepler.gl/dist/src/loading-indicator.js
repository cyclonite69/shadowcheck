"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledContainer = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/layers/src");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledContainer = exports.StyledContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  left: ", "px;\n  bottom: ", "px;\n  z-index: 1;\n  color: ", ";\n  opacity: ", ";\n  transition: opacity 0.5s ease-in-out;\n  background-color: ", ";\n  border-radius: 0px;\n  padding-left: 3px;\n  padding-right: 3px;\n  font-size: 12px;\n"])), function (props) {
  return props.$left;
}, function (props) {
  return props.theme.sidePanel.margin.left;
}, function (props) {
  return props.theme.textColorHl;
}, function (props) {
  return props.$isVisible ? 1 : 0;
}, function (props) {
  return props.theme.sidePanelBg;
});
/** Extra adjustment for the loading indicator when side panel is visible */
var LEFT_POSITION_ADJUSTMENT = 3;
var LoadingIndicator = function LoadingIndicator(_ref) {
  var isVisible = _ref.isVisible,
    activeSidePanel = _ref.activeSidePanel,
    sidePanelWidth = _ref.sidePanelWidth,
    theme = _ref.theme;
  var left = (activeSidePanel ? (sidePanelWidth || 0) + LEFT_POSITION_ADJUSTMENT : 0) + theme.sidePanel.margin.left;

  // Helper message to track number of raster tiles that are being loaded
  var numRasterTilesInProgress = (0, _src.getNumRasterTilesBeingLoaded)();
  var extraMessage = numRasterTilesInProgress < 1 ? '' : "".concat(numRasterTilesInProgress, " raster tile").concat(numRasterTilesInProgress === 1 ? ' is' : 's are', " being loaded");
  return /*#__PURE__*/_react["default"].createElement(StyledContainer, {
    $isVisible: isVisible,
    $left: left
  }, "Loading... ".concat(extraMessage));
};
var _default = exports["default"] = (0, _styledComponents.withTheme)(LoadingIndicator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zdHlsZWRDb21wb25lbnRzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfc3JjIiwiX3RlbXBsYXRlT2JqZWN0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiU3R5bGVkQ29udGFpbmVyIiwiZXhwb3J0cyIsInN0eWxlZCIsImRpdiIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwyIiwicHJvcHMiLCIkbGVmdCIsInRoZW1lIiwic2lkZVBhbmVsIiwibWFyZ2luIiwibGVmdCIsInRleHRDb2xvckhsIiwiJGlzVmlzaWJsZSIsInNpZGVQYW5lbEJnIiwiTEVGVF9QT1NJVElPTl9BREpVU1RNRU5UIiwiTG9hZGluZ0luZGljYXRvciIsIl9yZWYiLCJpc1Zpc2libGUiLCJhY3RpdmVTaWRlUGFuZWwiLCJzaWRlUGFuZWxXaWR0aCIsIm51bVJhc3RlclRpbGVzSW5Qcm9ncmVzcyIsImdldE51bVJhc3RlclRpbGVzQmVpbmdMb2FkZWQiLCJleHRyYU1lc3NhZ2UiLCJjb25jYXQiLCJjcmVhdGVFbGVtZW50IiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50cy9zcmMvbG9hZGluZy1pbmRpY2F0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge1Byb3BzV2l0aENoaWxkcmVufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkLCB7d2l0aFRoZW1lfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7Z2V0TnVtUmFzdGVyVGlsZXNCZWluZ0xvYWRlZH0gZnJvbSAnQGtlcGxlci5nbC9sYXllcnMnO1xuXG50eXBlIFN0eWxlZENvbnRhaW5lclByb3BzID0ge1xuICAkaXNWaXNpYmxlPzogYm9vbGVhbjtcbiAgJGxlZnQ6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRDb250YWluZXIgPSBzdHlsZWQuZGl2PFN0eWxlZENvbnRhaW5lclByb3BzPmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAke3Byb3BzID0+IHByb3BzLiRsZWZ0fXB4O1xuICBib3R0b206ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuc2lkZVBhbmVsLm1hcmdpbi5sZWZ0fXB4O1xuICB6LWluZGV4OiAxO1xuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS50ZXh0Q29sb3JIbH07XG4gIG9wYWNpdHk6ICR7cHJvcHMgPT4gKHByb3BzLiRpc1Zpc2libGUgPyAxIDogMCl9O1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNXMgZWFzZS1pbi1vdXQ7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuc2lkZVBhbmVsQmd9O1xuICBib3JkZXItcmFkaXVzOiAwcHg7XG4gIHBhZGRpbmctbGVmdDogM3B4O1xuICBwYWRkaW5nLXJpZ2h0OiAzcHg7XG4gIGZvbnQtc2l6ZTogMTJweDtcbmA7XG5cbnR5cGUgTG9hZGluZ0luZGljYXRvclByb3BzID0ge1xuICBpc1Zpc2libGU/OiBib29sZWFuO1xuICBhY3RpdmVTaWRlUGFuZWw/OiBib29sZWFuO1xuICBzaWRlUGFuZWxXaWR0aD86IG51bWJlcjtcbn07XG5cbi8qKiBFeHRyYSBhZGp1c3RtZW50IGZvciB0aGUgbG9hZGluZyBpbmRpY2F0b3Igd2hlbiBzaWRlIHBhbmVsIGlzIHZpc2libGUgKi9cbmNvbnN0IExFRlRfUE9TSVRJT05fQURKVVNUTUVOVCA9IDM7XG5cbmNvbnN0IExvYWRpbmdJbmRpY2F0b3I6IFJlYWN0LkZDPExvYWRpbmdJbmRpY2F0b3JQcm9wcyAmIHt0aGVtZTogYW55fT4gPSAoe1xuICBpc1Zpc2libGUsXG4gIGFjdGl2ZVNpZGVQYW5lbCxcbiAgc2lkZVBhbmVsV2lkdGgsXG4gIHRoZW1lXG59KSA9PiB7XG4gIGNvbnN0IGxlZnQgPVxuICAgIChhY3RpdmVTaWRlUGFuZWwgPyAoc2lkZVBhbmVsV2lkdGggfHwgMCkgKyBMRUZUX1BPU0lUSU9OX0FESlVTVE1FTlQgOiAwKSArXG4gICAgdGhlbWUuc2lkZVBhbmVsLm1hcmdpbi5sZWZ0O1xuXG4gIC8vIEhlbHBlciBtZXNzYWdlIHRvIHRyYWNrIG51bWJlciBvZiByYXN0ZXIgdGlsZXMgdGhhdCBhcmUgYmVpbmcgbG9hZGVkXG4gIGNvbnN0IG51bVJhc3RlclRpbGVzSW5Qcm9ncmVzcyA9IGdldE51bVJhc3RlclRpbGVzQmVpbmdMb2FkZWQoKTtcbiAgY29uc3QgZXh0cmFNZXNzYWdlID1cbiAgICBudW1SYXN0ZXJUaWxlc0luUHJvZ3Jlc3MgPCAxXG4gICAgICA/ICcnXG4gICAgICA6IGAke251bVJhc3RlclRpbGVzSW5Qcm9ncmVzc30gcmFzdGVyIHRpbGUke1xuICAgICAgICAgIG51bVJhc3RlclRpbGVzSW5Qcm9ncmVzcyA9PT0gMSA/ICcgaXMnIDogJ3MgYXJlJ1xuICAgICAgICB9IGJlaW5nIGxvYWRlZGA7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkQ29udGFpbmVyICRpc1Zpc2libGU9e2lzVmlzaWJsZX0gJGxlZnQ9e2xlZnR9PlxuICAgICAge2BMb2FkaW5nLi4uICR7ZXh0cmFNZXNzYWdlfWB9XG4gICAgPC9TdHlsZWRDb250YWluZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoTG9hZGluZ0luZGljYXRvcikgYXMgUmVhY3QuRkM8UHJv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