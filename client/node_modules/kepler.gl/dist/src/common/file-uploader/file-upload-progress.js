"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _classnames = _interopRequireDefault(require("classnames"));
var _progressBar = _interopRequireDefault(require("../progress-bar"));
var _styledComponents2 = require("../styled-components");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledFileProgress = _styledComponents["default"].div.attrs(function (props) {
  return {
    className: (0, _classnames["default"])('file-upload__progress', props.className)
  };
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  font-size: 12px;\n  margin-top: 12px;\n  border-image: initial;\n  padding: 8px 12px;\n\n  .top-row {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .file-name {\n    font-weight: 500;\n  }\n  .middle-row {\n    margin-top: 6px;\n  }\n  .bottom-row {\n    margin-top: 6px;\n    text-align: start;\n  }\n"])), function (props) {
  return props.theme.textColorLT;
});
var StyledProgressWrapper = _styledComponents["default"].div.attrs({
  className: 'file-upload__progress__wrapper'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 400px;\n"])));
var StyledContainer = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 100%;\n  display: flex;\n  justify-content: center;\n"])));
var formatPercent = function formatPercent(percent) {
  return "".concat(Math.floor(percent * 100), "%");
};
/**
 * @param {object} params
 * @param {string} params.message
 * @param {string} params.fileName
 * @param {number} params.percent
 * @param {any} params.error
 * @param {object} params.theme
 */
var UploadProgress = function UploadProgress(_ref) {
  var message = _ref.message,
    fileName = _ref.fileName,
    percent = _ref.percent,
    error = _ref.error,
    theme = _ref.theme;
  var percentStr = formatPercent(percent);
  var barColor = error ? theme.errorColor : theme.activeColorLT;
  return /*#__PURE__*/_react["default"].createElement(StyledFileProgress, {
    className: "file-upload-progress__message"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "top-row"
  }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.TruncatedTitleText, {
    className: "file-name",
    title: fileName
  }, fileName), /*#__PURE__*/_react["default"].createElement("div", {
    className: "percent"
  }, percentStr)), /*#__PURE__*/_react["default"].createElement("div", {
    className: "middle-row"
  }, /*#__PURE__*/_react["default"].createElement(_progressBar["default"], {
    percent: percentStr,
    barColor: barColor,
    isLoading: true,
    theme: theme
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: "bottom-row",
    style: {
      color: error ? theme.errorColor : theme.textColorLT
    }
  }, error ? (0, _src.getError)(error) : message));
};
var FileUploadProgress = function FileUploadProgress(_ref2) {
  var fileLoadingProgress = _ref2.fileLoadingProgress,
    theme = _ref2.theme;
  return /*#__PURE__*/_react["default"].createElement(StyledContainer, null, /*#__PURE__*/_react["default"].createElement(StyledProgressWrapper, null, Object.values(fileLoadingProgress).map(function (item) {
    return /*#__PURE__*/_react["default"].createElement(UploadProgress, (0, _extends2["default"])({}, item, {
      key: item.fileName,
      theme: theme
    }));
  })));
};
var _default = exports["default"] = (0, _styledComponents.withTheme)(FileUploadProgress);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,