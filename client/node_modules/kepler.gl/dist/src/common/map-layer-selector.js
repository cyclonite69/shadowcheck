"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _checkbox = _interopRequireDefault(require("./checkbox"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/common-utils/src");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var MapLayerSelect = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 12px;\n\n  .map-layer-selector__item {\n    margin: 12px 0;\n  }\n"])));
/** @type {typeof import('./map-layer-selector').default} */
var MapLayerSelector = function MapLayerSelector(_ref) {
  var layers = _ref.layers,
    onMapToggleLayer = _ref.onMapToggleLayer;
  return /*#__PURE__*/_react["default"].createElement(MapLayerSelect, {
    className: "map-layer-selector"
  }, layers.map(function (layer) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      key: layer.id,
      className: "map-layer-selector__item"
    }, /*#__PURE__*/_react["default"].createElement(_checkbox["default"], {
      type: "radio",
      checked: layer.isVisible,
      id: "".concat(layer.id, "-toggle-").concat((0, _src.generateHashId)(4)),
      label: layer.name,
      onChange: function onChange() {
        onMapToggleLayer(layer.id);
      }
    }));
  }));
};
var _default = exports["default"] = MapLayerSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zdHlsZWRDb21wb25lbnRzIiwiX2NoZWNrYm94IiwiX3NyYyIsIl90ZW1wbGF0ZU9iamVjdCIsIk1hcExheWVyU2VsZWN0Iiwic3R5bGVkIiwiZGl2IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbDIiLCJNYXBMYXllclNlbGVjdG9yIiwiX3JlZiIsImxheWVycyIsIm9uTWFwVG9nZ2xlTGF5ZXIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwibWFwIiwibGF5ZXIiLCJrZXkiLCJpZCIsInR5cGUiLCJjaGVja2VkIiwiaXNWaXNpYmxlIiwiY29uY2F0IiwiZ2VuZXJhdGVIYXNoSWQiLCJsYWJlbCIsIm5hbWUiLCJvbkNoYW5nZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NyYy9jb21tb24vbWFwLWxheWVyLXNlbGVjdG9yLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi9jaGVja2JveCc7XG5pbXBvcnQge2dlbmVyYXRlSGFzaElkfSBmcm9tICdAa2VwbGVyLmdsL2NvbW1vbi11dGlscyc7XG5cbmNvbnN0IE1hcExheWVyU2VsZWN0ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTJweDtcblxuICAubWFwLWxheWVyLXNlbGVjdG9yX19pdGVtIHtcbiAgICBtYXJnaW46IDEycHggMDtcbiAgfVxuYDtcbmludGVyZmFjZSBMYXllciB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgaXNWaXNpYmxlOiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgTWFwTGF5ZXJTZWxlY3RvclByb3BzIHtcbiAgbGF5ZXJzOiBMYXllcltdO1xuICBvbk1hcFRvZ2dsZUxheWVyOiAobGF5ZXJJZDogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG4vKiogQHR5cGUge3R5cGVvZiBpbXBvcnQoJy4vbWFwLWxheWVyLXNlbGVjdG9yJykuZGVmYXVsdH0gKi9cbmNvbnN0IE1hcExheWVyU2VsZWN0b3IgPSAoe2xheWVycywgb25NYXBUb2dnbGVMYXllcn06IE1hcExheWVyU2VsZWN0b3JQcm9wcykgPT4gKFxuICA8TWFwTGF5ZXJTZWxlY3QgY2xhc3NOYW1lPVwibWFwLWxheWVyLXNlbGVjdG9yXCI+XG4gICAge2xheWVycy5tYXAobGF5ZXIgPT4gKFxuICAgICAgPGRpdiBrZXk9e2xheWVyLmlkfSBjbGFzc05hbWU9XCJtYXAtbGF5ZXItc2VsZWN0b3JfX2l0ZW1cIj5cbiAgICAgICAgPENoZWNrYm94XG4gICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICBjaGVja2VkPXtsYXllci5pc1Zpc2libGV9XG4gICAgICAgICAgaWQ9e2Ake2xheWVyLmlkfS10b2dnbGUtJHtnZW5lcmF0ZUhhc2hJZCg0KX1gfVxuICAgICAgICAgIGxhYmVsPXtsYXllci5uYW1lfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoKSA9PiB7XG4gICAgICAgICAgICBvbk1hcFRvZ2dsZUxheWVyKGxheWVyLmlkKTtcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKSl9XG4gIDwvTWFwTGF5ZXJTZWxlY3Q+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBNYXBMYXllclNlbGVjdG9yO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGlCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxTQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxJQUFBLEdBQUFILE9BQUE7QUFBdUQsSUFBQUksZUFBQSxFQU52RDtBQUNBO0FBT0EsSUFBTUMsY0FBYyxHQUFHQyw0QkFBTSxDQUFDQyxHQUFHLENBQUFILGVBQUEsS0FBQUEsZUFBQSxPQUFBSSx1QkFBQSxtR0FNaEM7QUFZRDtBQUNBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQUFDLElBQUE7RUFBQSxJQUFLQyxNQUFNLEdBQUFELElBQUEsQ0FBTkMsTUFBTTtJQUFFQyxnQkFBZ0IsR0FBQUYsSUFBQSxDQUFoQkUsZ0JBQWdCO0VBQUEsb0JBQ2pEZCxNQUFBLFlBQUFlLGFBQUEsQ0FBQ1IsY0FBYztJQUFDUyxTQUFTLEVBQUM7RUFBb0IsR0FDM0NILE1BQU0sQ0FBQ0ksR0FBRyxDQUFDLFVBQUFDLEtBQUs7SUFBQSxvQkFDZmxCLE1BQUEsWUFBQWUsYUFBQTtNQUFLSSxHQUFHLEVBQUVELEtBQUssQ0FBQ0UsRUFBRztNQUFDSixTQUFTLEVBQUM7SUFBMEIsZ0JBQ3REaEIsTUFBQSxZQUFBZSxhQUFBLENBQUNYLFNBQUEsV0FBUTtNQUNQaUIsSUFBSSxFQUFDLE9BQU87TUFDWkMsT0FBTyxFQUFFSixLQUFLLENBQUNLLFNBQVU7TUFDekJILEVBQUUsS0FBQUksTUFBQSxDQUFLTixLQUFLLENBQUNFLEVBQUUsY0FBQUksTUFBQSxDQUFXLElBQUFDLG1CQUFjLEVBQUMsQ0FBQyxDQUFDLENBQUc7TUFDOUNDLEtBQUssRUFBRVIsS0FBSyxDQUFDUyxJQUFLO01BQ2xCQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQSxFQUFRO1FBQ2RkLGdCQUFnQixDQUFDSSxLQUFLLENBQUNFLEVBQUUsQ0FBQztNQUM1QjtJQUFFLENBQ0gsQ0FDRSxDQUFDO0VBQUEsQ0FDUCxDQUNhLENBQUM7QUFBQSxDQUNsQjtBQUFDLElBQUFTLFFBQUEsR0FBQUMsT0FBQSxjQUVhbkIsZ0JBQWdCIiwiaWdub3JlTGlzdCI6W119