"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _uniqBy = _interopRequireDefault(require("lodash/uniqBy"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _accessor = _interopRequireDefault(require("./accessor"));
var _chickletedInput = _interopRequireDefault(require("./chickleted-input"));
var _typeahead = _interopRequireDefault(require("./typeahead"));
var _dropdownList = _interopRequireWildcard(require("./dropdown-list"));
var _portaled = _interopRequireDefault(require("../../common/portaled"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/common-utils/src");
var _reactIntl = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-intl");
var _dropdownSelect = _interopRequireDefault(require("./dropdown-select"));
var _styledComponents2 = require("../styled-components");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var DropdownWrapper = _styledComponents["default"].div.withConfig({
  shouldForwardProp: _styledComponents2.shouldForwardProp
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  border: 0;\n  width: 100%;\n  left: 0;\n  z-index: ", ";\n  width: ", "px;\n"])), function (props) {
  return props.theme.dropdownWrapperZ;
}, function (props) {
  return props.width;
});
var ItemSelectorUnmemoized = /*#__PURE__*/function (_Component) {
  function ItemSelectorUnmemoized() {
    var _this;
    (0, _classCallCheck2["default"])(this, ItemSelectorUnmemoized);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ItemSelectorUnmemoized, [].concat(args));
    (0, _defineProperty2["default"])(_this, "state", {
      showTypeahead: false,
      dimensions: {
        width: 200
      }
    });
    (0, _defineProperty2["default"])(_this, "root", (0, _react.createRef)());
    (0, _defineProperty2["default"])(_this, "handleClickOutside", function () {
      _this._hideTypeahead();
    });
    (0, _defineProperty2["default"])(_this, "_handleResize", function (dimensions) {
      _this.setState({
        dimensions: dimensions
      });
    });
    (0, _defineProperty2["default"])(_this, "_hideTypeahead", function () {
      _this.setState({
        showTypeahead: false
      });
      _this._onBlur();
    });
    (0, _defineProperty2["default"])(_this, "_onBlur", function () {
      // note: chickleted input is not a real form element so we call onBlur()
      // when we feel the events are appropriate
      if (_this.props.onBlur) {
        _this.props.onBlur();
      }
    });
    (0, _defineProperty2["default"])(_this, "_removeItem", function (item, e) {
      // only used when multiSelect = true
      e.preventDefault();
      e.stopPropagation();
      var multiSelectedItems = (0, _src2.toArray)(_this.props.selectedItems);
      var index = multiSelectedItems.findIndex(function (t) {
        return t === item;
      });
      if (index < 0) {
        return;
      }
      var items = [].concat((0, _toConsumableArray2["default"])(multiSelectedItems.slice(0, index)), (0, _toConsumableArray2["default"])(multiSelectedItems.slice(index + 1, multiSelectedItems.length)));
      _this.props.onChange(items);
      if (_this.props.closeOnSelect) {
        _this.setState({
          showTypeahead: false
        });
        _this._onBlur();
      }
    });
    (0, _defineProperty2["default"])(_this, "_selectItem", function (item) {
      var getValue = _accessor["default"].generateOptionToStringFor(_this.props.getOptionValue || _this.props.displayOption);
      var previousSelected = (0, _src2.toArray)(_this.props.selectedItems);
      if (_this.props.multiSelect) {
        var items = (0, _uniqBy["default"])(previousSelected.concat((0, _src2.toArray)(item)), getValue);
        _this.props.onChange(items);
      } else {
        _this.props.onChange(getValue(item));
      }
      if (_this.props.closeOnSelect) {
        _this.setState({
          showTypeahead: false
        });
        _this._onBlur();
      }
    });
    (0, _defineProperty2["default"])(_this, "_onErase", function (e) {
      e.stopPropagation();
      _this.props.onChange(null);
    });
    (0, _defineProperty2["default"])(_this, "_showTypeahead", function (e) {
      e.stopPropagation();
      if (!_this.props.disabled) {
        if (_this.props.onOpen) {
          _this.props.onOpen();
        }
        _this.setState({
          showTypeahead: true
        });
      }
    });
    return _this;
  }
  (0, _inherits2["default"])(ItemSelectorUnmemoized, _Component);
  return (0, _createClass2["default"])(ItemSelectorUnmemoized, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.showDropdownOnMount) {
        this.setState({
          showTypeahead: true
        });
      }
      if (this.root.current instanceof HTMLElement) {
        (0, _src.observeDimensions)(this.root.current, this._handleResize);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.root.current instanceof HTMLElement) {
        (0, _src.unobserveDimensions)(this.root.current);
      }
    }
  }, {
    key: "_renderDropdown",
    value: function _renderDropdown(intl) {
      var _this$props$placement = this.props.placement,
        placement = _this$props$placement === void 0 ? 'bottom' : _this$props$placement;
      var dimensions = this.state.dimensions;
      var DropDownWrapperComponent = this.props.DropDownWrapperComponent;
      return /*#__PURE__*/_react["default"].createElement(_portaled["default"], {
        left: 0,
        top: 0,
        isOpened: this.state.showTypeahead,
        onClose: this._hideTypeahead
      }, /*#__PURE__*/_react["default"].createElement(DropDownWrapperComponent, {
        placement: placement,
        width: dimensions === null || dimensions === void 0 ? void 0 : dimensions.width
      }, /*#__PURE__*/_react["default"].createElement(_typeahead["default"], {
        customClasses: {
          results: 'list-selector',
          input: 'typeahead__input',
          listItem: 'list__item',
          listAnchor: 'list__item__anchor'
        },
        options: this.props.options,
        filterOption: this.props.filterOption,
        fixedOptions: this.props.fixedOptions,
        placeholder: this.props.typeaheadPlaceholder || intl ? intl.formatMessage({
          id: 'placeholder.search'
        }) : 'Search',
        onOptionSelected: this._selectItem,
        customListComponent: this.props.DropDownRenderComponent,
        customListHeaderComponent: this.props.DropdownHeaderComponent,
        customListItemComponent: this.props.DropDownLineItemRenderComponent,
        displayOption: _accessor["default"].generateOptionToStringFor(this.props.displayOption),
        searchable: this.props.searchable,
        searchOptions: this.props.searchOptions,
        showOptionsWhenEmpty: true,
        selectedItems: (0, _src2.toArray)(this.props.selectedItems),
        light: this.props.inputTheme === 'light'
      })));
    }
  }, {
    key: "render",
    value: function render() {
      var selected = (0, _src2.toArray)(this.props.selectedItems);
      var displayOption = _accessor["default"].generateOptionToStringFor(this.props.displayOption);
      var _this$props = this.props,
        disabled = _this$props.disabled,
        _this$props$inputThem = _this$props.inputTheme,
        inputTheme = _this$props$inputThem === void 0 ? 'primary' : _this$props$inputThem;
      var dropdownSelectProps = {
        className: (0, _classnames["default"])({
          active: this.state.showTypeahead
        }),
        displayOption: displayOption,
        disabled: disabled,
        onClick: this._showTypeahead,
        error: this.props.isError,
        inputTheme: inputTheme,
        size: this.props.size
      };
      var intl = this.props.intl;
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: (0, _classnames["default"])('item-selector', this.props.className),
        ref: this.root
      }, /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          position: 'relative'
        }
      }, this.props.multiSelect ? /*#__PURE__*/_react["default"].createElement(_chickletedInput["default"], (0, _extends2["default"])({}, dropdownSelectProps, {
        selectedItems: (0, _src2.toArray)(this.props.selectedItems),
        placeholder: this.props.placeholder,
        removeItem: this._removeItem,
        reorderItems: this.props.reorderItems,
        CustomChickletComponent: this.props.CustomChickletComponent,
        inputTheme: inputTheme
      })) : /*#__PURE__*/_react["default"].createElement(_dropdownSelect["default"], (0, _extends2["default"])({}, dropdownSelectProps, {
        value: selected[0],
        placeholder: this.props.placeholder,
        erasable: this.props.erasable,
        showArrow: this.props.showArrow,
        onErase: this._onErase,
        showDropdown: this._showTypeahead,
        DropDownLineItemRenderComponent: this.props.DropDownLineItemRenderComponent
      })), this._renderDropdown(intl)));
    }
  }]);
}(_react.Component);
(0, _defineProperty2["default"])(ItemSelectorUnmemoized, "defaultProps", {
  multiSelect: true,
  placeholder: 'placeholder.enterValue',
  closeOnSelect: true,
  searchable: true,
  DropDownRenderComponent: _dropdownList["default"],
  DropDownLineItemRenderComponent: _dropdownList.ListItem,
  DropDownWrapperComponent: DropdownWrapper,
  reorderItems: undefined,
  className: ''
});
var ItemSelector = _react["default"].memo(ItemSelectorUnmemoized);
ItemSelector.displayName = 'ItemSelector';
var _default = exports["default"] = (0, _reactIntl.injectIntl)(ItemSelector);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,