"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactLifecyclesCompat = require("react-lifecycles-compat");
var _fuzzy = _interopRequireDefault(require("fuzzy"));
var _classnames = _interopRequireDefault(require("classnames"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _window = require("global/window");
var _accessor = _interopRequireDefault(require("./accessor"));
var _dropdownList = _interopRequireWildcard(require("./dropdown-list"));
var _icons = require("../icons");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _styledComponents2 = require("../styled-components");
var _templateObject, _templateObject2, _templateObject3, _templateObject4; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var DEFAULT_CLASS = 'typeahead';
/**
 * Copied mostly from 'react-typeahead', an auto-completing text input
 *
 * Renders an text input that shows options nearby that you can use the
 * keyboard or mouse to select.
 */

var TypeaheadWrapper = _styledComponents["default"].div.withConfig({
  shouldForwardProp: _styledComponents2.shouldForwardProp
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  background-color: ", ";\n  box-shadow: ", ";\n\n  &:focus {\n    outline: 0;\n  }\n"])), function (props) {
  return props.light ? props.theme.dropdownListBgdLT : props.theme.dropdownListBgd;
}, function (props) {
  return props.theme.dropdownListShadow;
});
var InputBox = _styledComponents["default"].div.attrs({
  className: 'typeahead__input_box'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 8px;\n"])));
var TypeaheadInput = _styledComponents["default"].input.withConfig({
  shouldForwardProp: _styledComponents2.shouldForwardProp
})(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  ", "\n  &:hover {\n    cursor: pointer;\n    background-color: ", ";\n  }\n"])), function (props) {
  return props.light ? props.theme.inputLT : props.theme.secondaryInput;
}, function (props) {
  return props.light ? props.theme.selectBackgroundLT : props.theme.secondaryInputBgd;
});
var InputIcon = _styledComponents["default"].div.attrs({
  className: 'typeahead__input_icon'
})(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  right: 15px;\n  top: 14px;\n  color: ", ";\n"])), function (props) {
  return props.theme.inputPlaceholderColor;
});
function generateSearchFunction(props) {
  var searchOptions = props.searchOptions,
    filterOption = props.filterOption;
  if (typeof searchOptions === 'function') {
    if (filterOption !== null) {
      _window.console.warn('searchOptions prop is being used, filterOption prop will be ignored');
    }
    return searchOptions;
  } else if (typeof filterOption === 'function') {
    // use custom filter option
    return function (value, options) {
      return options.filter(function (o) {
        return filterOption(value, o);
      });
    };
  }
  var mapper = typeof filterOption === 'string' ? _accessor["default"].generateAccessor(filterOption) : _accessor["default"].IDENTITY_FN;
  return function (value, options) {
    return _fuzzy["default"].filter(value, options, {
      extract: mapper
    }).map(function (res) {
      return options[res.index];
    });
  };
}
function searchOptionsOnInput(inputValue, props) {
  var searchOptions = generateSearchFunction(props);
  return searchOptions(inputValue, props.options);
}
function getOptionsForValue(value, props, state) {
  var options = props.options,
    showOptionsWhenEmpty = props.showOptionsWhenEmpty;
  if (!props.searchable) {
    // directly pass through options if can not be searched
    return options;
  }
  if (shouldSkipSearch(value, state, showOptionsWhenEmpty)) {
    return options;
  }
  var searchOptions = generateSearchFunction(props);
  return searchOptions(value, options);
}
function shouldSkipSearch(input, state, showOptionsWhenEmpty) {
  var emptyValue = !input || input.trim().length === 0;

  // this.state must be checked because it may not be defined yet if this function
  // is called from within getInitialState
  var isFocused = state && state.isFocused;
  return !(showOptionsWhenEmpty && isFocused) && emptyValue;
}
function noop() {
  return;
}
var Typeahead = /*#__PURE__*/function (_Component) {
  function Typeahead(props) {
    var _this;
    (0, _classCallCheck2["default"])(this, Typeahead);
    _this = _callSuper(this, Typeahead, [props]);
    (0, _defineProperty2["default"])(_this, "root", (0, _react.createRef)());
    (0, _defineProperty2["default"])(_this, "entry", (0, _react.createRef)());
    (0, _defineProperty2["default"])(_this, "focus", function () {
      if (_this.entry.current) {
        _this.entry.current.focus();
      }
    });
    (0, _defineProperty2["default"])(_this, "_hasCustomValue", function () {
      var _this$state$entryValu;
      return Number(_this.props.allowCustomValues) > 0 && Number((_this$state$entryValu = _this.state.entryValue) === null || _this$state$entryValu === void 0 ? void 0 : _this$state$entryValu.length) >= Number(_this.props.allowCustomValues) && _this.state.searchResults.indexOf(_this.state.entryValue) < 0;
    });
    (0, _defineProperty2["default"])(_this, "_getCustomValue", function () {
      return _this._hasCustomValue() ? _this.state.entryValue : null;
    });
    (0, _defineProperty2["default"])(_this, "_onOptionSelected", function (option, event) {
      var _this$props$onOptionS, _this$props;
      if (_this.props.searchable) {
        // reset entry input
        _this.setState({
          // reset search options when selection has been made
          searchResults: _this.props.options || [],
          selection: '',
          entryValue: ''
        });
      }
      (_this$props$onOptionS = (_this$props = _this.props).onOptionSelected) === null || _this$props$onOptionS === void 0 || _this$props$onOptionS.call(_this$props, option, event);
    });
    // use () => {} to avoid binding 'this'
    (0, _defineProperty2["default"])(_this, "_onTextEntryUpdated", function () {
      if (_this.props.searchable) {
        var _this$entry$current;
        var value = (_this$entry$current = _this.entry.current) === null || _this$entry$current === void 0 ? void 0 : _this$entry$current.value;
        _this.setState({
          searchResults: searchOptionsOnInput(value, _this.props),
          selection: '',
          entryValue: value
        });
      }
    });
    (0, _defineProperty2["default"])(_this, "_onEnter", function (event) {
      var selection = _this.getSelection();
      if (!selection) {
        var _this$props$onKeyDown, _this$props2;
        (_this$props$onKeyDown = (_this$props2 = _this.props).onKeyDown) === null || _this$props$onKeyDown === void 0 || _this$props$onKeyDown.call(_this$props2, event);
      }
      _this._onOptionSelected(selection, event);
    });
    (0, _defineProperty2["default"])(_this, "_onEscape", function () {
      _this.setState({
        selectionIndex: null
      });
    });
    (0, _defineProperty2["default"])(_this, "_onTab", function (event) {
      var selection = _this.getSelection();
      var option = selection ? selection : _this.state.searchResults.length > 0 ? _this.state.searchResults[0] : null;
      if (option === null && _this._hasCustomValue()) {
        option = _this._getCustomValue();
      }
      if (option !== null) {
        return _this._onOptionSelected(option, event);
      }
    });
    (0, _defineProperty2["default"])(_this, "eventMap", function () {
      var events = {};
      events[_src.KeyEvent.DOM_VK_UP] = _this.navUp;
      events[_src.KeyEvent.DOM_VK_DOWN] = _this.navDown;
      events[_src.KeyEvent.DOM_VK_RETURN] = events[_src.KeyEvent.DOM_VK_ENTER] = _this._onEnter;
      events[_src.KeyEvent.DOM_VK_ESCAPE] = _this._onEscape;
      events[_src.KeyEvent.DOM_VK_TAB] = _this._onTab;
      return events;
    });
    (0, _defineProperty2["default"])(_this, "_nav", function (delta) {
      if (!_this._hasHint()) {
        return;
      }
      var newIndex = _this.state.selectionIndex === null ? delta === 1 ? 0 : delta : _this.state.selectionIndex + delta;
      var length = _this.props.maxVisible ? _this.state.searchResults.slice(0, _this.props.maxVisible).length : _this.state.searchResults.length;
      if (_this._hasCustomValue()) {
        length += 1;
      }
      if (newIndex < 0) {
        newIndex += length;
      } else if (newIndex >= length) {
        newIndex -= length;
      }
      _this.setState({
        selectionIndex: newIndex
      });
    });
    (0, _defineProperty2["default"])(_this, "navDown", function () {
      _this._nav(1);
    });
    (0, _defineProperty2["default"])(_this, "navUp", function () {
      _this._nav(-1);
    });
    (0, _defineProperty2["default"])(_this, "_onChange", function (event) {
      if (_this.props.onChange) {
        _this.props.onChange(event);
      }
      _this._onTextEntryUpdated();
    });
    (0, _defineProperty2["default"])(_this, "_onKeyDown", function (event) {
      // If there are no visible elements, don't perform selector navigation.
      // Just pass this up to the upstream onKeydown handler.
      // Also skip if the user is pressing the shift key, since none of our handlers are looking for shift
      if (!_this._hasHint() || event.shiftKey) {
        var _this$props$onKeyDown2, _this$props3;
        return (_this$props$onKeyDown2 = (_this$props3 = _this.props).onKeyDown) === null || _this$props$onKeyDown2 === void 0 ? void 0 : _this$props$onKeyDown2.call(_this$props3, event);
      }
      var handler = _this.eventMap()[event.keyCode];
      if (handler) {
        handler(event);
      } else {
        var _this$props$onKeyDown3, _this$props4;
        return (_this$props$onKeyDown3 = (_this$props4 = _this.props).onKeyDown) === null || _this$props$onKeyDown3 === void 0 ? void 0 : _this$props$onKeyDown3.call(_this$props4, event);
      }
      // Don't propagate the keystroke back to the DOM/browser
      event.preventDefault();
    });
    (0, _defineProperty2["default"])(_this, "_onFocus", function (event) {
      _this.setState({
        isFocused: true
      });
      if (_this.props.onFocus) {
        return _this.props.onFocus(event);
      }
    });
    (0, _defineProperty2["default"])(_this, "_onBlur", function (event) {
      _this.setState({
        isFocused: false
      });
      if (_this.props.onBlur) {
        return _this.props.onBlur(event);
      }
    });
    _this.state = {
      // initiate searchResults with options
      searchResults: _this.props.options || [],
      // This should be called something else, 'entryValue'
      entryValue: _this.props.value || _this.props.initialValue,
      // A valid typeahead value
      selection: _this.props.value,
      // Index of the selection
      selectionIndex: null,
      // Keep track of the focus state of the input element, to determine
      // whether to show options when empty (if showOptionsWhenEmpty is true)
      isFocused: false
    };
    return _this;
  }
  (0, _inherits2["default"])(Typeahead, _Component);
  return (0, _createClass2["default"])(Typeahead, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // call focus on entry or div to trigger key events listener
      if (this.props.autoFocus) {
        if (this.entry.current) {
          this.entry.current.focus();
        } else {
          var _this$root$current;
          (_this$root$current = this.root.current) === null || _this$root$current === void 0 || _this$root$current.focus();
        }
      }
    }
  }, {
    key: "_renderIncrementalSearchResults",
    value: function _renderIncrementalSearchResults() {
      var _this$props$customLis = this.props.customListComponent,
        CustomListComponent = _this$props$customLis === void 0 ? _dropdownList["default"] : _this$props$customLis;
      return /*#__PURE__*/_react["default"].createElement(CustomListComponent, {
        fixedOptions: this.props.fixedOptions,
        options: this.state.searchResults,
        areResultsTruncated: false,
        resultsTruncatedMessage: this.props.resultsTruncatedMessage,
        onOptionSelected: this._onOptionSelected,
        allowCustomValues: this.props.allowCustomValues,
        customValue: this._getCustomValue(),
        customClasses: this.props.customClasses,
        customListItemComponent: this.props.customListItemComponent,
        customListHeaderComponent: this.props.customListHeaderComponent,
        selectionIndex: this.state.selectionIndex,
        defaultClassNames: this.props.defaultClassNames,
        displayOption: this.props.displayOption,
        selectedItems: this.props.selectedItems,
        light: this.props.light
      });
    }
  }, {
    key: "getSelection",
    value: function getSelection() {
      var index = this.state.selectionIndex;
      if (index === null) {
        return null;
      }
      index = Number(index);
      if (this._hasCustomValue()) {
        if (index === 0) {
          return this.state.entryValue;
        }
        index--;
      }
      if (this._hasFixedOptions()) {
        var _this$props$fixedOpti, _this$props$fixedOpti2, _this$props$fixedOpti3;
        return index < Number((_this$props$fixedOpti = this.props.fixedOptions) === null || _this$props$fixedOpti === void 0 ? void 0 : _this$props$fixedOpti.length) ? (_this$props$fixedOpti2 = this.props.fixedOptions) === null || _this$props$fixedOpti2 === void 0 ? void 0 : _this$props$fixedOpti2[index] : this.state.searchResults[index - Number((_this$props$fixedOpti3 = this.props.fixedOptions) === null || _this$props$fixedOpti3 === void 0 ? void 0 : _this$props$fixedOpti3.length)];
      }
      return this.state.searchResults[index];
    }
  }, {
    key: "_renderHiddenInput",
    value: function _renderHiddenInput() {
      if (!this.props.name) {
        return null;
      }
      return /*#__PURE__*/_react["default"].createElement("input", {
        type: "hidden",
        name: this.props.name,
        value: this.state.selection
      });
    }
  }, {
    key: "_hasHint",
    value: function _hasHint() {
      return this.state.searchResults.length > 0 || this._hasCustomValue();
    }
  }, {
    key: "_hasFixedOptions",
    value: function _hasFixedOptions() {
      return Array.isArray(this.props.fixedOptions) && this.props.fixedOptions.length;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$customCla, _this$props$customCla2;
      var inputClasses = {};
      inputClasses[(_this$props$customCla = this.props.customClasses) === null || _this$props$customCla === void 0 ? void 0 : _this$props$customCla.input] = Boolean((_this$props$customCla2 = this.props.customClasses) === null || _this$props$customCla2 === void 0 ? void 0 : _this$props$customCla2.input);
      var inputClassList = (0, _classnames["default"])(inputClasses);
      var classes = (0, _defineProperty2["default"])({}, DEFAULT_CLASS, this.props.defaultClassNames);
      classes[this.props.className ? this.props.className : ''] = Boolean(this.props.className);
      var classList = (0, _classnames["default"])(classes);
      return /*#__PURE__*/_react["default"].createElement(TypeaheadWrapper, {
        className: classList,
        ref: this.root,
        tabIndex: 0,
        onKeyDown: this._onKeyDown,
        onKeyPress: this.props.onKeyPress,
        onKeyUp: this.props.onKeyUp,
        onFocus: this._onFocus,
        light: this.props.light
      }, this._renderHiddenInput(), this.props.searchable ? /*#__PURE__*/_react["default"].createElement(InputBox, null, /*#__PURE__*/_react["default"].createElement(TypeaheadInput, (0, _extends2["default"])({
        ref: this.entry,
        type: "text",
        disabled: this.props.disabled
      }, this.props.inputProps, {
        placeholder: this.props.placeholder,
        className: inputClassList,
        value: this.state.entryValue,
        onChange: this._onChange,
        onBlur: this._onBlur,
        light: this.props.light
      })), /*#__PURE__*/_react["default"].createElement(InputIcon, null, /*#__PURE__*/_react["default"].createElement(this.props.inputIcon, {
        height: "18px"
      }))) : null, this._renderIncrementalSearchResults());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.options === state.prevOptions) {
        return {};
      }

      //  invoked after a component is instantiated as well as before it is re-rendered
      var searchResults = getOptionsForValue(state.entryValue, props, state);
      return {
        searchResults: searchResults,
        prevOptions: props.options
      };
    }
  }]);
}(_react.Component);
(0, _defineProperty2["default"])(Typeahead, "defaultProps", {
  options: [],
  customClasses: {
    results: 'list-selector',
    input: 'typeahead__input',
    listItem: 'list__item',
    listAnchor: 'list__item__anchor'
  },
  allowCustomValues: 0,
  initialValue: '',
  value: '',
  placeholder: '',
  disabled: false,
  textarea: false,
  inputProps: {},
  onOptionSelected: noop,
  onChange: noop,
  onKeyDown: noop,
  onKeyPress: noop,
  onKeyUp: noop,
  onFocus: noop,
  onBlur: noop,
  filterOption: null,
  searchOptions: null,
  inputDisplayOption: null,
  defaultClassNames: true,
  customListComponent: _dropdownList["default"],
  customListItemComponent: _dropdownList.ListItem,
  inputIcon: _icons.Search,
  customListHeaderComponent: null,
  showOptionsWhenEmpty: true,
  searchable: true,
  resultsTruncatedMessage: null,
  autoFocus: true
});
(0, _reactLifecyclesCompat.polyfill)(Typeahead);
var _default = exports["default"] = Typeahead;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,