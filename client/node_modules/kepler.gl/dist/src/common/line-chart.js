"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactVis = require("react-vis");
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var LineChartWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .rv-xy-plot {\n    /* important for rendering hint */\n    position: relative;\n  }\n  .rv-xy-plot__inner {\n    /* important to show axis */\n    overflow: visible;\n  }\n\n  .rv-xy-plot__grid-lines__line {\n    stroke: ", ";\n    stroke-dasharray: 1px 4px;\n  }\n\n  .rv-xy-plot__axis__tick__text {\n    font-size: 9px;\n    fill: ", ";\n  }\n"])), function (props) {
  return props.theme.histogramFillOutRange;
}, function (props) {
  return props.theme.textColor;
});
var StyledHint = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: #d3d8e0;\n  border-radius: 2px;\n  color: ", ";\n  font-size: 9px;\n  margin: 4px;\n  padding: 3px 6px;\n  pointer-events: none;\n  user-select: none;\n"])), function (props) {
  return props.theme.textColorLT;
});
var HintContent = function HintContent(_ref) {
  var x = _ref.x,
    y = _ref.y,
    format = _ref.format;
  return /*#__PURE__*/_react["default"].createElement(StyledHint, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "hint--x"
  }, format(x)), /*#__PURE__*/_react["default"].createElement("div", {
    className: "row"
  }, y));
};
var MARGIN = {
  top: 0,
  bottom: 0,
  left: 0,
  right: 0
};
function LineChartFactory() {
  var LineChartComponent = function LineChartComponent(_ref2) {
    var brushComponent = _ref2.brushComponent,
      brushing = _ref2.brushing,
      color = _ref2.color,
      enableChartHover = _ref2.enableChartHover,
      height = _ref2.height,
      hoveredDP = _ref2.hoveredDP,
      isEnlarged = _ref2.isEnlarged,
      lineChart = _ref2.lineChart,
      margin = _ref2.margin,
      onMouseMove = _ref2.onMouseMove,
      width = _ref2.width,
      timezone = _ref2.timezone,
      timeFormat = _ref2.timeFormat;
    var _ref3 = lineChart || {},
      yDomain = _ref3.yDomain,
      xDomain = _ref3.xDomain;
    // @ts-expect-error seems lineChart.series has ambiguous types. Requires refactoring.
    var series = lineChart === null || lineChart === void 0 ? void 0 : lineChart.series;
    var paddedYDomain = (0, _react.useMemo)(function () {
      return yDomain && yDomain[0] && yDomain[1] ? [yDomain[0], yDomain[1] + (yDomain[1] - yDomain[0]) * 0.2] : [];
    }, [yDomain]);
    var brushData = (0, _react.useMemo)(function () {
      return xDomain && paddedYDomain ? [{
        x: xDomain[0],
        y: paddedYDomain[1],
        customComponent: function customComponent() {
          return brushComponent;
        }
      }] : [];
    }, [xDomain, paddedYDomain, brushComponent]);
    var hintFormatter = (0, _react.useMemo)(function () {
      return (0, _src.datetimeFormatter)(timezone)(timeFormat);
    }, [timezone, timeFormat]);
    return /*#__PURE__*/_react["default"].createElement(LineChartWrapper, {
      style: {
        marginTop: "".concat(margin.top, "px")
      }
    }, /*#__PURE__*/_react["default"].createElement(_reactVis.XYPlot, {
      xType: "time",
      width: width,
      height: height,
      margin: MARGIN,
      onMouseLeave: function onMouseLeave() {
        onMouseMove(null);
      },
      yDomain: paddedYDomain,
      xDomain: xDomain
    }, /*#__PURE__*/_react["default"].createElement(_reactVis.HorizontalGridLines, {
      tickTotal: 3
    }), series.lines.map(function (d, i) {
      return /*#__PURE__*/_react["default"].createElement(_reactVis.LineSeries, {
        key: i,
        style: {
          fill: 'none'
        },
        color: color,
        data: d,
        onNearestX: series.markers.length || !enableChartHover ? undefined : onMouseMove
      });
    }), /*#__PURE__*/_react["default"].createElement(_reactVis.MarkSeries, {
      data: hoveredDP ? [hoveredDP] : [],
      color: color
    }), /*#__PURE__*/_react["default"].createElement(_reactVis.CustomSVGSeries, {
      data: brushData
    }), isEnlarged && /*#__PURE__*/_react["default"].createElement(_reactVis.YAxis, {
      tickTotal: 3
    }), hoveredDP && enableChartHover && !brushing ? /*#__PURE__*/_react["default"].createElement(_reactVis.Hint, {
      value: hoveredDP
    }, /*#__PURE__*/_react["default"].createElement(HintContent, (0, _extends2["default"])({}, hoveredDP, {
      format: hintFormatter
    }))) : null));
  };
  return LineChartComponent;
}
var _default = exports["default"] = LineChartFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,