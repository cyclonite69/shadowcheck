"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.NumberFormatConfig = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _styledComponents2 = require("../../common/styled-components");
var _optionDropdown = require("./option-dropdown");
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledConfigPanel = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: ", ";\n  box-shadow: 0 10px 18px 0 rgb(0 0 0 / 36%);\n  flex-grow: 1;\n"])), function (props) {
  return props.theme.headerCellBackground;
});
var StyledConfigPanelContent = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 20px;\n  min-width: 230px;\n  max-height: 400px;\n  overflow: overlay;\n"])));
var StyledTableConfigGroup = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: 10px;\n  display: flex;\n  align-items: center;\n\n  input {\n    cursor: pointer !important;\n    width: 184px;\n    height: 22px;\n  }\n"])));
var NumberFormatConfig = exports.NumberFormatConfig = function NumberFormatConfig(_ref) {
  var title = _ref.title,
    id = _ref.id,
    defaultFormat = _ref.defaultFormat,
    options = _ref.options,
    columns = _ref.columns,
    setColumnDisplayFormat = _ref.setColumnDisplayFormat,
    onClose = _ref.onClose;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    showFormatter = _useState2[0],
    setShowFormatter = _useState2[1];
  var _useState3 = (0, _react.useState)(defaultFormat),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    format = _useState4[0],
    setFormat = _useState4[1];
  var onSetDisplayFormat = (0, _react.useCallback)(function (option) {
    setFormat(option.label);
    var formats = columns.reduce(function (prev, col) {
      prev[col.name] = option.format;
      return prev;
    }, {});
    setColumnDisplayFormat(formats);
    onClose();
  }, [columns, setColumnDisplayFormat, onClose]);
  return /*#__PURE__*/_react["default"].createElement(StyledTableConfigGroup, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.InputLight, {
    id: id,
    type: "text",
    value: title,
    "data-tip": format,
    readOnly: true,
    onClick: function onClick() {
      return setShowFormatter(true);
    }
  }), /*#__PURE__*/_react["default"].createElement(_optionDropdown.FormatterDropdown, {
    left: -185,
    top: 10,
    isOpened: showFormatter,
    displayFormat: format,
    setDisplayFormat: onSetDisplayFormat,
    onClose: function onClose() {
      return setShowFormatter(false);
    },
    formatLabels: options
  }));
};
function DataTableConfigFactory() {
  var getColumnsByFieldType = function getColumnsByFieldType(columns, colMeta, fieldType) {
    var result = [];
    columns.forEach(function (colName) {
      var _colMeta$colName;
      if (((_colMeta$colName = colMeta[colName]) === null || _colMeta$colName === void 0 ? void 0 : _colMeta$colName.type) === fieldType) {
        result.push(colMeta[colName]);
      }
    });
    return result;
  };
  var DataTableConfig = function DataTableConfig(_ref2) {
    var columns = _ref2.columns,
      colMeta = _ref2.colMeta,
      setColumnDisplayFormat = _ref2.setColumnDisplayFormat,
      onClose = _ref2.onClose;
    var formatConfigs = [{
      title: '# Set Integer Number Format',
      id: 'input-iteger-format',
      displayType: _src2.ALL_FIELD_TYPES.integer
    }, {
      title: '# Set Float Number Format',
      id: 'input-float-format',
      displayType: _src2.ALL_FIELD_TYPES.real
    }, {
      title: '# Set Timestamp Format',
      id: 'input-datetime-format',
      displayType: _src2.ALL_FIELD_TYPES.timestamp
    }, {
      title: '# Set Date Format',
      id: 'input-date-format',
      displayType: _src2.ALL_FIELD_TYPES.date
    }, {
      title: '# Set Boolean Format',
      id: 'input-bool-format',
      displayType: _src2.ALL_FIELD_TYPES["boolean"]
    }];
    return /*#__PURE__*/_react["default"].createElement(StyledConfigPanel, null, /*#__PURE__*/_react["default"].createElement(StyledConfigPanelContent, null, formatConfigs.map(function (config, index) {
      return /*#__PURE__*/_react["default"].createElement(NumberFormatConfig, {
        title: "".concat(config.title),
        key: index,
        id: config.id,
        defaultFormat: 'None',
        colMeta: colMeta,
        options: (0, _src.getFieldFormatLabels)("".concat(config.displayType)),
        columns: getColumnsByFieldType(columns, colMeta, "".concat(config.displayType)),
        setColumnDisplayFormat: setColumnDisplayFormat,
        onClose: onClose
      });
    })));
  };
  return DataTableConfig;
}
var _default = exports["default"] = DataTableConfigFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,