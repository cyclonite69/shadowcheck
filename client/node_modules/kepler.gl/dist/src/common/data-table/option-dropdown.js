"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FormatterDropdown = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _portaled = _interopRequireDefault(require("../portaled"));
var _dropdownList = _interopRequireDefault(require("../item-selector/dropdown-list"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _icons = require("../icons");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ListItem = function ListItem(_ref) {
  var value = _ref.value;
  return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(value.icon, {
    height: "13px"
  }), value.display);
};

// make hash icon smaller
var StyledOptionsDropdown = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .list-selector {\n    border-top: 0;\n    width: max-content;\n    padding: 8px 0;\n  }\n\n  .list__item > div {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: flex-start;\n    line-height: 18px;\n\n    svg {\n      margin-right: 5px;\n    }\n\n    .data-ex-icons-hash {\n      width: 10px;\n      height: 10px;\n      stroke-width: 1px;\n      margin-left: 2px;\n      margin-right: 6px;\n    }\n  }\n"])));
var StyledPopover = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 184px;\n  height: 160px;\n  z-index: 101;\n  .list-selector {\n    max-height: 160px;\n  }\n  .hover:after {\n    content: '\\2713';\n    margin-left: 5px;\n  }\n"], ["\n  width: 184px;\n  height: 160px;\n  z-index: 101;\n  .list-selector {\n    max-height: 160px;\n  }\n  .hover:after {\n    content: '\\\\2713';\n    margin-left: 5px;\n  }\n"])));
var FormatterDropdown = exports.FormatterDropdown = function FormatterDropdown(props) {
  var left = props.left,
    top = props.top,
    isOpened = props.isOpened,
    _props$displayFormat = props.displayFormat,
    displayFormat = _props$displayFormat === void 0 ? 'None' : _props$displayFormat,
    setDisplayFormat = props.setDisplayFormat,
    onClose = props.onClose,
    formatLabels = props.formatLabels;
  var selectionIndex = formatLabels.findIndex(function (label) {
    return label.format === displayFormat;
  });
  var onSelectDisplayFormat = (0, _react.useCallback)(function (result) {
    setDisplayFormat === null || setDisplayFormat === void 0 || setDisplayFormat(result);
    onClose();
  }, [setDisplayFormat, onClose]);
  return /*#__PURE__*/_react["default"].createElement(_portaled["default"], {
    left: left,
    top: top,
    isOpened: isOpened,
    onClose: onClose
  }, /*#__PURE__*/_react["default"].createElement(StyledPopover, {
    className: "formatter-popover"
  }, /*#__PURE__*/_react["default"].createElement(_dropdownList["default"], {
    options: formatLabels,
    selectionIndex: selectionIndex,
    displayOption: function displayOption(option) {
      return option.label;
    },
    onOptionSelected: onSelectDisplayFormat,
    light: true
  })));
};
var OptionDropdown = function OptionDropdown(props) {
  var _colMeta$column;
  var isOpened = props.isOpened,
    column = props.column,
    colMeta = props.colMeta,
    toggleMoreOptions = props.toggleMoreOptions,
    sortTableColumn = props.sortTableColumn,
    pinTableColumn = props.pinTableColumn,
    copyTableColumn = props.copyTableColumn,
    setDisplayFormat = props.setDisplayFormat;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    showFormatter = _useState2[0],
    setShowFormatter = _useState2[1];
  var onOptionSelected = (0, _react.useCallback)(function (_ref2) {
    var value = _ref2.value;
    switch (value) {
      case _src.TABLE_OPTION.SORT_ASC:
        sortTableColumn === null || sortTableColumn === void 0 || sortTableColumn(_src.SORT_ORDER.ASCENDING);
        break;
      case _src.TABLE_OPTION.SORT_DES:
        sortTableColumn === null || sortTableColumn === void 0 || sortTableColumn(_src.SORT_ORDER.DESCENDING);
        break;
      case _src.TABLE_OPTION.UNSORT:
        sortTableColumn === null || sortTableColumn === void 0 || sortTableColumn(_src.SORT_ORDER.UNSORT);
        break;
      case _src.TABLE_OPTION.PIN:
        pinTableColumn();
        break;
      case _src.TABLE_OPTION.UNPIN:
        pinTableColumn();
        break;
      case _src.TABLE_OPTION.COPY:
        copyTableColumn();
        break;
      case _src.TABLE_OPTION.FORMAT_COLUMN:
        setShowFormatter(true);
        return;
      default:
        break;
    }
    toggleMoreOptions(column);
  }, [column, sortTableColumn, pinTableColumn, copyTableColumn, toggleMoreOptions]);
  var TABLE_OPTION_LIST_ICONS = {
    Pin: _icons.Pin,
    ArrowDown: _icons.ArrowDown,
    ArrowUp: _icons.ArrowUp,
    Clipboard: _icons.Clipboard,
    Cancel: _icons.Cancel,
    Hash: _icons.Hash
  };
  var formatLabels = (0, _src2.getFieldFormatLabels)(colMeta[column].type);
  var options = _src.TABLE_OPTION_LIST.filter(function (op) {
    // cant use conditions because it creates a circular dependency
    // TODO: move condition clause out of default-settings TABLE_OPTION_LIST
    var validToFormat = op.value !== _src.TABLE_OPTION.FORMAT_COLUMN || formatLabels.length;
    return (!op.condition || op.condition(props)) && validToFormat;
  }).map(function (op) {
    return _objectSpread(_objectSpread({}, op), {}, {
      icon: TABLE_OPTION_LIST_ICONS[op.icon]
    });
  });
  var onClose = (0, _react.useCallback)(function () {
    setShowFormatter(false);
    toggleMoreOptions(column);
  }, [column, toggleMoreOptions]);
  return /*#__PURE__*/_react["default"].createElement(_portaled["default"], {
    right: 120,
    top: 20,
    isOpened: isOpened,
    onClose: onClose
  }, /*#__PURE__*/_react["default"].createElement(StyledOptionsDropdown, {
    className: "more-options"
  }, /*#__PURE__*/_react["default"].createElement(_dropdownList["default"], {
    displayOption: function displayOption(d) {
      return d.display;
    },
    options: options,
    customListItemComponent: ListItem,
    onOptionSelected: onOptionSelected,
    light: true
  }), /*#__PURE__*/_react["default"].createElement(FormatterDropdown, {
    left: 120,
    top: -10,
    isOpened: Boolean(isOpened && showFormatter),
    formatLabels: formatLabels,
    displayFormat: (_colMeta$column = colMeta[column]) === null || _colMeta$column === void 0 ? void 0 : _colMeta$column.displayFormat,
    setDisplayFormat: setDisplayFormat,
    onClose: onClose
  })));
};
var _default = exports["default"] = OptionDropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,