"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _ = require("../..");
var _styledComponents2 = require("../../common/styled-components");
var _customPicker = _interopRequireDefault(require("../layer-panel/custom-picker"));
var _colorSelector = require("../layer-panel/color-selector");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var LayerGroupColorPickerWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  margin-right: ", "px;\n  cursor: pointer;\n  ", "\n"])), function (props) {
  return props.$extraMarginRight ? 0 : 24;
}, function (props) {
  return props.disabled && (0, _styledComponents.css)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n      cursor: none;\n      pointer-events: none;\n      opacity: 0.3;\n    "])));
});
LayerGroupColorPickerFactory.deps = [];
function LayerGroupColorPickerFactory() {
  var LayerGroupColorPicker = function LayerGroupColorPicker(_ref) {
    var slug = _ref.slug,
      color = _ref.color,
      onColorChange = _ref.onColorChange,
      extraMarginRight = _ref.extraMarginRight,
      disabled = _ref.disabled;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      displayColorPicker = _useState2[0],
      setDisplayColorPicker = _useState2[1];
    var onColorBlockClick = (0, _react.useCallback)(function () {
      setDisplayColorPicker(!displayColorPicker);
    }, [setDisplayColorPicker, displayColorPicker]);
    var onClosePicker = (0, _react.useCallback)(function () {
      setDisplayColorPicker(false);
    }, [setDisplayColorPicker]);
    var onCustomPickerChange = (0, _react.useCallback)(function (newColor) {
      onColorChange([newColor.rgb.r, newColor.rgb.g, newColor.rgb.b]);
    }, [onColorChange]);
    return /*#__PURE__*/_react["default"].createElement(LayerGroupColorPickerWrapper, {
      $extraMarginRight: extraMarginRight,
      disabled: disabled
    }, /*#__PURE__*/_react["default"].createElement(_colorSelector.ColorBlock, {
      backgroundcolor: color,
      onClick: onColorBlockClick,
      className: "color-selector__selector__block",
      "data-tip": true,
      "data-for": "update-color-".concat(slug)
    }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
      id: "update-color-".concat(slug),
      effect: "solid",
      delayShow: 500
    }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_src2.FormattedMessage, {
      id: 'Update color'
    }))), /*#__PURE__*/_react["default"].createElement(_.Portaled, {
      isOpened: displayColorPicker !== false,
      left: 110,
      top: -50,
      onClose: onClosePicker
    }, /*#__PURE__*/_react["default"].createElement(_customPicker["default"], {
      color: (0, _src.rgbToHex)(color),
      onChange: onCustomPickerChange
    })));
  };
  return LayerGroupColorPicker;
}
var _default = exports["default"] = LayerGroupColorPickerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,