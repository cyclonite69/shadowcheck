"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.EditButton = exports.ColorBreaksDisplay = exports.CategoricalColorDisplay = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/common-utils/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _src3 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _columnStatsChart = _interopRequireDefault(require("../../common/column-stats-chart"));
var _icons = require("../../common/icons");
var _styledComponents2 = require("../../common/styled-components");
var _customPalette = _interopRequireWildcard(require("./custom-palette"));
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var StyledColorBreaksPanel = _styledComponents["default"].div.attrs({
  className: 'styled-color-breaks-panel'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: 10px;\n"])));
var StyledColorBreaksDisplay = _styledComponents["default"].div.attrs({
  className: 'styled-color-breaks-display'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 8px 12px 0 12px;\n"])));
var ColorBreaksPanelWrapper = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])([""])));
var EditButton = exports.EditButton = function EditButton(_ref) {
  var onClickEdit = _ref.onClickEdit;
  return /*#__PURE__*/_react["default"].createElement(_styledComponents2.Button, {
    className: "editp__button",
    link: true,
    onClick: onClickEdit
  }, /*#__PURE__*/_react["default"].createElement(_icons.Edit, {
    height: "16px"
  }), "Edit");
};
var ColorBreaksDisplay = exports.ColorBreaksDisplay = function ColorBreaksDisplay(_ref2) {
  var currentBreaks = _ref2.currentBreaks,
    onEdit = _ref2.onEdit;
  if (!(0, _src3.isNumericColorBreaks)(currentBreaks)) {
    // don't display color breaks for ordinal breaks, user can change it in custom breaks
    return null;
  }
  return /*#__PURE__*/_react["default"].createElement(StyledColorBreaksDisplay, null, onEdit ? /*#__PURE__*/_react["default"].createElement(EditButton, {
    onClickEdit: onEdit
  }) : null, currentBreaks.map(function (item, index) {
    return /*#__PURE__*/_react["default"].createElement(_customPalette.ColorPaletteItem, {
      className: "disabled",
      key: index
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "custom-palette-input__left"
    }, /*#__PURE__*/_react["default"].createElement(_customPalette.ColorSwatch, {
      color: item.data
    }), /*#__PURE__*/_react["default"].createElement(_customPalette.EditableColorRange, {
      item: item,
      isLast: index === currentBreaks.length - 1,
      index: index,
      editable: false
    })));
  }));
};
var CategoricalColorDisplay = exports.CategoricalColorDisplay = function CategoricalColorDisplay(_ref3) {
  var colorMap = _ref3.colorMap,
    onEdit = _ref3.onEdit;
  return /*#__PURE__*/_react["default"].createElement(StyledColorBreaksDisplay, null, onEdit ? /*#__PURE__*/_react["default"].createElement(EditButton, {
    onClickEdit: onEdit
  }) : null, colorMap === null || colorMap === void 0 ? void 0 : colorMap.map(function (cm, index) {
    return /*#__PURE__*/_react["default"].createElement(_customPalette.ColorPaletteItem, {
      className: "disabled",
      key: index
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "custom-palette-input__left"
    }, /*#__PURE__*/_react["default"].createElement(_customPalette.ColorSwatch, {
      color: cm[1]
    }), /*#__PURE__*/_react["default"].createElement(_customPalette.CategoricalSelector, {
      index: index,
      selectedValues: (0, _src.toArray)(cm[0]),
      allValues: [],
      editable: false
    })));
  }));
};
ColorBreaksPanelFactory.deps = [_customPalette["default"], _columnStatsChart["default"]];
function ColorBreaksPanelFactory(CustomPalette, ColumnStatsChart) {
  // eslint-disable-next-line complexity
  var ColorBreaksPanel = function ColorBreaksPanel(_ref4) {
    var _customPalette$name;
    var colorBreaks = _ref4.colorBreaks,
      colorUIConfig = _ref4.colorUIConfig,
      dataset = _ref4.dataset,
      colorField = _ref4.colorField,
      isCustomBreaks = _ref4.isCustomBreaks,
      allBins = _ref4.allBins,
      filteredBins = _ref4.filteredBins,
      isFiltered = _ref4.isFiltered,
      histogramDomain = _ref4.histogramDomain,
      ordinalDomain = _ref4.ordinalDomain,
      setColorUI = _ref4.setColorUI,
      onScaleChange = _ref4.onScaleChange,
      onApply = _ref4.onApply,
      onCancel = _ref4.onCancel;
    var customPalette = colorUIConfig.customPalette,
      showSketcher = colorUIConfig.showSketcher,
      colorRangeConfig = colorUIConfig.colorRangeConfig;
    var isEditingCustomBreaks = Boolean(colorRangeConfig.customBreaks);
    var currentBreaks = (0, _react.useMemo)(function () {
      return isEditingCustomBreaks ? (0, _src3.colorMapToColorBreaks)(customPalette.colorMap) : colorBreaks;
    }, [customPalette.colorMap, isEditingCustomBreaks, colorBreaks]);
    var onClickEditCustomBreaks = (0, _react.useCallback)(function () {
      setColorUI({
        colorRangeConfig: {
          customBreaks: true
        }
      });
    }, [setColorUI]);
    var onCilckCancel = (0, _react.useCallback)(function () {
      setColorUI({
        showSketcher: false,
        colorRangeConfig: {
          customBreaks: false
        }
      });
      onCancel();
    }, [setColorUI, onCancel]);
    var onColumnStatsChartChanged = (0, _react.useCallback)(function (newColorBreaks) {
      var newColors = newColorBreaks.map(function (cb) {
        return cb.data;
      });
      var newColorMap = (0, _src3.colorBreaksToColorMap)(newColorBreaks);
      var newCustomPalette = _objectSpread(_objectSpread({}, customPalette), {}, {
        colorMap: newColorMap,
        colors: newColors
      });

      // update custom pallette editor
      if (!isEditingCustomBreaks) {
        setColorUI({
          colorRangeConfig: {
            customBreaks: true
          },
          customPalette: newCustomPalette
        });
      } else {
        setColorUI({
          customPalette: newCustomPalette
        });
      }

      // trigger the map to re-render using newCustomPalette
      onScaleChange(_src2.SCALE_TYPES.custom, newCustomPalette);
    }, [setColorUI, customPalette, isEditingCustomBreaks, onScaleChange]);
    return /*#__PURE__*/_react["default"].createElement(ColorBreaksPanelWrapper, null, dataset && allBins.length > 1 && (0, _src3.isNumericColorBreaks)(colorBreaks) ? /*#__PURE__*/_react["default"].createElement(ColumnStatsChart, {
      colorField: colorField,
      dataset: dataset,
      colorBreaks: currentBreaks,
      allBins: allBins,
      filteredBins: filteredBins,
      isFiltered: isFiltered,
      histogramDomain: histogramDomain,
      onChangedUpdater: onColumnStatsChartChanged
    }) : null, /*#__PURE__*/_react["default"].createElement(StyledColorBreaksPanel, null, isEditingCustomBreaks ? /*#__PURE__*/_react["default"].createElement(CustomPalette, {
      ordinalDomain: ordinalDomain,
      customPalette: customPalette,
      setColorPaletteUI: setColorUI,
      showSketcher: showSketcher,
      onApply: onApply,
      onCancel: onCilckCancel
    }) : currentBreaks && allBins.length > 1 && (0, _src3.isNumericColorBreaks)(colorBreaks) ? /*#__PURE__*/_react["default"].createElement(ColorBreaksDisplay, {
      currentBreaks: currentBreaks,
      onEdit: isCustomBreaks ? onClickEditCustomBreaks : null
    }) : customPalette.colorMap && customPalette.type === 'customOrdinal' && (_customPalette$name = customPalette.name) !== null && _customPalette$name !== void 0 && _customPalette$name.endsWith(colorField.name) ? /*#__PURE__*/_react["default"].createElement(CategoricalColorDisplay, {
      colorMap: customPalette.colorMap,
      onEdit: isCustomBreaks ? onClickEditCustomBreaks : null
    }) : null));
  };
  return _react["default"].memo(ColorBreaksPanel);
}
var _default = exports["default"] = ColorBreaksPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,