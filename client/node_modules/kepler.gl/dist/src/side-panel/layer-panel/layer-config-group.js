"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConfigGroupCollapsibleHeader = exports.ConfigGroupCollapsibleContent = void 0;
exports.LayerConfigGroupLabelFactory = LayerConfigGroupLabelFactory;
exports["default"] = exports.StyledLayerConfigGroupAction = exports.StyledLayerConfigGroup = exports.StyledConfigGroupHeader = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactIntl = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-intl");
var _switch = _interopRequireDefault(require("../../common/switch"));
var _infoHelper = _interopRequireDefault(require("../../common/info-helper"));
var _icons = require("../../common/icons");
var _styledComponents2 = require("../../common/styled-components");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledLayerConfigGroupAction = exports.StyledLayerConfigGroupAction = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  color: ", ";\n"])), function (props) {
  return props.theme.textColor;
});
var ConfigGroupCollapsibleContent = exports.ConfigGroupCollapsibleContent = _styledComponents["default"].div.attrs({
  className: 'layer-config-group__content__collapsible'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  transition: max-height 0.3s ease-out;\n  height: max-content;\n  max-height: 1200px;\n  overflow: auto;\n"])));
var ConfigGroupCollapsibleHeader = exports.ConfigGroupCollapsibleHeader = _styledComponents["default"].div.attrs({
  className: 'layer-config-group__header__collapsible'
})(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  overflow: visible;\n  overflow: hidden;\n  max-height: 0;\n"])));
var StyledLayerConfigGroup = exports.StyledLayerConfigGroup = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  padding-left: ", "px;\n  margin-bottom: ", "px;\n\n  &.disabled {\n    opacity: 0.3;\n    pointer-events: none;\n  }\n  &.collapsed {\n    .layer-config-group__header__collapsible {\n      overflow: visible;\n      max-height: 600px;\n    }\n    .layer-config-group__content {\n      .layer-config-group__content__collapsible {\n        overflow: hidden;\n        max-height: 0;\n      }\n    }\n  }\n"])), function (props) {
  return props.theme.layerConfigGroupPaddingLeft;
}, function (props) {
  return props.theme.layerConfigGroupMarginBottom;
});
var StyledConfigGroupHeader = exports.StyledConfigGroupHeader = _styledComponents["default"].div.withConfig({
  shouldForwardProp: _styledComponents2.shouldForwardProp
}).attrs({
  className: 'layer-config-group__header'
})(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 12px;\n  cursor: default;\n\n  &:hover {\n    ", "\n    .layer-config-group__label {\n      color: ", ";\n    }\n\n    .layer-config-group__action {\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.collapsible && 'cursor: pointer;';
}, function (props) {
  return props.theme.textColorHl;
}, function (props) {
  return props.theme.textColorHl;
});
var ConfigGroupContent = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  &.disabled {\n    opacity: 0.3;\n    pointer-events: none;\n    * {\n      pointer-events: none;\n    }\n  }\n"])));
LayerConfigGroupLabelFactory.deps = [_infoHelper["default"]];
function LayerConfigGroupLabelFactory(InfoHelper) {
  var StyledLayerConfigGroupLabel = _styledComponents["default"].div(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n    border-left: ", " solid\n      ", ";\n    line-height: 12px;\n    margin-left: ", ";\n    padding-left: ", ";\n\n    display: flex;\n    align-items: center;\n\n    span {\n      color: ", ";\n      font-weight: 500;\n      letter-spacing: 0.2px;\n      text-transform: capitalize;\n      margin-left: ", ";\n      font-size: ", ";\n    }\n  "])), function (props) {
    return props.theme.layerConfigGroupLabelBorderLeft;
  }, function (props) {
    return props.theme.labelColor;
  }, function (props) {
    return props.theme.layerConfigGroupLabelMargin;
  }, function (props) {
    return props.theme.layerConfigGroupLabelPadding;
  }, function (props) {
    return props.theme.textColor;
  }, function (props) {
    return props.theme.layerConfigGroupLabelLabelMargin;
  }, function (props) {
    return props.theme.layerConfigGroupLabelLabelFontSize;
  });
  var LayerConfigGroupLabel = function LayerConfigGroupLabel(_ref) {
    var label = _ref.label,
      description = _ref.description;
    return /*#__PURE__*/_react["default"].createElement(StyledLayerConfigGroupLabel, {
      className: "layer-config-group__label"
    }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
      id: label || 'misc.empty',
      defaultMessage: label
    })), description && /*#__PURE__*/_react["default"].createElement(InfoHelper, {
      description: description,
      id: label
    }));
  };
  return LayerConfigGroupLabel;
}
LayerConfigGroupFactory.deps = [LayerConfigGroupLabelFactory];
function nop() {
  return;
}
function LayerConfigGroupFactory(LayerConfigGroupLabel) {
  var LayerConfigGroup = function LayerConfigGroup(_ref2) {
    var label = _ref2.label,
      children = _ref2.children,
      property = _ref2.property,
      layer = _ref2.layer,
      _ref2$onChange = _ref2.onChange,
      _onChange2 = _ref2$onChange === void 0 ? nop : _ref2$onChange,
      _ref2$collapsible = _ref2.collapsible,
      collapsible = _ref2$collapsible === void 0 ? false : _ref2$collapsible,
      _ref2$description = _ref2.description,
      description = _ref2$description === void 0 ? '' : _ref2$description,
      _ref2$disabled = _ref2.disabled,
      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
      _ref2$expanded = _ref2.expanded,
      expanded = _ref2$expanded === void 0 ? false : _ref2$expanded,
      _ref2$IconComponent = _ref2.IconComponent,
      IconComponent = _ref2$IconComponent === void 0 ? _icons.VertThreeDots : _ref2$IconComponent;
    var _useState = (0, _react.useState)(!expanded),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      collapsed = _useState2[0],
      toggleCollapsed = _useState2[1];
    var onToggleCollapsed = (0, _react.useCallback)(function () {
      collapsible && toggleCollapsed(!collapsed);
    }, [collapsed, toggleCollapsed, collapsible]);
    return /*#__PURE__*/_react["default"].createElement(StyledLayerConfigGroup, {
      className: (0, _classnames["default"])('layer-config-group', {
        collapsed: collapsed,
        disabled: disabled
      })
    }, /*#__PURE__*/_react["default"].createElement(StyledConfigGroupHeader, {
      onClick: onToggleCollapsed,
      collapsible: collapsible
    }, /*#__PURE__*/_react["default"].createElement(LayerConfigGroupLabel, {
      label: label,
      description: description,
      collapsed: collapsed
    }), /*#__PURE__*/_react["default"].createElement(StyledLayerConfigGroupAction, {
      className: "layer-config-group__action"
    }, property ? /*#__PURE__*/_react["default"].createElement(_switch["default"], {
      checked: layer === null || layer === void 0 ? void 0 : layer.config.visConfig[property],
      id: "".concat(layer === null || layer === void 0 ? void 0 : layer.id, "-").concat(property),
      onChange: function onChange() {
        return _onChange2 === null || _onChange2 === void 0 ? void 0 : _onChange2((0, _defineProperty2["default"])({}, property, !(layer !== null && layer !== void 0 && layer.config.visConfig[property])));
      }
    }) : null, collapsible ? /*#__PURE__*/_react["default"].createElement(IconComponent, {
      height: "18px"
    }) : null)), /*#__PURE__*/_react["default"].createElement(ConfigGroupContent, {
      className: (0, _classnames["default"])('layer-config-group__content', {
        disabled: property && !(layer !== null && layer !== void 0 && layer.config.visConfig[property])
      })
    }, children));
  };
  return LayerConfigGroup;
}
var _default = exports["default"] = LayerConfigGroupFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,