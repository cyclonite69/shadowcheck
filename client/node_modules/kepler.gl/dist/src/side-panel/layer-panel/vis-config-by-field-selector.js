"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactIntl = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-intl");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));
var _infoHelper = _interopRequireDefault(require("../../common/info-helper"));
var _styledComponents = require("../../common/styled-components");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

VisConfigByFieldSelectorFactory.deps = [_infoHelper["default"], _fieldSelector["default"]];
function VisConfigByFieldSelectorFactory(InfoHelper, FieldSelector) {
  var VisConfigByFieldSelector = function VisConfigByFieldSelector(_ref) {
    var id = _ref.id,
      property = _ref.property,
      selectedField = _ref.selectedField,
      description = _ref.description,
      label = _ref.label,
      intl = _ref.intl,
      updateField = _ref.updateField,
      fields = _ref.fields,
      placeholder = _ref.placeholder,
      disabled = _ref.disabled;
    return /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, {
      disabled: disabled
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents.PanelLabel, null, label && /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
      id: label
    }) || /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
      id: "layer.propertyBasedOn",
      values: {
        property: intl.formatMessage({
          id: "property.".concat((0, _src.camelize)(property)),
          defaultMessage: property
        })
      }
    })), description && /*#__PURE__*/_react["default"].createElement(InfoHelper, {
      description: description,
      property: property,
      id: "".concat(id, "-").concat(property)
    })), /*#__PURE__*/_react["default"].createElement(FieldSelector, {
      fields: fields,
      value: selectedField && selectedField.name,
      placeholder: placeholder,
      onSelect: function onSelect(items) {
        return updateField(Array.isArray(items) ? items === null || items === void 0 ? void 0 : items[0] : items);
      },
      disabled: disabled,
      erasable: true
    }));
  };
  return (0, _reactIntl.injectIntl)(VisConfigByFieldSelector);
}
var _default = exports["default"] = VisConfigByFieldSelectorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdEludGwiLCJfc3JjIiwiX2ZpZWxkU2VsZWN0b3IiLCJfaW5mb0hlbHBlciIsIl9zdHlsZWRDb21wb25lbnRzIiwiVmlzQ29uZmlnQnlGaWVsZFNlbGVjdG9yRmFjdG9yeSIsImRlcHMiLCJJbmZvSGVscGVyRmFjdG9yeSIsIkZpZWxkU2VsZWN0b3JGYWN0b3J5IiwiSW5mb0hlbHBlciIsIkZpZWxkU2VsZWN0b3IiLCJWaXNDb25maWdCeUZpZWxkU2VsZWN0b3IiLCJfcmVmIiwiaWQiLCJwcm9wZXJ0eSIsInNlbGVjdGVkRmllbGQiLCJkZXNjcmlwdGlvbiIsImxhYmVsIiwiaW50bCIsInVwZGF0ZUZpZWxkIiwiZmllbGRzIiwicGxhY2Vob2xkZXIiLCJkaXNhYmxlZCIsImNyZWF0ZUVsZW1lbnQiLCJTaWRlUGFuZWxTZWN0aW9uIiwiUGFuZWxMYWJlbFdyYXBwZXIiLCJQYW5lbExhYmVsIiwiRm9ybWF0dGVkTWVzc2FnZSIsInZhbHVlcyIsImZvcm1hdE1lc3NhZ2UiLCJjb25jYXQiLCJjYW1lbGl6ZSIsImRlZmF1bHRNZXNzYWdlIiwidmFsdWUiLCJuYW1lIiwib25TZWxlY3QiLCJpdGVtcyIsIkFycmF5IiwiaXNBcnJheSIsImVyYXNhYmxlIiwiaW5qZWN0SW50bCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NyYy9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL3Zpcy1jb25maWctYnktZmllbGQtc2VsZWN0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2UsIGluamVjdEludGwsIFdyYXBwZWRDb21wb25lbnRQcm9wc30gZnJvbSAncmVhY3QtaW50bCc7XG5cbmltcG9ydCB7RmllbGR9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuXG5pbXBvcnQge2NhbWVsaXplfSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcbmltcG9ydCBGaWVsZFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuLi8uLi9jb21tb24vZmllbGQtc2VsZWN0b3InO1xuaW1wb3J0IEluZm9IZWxwZXJGYWN0b3J5IGZyb20gJy4uLy4uL2NvbW1vbi9pbmZvLWhlbHBlcic7XG5pbXBvcnQge1BhbmVsTGFiZWwsIFBhbmVsTGFiZWxXcmFwcGVyLCBTaWRlUGFuZWxTZWN0aW9ufSBmcm9tICcuLi8uLi9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuXG50eXBlIFZpc0NvbmZpZ0J5RmllbGRTZWxlY3RvclByb3BzID0ge1xuICBmaWVsZHM6IEZpZWxkW107XG4gIGlkOiBzdHJpbmc7XG4gIHByb3BlcnR5OiBzdHJpbmc7XG4gIHVwZGF0ZUZpZWxkOiAodmFsOiBzdHJpbmcgfCBGaWVsZCB8IG51bGwpID0+IHZvaWQ7XG4gIHNjYWxlVHlwZT86IHN0cmluZztcbiAgc2VsZWN0ZWRGaWVsZD86IEZpZWxkO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG59ICYgV3JhcHBlZENvbXBvbmVudFByb3BzO1xuXG5WaXNDb25maWdCeUZpZWxkU2VsZWN0b3JGYWN0b3J5LmRlcHMgPSBbSW5mb0hlbHBlckZhY3RvcnksIEZpZWxkU2VsZWN0b3JGYWN0b3J5XTtcblxuZnVuY3Rpb24gVmlzQ29uZmlnQnlGaWVsZFNlbGVjdG9yRmFjdG9yeShcbiAgSW5mb0hlbHBlcjogUmV0dXJuVHlwZTx0eXBlb2YgSW5mb0hlbHBlckZhY3Rvcnk+LFxuICBGaWVsZFNlbGVjdG9yOiBSZXR1cm5UeXBlPHR5cGVvZiBGaWVsZFNlbGVjdG9yRmFjdG9yeT5cbikge1xuICBjb25zdCBWaXNDb25maWdCeUZpZWxkU2VsZWN0b3I6IFJlYWN0LkZDPFZpc0NvbmZpZ0J5RmllbGRTZWxlY3RvclByb3BzPiA9ICh7XG4gICAgaWQsXG4gICAgcHJvcGVydHksXG4gICAgc2VsZWN0ZWRGaWVsZCxcbiAgICBkZXNjcmlwdGlvbixcbiAgICBsYWJlbCxcbiAgICBpbnRsLFxuICAgIHVwZGF0ZUZpZWxkLFxuICAgIGZpZWxkcyxcbiAgICBwbGFjZWhvbGRlcixcbiAgICBkaXNhYmxlZFxuICB9KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTaWRlUGFuZWxTZWN0aW9uIGRpc2FibGVkPXtkaXNhYmxlZH0+XG4gICAgICAgIDxQYW5lbExhYmVsV3JhcHBlcj5cbiAgICAgICAgICA8UGFuZWxMYWJlbD5cbiAgICAgICAgICAgIHsobGFiZWwgJiYgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9e2xhYmVsfSAvPikgfHwgKFxuICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZVxuICAgICAgICAgICAgICAgIGlkPVwibGF5ZXIucHJvcGVydHlCYXNlZE9uXCJcbiAgICAgICAgICAgICAgICB2YWx1ZXM9e3tcbiAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiBpbnRsLmZvcm1hdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBpZDogYHByb3BlcnR5LiR7Y2FtZWxpemUocHJvcGVydHkpfWAsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1BhbmVsTGFiZWw+XG4gICAgICAgICAge2Rlc2NyaXB0aW9uICYmIChcbiAgICAgICAgICAgIDxJbmZvSGVscGVyIGRlc2NyaXB0aW9uPXtkZXNjcmlwdGlvbn0gcHJvcGVydHk9e3Byb3BlcnR5fSBpZD17YCR7aWR9LSR7cHJvcGVydHl9YH0gLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1BhbmVsTGFiZWxXcmFwcGVyPlxuICAgICAgICA8RmllbGRTZWxlY3RvclxuICAgICAgICAgIGZpZWxkcz17ZmllbGRzfVxuICAgICAgICAgIHZhbHVlPXtzZWxlY3RlZEZpZWxkICYmIHNlbGVjdGVkRmllbGQubmFtZX1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG4gICAgICAgICAgb25TZWxlY3Q9e2l0ZW1zID0+IHVwZGF0ZUZpZWxkKEFycmF5LmlzQXJyYXkoaXRlbXMpID8gaXRlbXM/LlswXSA6IGl0ZW1zKX1cbiAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgZXJhc2FibGVcbiAgICAgICAgLz5cbiAgICAgIDwvU2lkZVBhbmVsU2VjdGlvbj5cbiAgICApO1xuICB9O1xuICByZXR1cm4gaW5qZWN0SW50bChWaXNDb25maWdCeUZpZWxkU2VsZWN0b3IpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWaXNDb25maWdCeUZpZWxkU2VsZWN0b3JGYWN0b3J5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRCxPQUFBO0FBSUEsSUFBQUUsSUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsY0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksV0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssaUJBQUEsR0FBQUwsT0FBQTtBQVhBO0FBQ0E7O0FBeUJBTSwrQkFBK0IsQ0FBQ0MsSUFBSSxHQUFHLENBQUNDLHNCQUFpQixFQUFFQyx5QkFBb0IsQ0FBQztBQUVoRixTQUFTSCwrQkFBK0JBLENBQ3RDSSxVQUFnRCxFQUNoREMsYUFBc0QsRUFDdEQ7RUFDQSxJQUFNQyx3QkFBaUUsR0FBRyxTQUFwRUEsd0JBQWlFQSxD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