"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _styledComponents2 = require("../../common/styled-components");
var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/reducers/src");
var _templateObject, _templateObject2, _templateObject3, _templateObject4; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var ColumnRow = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  margin-bottom: 8px;\n  align-items: center;\n"])));
var ColumnName = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 32%;\n  line-height: 1.2;\n  padding-right: 6px;\n"])));
var ColumnSelect = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 68%;\n"])));
ColumnSelectorFactory.deps = [_fieldSelector["default"]];
var ColumnPanelLabel = (0, _styledComponents["default"])(_styledComponents2.PanelLabel).attrs({
  className: 'side-panel-subpanel__label'
})(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: 10px;\n"])));
function ColumnSelectorFactory(FieldSelector) {
  var ColumnSelector = function ColumnSelector(_ref) {
    var column = _ref.column,
      columns = _ref.columns,
      label = _ref.label,
      allFields = _ref.allFields,
      onSelect = _ref.onSelect,
      fieldPairs = _ref.fieldPairs,
      _ref$isActive = _ref.isActive,
      isActive = _ref$isActive === void 0 ? true : _ref$isActive;
    var isError = (0, _react.useMemo)(function () {
      return isActive && !(0, _src2.validateColumn)(column, columns, allFields);
    }, [isActive, column, columns, allFields]);
    return /*#__PURE__*/_react["default"].createElement(ColumnRow, {
      className: "layer-config__column__selector"
    }, /*#__PURE__*/_react["default"].createElement(ColumnName, {
      className: "layer-config__column__name"
    }, /*#__PURE__*/_react["default"].createElement(ColumnPanelLabel, null, /*#__PURE__*/_react["default"].createElement(_src.FormattedMessage, {
      id: "columns.".concat(label)
    }), !column.optional ? "  *" : null)), /*#__PURE__*/_react["default"].createElement(ColumnSelect, {
      className: "layer-config__column__select"
    }, /*#__PURE__*/_react["default"].createElement(FieldSelector, {
      suggested: fieldPairs,
      error: isError,
      fields: allFields,
      value: column.value,
      erasable: true,
      onSelect: onSelect
    })));
  };
  return ColumnSelector;
}
var _default = exports["default"] = ColumnSelectorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfc3JjIiwiX3N0eWxlZENvbXBvbmVudHMyIiwiX2ZpZWxkU2VsZWN0b3IiLCJfc3JjMiIsIl90ZW1wbGF0ZU9iamVjdCIsIl90ZW1wbGF0ZU9iamVjdDIiLCJfdGVtcGxhdGVPYmplY3QzIiwiX3RlbXBsYXRlT2JqZWN0NCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIkNvbHVtblJvdyIsInN0eWxlZCIsImRpdiIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwyIiwiQ29sdW1uTmFtZSIsIkNvbHVtblNlbGVjdCIsIkNvbHVtblNlbGVjdG9yRmFjdG9yeSIsImRlcHMiLCJGaWVsZFNlbGVjdG9yRmFjdG9yeSIsIkNvbHVtblBhbmVsTGFiZWwiLCJQYW5lbExhYmVsIiwiYXR0cnMiLCJjbGFzc05hbWUiLCJGaWVsZFNlbGVjdG9yIiwiQ29sdW1uU2VsZWN0b3IiLCJfcmVmIiwiY29sdW1uIiwiY29sdW1ucyIsImxhYmVsIiwiYWxsRmllbGRzIiwib25TZWxlY3QiLCJmaWVsZFBhaXJzIiwiX3JlZiRpc0FjdGl2ZSIsImlzQWN0aXZlIiwiaXNFcnJvciIsInVzZU1lbW8iLCJ2YWxpZGF0ZUNvbHVtbiIsImNyZWF0ZUVsZW1lbnQiLCJGb3JtYXR0ZWRNZXNzYWdlIiwiaWQiLCJjb25jYXQiLCJvcHRpb25hbCIsInN1Z2dlc3RlZCIsImVycm9yIiwiZmllbGRzIiwidmFsdWUiLCJlcmFzYWJsZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NyYy9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL2NvbHVtbi1zZWxlY3Rvci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlTWVtbywgUmVhY3ROb2RlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuaW1wb3J0IHtQYW5lbExhYmVsfSBmcm9tICcuLi8uLi9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IEZpZWxkU2VsZWN0b3JGYWN0b3J5IGZyb20gJy4uLy4uL2NvbW1vbi9maWVsZC1zZWxlY3Rvcic7XG5pbXBvcnQge3ZhbGlkYXRlQ29sdW1ufSBmcm9tICdAa2VwbGVyLmdsL3JlZHVjZXJzJztcbmltcG9ydCB7TGF5ZXJDb2x1bW4sIExheWVyQ29sdW1ucywgRW5oYW5jZWRGaWVsZFBhaXJ9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IHtNaW5pbWFsRmllbGR9IGZyb20gJy4uLy4uL2NvbW1vbi9maWVsZC1zZWxlY3Rvcic7XG5cbmV4cG9ydCB0eXBlIENvbHVtblNlbGVjdG9yUHJvcHM8RmllbGRPcHRpb24gZXh0ZW5kcyBNaW5pbWFsRmllbGQ+ID0ge1xuICBjb2x1bW46IExheWVyQ29sdW1uO1xuICBjb2x1bW5zOiBMYXllckNvbHVtbnM7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGFsbEZpZWxkczogRmllbGRPcHRpb25bXTtcbiAgb25TZWxlY3Q6IChcbiAgICBpdGVtczpcbiAgICAgIHwgUmVhZG9ubHlBcnJheTxzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgb2JqZWN0PlxuICAgICAgfCBzdHJpbmdcbiAgICAgIHwgbnVtYmVyXG4gICAgICB8IGJvb2xlYW5cbiAgICAgIHwgb2JqZWN0XG4gICAgICB8IG51bGxcbiAgKSA9PiB2b2lkO1xuICBmaWVsZFBhaXJzOiBFbmhhbmNlZEZpZWxkUGFpcltdIHwgbnVsbDtcbiAgaXNBY3RpdmU/OiBib29sZWFuO1xufTtcblxuY29uc3QgQ29sdW1uUm93ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgQ29sdW1uTmFtZSA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAzMiU7XG4gIGxpbmUtaGVpZ2h0OiAxLjI7XG4gIHBhZGRpbmctcmlnaHQ6IDZweDtcbmA7XG5cbmNvbnN0IENvbHVtblNlbGVjdCA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiA2OCU7XG5gO1xuXG5Db2x1bW5TZWxlY3RvckZhY3RvcnkuZGVwcyA9IFtGaWVsZFNlbGVjdG9yRmFjdG9yeV07XG5cbmNvbnN0IENvbHVtblBhbmVsTGFiZWwgPSBzdHlsZWQoUGFuZWxMYWJlbCkuYXR0cnM8e2NoaWxkcmVuOiBSZWFjdE5vZGV9Pih7XG4gIGNsYXNzTmFtZTogJ3NpZGUtcGFuZWwtc3VicGFuZWxfX2xhYmVsJ1xufSlgXG4gIGZvbnQtc2l6ZTogMTBweDtcbmA7XG5cbmZ1bmN0aW9uIENvbHVtblNlbGVjdG9yRmFjdG9yeShGaWVsZFNlbGVjdG9yOiBSZXR1cm5UeXBlPHR5cGVvZiBGaWVsZFNlbGVjdG9yRmFjdG9yeT4pIHtcbiAgY29uc3QgQ29sdW1uU2VsZWN0b3I6IFJlYWN0LkZDPENvbHVtblNlbGVjdG9yUHJvcHM8YW55Pj4gPSAoe1xuICAgIGNvbHVtbixcbiAgICBjb2x1bW5zLFxuICAgIGxhYmVsLFxuICAgIGFsbEZpZWxkcyxcbiAgICBvblNlbGVjdCxcbiAgICBmaWVsZFBhaXJzLFxuICAgIGlzQWN0aXZlID0gdHJ1ZVxuICB9KSA9PiB7XG4gICAgY29uc3QgaXNFcnJvciA9IHVzZU1lbW8oXG4gICAgICAoKSA9PiBpc0FjdGl2ZSAmJiAhdmFsaWRhdGVDb2x1bW4oY29sdW1uLCBjb2x1bW5zLCBhbGxGaWVsZHMpLFxuICAgICAgW2lzQWN0aXZlLCBjb2x1bW4sIGNvbHVtbnMsIGFsbEZpZWxkc11cbiAgICApO1xuICAgIHJldHVybiAoXG4gICAgICA8Q29sdW1uUm93IGNsYXNzTmFtZT1cImxheWVyLWNvbmZpZ19fY29sdW1uX19zZWxlY3RvclwiPlxuICAgICAgICA8Q29sdW1uTmFtZSBjbGFzc05hbWU9XCJsYXllci1jb25maWdfX2NvbHVtbl9fbmFtZVwiPlxuICAgICAgICAgIDxDb2x1bW5QYW5lbExhYmVsPlxuICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9e2Bjb2x1bW5zLiR7bGFiZWx9YH0gLz5cbiAgICAgICAgICAgIHshY29sdW1uLm9wdGlvbmFsID8gYCAgKmAgOiBudWxsfVxuICAgICAgICAgIDwvQ29sdW1uUGFuZWxMYWJlbD5cbiAgICAgICAgPC9Db2x1bW5OYW1lPlxuICAgICAgICA8Q29sdW1uU2VsZWN0IGNsYXNzTmFtZT1cImxheWVyLWNvbmZpZ19fY29sdW1uX19zZWxlY3RcIj5cbiAgICAgICAgICA8RmllbGRTZWxlY3RvclxuICAgICAgICAgICAgc3VnZ2VzdGVkPXtmaWVsZFBhaXJzIGFzIGFueX1cbiAgICAgICAgICAgIGVycm9yPXtpc0Vycm9yfVxuICAgICAgICAgICAgZmllbGRzPXthbGxGaWVsZHN9XG4gICAgICAgICAgICB2YWx1ZT17Y29sdW1uLnZhbHVlfVxuICAgICAgICAgICAgZXJhc2FibGVcbiAgICAgICAgICAgIG9uU2VsZWN0PXtvblNlbGVjdH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0NvbHVtblNlbGVjdD5cbiAgICAgIDwvQ29sdW1uUm93PlxuICAgICk7XG4gIH07XG4gIHJldHVybiBDb2x1bW5TZWxlY3Rv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QUFGLElBQUEsQ0FBUEUsT0FBTztNQUNQQyxLQUFLLEdBQUFILElBQUEsQ0FBTEcsS0FBSztNQUNMQyxTQUFTLEdBQUFKLElBQUEsQ0FBVEksU0FBUztNQUNUQyxRQUFRLEdBQUFMLElBQUEsQ0FBUkssUUFBUTtNQUNSQyxVQUFVLEdBQUFOLElBQUEsQ0FBVk0sVUFBVTtNQUFBQyxhQUFBLEdBQUFQLElBQUEsQ0FDVlEsUUFBUTtNQUFSQSxRQUFRLEdBQUFELGFBQUEsY0FBRyxJQUFJLEdBQUFBLGFBQUE7SUFFZixJQUFNRSxPQUFPLEdBQUcsSUFBQUMsY0FBTyxFQUNyQjtNQUFBLE9BQU1GLFFBQVEsSUFBSSxDQUFDLElBQUFHLG9CQUFjLEVBQUNWLE1BQU0sRUFBRUMsT0FBTyxFQUFFRSxTQUFTLENBQUM7SUFBQSxHQUM3RCxDQUFDSSxRQUFRLEVBQUVQLE1BQU0sRUFBRUMsT0FBTyxFQUFFRSxTQUFTLENBQ3ZDLENBQUM7SUFDRCxvQkFDRXBELE1BQUEsWUFBQTRELGFBQUEsQ0FBQzNCLFNBQVM7TUFBQ1ksU0FBUyxFQUFDO0lBQWdDLGdCQUNuRDdDLE1BQUEsWUFBQTRELGFBQUEsQ0FBQ3ZCLFVBQVU7TUFBQ1EsU0FBUyxFQUFDO0lBQTRCLGdCQUNoRDdDLE1BQUEsWUFBQTRELGFBQUEsQ0FBQ2xCLGdCQUFnQixxQkFDZjFDLE1BQUEsWUFBQTRELGFBQUEsQ0FBQ3ZELElBQUEsQ0FBQXdELGdCQUFnQjtNQUFDQyxFQUFFLGFBQUFDLE1BQUEsQ0FBYVosS0FBSztJQUFHLENBQUUsQ0FBQyxFQUMzQyxDQUFDRixNQUFNLENBQUNlLFFBQVEsV0FBVyxJQUNaLENBQ1IsQ0FBQyxlQUNiaEUsTUFBQSxZQUFBNEQsYUFBQSxDQUFDdEIsWUFBWTtNQUFDTyxTQUFTLEVBQUM7SUFBOEIsZ0JBQ3BEN0MsTUFBQSxZQUFBNEQsYUFBQSxDQUFDZCxhQUFhO01BQ1ptQixTQUFTLEVBQUVYLFVBQWtCO01BQzdCWSxLQUFLLEVBQUVULE9BQVE7TUFDZlUsTUFBTSxFQUFFZixTQUFVO01BQ2xCZ0IsS0FBSyxFQUFFbkIsTUFBTSxDQUFDbUIsS0FBTTtNQUNwQkMsUUFBUTtNQUNSaEIsUUFBUSxFQUFFQTtJQUFTLENBQ3BCLENBQ1csQ0FDTCxDQUFDO0VBRWhCLENBQUM7RUFDRCxPQUFPTixjQUFjO0FBQ3ZCO0FBQUMsSUFBQXVCLFFBQUEsR0FBQUMsT0FBQSxjQUVjaEMscUJBQXFCIiwiaWdub3JlTGlzdCI6W119