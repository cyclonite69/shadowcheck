"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledFilterHeader = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _classnames = _interopRequireDefault(require("classnames"));
var _panelHeaderAction = _interopRequireDefault(require("../../side-panel/panel-header-action"));
var _icons = require("../../common/icons");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _styledComponents2 = require("../../common/styled-components");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledFilterHeader = exports.StyledFilterHeader = (0, _styledComponents["default"])(_styledComponents2.StyledPanelHeader)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  cursor: pointer;\n  padding: 10px 12px;\n\n  .field-selector {\n    width: 100%;\n    flex: 2;\n  }\n\n  border-left: 3px solid;\n  ", ";\n"])), function (props) {
  return props.$labelRCGColorValues && props.$labelRCGColorValues.length > 0 ? "border-image: ".concat((0, _src.createLinearGradient)('bottom', props.$labelRCGColorValues), " 3;") : 'border-color: transparent;';
});
var StyledChildrenContainer = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n"])));
FilterPanelHeaderFactory.deps = [_panelHeaderAction["default"]];
function FilterPanelHeaderFactory(PanelHeaderAction) {
  var defaultActionIcons = {
    "delete": _icons.Trash
  };
  var FilterPanelHeader = function FilterPanelHeader(_ref) {
    var children = _ref.children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      datasets = _ref.datasets,
      filter = _ref.filter,
      removeFilter = _ref.removeFilter,
      actionItems = _ref.actionItems,
      _ref$actionIcons = _ref.actionIcons,
      actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons;
    var items = (0, _react.useMemo)(function () {
      return actionItems !== null && actionItems !== void 0 ? actionItems : [{
        key: 'delete',
        tooltip: 'tooltip.delete',
        onClick: removeFilter,
        icon: actionIcons["delete"]
      }];
    }, [removeFilter, actionIcons, actionItems]);
    return /*#__PURE__*/_react["default"].createElement(StyledFilterHeader, {
      className: (0, _classnames["default"])('filter-panel__header', className),
      $labelRCGColorValues: datasets.map(function (d) {
        return d.color;
      })
    }, /*#__PURE__*/_react["default"].createElement(StyledChildrenContainer, null, children), items.map(function (item) {
      return /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
        key: item.key,
        id: filter.id,
        tooltip: item.tooltip,
        tooltipType: "error",
        onClick: item.onClick,
        hoverColor: 'errorColor',
        IconComponent: item.icon
      });
    }));
  };
  return FilterPanelHeader;
}
var _default = exports["default"] = FilterPanelHeaderFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,