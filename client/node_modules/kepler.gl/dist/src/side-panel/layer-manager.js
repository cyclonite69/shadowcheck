"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.LayerBlendingSelector = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactIntl = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-intl");
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _layerList = _interopRequireDefault(require("./layer-panel/layer-list"));
var _datasetLayerGroup = _interopRequireDefault(require("./layer-panel/dataset-layer-group"));
var _panelViewListToggle = _interopRequireDefault(require("./panel-view-list-toggle"));
var _panelTitle = _interopRequireDefault(require("./panel-title"));
var _datasetSection = _interopRequireDefault(require("./layer-panel/dataset-section"));
var _addLayerButton = _interopRequireDefault(require("./layer-panel/add-layer-button"));
var _itemSelector = _interopRequireDefault(require("../common/item-selector/item-selector"));
var _styledComponents2 = require("../common/styled-components");
var _infoHelper = _interopRequireDefault(require("../common/info-helper"));
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _src3 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _excluded = ["rasterTile"],
  _excluded2 = ["wms"];
var _templateObject, _templateObject2;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var LayerBlendingSelector = exports.LayerBlendingSelector = _react["default"].memo(function (_ref) {
  var layerBlending = _ref.layerBlending,
    updateLayerBlending = _ref.updateLayerBlending,
    intl = _ref.intl,
    className = _ref.className;
  var labeledLayerBlendings = Object.keys(_src2.LAYER_BLENDINGS).reduce(function (acc, current) {
    return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, intl.formatMessage({
      id: _src2.LAYER_BLENDINGS[current].label
    }), current));
  }, {});
  var onChange = (0, _react.useCallback)(function (blending) {
    return updateLayerBlending(labeledLayerBlendings[blending]);
  }, [updateLayerBlending, labeledLayerBlendings]);
  return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, {
    className: className
  }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_src.FormattedMessage, {
    id: "layerBlending.title"
  })), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
    selectedItems: intl.formatMessage({
      id: _src2.LAYER_BLENDINGS[layerBlending].label
    }),
    options: Object.keys(labeledLayerBlendings),
    multiSelect: false,
    searchable: false,
    onChange: onChange
  }));
});
LayerBlendingSelector.displayName = 'LayerBlendingSelector';
var InfoHelperWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  float: right;\n"])));
var OverlayBlendingSelectorTitleRow = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n"])));
var OverlayBlendingSelector = _react["default"].memo(function (_ref2) {
  var overlayBlending = _ref2.overlayBlending,
    updateOverlayBlending = _ref2.updateOverlayBlending,
    intl = _ref2.intl,
    infoHelper = _ref2.infoHelper;
  var labeledOverlayBlendings = Object.keys(_src2.OVERLAY_BLENDINGS).reduce(function (acc, current) {
    return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, intl.formatMessage({
      id: _src2.OVERLAY_BLENDINGS[current].label
    }), current));
  }, {});
  var onChange = (0, _react.useCallback)(function (blending) {
    return updateOverlayBlending(labeledOverlayBlendings[blending]);
  }, [updateOverlayBlending, labeledOverlayBlendings]);
  return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(OverlayBlendingSelectorTitleRow, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_src.FormattedMessage, {
    id: "overlayBlending.title"
  })), /*#__PURE__*/_react["default"].createElement(InfoHelperWrapper, null, infoHelper)), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
    selectedItems: intl.formatMessage({
      id: _src2.OVERLAY_BLENDINGS[overlayBlending].label
    }),
    options: Object.keys(labeledOverlayBlendings),
    multiSelect: false,
    searchable: false,
    onChange: onChange
  }));
});
OverlayBlendingSelector.displayName = 'OverlayBlendingSelector';
LayerManagerFactory.deps = [_layerList["default"], _datasetLayerGroup["default"], _panelViewListToggle["default"], _panelTitle["default"], _datasetSection["default"], _addLayerButton["default"], _infoHelper["default"]];
function LayerManagerFactory(LayerList, DatasetLayerGroup, PanelViewListToggle, PanelTitle, DatasetSection, AddLayerButton, InfoHelper) {
  var LayerManager = function LayerManager(_ref3) {
    var layers = _ref3.layers,
      datasets = _ref3.datasets,
      intl = _ref3.intl,
      layerOrder = _ref3.layerOrder,
      panelListView = _ref3.panelListView,
      panelMetadata = _ref3.panelMetadata,
      layerClasses = _ref3.layerClasses,
      layerBlending = _ref3.layerBlending,
      overlayBlending = _ref3.overlayBlending,
      showAddDataModal = _ref3.showAddDataModal,
      updateTableColor = _ref3.updateTableColor,
      showDatasetTable = _ref3.showDatasetTable,
      removeDataset = _ref3.removeDataset,
      uiStateActions = _ref3.uiStateActions,
      visStateActions = _ref3.visStateActions,
      mapStateActions = _ref3.mapStateActions;
    var addLayer = visStateActions.addLayer;
    var togglePanelListView = uiStateActions.togglePanelListView;
    var onAddLayer = (0, _react.useCallback)(function (dataset) {
      addLayer(undefined, dataset);
    }, [addLayer]);
    var onTogglePanelListView = (0, _react.useCallback)(function (listView) {
      togglePanelListView({
        panelId: 'layer',
        listView: listView
      });
    }, [togglePanelListView]);
    var isSortByDatasetMode = panelListView === _src2.PANEL_VIEW_TOGGLES.byDataset;

    // temp patch to hide layers that are in development
    var enableRasterTileLayer = (0, _src3.getApplicationConfig)().enableRasterTileLayer;
    var enableWMSLayer = (0, _src3.getApplicationConfig)().enableWMSLayer;
    var filteredLayerClasses = (0, _react.useMemo)(function () {
      var filteredClasses = layerClasses;
      if (!enableRasterTileLayer) {
        var _filteredClasses = filteredClasses,
          _rasterTile = _filteredClasses.rasterTile,
          rest = (0, _objectWithoutProperties2["default"])(_filteredClasses, _excluded);
        filteredClasses = rest;
      }
      if (!enableWMSLayer) {
        var _filteredClasses2 = filteredClasses,
          _wms = _filteredClasses2.wms,
          _rest = (0, _objectWithoutProperties2["default"])(_filteredClasses2, _excluded2);
        filteredClasses = _rest;
      }
      return filteredClasses;
    }, [enableRasterTileLayer, enableWMSLayer, layerClasses]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "layer-manager"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(PanelViewListToggle, {
      togglePanelListView: onTogglePanelListView,
      mode: panelListView
    })), /*#__PURE__*/_react["default"].createElement(DatasetSection, {
      datasets: datasets,
      showDatasetTable: showDatasetTable,
      updateTableColor: updateTableColor,
      removeDataset: removeDataset,
      showDeleteDataset: true,
      showDatasetList: !isSortByDatasetMode,
      showAddDataModal: showAddDataModal
    }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelDivider, null), /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(PanelTitle, {
      className: "layer-manager-title",
      title: intl.formatMessage({
        id: panelMetadata.label
      })
    }, /*#__PURE__*/_react["default"].createElement(AddLayerButton, {
      datasets: datasets,
      onAdd: onAddLayer
    }))), /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, isSortByDatasetMode ? /*#__PURE__*/_react["default"].createElement(DatasetLayerGroup, {
      datasets: datasets,
      showDatasetTable: showDatasetTable,
      layers: layers,
      updateTableColor: updateTableColor,
      removeDataset: removeDataset,
      layerOrder: layerOrder,
      layerClasses: filteredLayerClasses,
      uiStateActions: uiStateActions,
      visStateActions: visStateActions,
      mapStateActions: mapStateActions,
      showDeleteDataset: true
    }) : /*#__PURE__*/_react["default"].createElement(LayerList, {
      layers: layers,
      datasets: datasets,
      layerOrder: layerOrder,
      uiStateActions: uiStateActions,
      visStateActions: visStateActions,
      mapStateActions: mapStateActions,
      layerClasses: filteredLayerClasses
    })), /*#__PURE__*/_react["default"].createElement(LayerBlendingSelector, {
      layerBlending: layerBlending,
      updateLayerBlending: visStateActions.updateLayerBlending,
      intl: intl
    }), /*#__PURE__*/_react["default"].createElement(OverlayBlendingSelector, {
      overlayBlending: overlayBlending,
      updateOverlayBlending: visStateActions.updateOverlayBlending,
      intl: intl,
      infoHelper: /*#__PURE__*/_react["default"].createElement(InfoHelper, {
        id: "overlayBlending-description",
        description: 'overlayBlending.description'
      })
    }));
  };
  return (0, _reactIntl.injectIntl)(LayerManager);
}
var _default = exports["default"] = LayerManagerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,