"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SourceDataSelectorFactory;
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _styledComponents = require("../../common/styled-components");
var _sourceDataSelectorContent = _interopRequireDefault(require("./source-data-selector-content"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

SourceDataSelectorFactory.deps = [_sourceDataSelectorContent["default"]];
function SourceDataSelectorFactory(DataSourceSelectorContent) {
  var SourceDataSelector = _react["default"].memo(function (_ref) {
    var dataId = _ref.dataId,
      datasets = _ref.datasets,
      disabled = _ref.disabled,
      onSelect = _ref.onSelect,
      _ref$defaultValue = _ref.defaultValue,
      defaultValue = _ref$defaultValue === void 0 ? 'Select A Dataset' : _ref$defaultValue,
      inputTheme = _ref.inputTheme;
    return /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, {
      className: "data-source-selector"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_src.FormattedMessage, {
      id: 'misc.dataSource'
    })), /*#__PURE__*/_react["default"].createElement(DataSourceSelectorContent, {
      inputTheme: inputTheme,
      datasets: datasets,
      dataId: dataId,
      onSelect: onSelect,
      defaultValue: defaultValue,
      disabled: disabled
    }));
  });
  SourceDataSelector.displayName = 'SourceDataSelector';
  return SourceDataSelector;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zcmMiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9zb3VyY2VEYXRhU2VsZWN0b3JDb250ZW50IiwiU291cmNlRGF0YVNlbGVjdG9yRmFjdG9yeSIsImRlcHMiLCJTb3VyY2VEYXRhU2VsZWN0b3JDb250ZW50RmFjdG9yeSIsIkRhdGFTb3VyY2VTZWxlY3RvckNvbnRlbnQiLCJTb3VyY2VEYXRhU2VsZWN0b3IiLCJSZWFjdCIsIm1lbW8iLCJfcmVmIiwiZGF0YUlkIiwiZGF0YXNldHMiLCJkaXNhYmxlZCIsIm9uU2VsZWN0IiwiX3JlZiRkZWZhdWx0VmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJpbnB1dFRoZW1lIiwiY3JlYXRlRWxlbWVudCIsIlNpZGVQYW5lbFNlY3Rpb24iLCJjbGFzc05hbWUiLCJQYW5lbExhYmVsIiwiRm9ybWF0dGVkTWVzc2FnZSIsImlkIiwiZGlzcGxheU5hbWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9zcmMvc2lkZS1wYW5lbC9jb21tb24vc291cmNlLWRhdGEtc2VsZWN0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuXG5pbXBvcnQge1BhbmVsTGFiZWwsIFNpZGVQYW5lbFNlY3Rpb259IGZyb20gJy4uLy4uL2NvbW1vbi9zdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgU291cmNlRGF0YVNlbGVjdG9yQ29udGVudEZhY3RvcnkgZnJvbSAnLi9zb3VyY2UtZGF0YS1zZWxlY3Rvci1jb250ZW50JztcbmltcG9ydCB7U291cmNlRGF0YVNlbGVjdG9yUHJvcHN9IGZyb20gJy4vdHlwZXMnO1xuXG5Tb3VyY2VEYXRhU2VsZWN0b3JGYWN0b3J5LmRlcHMgPSBbU291cmNlRGF0YVNlbGVjdG9yQ29udGVudEZhY3RvcnldO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTb3VyY2VEYXRhU2VsZWN0b3JGYWN0b3J5KFxuICBEYXRhU291cmNlU2VsZWN0b3JDb250ZW50OiBSZXR1cm5UeXBlPHR5cGVvZiBTb3VyY2VEYXRhU2VsZWN0b3JDb250ZW50RmFjdG9yeT5cbik6IFJlYWN0LkZDPFNvdXJjZURhdGFTZWxlY3RvclByb3BzPiB7XG4gIGNvbnN0IFNvdXJjZURhdGFTZWxlY3RvcjogUmVhY3QuRkM8U291cmNlRGF0YVNlbGVjdG9yUHJvcHM+ID0gUmVhY3QubWVtbyhcbiAgICAoe1xuICAgICAgZGF0YUlkLFxuICAgICAgZGF0YXNldHMsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIG9uU2VsZWN0LFxuICAgICAgZGVmYXVsdFZhbHVlID0gJ1NlbGVjdCBBIERhdGFzZXQnLFxuICAgICAgaW5wdXRUaGVtZVxuICAgIH06IFNvdXJjZURhdGFTZWxlY3RvclByb3BzKSA9PiAoXG4gICAgICA8U2lkZVBhbmVsU2VjdGlvbiBjbGFzc05hbWU9XCJkYXRhLXNvdXJjZS1zZWxlY3RvclwiPlxuICAgICAgICA8UGFuZWxMYWJlbD5cbiAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD17J21pc2MuZGF0YVNvdXJjZSd9IC8+XG4gICAgICAgIDwvUGFuZWxMYWJlbD5cbiAgICAgICAgPERhdGFTb3VyY2VTZWxlY3RvckNvbnRlbnRcbiAgICAgICAgICBpbnB1dFRoZW1lPXtpbnB1dFRoZW1lfVxuICAgICAgICAgIGRhdGFzZXRzPXtkYXRhc2V0c31cbiAgICAgICAgICBkYXRhSWQ9e2RhdGFJZH1cbiAgICAgICAgICBvblNlbGVjdD17b25TZWxlY3R9XG4gICAgICAgICAgZGVmYXVsdFZhbHVlPXtkZWZhdWx0VmFsdWV9XG4gICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAvPlxuICAgICAgPC9TaWRlUGFuZWxTZWN0aW9uPlxuICAgIClcbiAgKTtcblxuICBTb3VyY2VEYXRhU2VsZWN0b3IuZGlzcGxheU5hbWUgPSAnU291cmNlRGF0YVNlbGVjdG9yJztcbiAgcmV0dXJuIFNvdXJjZURhdGFTZWxlY3Rvcjtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLElBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLGlCQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRywwQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBUkE7QUFDQTs7QUFVQUkseUJBQXlCLENBQUNDLElBQUksR0FBRyxDQUFDQyxxQ0FBZ0MsQ0FBQztBQUVwRCxTQUFTRix5QkFBeUJBLENBQy9DRyx5QkFBOEUsRUFDM0M7RUFDbkMsSUFBTUMsa0JBQXFELEdBQUdDLGlCQUFLLENBQUNDLElBQUksQ0FDdEUsVUFBQUMsSUFBQTtJQUFBLElBQ0VDLE1BQU0sR0FBQUQsSUFBQSxDQUFOQyxNQUFNO01BQ05DLFFBQVEsR0FBQUYsSUFBQSxDQUFSRSxRQUFRO01BQ1JDLFFBQVEsR0FBQUgsSUFBQSxDQUFSRyxRQUFRO01BQ1JDLFFBQVEsR0FBQUosSUFBQSxDQUFSSSxRQUFRO01BQUFDLGlCQUFBLEdBQUFMLElBQUEsQ0FDUk0sWUFBWTtNQUFaQSxZQUFZLEdBQUFELGlCQUFBLGNBQUcsa0JBQWtCLEdBQUFBLGlCQUFBO01BQ2pDRSxVQUFVLEdBQUFQLElBQUEsQ0FBVk8sVUFBVTtJQUFBLG9CQUVWcEIsTUFBQSxZQUFBcUIsYUFBQSxDQUFDakIsaUJBQUEsQ0FBQWtCLGdCQUFnQjtNQUFDQyxTQUFTLEVBQUM7SUFBc0IsZ0JBQ2hEdkIsTUFBQSxZQUFBcUIsYUFBQSxDQUFDakIsaUJBQUEsQ0FBQW9CLFVBQVUscUJBQ1R4QixNQUFBLFlBQUFxQixhQUFBLENBQUNsQixJQUFBLENBQUFzQixnQkFBZ0I7TUFBQ0MsRUFBRSxFQUFFO0lBQWtCLENBQUUsQ0FDaEMsQ0FBQyxlQUNiMUIsTUFBQSxZQUFBcUIsYUFBQSxDQUFDWix5QkFBeUI7TUFDeEJXLFVBQVUsRUFBRUEsVUFBVztNQUN2QkwsUUFBUSxFQUFFQSxRQUFTO01BQ25CRCxNQUFNLEVBQUVBLE1BQU87TUFDZkcsUUFBUSxFQUFFQSxRQUFTO01BQ25CRSxZQUFZLEVBQUVBLFlBQWE7TUFDM0JILFFBQVEsRUFBRUE7SUFBUyxDQUNwQixDQUNlLENBQUM7RUFBQSxDQUV2QixDQUFDO0VBRUROLGtCQUFrQixDQUFDaUIsV0FBVyxHQUFHLG9CQUFvQjtFQUNyRCxPQUFPakIsa0JBQWtCO0FBQzNCIiwiaWdub3JlTGlzdCI6W119