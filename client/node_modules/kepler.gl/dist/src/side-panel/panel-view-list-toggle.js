"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledToggleOption = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _orderByList = _interopRequireDefault(require("../common/icons/order-by-list"));
var _orderByDataset = _interopRequireDefault(require("../common/icons/order-by-dataset"));
var _styledComponents2 = require("../common/styled-components");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var PanelViewListToggleContainer = _styledComponents["default"].div.attrs({
  className: 'panel-view-list-toggle'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])([""])));
var PanelViewListToggleWrapper = _styledComponents["default"].div.attrs({
  className: 'panel-view-list-toggle-inner'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: flex-end;\n  align-content: center;\n  gap: 10px;\n"])));
var StyledToggleOption = exports.StyledToggleOption = _styledComponents["default"].div.attrs({
  className: 'layer-panel-toggle-option'
})(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  &:hover {\n    cursor: pointer;\n    color: ", ";\n  }\n"])), function (props) {
  return props.$active ? props.theme.subtextColorActive : props.theme.panelTabColor;
}, function (props) {
  return props.theme.subtextColorActive;
});
function ToggleOptionFactory() {
  var ToggleOption = function ToggleOption(_ref) {
    var isActive = _ref.isActive,
      onClick = _ref.onClick,
      option = _ref.option;
    return /*#__PURE__*/_react["default"].createElement(StyledToggleOption, {
      "data-tip": true,
      "data-for": "".concat(option.id, "-toggle-option"),
      $active: isActive,
      onClick: onClick
    }, /*#__PURE__*/_react["default"].createElement(option.iconComponent, {
      height: "20px"
    }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
      id: "".concat(option.id, "-toggle-option"),
      effect: "solid",
      delayShow: 500,
      place: "bottom"
    }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_src.FormattedMessage, {
      id: option.label
    }))));
  };
  return ToggleOption;
}
var TOGGLE_OPTIONS = [{
  id: _src2.PANEL_VIEW_TOGGLES.list,
  iconComponent: _orderByList["default"],
  label: 'sidebar.panelViewToggle.list'
}, {
  id: _src2.PANEL_VIEW_TOGGLES.byDataset,
  iconComponent: _orderByDataset["default"],
  label: 'sidebar.panelViewToggle.byDataset'
}];
PanelViewListToggleFactory.deps = [ToggleOptionFactory];
function PanelViewListToggleFactory(ToggleOption) {
  var PanelViewListToggle = function PanelViewListToggle(_ref2) {
    var mode = _ref2.mode,
      togglePanelListView = _ref2.togglePanelListView;
    var toggleListView = function toggleListView(listView) {
      return togglePanelListView(listView);
    };
    var options = (0, _react.useMemo)(function () {
      return TOGGLE_OPTIONS.map(function (opt) {
        return _objectSpread(_objectSpread({}, opt), {}, {
          isActive: mode === opt.id
        });
      });
    }, [mode]);
    return /*#__PURE__*/_react["default"].createElement(PanelViewListToggleContainer, null, /*#__PURE__*/_react["default"].createElement(PanelViewListToggleWrapper, null, options.map(function (opt) {
      return /*#__PURE__*/_react["default"].createElement(ToggleOption, {
        key: opt.id,
        onClick: function onClick() {
          return toggleListView(opt.id);
        },
        option: opt,
        isActive: opt.isActive
      });
    })));
  };
  return PanelViewListToggle;
}
var _default = exports["default"] = PanelViewListToggleFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,