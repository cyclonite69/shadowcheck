"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _classnames = _interopRequireDefault(require("classnames"));
var _utilities = require("@dnd-kit/utilities");
var _chickletedInput = require("../../../common/item-selector/chickleted-input");
var _icons = require("../../../common/icons");
var _dropdownList = _interopRequireDefault(require("../../../common/item-selector/dropdown-list"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _tippyTooltip = _interopRequireDefault(require("../../../common/tippy-tooltip"));
var _useOnClickOutside = _interopRequireDefault(require("../../../hooks/use-on-click-outside"));
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof3(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ChickletAddonWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n"])));
var ChickletAddon = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-right: 4px;\n"])));
var StyledPopover = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-left: -64px;\n  position: absolute;\n  top: 20px;\n  width: 140px;\n  z-index: 101;\n"])));
var hashStyles = {
  SHOW: 'SHOW',
  ACTIVE: 'ACTIVE'
};
var IconDiv = _styledComponents["default"].div.attrs({
  className: 'tooltip-chicklet__icon'
})(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n"])), function (props) {
  return props.$status === hashStyles.SHOW ? props.theme.subtextColorActive : props.$status === hashStyles.ACTIVE ? props.theme.activeColor : props.theme.textColor;
});
var SortableStyledItem = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  transition: ", ";\n  transform: ", ";\n  &.sorting {\n    opacity: 0.3;\n    pointer-events: none;\n  }\n  &:hover {\n    .tooltip-chicklet__drag-handler {\n      opacity: 1;\n    }\n  }\n"])), function (props) {
  return props.$transition;
}, function (props) {
  return props.$transform;
});
var StyledDragHandle = _styledComponents["default"].div.attrs({
  className: 'tooltip-chicklet__drag-handler'
})(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  z-index: 1000;\n  opacity: 0;\n  margin-left: -5px;\n  &:hover {\n    cursor: move;\n    color: ", ";\n  }\n"])), function (props) {
  return props.theme.tooltipVerticalLineColor;
});
var StyledTag = _styledComponents["default"].span(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-right: 5px;\n  text-overflow: ellipsis;\n  width: 100%;\n  overflow: hidden;\n  max-width: 160px;\n"])));
function getFormatTooltip(formatLabels, format) {
  if (!format) {
    return null;
  }
  var formatLabel = formatLabels.find(function (fl) {
    return (0, _src2.getFormatValue)(fl) === format;
  });
  if (formatLabel) {
    return formatLabel.label;
  }
  return (0, _typeof2["default"])(format) === 'object' ? JSON.stringify(format, null, 2) : String(format);
}

// TODO: a factory should take other factories as input
function TooltipChickletFactory(dataId, config, onChange, fields, onDisplayFormatChange) {
  var TooltipChicklet = function TooltipChicklet(props) {
    var disabled = props.disabled,
      item = props.item,
      displayOption = props.displayOption,
      remove = props.remove,
      attributes = props.attributes,
      listeners = props.listeners,
      setNodeRef = props.setNodeRef,
      transform = props.transform,
      transition = props.transition,
      isDragging = props.isDragging;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      show = _useState2[0],
      setShow = _useState2[1];
    var ref = (0, _useOnClickOutside["default"])(function () {
      return setShow(false);
    });
    // const {show} = this.state;
    var tooltipField = config.fieldsToShow[dataId].find(function (fieldToShow) {
      return fieldToShow.name === item.name;
    });
    if (!tooltipField) {
      return null;
    }
    var field = fields.find(function (f) {
      return f.name === tooltipField.name;
    });
    if (!field) {
      return null;
    }
    var formatLabels = (0, _src2.getFormatLabels)(fields, tooltipField.name);
    var hasFormat = Boolean(field.displayFormat);
    var selectionIndex = formatLabels.findIndex(function (fl) {
      return (0, _src2.getFormatValue)(fl) === field.displayFormat;
    });
    var hashStyle = show ? hashStyles.SHOW : hasFormat ? hashStyles.ACTIVE : null;
    return /*#__PURE__*/_react["default"].createElement(SortableStyledItem, (0, _extends2["default"])({
      ref: setNodeRef,
      className: (0, _classnames["default"])('sortable-layer-items', {
        sorting: isDragging
      }),
      $transform: _utilities.CSS.Translate.toString(transform),
      $transition: transition || ''
    }, attributes), /*#__PURE__*/_react["default"].createElement(_chickletedInput.ChickletButton, null, /*#__PURE__*/_react["default"].createElement(StyledDragHandle, listeners, /*#__PURE__*/_react["default"].createElement(_icons.VertDots, {
      height: "12px"
    })), /*#__PURE__*/_react["default"].createElement(StyledTag, {
      title: displayOption(item)
    }, displayOption(item)), formatLabels.length > 1 && /*#__PURE__*/_react["default"].createElement(ChickletAddonWrapper, null, /*#__PURE__*/_react["default"].createElement(_tippyTooltip["default"], {
      placement: "top",
      render: function render() {
        return /*#__PURE__*/_react["default"].createElement("span", null, hasFormat ? getFormatTooltip(formatLabels, field.displayName) : /*#__PURE__*/_react["default"].createElement(_src.FormattedMessage, {
          id: 'fieldSelector.formatting'
        }));
      }
    }, /*#__PURE__*/_react["default"].createElement(ChickletAddon, null, /*#__PURE__*/_react["default"].createElement(IconDiv, {
      $status: hashStyle
    }, /*#__PURE__*/_react["default"].createElement(_icons.Hash, {
      height: "8px",
      onClick: function onClick(e) {
        e.stopPropagation();
        setShow(Boolean(!show));
      }
    })))), show && /*#__PURE__*/_react["default"].createElement(StyledPopover, {
      ref: ref
    }, /*#__PURE__*/_react["default"].createElement(_dropdownList["default"], {
      options: formatLabels,
      selectionIndex: selectionIndex,
      displayOption: function displayOption(option) {
        return option.label;
      },
      onOptionSelected: function onOptionSelected(result, e) {
        e.stopPropagation();
        setShow(false);
        var displayFormat = (0, _src2.getFormatValue)(result);
        var oldFieldsToShow = config.fieldsToShow[dataId];
        var fieldsToShow = oldFieldsToShow.map(function (fieldToShow) {
          return fieldToShow.name === tooltipField.name ? {
            name: tooltipField.name,
            format: displayFormat
          } : fieldToShow;
        });
        var newConfig = _objectSpread(_objectSpread({}, config), {}, {
          fieldsToShow: _objectSpread(_objectSpread({}, config.fieldsToShow), {}, (0, _defineProperty2["default"])({}, dataId, fieldsToShow))
        });
        onChange(newConfig);
        onDisplayFormatChange(dataId, field.name, displayFormat);
      }
    }))), /*#__PURE__*/_react["default"].createElement(_icons.Delete, {
      height: "16px",
      onClick: disabled ? null : remove
    })));
  };
  return TooltipChicklet;
}
var _default = exports["default"] = TooltipChickletFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,