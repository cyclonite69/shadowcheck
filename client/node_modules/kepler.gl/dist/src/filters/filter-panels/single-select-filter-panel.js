"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _singleSelectFilter = _interopRequireDefault(require("../single-select-filter"));
var _filterPanelWithFieldSelect = _interopRequireDefault(require("./filter-panel-with-field-select"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

SingleSelectFilterPanelFactory.deps = [_filterPanelWithFieldSelect["default"], _singleSelectFilter["default"]];
function SingleSelectFilterPanelFactory(FieldPanelWithFieldSelect, SingleSelectFilter) {
  var SingleSelectFilterPanel = _react["default"].memo(function (_ref) {
    var idx = _ref.idx,
      datasets = _ref.datasets,
      allAvailableFields = _ref.allAvailableFields,
      filter = _ref.filter,
      setFilter = _ref.setFilter,
      removeFilter = _ref.removeFilter;
    var onSetFilter = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'value', value);
    }, [idx, setFilter]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "single-select-filter-panel"
    }, /*#__PURE__*/_react["default"].createElement(FieldPanelWithFieldSelect, {
      allAvailableFields: allAvailableFields,
      datasets: datasets,
      filter: filter,
      idx: idx,
      removeFilter: removeFilter,
      setFilter: setFilter
    }, filter.type && /*#__PURE__*/_react["default"].createElement("div", {
      className: "filter-panel__filter"
    }, /*#__PURE__*/_react["default"].createElement(SingleSelectFilter, {
      filter: filter,
      setFilter: onSetFilter
    }))));
  });
  SingleSelectFilterPanel.displayName = 'SingleSelectFilterPanel';
  return SingleSelectFilterPanel;
}
var _default = exports["default"] = SingleSelectFilterPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfc2luZ2xlU2VsZWN0RmlsdGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9maWx0ZXJQYW5lbFdpdGhGaWVsZFNlbGVjdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIlNpbmdsZVNlbGVjdEZpbHRlclBhbmVsRmFjdG9yeSIsImRlcHMiLCJGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0RmFjdG9yeSIsIlNpbmdsZVNlbGVjdEZpbHRlckZhY3RvcnkiLCJGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0IiwiU2luZ2xlU2VsZWN0RmlsdGVyIiwiU2luZ2xlU2VsZWN0RmlsdGVyUGFuZWwiLCJSZWFjdCIsIm1lbW8iLCJfcmVmIiwiaWR4IiwiZGF0YXNldHMiLCJhbGxBdmFpbGFibGVGaWVsZHMiLCJmaWx0ZXIiLCJzZXRGaWx0ZXIiLCJyZW1vdmVGaWx0ZXIiLCJvblNldEZpbHRlciIsInVzZUNhbGxiYWNrIiwidmFsdWUiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwidHlwZSIsImRpc3BsYXlOYW1lIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvc3JjL2ZpbHRlcnMvZmlsdGVyLXBhbmVscy9zaW5nbGUtc2VsZWN0LWZpbHRlci1wYW5lbC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2t9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTaW5nbGVTZWxlY3RGaWx0ZXJGYWN0b3J5IGZyb20gJy4uL3NpbmdsZS1zZWxlY3QtZmlsdGVyJztcbmltcG9ydCB7U2VsZWN0RmlsdGVyfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCBGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0RmFjdG9yeSBmcm9tICcuL2ZpbHRlci1wYW5lbC13aXRoLWZpZWxkLXNlbGVjdCc7XG5pbXBvcnQge0ZpbHRlclBhbmVsQ29tcG9uZW50fSBmcm9tICcuL3R5cGVzJztcblxuU2luZ2xlU2VsZWN0RmlsdGVyUGFuZWxGYWN0b3J5LmRlcHMgPSBbRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdEZhY3RvcnksIFNpbmdsZVNlbGVjdEZpbHRlckZhY3RvcnldO1xuXG5mdW5jdGlvbiBTaW5nbGVTZWxlY3RGaWx0ZXJQYW5lbEZhY3RvcnkoXG4gIEZpZWxkUGFuZWxXaXRoRmllbGRTZWxlY3Q6IFJldHVyblR5cGU8dHlwZW9mIEZpZWxkUGFuZWxXaXRoRmllbGRTZWxlY3RGYWN0b3J5PixcbiAgU2luZ2xlU2VsZWN0RmlsdGVyOiBSZXR1cm5UeXBlPHR5cGVvZiBTaW5nbGVTZWxlY3RGaWx0ZXJGYWN0b3J5PlxuKSB7XG4gIGNvbnN0IFNpbmdsZVNlbGVjdEZpbHRlclBhbmVsOiBGaWx0ZXJQYW5lbENvbXBvbmVudDxTZWxlY3RGaWx0ZXI+ID0gUmVhY3QubWVtbyhcbiAgICAoe2lkeCwgZGF0YXNldHMsIGFsbEF2YWlsYWJsZUZpZWxkcywgZmlsdGVyLCBzZXRGaWx0ZXIsIHJlbW92ZUZpbHRlcn0pID0+IHtcbiAgICAgIGNvbnN0IG9uU2V0RmlsdGVyID0gdXNlQ2FsbGJhY2sodmFsdWUgPT4gc2V0RmlsdGVyKGlkeCwgJ3ZhbHVlJywgdmFsdWUpLCBbaWR4LCBzZXRGaWx0ZXJdKTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaW5nbGUtc2VsZWN0LWZpbHRlci1wYW5lbFwiPlxuICAgICAgICAgIDxGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0XG4gICAgICAgICAgICBhbGxBdmFpbGFibGVGaWVsZHM9e2FsbEF2YWlsYWJsZUZpZWxkc31cbiAgICAgICAgICAgIGRhdGFzZXRzPXtkYXRhc2V0c31cbiAgICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxuICAgICAgICAgICAgaWR4PXtpZHh9XG4gICAgICAgICAgICByZW1vdmVGaWx0ZXI9e3JlbW92ZUZpbHRlcn1cbiAgICAgICAgICAgIHNldEZpbHRlcj17c2V0RmlsdGVyfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtmaWx0ZXIudHlwZSAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlsdGVyLXBhbmVsX19maWx0ZXJcIj5cbiAgICAgICAgICAgICAgICA8U2luZ2xlU2VsZWN0RmlsdGVyIGZpbHRlcj17ZmlsdGVyfSBzZXRGaWx0ZXI9e29uU2V0RmlsdGVyfSAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9GaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuICApO1xuXG4gIFNpbmdsZVNlbGVjdEZpbHRlclBhbmVsLmRpc3BsYXlOYW1lID0gJ1NpbmdsZVNlbGVjdEZpbHRlclBhbmVsJztcblxuICByZXR1cm4gU2luZ2xlU2VsZWN0RmlsdGVyUGFuZWw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbmdsZVNlbGVjdEZpbHRlclBhbmVsRmFjdG9yeTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxtQkFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBQUcsMkJBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUFnRixTQUFBSSx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQU4sd0JBQUFNLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSxnQkFBQUssT0FBQSxDQUFBTCxDQUFBLDBCQUFBQSxDQUFBLHNCQUFBQSxDQUFBLFFBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQSxPQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBLE9BQUFRLENBQUEsS0FBQUMsU0FBQSxVQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQSxTQUFBRyxDQUFBLEdBQUFQLENBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBYixDQUFBLEVBQUFjLENBQUEsVUFBQUcsQ0FBQSxLQUFBQSxDQUFBLENBQUFWLEdBQUEsSUFBQVUsQ0FBQSxDQUFBQyxHQUFBLElBQUFQLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSixDQUFBLEVBQUFNLENBQUEsRUFBQUcsQ0FBQSxJQUFBVCxDQUFBLENBQUFNLENBQUEsSUFBQWQsQ0FBQSxDQUFBYyxDQUFBLFlBQUFOLENBQUEsY0FBQVIsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFOaEY7QUFDQTs7QUFRQVcsOEJBQThCLENBQUNDLElBQUksR0FBRyxDQUFDQyxzQ0FBZ0MsRUFBRUMsOEJBQXlCLENBQUM7QUFFbkcsU0FBU0gsOEJBQThCQSxDQUNyQ0kseUJBQThFLEVBQzlFQyxrQkFBZ0UsRUFDaEU7RUFDQSxJQUFNQyx1QkFBMkQsR0FBR0MsaUJBQUssQ0FBQ0MsSUFBSSxDQUM1RSxVQUFBQyxJQUFBLEVBQTBFO0lBQUEsSUFBeEVDLEdBQUcsR0FBQUQsSUFBQSxDQUFIQyxHQUFHO01BQUVDLFFBQVEsR0FBQUYsSUFBQSxDQUFSRSxRQUFRO01BQUVDLGtCQUFrQixHQUFBSCxJQUFBLENBQWxCRyxrQkFBa0I7TUFBRUMsTUFBTSxHQUFBSixJQUFBLENBQU5JLE1BQU07TUFBRUMsU0FBUyxHQUFBTCxJQUFBLENBQVRLLFNBQVM7TUFBRUMsWUFBWSxHQUFBTixJQUFBLENBQVpNLFlBQVk7SUFDbEUsSUFBTUMsV0FBVyxHQUFHLElBQUFDLGtCQUFXLEVBQUMsVUFBQUMsS0FBSztNQUFBLE9BQUlKLFNBQVMsQ0FBQ0osR0FBRyxFQUFFLE9BQU8sRUFBRVEsS0FBSyxDQUFDO0lBQUEsR0FBRSxDQUFDUixHQUFHLEVBQUVJLFNBQVMsQ0FBQyxDQUFDO0lBRTFGLG9CQUNFeEMsTUFBQSxZQUFBNkMsYUFBQTtNQUFLQyxTQUFTLEVBQUM7SUFBNEIsZ0JBQ3pDOUMsTUFBQSxZQUFBNkMsYUFBQSxDQUFDZix5QkFBeUI7TUFDeEJRLGtCQUFrQixFQUFFQSxrQkFBbUI7TUFDdkNELFFBQVEsRUFBRUEsUUFBUztNQUNuQkUsTUFBTSxFQUFFQSxNQUFPO01BQ2ZILEdBQUcsRUFBRUEsR0FBSTtNQUNUSyxZQUFZLEVBQUVBLFlBQWE7TUFDM0JELFNBQVMsRUFBRUE7SUFBVSxHQUVwQkQsTUFBTSxDQUFDUSxJQUFJLGlCQUNWL0MsTUFBQSxZQUFBNkMsYUFBQTtNQUFLQyxTQUFTLEVBQUM7SUFBc0IsZ0JBQ25DOUMsTUFBQSxZQUFBNkMsYUFBQSxDQUFDZCxrQkFBa0I7TUFBQ1EsTUFBTSxFQUFFQSxNQUFPO01BQUNDLFNBQVMsRUFBRUU7SUFBWSxDQUFFLENBQzFELENBRWtCLENBQ3hCLENBQUM7RUFFVixDQUNGLENBQUM7RUFFRFYsdUJBQXVCLENBQUNnQixXQUFXLEdBQUcseUJBQXlCO0VBRS9ELE9BQU9oQix1QkFBdUI7QUFDaEM7QUFBQyxJQUFBaUIsUUFBQSxHQUFBQyxPQUFBLGNBRWN4Qiw4QkFBOEIiLCJpZ25vcmVMaXN0IjpbXX0=