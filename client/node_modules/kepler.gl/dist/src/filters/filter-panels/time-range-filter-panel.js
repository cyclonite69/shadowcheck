"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _timeRangeFilter = _interopRequireDefault(require("../time-range-filter"));
var _icons = require("../../common/icons");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _filterPanelHeader = _interopRequireDefault(require("../../side-panel/filter-panel/filter-panel-header"));
var _panelHeaderAction = _interopRequireDefault(require("../../side-panel/panel-header-action"));
var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));
var _styledComponents = require("../../common/styled-components");
var _newFilterPanel = require("./new-filter-panel");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _timeSyncedFieldSelector = _interopRequireDefault(require("./time-synced-field-selector"));
var _filterSyncedDatasetPanel = _interopRequireDefault(require("./filter-synced-dataset-panel"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var SYNC_FILTER_ID_LENGTH = 2;
TimeRangeFilterPanelFactory.deps = [_timeRangeFilter["default"], _filterPanelHeader["default"], _fieldSelector["default"], _panelHeaderAction["default"], _timeSyncedFieldSelector["default"], _filterSyncedDatasetPanel["default"]];
function TimeRangeFilterPanelFactory(TimeRangeFilter, FilterPanelHeader, FieldSelector, PanelHeaderAction, TimeSyncedFieldSelector, FilterSyncedDatasetPanel) {
  var TimeRangeFilterPanel = _react["default"].memo(function (_ref) {
    var idx = _ref.idx,
      datasets = _ref.datasets,
      layers = _ref.layers,
      allAvailableFields = _ref.allAvailableFields,
      filter = _ref.filter,
      enlargeFilter = _ref.enlargeFilter,
      setFilter = _ref.setFilter,
      setFilterPlot = _ref.setFilterPlot,
      removeFilter = _ref.removeFilter,
      toggleAnimation = _ref.toggleAnimation,
      syncTimeFilterWithLayerTimeline = _ref.syncTimeFilterWithLayerTimeline;
    var onSetFilterValue = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'value', value);
    }, [idx, setFilter]);
    var onSetFilterPlot = (0, _react.useCallback)(function (newProp, valueIndex) {
      return setFilterPlot(idx, newProp, valueIndex);
    }, [idx, setFilterPlot]);
    var isEnlarged = (0, _react.useMemo)(function () {
      return !(0, _src.isSideFilter)(filter);
    }, [filter]);
    var panelActions = (0, _react.useMemo)(function () {
      return [{
        id: filter.id,
        onClick: enlargeFilter,
        tooltip: 'tooltip.timePlayback',
        iconComponent: _icons.Clock,
        active: isEnlarged
      }];
    }, [filter.id, isEnlarged, enlargeFilter]);
    var onFieldSelector = (0, _react.useCallback)(function (field, valueIndex) {
      return setFilter(idx, 'name', field.name, valueIndex);
    }, [setFilter, idx]);
    var onSourceDataSelector = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'dataId', value, 0);
    }, [idx, setFilter]);
    var dataset = datasets[filter.dataId[0]];
    var supportedFields = (0, _react.useMemo)(function () {
      return (0, _newFilterPanel.getSupportedFilterFields)(dataset.supportedFilterTypes, allAvailableFields);
    }, [dataset.supportedFilterTypes, allAvailableFields]);
    var isSynced = (0, _react.useMemo)(function () {
      return filter.dataId.length >= SYNC_FILTER_ID_LENGTH && filter.type === _src2.FILTER_TYPES.timeRange;
    }, [filter.dataId, filter.type]);
    var isHistogramVisible = (0, _react.useMemo)(function () {
      return filter.type && !isEnlarged;
    }, [filter.type, isEnlarged]);
    var timeline = (0, _src.getTimelineFromFilter)(filter);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(FilterPanelHeader, {
      datasets: [dataset],
      allAvailableFields: supportedFields,
      idx: idx,
      filter: filter,
      removeFilter: removeFilter
    }, isSynced ? /*#__PURE__*/_react["default"].createElement(TimeSyncedFieldSelector, null) : /*#__PURE__*/_react["default"].createElement(FieldSelector, {
      inputTheme: "secondary",
      fields: supportedFields,
      value: Array.isArray(filter.name) ? filter.name[0] : filter.name,
      erasable: false,
      onSelect: function onSelect(field) {
        return onFieldSelector(field, 0);
      }
    }), panelActions.map(function (panelAction) {
      return /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
        id: panelAction.id,
        key: panelAction.id,
        onClick: panelAction.onClick,
        tooltip: panelAction.tooltip,
        IconComponent: panelAction.iconComponent,
        active: panelAction.active
      });
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents.StyledFilterContent, {
      className: "filter-panel__content"
    }, /*#__PURE__*/_react["default"].createElement(FilterSyncedDatasetPanel, {
      datasets: datasets,
      layers: layers,
      filter: filter,
      idx: idx,
      onFieldSelector: onFieldSelector,
      onSourceDataSelector: onSourceDataSelector,
      setFilter: setFilter,
      supportedFields: supportedFields,
      syncTimeFilterWithLayerTimeline: syncTimeFilterWithLayerTimeline
    }), isHistogramVisible && /*#__PURE__*/_react["default"].createElement("div", {
      className: "filter-panel__filter"
    }, /*#__PURE__*/_react["default"].createElement(TimeRangeFilter, {
      filter: filter,
      datasets: datasets,
      layers: layers,
      idx: idx,
      toggleAnimation: toggleAnimation,
      setFilter: onSetFilterValue,
      setFilterPlot: onSetFilterPlot,
      isAnimatable: true,
      hideTimeTitle: true,
      timeline: timeline
    }))));
  });
  TimeRangeFilterPanel.displayName = 'TimeRangeFilterPanel';
  return TimeRangeFilterPanel;
}
var _default = exports["default"] = TimeRangeFilterPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,