"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UPDATE_AI_ASSISTANT_MESSAGES = exports.UPDATE_AI_ASSISTANT_CONFIG = exports.SET_START_SCREEN_CAPTURE = exports.SET_SCREEN_CAPTURED = exports.SET_MAP_BOUNDARY = void 0;
exports.setMapBoundary = setMapBoundary;
exports.setScreenCaptured = setScreenCaptured;
exports.setStartScreenCapture = setStartScreenCapture;
exports.updateAiAssistantConfig = updateAiAssistantConfig;
exports.updateAiAssistantMessages = updateAiAssistantMessages;
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var ACTION_PREFIX = '@@openassistant/';
var UPDATE_AI_ASSISTANT_CONFIG = exports.UPDATE_AI_ASSISTANT_CONFIG = "".concat(ACTION_PREFIX, "UPDATE_AI_ASSISTANT_CONFIG");
var UPDATE_AI_ASSISTANT_MESSAGES = exports.UPDATE_AI_ASSISTANT_MESSAGES = "".concat(ACTION_PREFIX, "UPDATE_AI_ASSISTANT_MESSAGES");
var SET_START_SCREEN_CAPTURE = exports.SET_START_SCREEN_CAPTURE = "".concat(ACTION_PREFIX, "SET_START_SCREEN_CAPTURE");
var SET_SCREEN_CAPTURED = exports.SET_SCREEN_CAPTURED = "".concat(ACTION_PREFIX, "SET_SCREEN_CAPTURED");
var SET_MAP_BOUNDARY = exports.SET_MAP_BOUNDARY = "".concat(ACTION_PREFIX, "SET_MAP_BOUNDARY");
// Action creators
function updateAiAssistantConfig(config) {
  return {
    type: UPDATE_AI_ASSISTANT_CONFIG,
    payload: config
  };
}
function updateAiAssistantMessages(messages) {
  return {
    type: UPDATE_AI_ASSISTANT_MESSAGES,
    payload: messages
  };
}
function setStartScreenCapture(flag) {
  return {
    type: SET_START_SCREEN_CAPTURE,
    payload: flag
  };
}
function setScreenCaptured(screenshot) {
  return {
    type: SET_SCREEN_CAPTURED,
    payload: screenshot
  };
}
function setMapBoundary(nw, se) {
  return {
    type: SET_MAP_BOUNDARY,
    payload: {
      nw: nw,
      se: se
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBQ1RJT05fUFJFRklYIiwiVVBEQVRFX0FJX0FTU0lTVEFOVF9DT05GSUciLCJleHBvcnRzIiwiY29uY2F0IiwiVVBEQVRFX0FJX0FTU0lTVEFOVF9NRVNTQUdFUyIsIlNFVF9TVEFSVF9TQ1JFRU5fQ0FQVFVSRSIsIlNFVF9TQ1JFRU5fQ0FQVFVSRUQiLCJTRVRfTUFQX0JPVU5EQVJZIiwidXBkYXRlQWlBc3Npc3RhbnRDb25maWciLCJjb25maWciLCJ0eXBlIiwicGF5bG9hZCIsInVwZGF0ZUFpQXNzaXN0YW50TWVzc2FnZXMiLCJtZXNzYWdlcyIsInNldFN0YXJ0U2NyZWVuQ2FwdHVyZSIsImZsYWciLCJzZXRTY3JlZW5DYXB0dXJlZCIsInNjcmVlbnNob3QiLCJzZXRNYXBCb3VuZGFyeSIsIm53Iiwic2UiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvYWktYXNzaXN0YW50L3NyYy9hY3Rpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7TWVzc2FnZU1vZGVsfSBmcm9tICdAb3BlbmFzc2lzdGFudC9jb3JlJztcbmltcG9ydCB7QWlBc3Npc3RhbnRDb25maWd9IGZyb20gJy4vcmVkdWNlcnMnO1xuXG5jb25zdCBBQ1RJT05fUFJFRklYID0gJ0BAb3BlbmFzc2lzdGFudC8nO1xuXG5leHBvcnQgY29uc3QgVVBEQVRFX0FJX0FTU0lTVEFOVF9DT05GSUcgPSBgJHtBQ1RJT05fUFJFRklYfVVQREFURV9BSV9BU1NJU1RBTlRfQ09ORklHYDtcbmV4cG9ydCBjb25zdCBVUERBVEVfQUlfQVNTSVNUQU5UX01FU1NBR0VTID0gYCR7QUNUSU9OX1BSRUZJWH1VUERBVEVfQUlfQVNTSVNUQU5UX01FU1NBR0VTYDtcbmV4cG9ydCBjb25zdCBTRVRfU1RBUlRfU0NSRUVOX0NBUFRVUkUgPSBgJHtBQ1RJT05fUFJFRklYfVNFVF9TVEFSVF9TQ1JFRU5fQ0FQVFVSRWA7XG5leHBvcnQgY29uc3QgU0VUX1NDUkVFTl9DQVBUVVJFRCA9IGAke0FDVElPTl9QUkVGSVh9U0VUX1NDUkVFTl9DQVBUVVJFRGA7XG5leHBvcnQgY29uc3QgU0VUX01BUF9CT1VOREFSWSA9IGAke0FDVElPTl9QUkVGSVh9U0VUX01BUF9CT1VOREFSWWA7XG4vLyBBY3Rpb24gY3JlYXRvcnNcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVBaUFzc2lzdGFudENvbmZpZyhjb25maWc6IEFpQXNzaXN0YW50Q29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogVVBEQVRFX0FJX0FTU0lTVEFOVF9DT05GSUcsXG4gICAgcGF5bG9hZDogY29uZmlnXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVBaUFzc2lzdGFudE1lc3NhZ2VzKG1lc3NhZ2VzOiBNZXNzYWdlTW9kZWxbXSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFVQREFURV9BSV9BU1NJU1RBTlRfTUVTU0FHRVMsXG4gICAgcGF5bG9hZDogbWVzc2FnZXNcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFN0YXJ0U2NyZWVuQ2FwdHVyZShmbGFnOiBib29sZWFuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0VUX1NUQVJUX1NDUkVFTl9DQVBUVVJFLFxuICAgIHBheWxvYWQ6IGZsYWdcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFNjcmVlbkNhcHR1cmVkKHNjcmVlbnNob3Q6IHN0cmluZykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFNFVF9TQ1JFRU5fQ0FQVFVSRUQsXG4gICAgcGF5bG9hZDogc2NyZWVuc2hvdFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0TWFwQm91bmRhcnkobnc6IFtudW1iZXIsIG51bWJlcl0sIHNlOiBbbnVtYmVyLCBudW1iZXJdKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0VUX01BUF9CT1VOREFSWSxcbiAgICBwYXlsb2FkOiB7bncsIHNlfVxuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7O0FBS0EsSUFBTUEsYUFBYSxHQUFHLGtCQUFrQjtBQUVqQyxJQUFNQywwQkFBMEIsR0FBQUMsT0FBQSxDQUFBRCwwQkFBQSxNQUFBRSxNQUFBLENBQU1ILGFBQWEsK0JBQTRCO0FBQy9FLElBQU1JLDRCQUE0QixHQUFBRixPQUFBLENBQUFFLDRCQUFBLE1BQUFELE1BQUEsQ0FBTUgsYUFBYSxpQ0FBOEI7QUFDbkYsSUFBTUssd0JBQXdCLEdBQUFILE9BQUEsQ0FBQUcsd0JBQUEsTUFBQUYsTUFBQSxDQUFNSCxhQUFhLDZCQUEwQjtBQUMzRSxJQUFNTSxtQkFBbUIsR0FBQUosT0FBQSxDQUFBSSxtQkFBQSxNQUFBSCxNQUFBLENBQU1ILGFBQWEsd0JBQXFCO0FBQ2pFLElBQU1PLGdCQUFnQixHQUFBTCxPQUFBLENBQUFLLGdCQUFBLE1BQUFKLE1BQUEsQ0FBTUgsYUFBYSxxQkFBa0I7QUFDbEU7QUFDTyxTQUFTUSx1QkFBdUJBLENBQUNDLE1BQXlCLEVBQUU7RUFDakUsT0FBTztJQUNMQyxJQUFJLEVBQUVULDBCQUEwQjtJQUNoQ1UsT0FBTyxFQUFFRjtFQUNYLENBQUM7QUFDSDtBQUVPLFNBQVNHLHlCQUF5QkEsQ0FBQ0MsUUFBd0IsRUFBRTtFQUNsRSxPQUFPO0lBQ0xILElBQUksRUFBRU4sNEJBQTRCO0lBQ2xDTyxPQUFPLEVBQUVFO0VBQ1gsQ0FBQztBQUNIO0FBRU8sU0FBU0MscUJBQXFCQSxDQUFDQyxJQUFhLEVBQUU7RUFDbkQsT0FBTztJQUNMTCxJQUFJLEVBQUVMLHdCQUF3QjtJQUM5Qk0sT0FBTyxFQUFFSTtFQUNYLENBQUM7QUFDSDtBQUVPLFNBQVNDLGlCQUFpQkEsQ0FBQ0MsVUFBa0IsRUFBRTtFQUNwRCxPQUFPO0lBQ0xQLElBQUksRUFBRUosbUJBQW1CO0lBQ3pCSyxPQUFPLEVBQUVNO0VBQ1gsQ0FBQztBQUNIO0FBRU8sU0FBU0MsY0FBY0EsQ0FBQ0MsRUFBb0IsRUFBRUMsRUFBb0IsRUFBRTtFQUN6RSxPQUFPO0lBQ0xWLElBQUksRUFBRUgsZ0JBQWdCO0lBQ3RCSSxPQUFPLEVBQUU7TUFBQ1EsRUFBRSxFQUFGQSxFQUFFO01BQUVDLEVBQUUsRUFBRkE7SUFBRTtFQUNsQixDQUFDO0FBQ0giLCJpZ25vcmVMaXN0IjpbXX0=