"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = PlotContainerFactory;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _reactMapGl = require("react-map-gl");
var _debounce = _interopRequireDefault(require("lodash/debounce"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/reducers/src");
var _mapContainer = _interopRequireDefault(require("./map-container"));
var _mapsLayout = _interopRequireDefault(require("./maps-layout"));
var _mapViewStateContext = require("./map-view-state-context");
var _src3 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// libraries
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var CLASS_FILTER = ['maplibregl-control-container', 'mapboxgl-control-container', 'attrition-link', 'attrition-logo', 'map-control__panel-split-viewport-tools'];
var DOM_FILTER_FUNC = function DOM_FILTER_FUNC(node) {
  return !CLASS_FILTER.includes(node.className);
};
var OUT_OF_SCREEN_POSITION = -9999;
PlotContainerFactory.deps = [_mapContainer["default"], _mapsLayout["default"]];

// Remove mapbox logo in exported map, because it contains non-ascii characters
// Remove split viewport UI controls from exported images when the legend is shown
var StyledPlotContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .maplibregl-ctrl-bottom-left,\n  .maplibregl-ctrl-bottom-right,\n  .maplibre-attribution-container,\n  .mapboxgl-ctrl-bottom-left,\n  .mapboxgl-ctrl-bottom-right,\n  .mapbox-attribution-container,\n  .map-control__panel-split-viewport-tools {\n    display: none;\n  }\n\n  position: absolute;\n  top: ", "px;\n  left: ", "px;\n"])), OUT_OF_SCREEN_POSITION, OUT_OF_SCREEN_POSITION);
var StyledMapContainer = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  width: ", "px;\n  height: ", "px;\n  display: flex;\n"])), function (props) {
  return props.width;
}, function (props) {
  return props.height;
});
function PlotContainerFactory(MapContainer, MapsLayout) {
  function PlotContainer(_ref) {
    var ratio = _ref.ratio,
      resolution = _ref.resolution,
      _ref$legend = _ref.legend,
      legend = _ref$legend === void 0 ? false : _ref$legend,
      center = _ref.center,
      imageSize = _ref.imageSize,
      escapeXhtmlForWebpack = _ref.escapeXhtmlForWebpack,
      mapFields = _ref.mapFields,
      _ref$splitMaps = _ref.splitMaps,
      splitMaps = _ref$splitMaps === void 0 ? [] : _ref$splitMaps,
      setExportImageSetting = _ref.setExportImageSetting,
      setExportImageDataUri = _ref.setExportImageDataUri,
      setExportImageError = _ref.setExportImageError,
      addNotification = _ref.addNotification,
      enableErrorNotification = _ref.enableErrorNotification;
    var plottingAreaRef = (0, _react.useRef)(null);
    var _useState = (0, _react.useState)(function () {
        return mapFields.visState.effects.map(function (effect) {
          return effect.clone();
        });
      }),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 1),
      plotEffects = _useState2[0];
    var mapState = mapFields.mapState;

    // Memoize the scale calculation
    var scale = (0, _react.useMemo)(function () {
      if (imageSize.scale) {
        return imageSize.scale;
      }
      var calculatedScale = (0, _src.getScaleFromImageSize)(imageSize.imageW, imageSize.imageH, mapState.width * (mapState.isSplit ? 2 : 1), mapState.height);
      return calculatedScale > 0 ? calculatedScale : 1;
    }, [imageSize.scale, imageSize.imageW, imageSize.imageH, mapState.width, mapState.height, mapState.isSplit]);

    // Memoize the map style
    var scaledMapStyle = (0, _react.useMemo)(function () {
      var mapStyle = mapFields.mapStyle;
      return _objectSpread(_objectSpread({}, mapStyle), {}, {
        bottomMapStyle: (0, _src.scaleMapStyleByResolution)(mapStyle.bottomMapStyle, scale),
        topMapStyle: (0, _src.scaleMapStyleByResolution)(mapStyle.topMapStyle, scale)
      });
    }, [mapFields.mapStyle, scale]);

    // Memoize the retrieveNewScreenshot callback
    var debouncedScreenshot = (0, _react.useMemo)(function () {
      return (0, _debounce["default"])(function () {
        if (plottingAreaRef.current) {
          (0, _src.convertToPng)(plottingAreaRef.current, {
            filter: DOM_FILTER_FUNC,
            width: imageSize.imageW,
            height: imageSize.imageH,
            escapeXhtmlForWebpack: escapeXhtmlForWebpack
          }).then(setExportImageDataUri)["catch"](function (err) {
            setExportImageError(err);
            if (enableErrorNotification) {
              addNotification((0, _src.exportImageError)({
                err: err
              }));
            }
          });
        }
      }, 500);
    }, [imageSize.imageW, imageSize.imageH, escapeXhtmlForWebpack, setExportImageDataUri, setExportImageError, enableErrorNotification, addNotification]);
    var retrieveNewScreenshot = (0, _react.useCallback)(debouncedScreenshot, [debouncedScreenshot]);

    // Memoize the onMapRender callback
    var debouncedMapRender = (0, _react.useMemo)(function () {
      return (0, _debounce["default"])(function (map) {
        if (map.isStyleLoaded()) {
          retrieveNewScreenshot();
        }
      }, 500);
    }, [retrieveNewScreenshot]);
    var onMapRender = (0, _react.useCallback)(debouncedMapRender, [debouncedMapRender]);

    // Initial setup effect
    (0, _react.useEffect)(function () {
      setExportImageSetting({
        processing: true
      });
    }, [setExportImageSetting]);

    // Screenshot update effect
    (0, _react.useEffect)(function () {
      if (ratio !== undefined || resolution !== undefined || legend !== undefined) {
        setExportImageSetting({
          processing: true
        });
        retrieveNewScreenshot();
      }
    }, [ratio, resolution, legend, setExportImageSetting, retrieveNewScreenshot]);

    // Memoize size calculations
    var _useMemo = (0, _react.useMemo)(function () {
        var size = {
          width: imageSize.imageW || 1,
          height: imageSize.imageH || 1
        };
        var isSplit = splitMaps.length > 1;
        return {
          size: size,
          width: size.width / (isSplit ? 2 : 1),
          height: size.height
        };
      }, [imageSize.imageW, imageSize.imageH, splitMaps.length]),
      size = _useMemo.size,
      width = _useMemo.width,
      height = _useMemo.height;

    // Memoize map state
    var newMapState = (0, _react.useMemo)(function () {
      var baseMapState = _objectSpread(_objectSpread({}, mapState), {}, {
        width: width,
        height: height,
        zoom: mapState.zoom + (Math.log2(scale) || 0)
      });
      if (center) {
        var renderedLayers = mapFields.visState.layers.filter(function (layer, idx) {
          return layer.id !== _src3.GEOCODER_LAYER_ID && layer.shouldRenderLayer(mapFields.visState.layerData[idx]);
        });
        var bounds = (0, _src2.findMapBounds)(renderedLayers);
        var centerAndZoom = (0, _src.getCenterAndZoomFromBounds)(bounds, {
          width: width,
          height: height
        });
        if (centerAndZoom) {
          var zoom = Number.isFinite(centerAndZoom.zoom) ? centerAndZoom.zoom : mapState.zoom;
          return _objectSpread(_objectSpread({}, baseMapState), {}, {
            longitude: centerAndZoom.center[0],
            latitude: centerAndZoom.center[1],
            zoom: zoom + Number(Math.log2(scale) || 0)
          });
        }
      }
      return baseMapState;
    }, [mapState, width, height, scale, center, mapFields.visState]);

    // Memoize map props
    var mapProps = (0, _react.useMemo)(function () {
      return _objectSpread(_objectSpread({}, mapFields), {}, {
        mapStyle: scaledMapStyle,
        mapState: newMapState,
        mapControls: {
          mapLegend: {
            show: Boolean(legend),
            active: true
          }
        },
        MapComponent: _reactMapGl.Map,
        onMapRender: onMapRender,
        isExport: true,
        deckGlProps: _objectSpread(_objectSpread({}, mapFields.deckGlProps), {}, {
          glOptions: {
            preserveDrawingBuffer: true,
            useDevicePixels: false
          }
        }),
        visState: _objectSpread(_objectSpread({}, mapFields.visState), {}, {
          effects: plotEffects
        })
      });
    }, [mapFields, scaledMapStyle, newMapState, legend, onMapRender, plotEffects]);
    var isSplit = splitMaps.length > 1;
    var mapContainers = !isSplit ? /*#__PURE__*/_react["default"].createElement(MapContainer, (0, _extends2["default"])({
      index: 0,
      primary: true
    }, mapProps)) : /*#__PURE__*/_react["default"].createElement(MapsLayout, {
      className: "plot-container-maps",
      mapState: newMapState
    }, splitMaps.map(function (settings, index) {
      return /*#__PURE__*/_react["default"].createElement(MapContainer, (0, _extends2["default"])({
        key: index,
        index: index,
        primary: index === 1
      }, mapProps));
    }));
    return /*#__PURE__*/_react["default"].createElement(StyledPlotContainer, {
      className: "export-map-instance"
    }, /*#__PURE__*/_react["default"].createElement(StyledMapContainer, {
      ref: plottingAreaRef,
      width: size.width,
      height: size.height
    }, /*#__PURE__*/_react["default"].createElement(_mapViewStateContext.MapViewStateContextProvider, {
      mapState: newMapState
    }, mapContainers)));
  }
  return _react["default"].memo(PlotContainer);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,