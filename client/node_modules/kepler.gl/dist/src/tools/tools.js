"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupLLMTools = setupLLMTools;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _echartsTools = require("./echarts-tools");
var _geoTools = require("./geo-tools");
var _keplerTools = require("./kepler-tools");
var _queryTool = require("./query-tool");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function setupLLMTools(_ref) {
  var visState = _ref.visState,
    aiAssistant = _ref.aiAssistant,
    dispatch = _ref.dispatch;
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, (0, _keplerTools.getKeplerTools)(visState, aiAssistant)), (0, _echartsTools.getEchartsTools)(visState.datasets, visState.layers, dispatch)), (0, _geoTools.getGeoTools)(aiAssistant, visState.datasets, visState.layers, visState.layerData)), (0, _queryTool.getQueryTool)(visState.datasets, visState.layers));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZWNoYXJ0c1Rvb2xzIiwicmVxdWlyZSIsIl9nZW9Ub29scyIsIl9rZXBsZXJUb29scyIsIl9xdWVyeVRvb2wiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInNldHVwTExNVG9vbHMiLCJfcmVmIiwidmlzU3RhdGUiLCJhaUFzc2lzdGFudCIsImRpc3BhdGNoIiwiZ2V0S2VwbGVyVG9vbHMiLCJnZXRFY2hhcnRzVG9vbHMiLCJkYXRhc2V0cyIsImxheWVycyIsImdldEdlb1Rvb2xzIiwibGF5ZXJEYXRhIiwiZ2V0UXVlcnlUb29sIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FpLWFzc2lzdGFudC9zcmMvdG9vbHMvdG9vbHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7VmlzU3RhdGV9IGZyb20gJ0BrZXBsZXIuZ2wvc2NoZW1hcyc7XG5pbXBvcnQge0Rpc3BhdGNofSBmcm9tICdyZWR1eCc7XG5cbmltcG9ydCB7QWlBc3Npc3RhbnRTdGF0ZX0gZnJvbSAnLi4vcmVkdWNlcnMnO1xuaW1wb3J0IHtnZXRFY2hhcnRzVG9vbHN9IGZyb20gJy4vZWNoYXJ0cy10b29scyc7XG5pbXBvcnQge2dldEdlb1Rvb2xzfSBmcm9tICcuL2dlby10b29scyc7XG5pbXBvcnQge2dldEtlcGxlclRvb2xzfSBmcm9tICcuL2tlcGxlci10b29scyc7XG5pbXBvcnQge2dldFF1ZXJ5VG9vbH0gZnJvbSAnLi9xdWVyeS10b29sJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwTExNVG9vbHMoe1xuICB2aXNTdGF0ZSxcbiAgYWlBc3Npc3RhbnQsXG4gIGRpc3BhdGNoXG59OiB7XG4gIHZpc1N0YXRlOiBWaXNTdGF0ZTtcbiAgYWlBc3Npc3RhbnQ6IEFpQXNzaXN0YW50U3RhdGU7XG4gIGRpc3BhdGNoOiBEaXNwYXRjaDtcbn0pIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5nZXRLZXBsZXJUb29scyh2aXNTdGF0ZSwgYWlBc3Npc3RhbnQpLFxuICAgIC4uLmdldEVjaGFydHNUb29scyh2aXNTdGF0ZS5kYXRhc2V0cywgdmlzU3RhdGUubGF5ZXJzLCBkaXNwYXRjaCksXG4gICAgLi4uZ2V0R2VvVG9vbHMoYWlBc3Npc3RhbnQsIHZpc1N0YXRlLmRhdGFzZXRzLCB2aXNTdGF0ZS5sYXllcnMsIHZpc1N0YXRlLmxheWVyRGF0YSksXG4gICAgLi4uZ2V0UXVlcnlUb29sKHZpc1N0YXRlLmRhdGFzZXRzLCB2aXNTdGF0ZS5sYXllcnMpXG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBT0EsSUFBQUEsYUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsU0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsVUFBQSxHQUFBSCxPQUFBO0FBQTBDLFNBQUFJLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBWixDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUEsUUFBQWUsZ0JBQUEsYUFBQWhCLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLENBQUFELENBQUEsU0FBQUUsTUFBQSxDQUFBYyx5QkFBQSxHQUFBZCxNQUFBLENBQUFlLGdCQUFBLENBQUFsQixDQUFBLEVBQUFHLE1BQUEsQ0FBQWMseUJBQUEsQ0FBQWYsQ0FBQSxLQUFBSCxPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxHQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQUUsTUFBQSxDQUFBZ0IsY0FBQSxDQUFBbkIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQU4sQ0FBQSxFQUFBRCxDQUFBLGlCQUFBRCxDQUFBLElBVjFDO0FBQ0E7QUFXTyxTQUFTb0IsYUFBYUEsQ0FBQUMsSUFBQSxFQVExQjtFQUFBLElBUERDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0lBQ1JDLFdBQVcsR0FBQUYsSUFBQSxDQUFYRSxXQUFXO0lBQ1hDLFFBQVEsR0FBQUgsSUFBQSxDQUFSRyxRQUFRO0VBTVIsT0FBQVosYUFBQSxDQUFBQSxhQUFBLENBQUFBLGFBQUEsQ0FBQUEsYUFBQSxLQUNLLElBQUFhLDJCQUFjLEVBQUNILFFBQVEsRUFBRUMsV0FBVyxDQUFDLEdBQ3JDLElBQUFHLDZCQUFlLEVBQUNKLFFBQVEsQ0FBQ0ssUUFBUSxFQUFFTCxRQUFRLENBQUNNLE1BQU0sRUFBRUosUUFBUSxDQUFDLEdBQzdELElBQUFLLHFCQUFXLEVBQUNOLFdBQVcsRUFBRUQsUUFBUSxDQUFDSyxRQUFRLEVBQUVMLFFBQVEsQ0FBQ00sTUFBTSxFQUFFTixRQUFRLENBQUNRLFNBQVMsQ0FBQyxHQUNoRixJQUFBQyx1QkFBWSxFQUFDVCxRQUFRLENBQUNLLFFBQVEsRUFBRUwsUUFBUSxDQUFDTSxNQUFNLENBQUM7QUFFdkQiLCJpZ25vcmVMaXN0IjpbXX0=