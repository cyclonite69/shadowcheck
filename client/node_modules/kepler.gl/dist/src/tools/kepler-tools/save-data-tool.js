"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SaveDataToMapToolComponent = SaveDataToMapToolComponent;
exports.saveToolResults = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react");
var _lib = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-redux/lib");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/processors/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/actions/src");
var _utils = require("@openassistant/utils");
var _zod = require("zod");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var saveToolResults = exports.saveToolResults = (0, _utils.extendedTool)({
  description: 'Save tool results to kepler.gl. The tool includes: buffer, zipcode, county, state, isochrone, thiessenPolygons, mst, cartogram, etc.',
  parameters: _zod.z.object({
    datasetNames: _zod.z.array(_zod.z.string()).describe('The names of the datasets created by tools.')
  }),
  execute: function () {
    var _execute = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(args) {
      var datasetNames, loadedDatasetNames, result, toolCache, datasetType, _iterator, _step, _datasetName, dataset, mergedResult, mergedColumnData, columnNames, numberOfRows, i, rowObject, _iterator2, _step2, columnName, datasetName, parsedData;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            datasetNames = args.datasetNames;
            loadedDatasetNames = [];
            result = [];
            toolCache = _utils.ToolCache.getInstance();
            _iterator = _createForOfIteratorHelper(datasetNames);
            _context.prev = 6;
            _iterator.s();
          case 8:
            if ((_step = _iterator.n()).done) {
              _context.next = 28;
              break;
            }
            _datasetName = _step.value;
            dataset = toolCache.getDataset(_datasetName);
            if (!(dataset && dataset.type === 'geojson')) {
              _context.next = 15;
              break;
            }
            datasetType = 'geojson';
            _context.next = 24;
            break;
          case 15:
            if (!(dataset && dataset.type === 'columnData')) {
              _context.next = 19;
              break;
            }
            datasetType = 'columnData';
            _context.next = 24;
            break;
          case 19:
            if (!(dataset && dataset.type === 'rowObjects')) {
              _context.next = 23;
              break;
            }
            datasetType = 'rowObjects';
            _context.next = 24;
            break;
          case 23:
            throw new Error("Can not save tool cache dataset ".concat(_datasetName, ", the dataset type ").concat(datasetType, " is not supported"));
          case 24:
            result.push(dataset.content);
            loadedDatasetNames.push(_datasetName);
          case 26:
            _context.next = 8;
            break;
          case 28:
            _context.next = 33;
            break;
          case 30:
            _context.prev = 30;
            _context.t0 = _context["catch"](6);
            _iterator.e(_context.t0);
          case 33:
            _context.prev = 33;
            _iterator.f();
            return _context.finish(33);
          case 36:
            if (!(result.length === 0)) {
              _context.next = 38;
              break;
            }
            throw new Error("Can not save dataset, No datasets found from ".concat(datasetNames.join(', ')));
          case 38:
            if (datasetType === 'geojson') {
              mergedResult = result.reduce(function (acc, geom) {
                return _objectSpread(_objectSpread({}, acc), {}, {
                  features: [].concat((0, _toConsumableArray2["default"])(acc.features), (0, _toConsumableArray2["default"])(geom.features))
                });
              }, {
                type: 'FeatureCollection',
                features: []
              });
            } else if (datasetType === 'columnData') {
              mergedColumnData = result.reduce(function (acc, row) {
                return _objectSpread(_objectSpread({}, acc), row);
              }, {}); // convert the merged result to a rowObjects array
              columnNames = Object.keys(mergedColumnData);
              numberOfRows = mergedColumnData[columnNames[0]].length;
              for (i = 0; i < numberOfRows; i++) {
                rowObject = {};
                _iterator2 = _createForOfIteratorHelper(columnNames);
                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    columnName = _step2.value;
                    rowObject[columnName] = mergedColumnData[columnName][i];
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }
                mergedResult.push(rowObject);
              }
            } else if (datasetType === 'rowObjects') {
              mergedResult = result.reduce(function (acc, row) {
                return [].concat((0, _toConsumableArray2["default"])(acc), (0, _toConsumableArray2["default"])(row));
              }, []);
            }
            datasetName = datasetNames.length > 1 ? "".concat(datasetNames.join('_'), "_").concat((0, _utils.generateId)()) : datasetNames[0]; // try to process the merged result using kepler.gl processor
            _context.next = 42;
            return (0, _src.processFileData)({
              content: {
                data: mergedResult,
                fileName: "".concat(datasetName)
              },
              fileCache: []
            });
          case 42:
            parsedData = _context.sent;
            return _context.abrupt("return", {
              llmResult: {
                success: true,
                savedDatasetName: datasetName,
                details: "Successfully save dataset: ".concat(datasetName, " in kepler.gl")
              },
              additionalData: {
                parsedData: parsedData
              }
            });
          case 46:
            _context.prev = 46;
            _context.t1 = _context["catch"](0);
            return _context.abrupt("return", {
              llmResult: {
                success: false,
                details: "Can not save data to kepler.gl, ".concat(_context.t1)
              }
            });
          case 49:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 46], [6, 30, 33, 36]]);
    }));
    function execute(_x) {
      return _execute.apply(this, arguments);
    }
    return execute;
  }(),
  component: SaveDataToMapToolComponent
});
function SaveDataToMapToolComponent(_ref) {
  var parsedData = _ref.parsedData;
  var dispatch = (0, _lib.useDispatch)();
  (0, _react.useEffect)(function () {
    dispatch((0, _src2.addDataToMap)({
      datasets: parsedData,
      options: {
        autoCreateLayers: true,
        centerMap: true
      }
    }));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,