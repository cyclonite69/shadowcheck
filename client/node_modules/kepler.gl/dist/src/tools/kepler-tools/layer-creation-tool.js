"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddLayerToolComponent = AddLayerToolComponent;
exports.addLayer = void 0;
exports.guessDefaultLayer = guessDefaultLayer;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _lib = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-redux/lib");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/layers/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/reducers/src");
var _src3 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/actions/src");
var _utils = require("@openassistant/utils");
var _zod = require("zod");
var _react = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var addLayer = exports.addLayer = (0, _utils.extendedTool)({
  description: "Add a kepler.gl map layer from a dataset.\nYou can create basic map layer without color styling, or enhanced map layer with color visualization.\n\nFor basic maps:\n- Simply use datasetName, geometryColumn (if needed), latitudeColumn/longitudeColumn (for point maps), and mapType\n- Omit color-related parameters for simple visualization\n\nFor colored maps:\n- If user requests color visualization, use available columns in the dataset\n- Use dataClassify tool to classify data into bins or unique values when needed\n- If dataClassify tool returns a list of k breaks\n  a. For a list of k break values, you must create k+1 entries in the colorMap, with the last value being null.\n  b. For example: for breaks = [0, 3, 10], the colorMap could be [{value: 0, color: '##fff7bc', label: '< 0'}, {value: 3, color: '#fec44f', label: '[0-3)'}, {value: null, color: '#d95f0e', label: '>= 3'}]\n- If dataClassify tool returns a list of k unique values\n  a. There should be k colors in the colorMap. For example: for uniqueValues = ['a', 'b', 'c'], the colorMap could be [{value: 'a', color: '#1b9e77'}, {value: 'b', color: '#d95f02'}, {value: 'c', color: '#7570b3'}]\n- Generate colorBrewer colors automatically if user doesn't specify colors\n\nFor geojson datasets:\n- Use geometryColumn: '_geojson' and mapType: 'geojson' even for point collections\n",
  parameters: _zod.z.object({
    datasetName: _zod.z.string().describe('The name of the dataset. Note: please do NOT use the datasetId.'),
    latitudeColumn: _zod.z.string().optional(),
    longitudeColumn: _zod.z.string().optional(),
    layerName: _zod.z.string().optional().describe('If possible, generate a name for the layer based on the context.'),
    layerType: _zod.z["enum"](['point', 'arc', 'line', 'grid', 'hexagon', 'geojson', 'cluster', 'heatmap', 'h3', 'trip', 's2']),
    colorBy: _zod.z.string().optional(),
    colorType: _zod.z["enum"](['breaks', 'unique']).optional(),
    colorMap: _zod.z.array(_zod.z.object({
      value: _zod.z.union([_zod.z.string(), _zod.z.number(), _zod.z["null"]()]),
      color: _zod.z.string()
    })).optional()
  }),
  execute: executeAddLayer,
  component: AddLayerToolComponent
});
function isAddLayerArgs(args) {
  return (0, _typeof2["default"])(args) === 'object' && args !== null && 'datasetName' in args && 'layerType' in args;
}
function isAddLayerFunctionContext(context) {
  return context && typeof context.getDatasets === 'function';
}
function executeAddLayer(_x, _x2) {
  return _executeAddLayer.apply(this, arguments);
}
function _executeAddLayer() {
  _executeAddLayer = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(args, options) {
    var _layer2, _layer3, datasetName, layerName, latitudeColumn, longitudeColumn, layerType, colorBy, colorType, colorMap, datasets, datasetId, dataset, layer, layerId, columns, newLayer, colorField, colorScale, colors, keplerColorMap, colorRange;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          if (isAddLayerArgs(args)) {
            _context.next = 3;
            break;
          }
          throw new Error('Invalid addLayer arguments');
        case 3:
          if (isAddLayerFunctionContext(options.context)) {
            _context.next = 5;
            break;
          }
          throw new Error('Invalid addLayer context');
        case 5:
          datasetName = args.datasetName, layerName = args.layerName, latitudeColumn = args.latitudeColumn, longitudeColumn = args.longitudeColumn, layerType = args.layerType, colorBy = args.colorBy, colorType = args.colorType, colorMap = args.colorMap;
          datasets = options.context.getDatasets(); // check if dataset exists in kepler.gl
          datasetId = Object.keys(datasets).find(function (dataId) {
            return datasets[dataId].label === datasetName;
          });
          if (datasetId) {
            _context.next = 10;
            break;
          }
          throw new Error("Dataset ".concat(datasetName, " not found."));
        case 10:
          // check if field exists in the dataset
          dataset = datasets[datasetId]; // check if layerType is valid
          layer = guessDefaultLayer(dataset, layerType);
          layerId = ((_layer2 = layer) === null || _layer2 === void 0 ? void 0 : _layer2.id) || "layer_".concat((0, _utils.generateId)());
          if (!layer) {
            // for point layer, try to creat a point layer manually if LLM sugggests Lat/Lng fields
            if (layerType === 'point' && latitudeColumn && longitudeColumn) {
              layer = {
                id: layerId,
                type: 'point',
                config: {
                  dataId: datasetId,
                  label: layerName || "".concat(datasetName, "-").concat(layerType),
                  columns: {
                    lat: {
                      value: latitudeColumn,
                      fieldIdx: dataset.getColumnFieldIdx(latitudeColumn)
                    },
                    lng: {
                      value: longitudeColumn,
                      fieldIdx: dataset.getColumnFieldIdx(longitudeColumn)
                    }
                  }
                },
                visConfig: {
                  colorRange: {
                    name: 'Ice And Fire',
                    type: 'diverging',
                    category: 'Uber',
                    colors: ['#D50255', '#FEAD54', '#FEEDB1', '#E8FEB5', '#49E3CE', '#0198BD']
                  }
                }
              };
            }
          }
          if (layer) {
            _context.next = 16;
            break;
          }
          throw new Error("Invalid layer type: ".concat(layerType, "."));
        case 16:
          columns = ((_layer3 = layer) === null || _layer3 === void 0 || (_layer3 = _layer3.config) === null || _layer3 === void 0 ? void 0 : _layer3.columns) || {}; // construct new layer config for addLayer() action
          newLayer = {
            id: layerId,
            type: layer.type,
            config: _objectSpread(_objectSpread({}, layer.config), {}, {
              dataId: datasetId,
              label: layerName || "".concat(datasetName, "-").concat(layerType),
              columns: Object.keys(columns).reduce(function (acc, key) {
                var column = columns[key];
                if (column) {
                  acc[key] = column.value;
                }
                return acc;
              }, {})
            })
          };
          if (!colorBy) {
            _context.next = 33;
            break;
          }
          colorField = dataset.fields.find(function (f) {
            return f.name === colorBy;
          });
          if (colorField) {
            _context.next = 22;
            break;
          }
          throw new Error("Field ".concat(colorBy, " not found."));
        case 22:
          // create kepler.gl's colorMap from uniqueValues and breaks
          colorScale = colorType === 'breaks' ? 'custom' : 'customOrdinal';
          colors = colorMap === null || colorMap === void 0 ? void 0 : colorMap.map(function (color) {
            return color.color;
          });
          keplerColorMap = colorMap === null || colorMap === void 0 ? void 0 : colorMap.map(function (color) {
            return [color.value, color.color];
          });
          colorRange = {
            name: 'color.customPalette',
            type: 'custom',
            category: 'Custom',
            colors: colors,
            colorMap: keplerColorMap
          };
          newLayer.config['colorScale'] = colorScale;
          newLayer.config['colorField'] = colorField;
          newLayer.config['strokeColorScale'] = colorScale;
          newLayer.config['strokeColorField'] = colorField;
          newLayer.config.visConfig['colorRange'] = colorRange;
          newLayer.config.visConfig['strokeColorRange'] = colorRange;
          newLayer.config['visualChannels'] = {
            colorField: {
              name: colorBy,
              type: colorField === null || colorField === void 0 ? void 0 : colorField.type
            },
            colorScale: colorScale
          };
        case 33:
          return _context.abrupt("return", {
            llmResult: {
              success: true,
              layer: JSON.stringify(newLayer),
              details: "map layer ".concat(layerId, " will be added to the map.")
            },
            additionalData: {
              layer: newLayer,
              datasetId: datasetId
            }
          });
        case 36:
          _context.prev = 36;
          _context.t0 = _context["catch"](0);
          return _context.abrupt("return", {
            llmResult: {
              success: false,
              error: _context.t0 instanceof Error ? _context.t0.message : 'Unknown error',
              instruction: 'Try to fix the error. If the error persists, pause the execution and ask the user to try with different prompt and context.'
            }
          });
        case 39:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 36]]);
  }));
  return _executeAddLayer.apply(this, arguments);
}
function guessDefaultLayer(dataset, layerType) {
  // special case for hexagon layer, which could be implemented as findDefaultLayerProps() in hexagon-layer.tsx
  if (layerType === 'hexagon') {
    if (dataset.fieldPairs && dataset.fieldPairs.length > 0) {
      var props = dataset.fieldPairs.map(function (fieldPair) {
        return {
          isVisible: true,
          label: 'Hexbin',
          columns: fieldPair.pair
        };
      });
      var _layer = new _src.LayerClasses.hexagon(props[0]);
      return _layer;
    }
  }
  var defaultLayers = (0, _src2.findDefaultLayer)(dataset, _src.LayerClasses);
  var layer = defaultLayers.find(function (l) {
    return l.type === layerType;
  });
  return layer || defaultLayers.length > 0 ? defaultLayers[0] : null;
}
function AddLayerToolComponent(_ref) {
  var layer = _ref.layer,
    datasetId = _ref.datasetId;
  var dispatch = (0, _lib.useDispatch)();
  (0, _react.useEffect)(function () {
    dispatch((0, _src3.addLayer)(layer, datasetId));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,