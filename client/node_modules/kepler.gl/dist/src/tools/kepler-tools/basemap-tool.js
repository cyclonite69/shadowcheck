"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BasemapToolComponent = BasemapToolComponent;
exports.basemap = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/actions/src");
var _utils = require("@openassistant/utils");
var _zod = require("zod");
var _react = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react");
var _lib = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-redux/lib");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var basemap = exports.basemap = (0, _utils.extendedTool)({
  description: 'change basemap',
  parameters: _zod.z.object({
    styleType: _zod.z["enum"](['no_map', 'dark-matter', 'positron', 'voyager', 'satellite', 'dark', 'light', 'muted', 'muted_night'])
  }),
  execute: executeBasemap,
  component: BasemapToolComponent
});
function executeBasemap(_x) {
  return _executeBasemap.apply(this, arguments);
}
function _executeBasemap() {
  _executeBasemap = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref) {
    var styleType;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          styleType = _ref.styleType;
          _context.prev = 1;
          if (_src.DEFAULT_MAP_STYLES.find(function (style) {
            return style.id === styleType;
          })) {
            _context.next = 4;
            break;
          }
          throw new Error("Invalid basemap style: ".concat(styleType, "."));
        case 4:
          return _context.abrupt("return", {
            llmResult: {
              success: true,
              styleType: styleType,
              details: "basemap style changed to ".concat(styleType, ".")
            },
            additionalData: {
              styleType: styleType
            }
          });
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](1);
          return _context.abrupt("return", {
            llmResult: {
              success: false,
              styleType: styleType,
              details: "Error changing basemap style: ".concat(_context.t0),
              instruction: 'Try to fix the error. If the error persists, pause the execution and ask the user to try with different prompt and context.'
            }
          });
        case 10:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 7]]);
  }));
  return _executeBasemap.apply(this, arguments);
}
function BasemapToolComponent(_ref2) {
  var styleType = _ref2.styleType;
  var dispatch = (0, _lib.useDispatch)();
  (0, _react.useEffect)(function () {
    dispatch((0, _src2.mapStyleChange)(styleType));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3JjIiwicmVxdWlyZSIsIl9zcmMyIiwiX3V0aWxzIiwiX3pvZCIsIl9yZWFjdCIsIl9saWIiLCJiYXNlbWFwIiwiZXhwb3J0cyIsImV4dGVuZGVkVG9vbCIsImRlc2NyaXB0aW9uIiwicGFyYW1ldGVycyIsInoiLCJvYmplY3QiLCJzdHlsZVR5cGUiLCJleGVjdXRlIiwiZXhlY3V0ZUJhc2VtYXAiLCJjb21wb25lbnQiLCJCYXNlbWFwVG9vbENvbXBvbmVudCIsIl94IiwiX2V4ZWN1dGVCYXNlbWFwIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVnZW5lcmF0b3IiLCJtYXJrIiwiX2NhbGxlZSIsIl9yZWYiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwiREVGQVVMVF9NQVBfU1RZTEVTIiwiZmluZCIsInN0eWxlIiwiaWQiLCJFcnJvciIsImNvbmNhdCIsImFicnVwdCIsImxsbVJlc3VsdCIsInN1Y2Nlc3MiLCJkZXRhaWxzIiwiYWRkaXRpb25hbERhdGEiLCJ0MCIsImluc3RydWN0aW9uIiwic3RvcCIsIl9yZWYyIiwiZGlzcGF0Y2giLCJ1c2VEaXNwYXRjaCIsInVzZUVmZmVjdCIsIm1hcFN0eWxlQ2hhbmdlIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FpLWFzc2lzdGFudC9zcmMvdG9vbHMva2VwbGVyLXRvb2xzL2Jhc2VtYXAtdG9vbC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IHtERUZBVUxUX01BUF9TVFlMRVN9IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7bWFwU3R5bGVDaGFuZ2V9IGZyb20gJ0BrZXBsZXIuZ2wvYWN0aW9ucyc7XG5pbXBvcnQge2V4dGVuZGVkVG9vbH0gZnJvbSAnQG9wZW5hc3Npc3RhbnQvdXRpbHMnO1xuaW1wb3J0IHt6fSBmcm9tICd6b2QnO1xuaW1wb3J0IHt1c2VFZmZlY3R9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlRGlzcGF0Y2h9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuZXhwb3J0IGNvbnN0IGJhc2VtYXAgPSBleHRlbmRlZFRvb2woe1xuICBkZXNjcmlwdGlvbjogJ2NoYW5nZSBiYXNlbWFwJyxcbiAgcGFyYW1ldGVyczogei5vYmplY3Qoe1xuICAgIHN0eWxlVHlwZTogei5lbnVtKFtcbiAgICAgICdub19tYXAnLFxuICAgICAgJ2RhcmstbWF0dGVyJyxcbiAgICAgICdwb3NpdHJvbicsXG4gICAgICAndm95YWdlcicsXG4gICAgICAnc2F0ZWxsaXRlJyxcbiAgICAgICdkYXJrJyxcbiAgICAgICdsaWdodCcsXG4gICAgICAnbXV0ZWQnLFxuICAgICAgJ211dGVkX25pZ2h0J1xuICAgIF0pXG4gIH0pLFxuICBleGVjdXRlOiBleGVjdXRlQmFzZW1hcCxcbiAgY29tcG9uZW50OiBCYXNlbWFwVG9vbENvbXBvbmVudFxufSk7XG5cbmV4cG9ydCB0eXBlIEJhc2VtYXBUb29sID0gdHlwZW9mIGJhc2VtYXA7XG5cbnR5cGUgRXhlY3V0ZUJhc2VtYXBSZXN1bHQgPSB7XG4gIGxsbVJlc3VsdDoge1xuICAgIHN1Y2Nlc3M6IGJvb2xlYW47XG4gICAgc3R5bGVUeXBlOiBzdHJpbmc7XG4gICAgZGV0YWlscz86IHN0cmluZztcbiAgICBpbnN0cnVjdGlvbj86IHN0cmluZztcbiAgfTtcbiAgYWRkaXRpb25hbERhdGE/OiB7XG4gICAgc3R5bGVUeXBlOiBzdHJpbmc7XG4gIH07XG59O1xuXG5hc3luYyBmdW5jdGlvbiBleGVjdXRlQmFzZW1hcCh7c3R5bGVUeXBlfSk6IFByb21pc2U8RXhlY3V0ZUJhc2VtYXBSZXN1bHQ+IHtcbiAgdHJ5IHtcbiAgICAvLyBjaGVjayBpZiBzdHlsZVR5cGUgaXMgdmFsaWRcbiAgICBpZiAoIURFRkFVTFRfTUFQX1NUWUxFUy5maW5kKHN0eWxlID0+IHN0eWxlLmlkID09PSBzdHlsZVR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYmFzZW1hcCBzdHlsZTogJHtzdHlsZVR5cGV9LmApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsbG1SZXN1bHQ6IHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICBkZXRhaWxzOiBgYmFzZW1hcCBzdHlsZSBjaGFuZ2VkIHRvICR7c3R5bGVUeXBlfS5gXG4gICAgICB9LFxuICAgICAgYWRkaXRpb25hbERhdGE6IHtcbiAgICAgICAgc3R5bGVUeXBlXG4gICAgICB9XG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGxtUmVzdWx0OiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgIGRldGFpbHM6IGBFcnJvciBjaGFuZ2luZyBiYXNlbWFwIHN0eWxlOiAke2Vycm9yfWAsXG4gICAgICAgIGluc3RydWN0aW9uOlxuICAgICAgICAgICdUcnkgdG8gZml4IHRoZSBlcnJvci4gSWYgdGhlIGVycm9yIHBlcnNpc3RzLCBwYXVzZSB0aGUgZXhlY3V0aW9uIGFuZCBhc2sgdGhlIHVzZXIgdG8gdHJ5IHdpdGggZGlmZmVyZW50IHByb21wdCBhbmQgY29udGV4dC4nXG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQmFzZW1hcFRvb2xDb21wb25lbnQoe3N0eWxlVHlwZX0pIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZGlzcGF0Y2gobWFwU3R5bGVDaGFuZ2Uoc3R5bGVUeXBlKSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSxJQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxJQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxNQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxJQUFBLEdBQUFMLE9BQUE7QUFSQTtBQUNBOztBQVNPLElBQU1NLE9BQU8sR0FBQUMsT0FBQSxDQUFBRCxPQUFBLEdBQUcsSUFBQUUsbUJBQVksRUFBQztFQUNsQ0MsV0FBVyxFQUFFLGdCQUFnQjtFQUM3QkMsVUFBVSxFQUFFQyxNQUFDLENBQUNDLE1BQU0sQ0FBQztJQUNuQkMsU0FBUyxFQUFFRixNQUFDLFFBQUssQ0FBQyxDQUNoQixRQUFRLEVBQ1IsYUFBYSxFQUNiLFVBQVUsRUFDVixTQUFTLEVBQ1QsV0FBVyxFQUNYLE1BQU0sRUFDTixPQUFPLEVBQ1AsT0FBTyxFQUNQLGFBQWEsQ0FDZDtFQUNILENBQUMsQ0FBQztFQUNGRyxPQUFPLEVBQUVDLGNBQWM7RUFDdkJDLFNBQVMsRUFBRUM7QUFDYixDQUFDLENBQUM7QUFBQyxTQWdCWUYsY0FBY0EsQ0FBQUcsRUFBQTtFQUFBLE9BQUFDLGVBQUEsQ0FBQUMsS0FBQSxPQUFBQyxTQUFBO0FBQUE7QUFBQSxTQUFBRixnQkFBQTtFQUFBQSxlQUFBLE9BQUFHLGtCQUFBLDJCQUFBQyxZQUFBLFlBQUFDLElBQUEsQ0FBN0IsU0FBQUMsUUFBQUMsSUFBQTtJQUFBLElBQUFiLFNBQUE7SUFBQSxPQUFBVSxZQUFBLFlBQUFJLElBQUEsVUFBQUMsU0FBQUMsUUFBQTtNQUFBLGtCQUFBQSxRQUFBLENBQUFDLElBQUEsR0FBQUQsUUFBQSxDQUFBRSxJQUFBO1FBQUE7VUFBK0JsQixTQUFTLEdBQUFhLElBQUEsQ0FBVGIsU0FBUztVQUFBZ0IsUUFBQSxDQUFBQyxJQUFBO1VBQUEsSUFHL0JFLHVCQUFrQixDQUFDQyxJQUFJLENBQUMsVUFBQUMsS0FBSztZQUFBLE9BQUlBLEtBQUssQ0FBQ0MsRUFBRSxLQUFLdEIsU0FBUztVQUFBLEVBQUM7WUFBQWdCLFFBQUEsQ0FBQUUsSUFBQTtZQUFBO1VBQUE7VUFBQSxNQUNyRCxJQUFJSyxLQUFLLDJCQUFBQyxNQUFBLENBQTJCeEIsU0FBUyxNQUFHLENBQUM7UUFBQTtVQUFBLE9BQUFnQixRQUFBLENBQUFTLE1BQUEsV0FHbEQ7WUFDTEMsU0FBUyxFQUFFO2NBQ1RDLE9BQU8sRUFBRSxJQUFJO2NBQ2IzQixTQUFTLEVBQVRBLFNBQVM7Y0FDVDRCLE9BQU8sOEJBQUFKLE1BQUEsQ0FBOEJ4QixTQUFTO1lBQ2hELENBQUM7WUFDRDZCLGNBQWMsRUFBRTtjQUNkN0IsU0FBUyxFQUFUQTtZQUNGO1VBQ0YsQ0FBQztRQUFBO1VBQUFnQixRQUFBLENBQUFDLElBQUE7VUFBQUQsUUFBQSxDQUFBYyxFQUFBLEdBQUFkLFFBQUE7VUFBQSxPQUFBQSxRQUFBLENBQUFTLE1BQUEsV0FFTTtZQUNMQyxTQUFTLEVBQUU7Y0FDVEMsT0FBTyxFQUFFLEtBQUs7Y0FDZDNCLFNBQVMsRUFBVEEsU0FBUztjQUNUNEIsT0FBTyxtQ0FBQUosTUFBQSxDQUFBUixRQUFBLENBQUFjLEVBQUEsQ0FBMEM7Y0FDakRDLFdBQVcsRUFDVDtZQUNKO1VBQ0YsQ0FBQztRQUFBO1FBQUE7VUFBQSxPQUFBZixRQUFBLENBQUFnQixJQUFBO01BQUE7SUFBQSxHQUFBcEIsT0FBQTtFQUFBLENBRUo7RUFBQSxPQUFBTixlQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBO0FBRU0sU0FBU0osb0JBQW9CQSxDQUFBNkIsS0FBQSxFQUFjO0VBQUEsSUFBWmpDLFNBQVMsR0FBQWlDLEtBQUEsQ0FBVGpDLFNBQVM7RUFDN0MsSUFBTWtDLFFBQVEsR0FBRyxJQUFBQyxnQkFBVyxFQUFDLENBQUM7RUFFOUIsSUFBQUMsZ0JBQVMsRUFBQyxZQUFNO0lBQ2RGLFFBQVEsQ0FBQyxJQUFBRyxvQkFBYyxFQUFDckMsU0FBUyxDQUFDLENBQUM7SUFDbkM7RUFDRixDQUFDLEVBQUUsRUFBRSxDQUFDO0VBRU4sT0FBTyxJQUFJO0FBQ2IiLCJpZ25vcmVMaXN0IjpbXX0=