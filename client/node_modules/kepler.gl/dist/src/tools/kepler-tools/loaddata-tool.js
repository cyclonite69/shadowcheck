"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadDataToolComponent = LoadDataToolComponent;
exports.loadData = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react");
var _lib = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-redux/lib");
var _utils = require("@openassistant/utils");
var _zod = require("zod");
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/actions/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/processors/src");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var loadData = exports.loadData = (0, _utils.extendedTool)({
  description: "Load dataset from a URL in kepler.gl.",
  parameters: _zod.z.object({
    url: _zod.z.string().describe('The URL or file path to load data from')
  }),
  execute: executeLoadData,
  context: {
    getLoaders: function getLoaders() {
      throw new Error('getLoaders() not implemented.');
    }
  },
  component: LoadDataToolComponent
});
function isLoadDataContext(context) {
  return context && typeof context.getLoaders === 'function';
}
function executeLoadData(_x, _x2) {
  return _executeLoadData.apply(this, arguments);
}
function _executeLoadData() {
  _executeLoadData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref, options) {
    var url, getLoaders, _getLoaders, loaders, loadOptions, response, blob, fileName, file, batches, result, content, parsedData, dataInfo, errorMessage;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          url = _ref.url;
          _context.prev = 1;
          if (isLoadDataContext(options.context)) {
            _context.next = 4;
            break;
          }
          throw new Error('Invalid load data context. Please provide a valid context.');
        case 4:
          getLoaders = options.context.getLoaders;
          _getLoaders = getLoaders(), loaders = _getLoaders.loaders, loadOptions = _getLoaders.loadOptions; // Validate URL
          _context.prev = 6;
          new URL(url);
          _context.next = 13;
          break;
        case 10:
          _context.prev = 10;
          _context.t0 = _context["catch"](6);
          throw new Error("Invalid URL: ".concat(url));
        case 13:
          _context.next = 15;
          return fetch(url);
        case 15:
          response = _context.sent;
          if (response.ok) {
            _context.next = 18;
            break;
          }
          throw new Error("Failed to fetch data from ".concat(url, ": ").concat(response.statusText));
        case 18:
          _context.next = 20;
          return response.blob();
        case 20:
          blob = _context.sent;
          fileName = url.split('/').pop() || 'data'; // Create file object
          file = new File([blob], fileName); // Process file data
          _context.next = 25;
          return (0, _src2.readFileInBatches)({
            file: file,
            fileCache: [],
            loaders: loaders !== null && loaders !== void 0 ? loaders : [],
            loadOptions: loadOptions !== null && loadOptions !== void 0 ? loadOptions : {}
          });
        case 25:
          batches = _context.sent;
          _context.next = 28;
          return batches.next();
        case 28:
          result = _context.sent;
          content = {
            data: [],
            fileName: ''
          };
          parsedData = [];
        case 31:
          if (result.done) {
            _context.next = 43;
            break;
          }
          content = result.value;
          _context.next = 35;
          return batches.next();
        case 35:
          result = _context.sent;
          if (!result.done) {
            _context.next = 41;
            break;
          }
          _context.next = 39;
          return (0, _src2.processFileData)({
            content: content,
            fileCache: []
          });
        case 39:
          parsedData = _context.sent;
          return _context.abrupt("break", 43);
        case 41:
          _context.next = 31;
          break;
        case 43:
          // get metadata for LLM
          dataInfo = parsedData[0].info;
          return _context.abrupt("return", {
            llmResult: {
              success: true,
              url: url,
              details: "Successfully loaded data from ".concat(url),
              dataInfo: dataInfo
            },
            additionalData: {
              parsedData: parsedData
            }
          });
        case 47:
          _context.prev = 47;
          _context.t1 = _context["catch"](1);
          errorMessage = _context.t1 instanceof Error ? _context.t1.message : 'Unknown error occurred';
          return _context.abrupt("return", {
            llmResult: {
              success: false,
              url: url,
              details: "Error loading data: ".concat(errorMessage),
              instruction: 'Try to fix the error. If the error persists, pause the execution and ask the user to try with different URL or format.'
            }
          });
        case 51:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 47], [6, 10]]);
  }));
  return _executeLoadData.apply(this, arguments);
}
function LoadDataToolComponent(_ref2) {
  var parsedData = _ref2.parsedData;
  var dispatch = (0, _lib.useDispatch)();
  (0, _react.useEffect)(function () {
    dispatch((0, _src.addDataToMap)({
      datasets: parsedData,
      options: {
        autoCreateLayers: true,
        centerMap: true
      }
    }));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,