"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TOOLTIP_MINUS_SIGN = exports.NEGATIVE_SIGNS = exports.BRUSH_CONFIG = void 0;
exports.findFieldsToShow = findFieldsToShow;
exports.getTooltipDisplayDeltaValue = getTooltipDisplayDeltaValue;
exports.getTooltipDisplayValue = getTooltipDisplayValue;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _src3 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/common-utils/src");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 * Minus sign used in tooltip formatting.
 * \u2212 or \u002D is the minus sign that d3-format uses for decimal number formatting
 * d3-format 2.0 uses \u002D
 */
var TOOLTIP_MINUS_SIGN = exports.TOOLTIP_MINUS_SIGN = "\u2212";
// both are posible negative signs
var NEGATIVE_SIGNS = exports.NEGATIVE_SIGNS = ["-", "\u2212"];
var BRUSH_CONFIG = exports.BRUSH_CONFIG = {
  range: [0, 50]
};
function findFieldsToShow(_ref) {
  var fields = _ref.fields,
    id = _ref.id,
    maxDefaultTooltips = _ref.maxDefaultTooltips;
  // first find default tooltip fields for trips
  var fieldsToShow = _src.DEFAULT_TOOLTIP_FIELDS.reduce(function (prev, curr) {
    if (fields.find(function (_ref2) {
      var name = _ref2.name;
      return curr.name === name;
    })) {
      // @ts-ignore
      prev.push(curr);
    }
    return prev;
  }, []);
  return (0, _defineProperty2["default"])({}, id, fieldsToShow.length ? fieldsToShow : autoFindTooltipFields(fields, maxDefaultTooltips));
}
function autoFindTooltipFields(fields, maxDefaultTooltips) {
  var ptFields = _mergeFieldPairs(_src.TRIP_POINT_FIELDS);
  // filter out the default fields that contains lat and lng and any geometry
  var fieldsToShow = fields.filter(function (_ref4) {
    var name = _ref4.name,
      type = _ref4.type;
    return name.replace(/[_,.]+/g, ' ').trim().split(' ').every(function (seg) {
      return !ptFields.includes(seg);
    }) && type !== _src.ALL_FIELD_TYPES.geojson && type !== _src.ALL_FIELD_TYPES.geoarrow && type !== 'object';
  });
  return fieldsToShow.slice(0, maxDefaultTooltips).map(function (_ref5) {
    var name = _ref5.name;
    return {
      name: name,
      format: null
    };
  });
}
function _mergeFieldPairs(pairs) {
  return pairs.reduce(function (prev, pair) {
    return [].concat((0, _toConsumableArray2["default"])(prev), (0, _toConsumableArray2["default"])(pair));
  }, []);
}
function getTooltipDisplayDeltaValue(_ref6) {
  var field = _ref6.field,
    value = _ref6.value,
    primaryValue = _ref6.primaryValue,
    compareType = _ref6.compareType;
  var displayDeltaValue = null;
  if (
  // comparison mode only works for numeric field
  field.type === _src.ALL_FIELD_TYPES.integer || field.type === _src.ALL_FIELD_TYPES.real) {
    if ((0, _src2.isNumber)(primaryValue) && (0, _src2.isNumber)(value)) {
      var deltaValue = compareType === _src.COMPARE_TYPES.RELATIVE ? value / primaryValue - 1 : value - primaryValue;
      var deltaFormat = compareType === _src.COMPARE_TYPES.RELATIVE ? _src.TOOLTIP_FORMATS.DECIMAL_PERCENT_FULL_2[_src.TOOLTIP_KEY] : field.displayFormat || _src.TOOLTIP_FORMATS.DECIMAL_DECIMAL_FIXED_3[_src.TOOLTIP_KEY];
      displayDeltaValue = (0, _src2.getFormatter)(deltaFormat, field)(deltaValue);

      // safely cast string
      displayDeltaValue = (0, _src2.defaultFormatter)(displayDeltaValue);
      var deltaFirstChar = displayDeltaValue.charAt(0);
      if (deltaFirstChar !== '+' && !NEGATIVE_SIGNS.includes(deltaFirstChar)) {
        displayDeltaValue = "+".concat(displayDeltaValue);
      }
    } else {
      displayDeltaValue = TOOLTIP_MINUS_SIGN;
    }
  }
  return displayDeltaValue;
}
function getTooltipDisplayValue(_ref7) {
  var item = _ref7.item,
    field = _ref7.field,
    value = _ref7.value;
  if (!(0, _src3.notNullorUndefined)(value)) {
    return '';
  }
  return item !== null && item !== void 0 && item.format ? (0, _src2.getFormatter)(item === null || item === void 0 ? void 0 : item.format, field)(value) : field.displayFormat ? (0, _src2.getFormatter)(field.displayFormat, field)(value) : (0, _src2.parseFieldValue)(value, field.type);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,