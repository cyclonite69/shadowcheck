"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _src3 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/common-utils/src");
var _animationController = _interopRequireDefault(require("./common/animation-control/animation-controller"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

LayerAnimationControllerFactory.deps = [_animationController["default"]];
function LayerAnimationControllerFactory(AnimationController) {
  var LayerAnimationController = function LayerAnimationController(_ref) {
    var animationConfig = _ref.animationConfig,
      setLayerAnimationTime = _ref.setLayerAnimationTime,
      children = _ref.children;
    var timeSteps = animationConfig.timeSteps,
      domain = animationConfig.domain;
    var setTimelineValue = (0, _react.useCallback)(function (value) {
      var timelineValue = (0, _src3.toArray)(value)[0];
      if (Array.isArray(timeSteps)) {
        setLayerAnimationTime((0, _src2.snapToMarks)(timelineValue, timeSteps));

        // TODO: merge slider in to avoid this step
      } else if (domain && timelineValue >= domain[0] && timelineValue <= domain[1]) {
        setLayerAnimationTime(timelineValue);
      }
    }, [domain, setLayerAnimationTime, timeSteps]);
    var timeline = (0, _src2.getTimelineFromAnimationConfig)(animationConfig);
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "layer-control",
      value: Number(animationConfig.currentTime),
      domain: animationConfig.domain,
      speed: animationConfig.speed,
      isAnimating: animationConfig.isAnimating,
      steps: animationConfig.timeSteps,
      animationWindow: animationConfig.timeSteps ? _src.ANIMATION_WINDOW.interval : _src.ANIMATION_WINDOW.point,
      setTimelineValue: setTimelineValue,
      timeline: timeline,
      children: children
    });
  };
  return LayerAnimationController;
}
var _default = exports["default"] = LayerAnimationControllerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfc3JjIiwiX3NyYzIiLCJfc3JjMyIsIl9hbmltYXRpb25Db250cm9sbGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIkxheWVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkiLCJkZXBzIiwiQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkiLCJBbmltYXRpb25Db250cm9sbGVyIiwiTGF5ZXJBbmltYXRpb25Db250cm9sbGVyIiwiX3JlZiIsImFuaW1hdGlvbkNvbmZpZyIsInNldExheWVyQW5pbWF0aW9uVGltZSIsImNoaWxkcmVuIiwidGltZVN0ZXBzIiwiZG9tYWluIiwic2V0VGltZWxpbmVWYWx1ZSIsInVzZUNhbGxiYWNrIiwidmFsdWUiLCJ0aW1lbGluZVZhbHVlIiwidG9BcnJheSIsIkFycmF5IiwiaXNBcnJheSIsInNuYXBUb01hcmtzIiwidGltZWxpbmUiLCJnZXRUaW1lbGluZUZyb21BbmltYXRpb25Db25maWciLCJjcmVhdGVFbGVtZW50Iiwia2V5IiwiTnVtYmVyIiwiY3VycmVudFRpbWUiLCJzcGVlZCIsImlzQW5pbWF0aW5nIiwic3RlcHMiLCJhbmltYXRpb25XaW5kb3ciLCJBTklNQVRJT05fV0lORE9XIiwiaW50ZXJ2YWwiLCJwb2ludCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL3NyYy9sYXllci1hbmltYXRpb24tY29udHJvbGxlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2t9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7QU5JTUFUSU9OX1dJTkRPV30gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtBbmltYXRpb25Db25maWcsIFRpbWVsaW5lfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCB7c25hcFRvTWFya3MsIGdldFRpbWVsaW5lRnJvbUFuaW1hdGlvbkNvbmZpZ30gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5pbXBvcnQge3RvQXJyYXl9IGZyb20gJ0BrZXBsZXIuZ2wvY29tbW9uLXV0aWxzJztcbmltcG9ydCBBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSBmcm9tICcuL2NvbW1vbi9hbmltYXRpb24tY29udHJvbC9hbmltYXRpb24tY29udHJvbGxlcic7XG5cbmludGVyZmFjZSBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJQcm9wcyB7XG4gIGFuaW1hdGlvbkNvbmZpZzogQW5pbWF0aW9uQ29uZmlnO1xuICBzZXRMYXllckFuaW1hdGlvblRpbWU6ICh4OiBudW1iZXIpID0+IHZvaWQ7XG4gIGNoaWxkcmVuPzogKFxuICAgIGlzQW5pbWF0aW5nOiBib29sZWFuIHwgdW5kZWZpbmVkLFxuICAgIHN0YXJ0QW5pbWF0aW9uOiAoKSA9PiB2b2lkLFxuICAgIHBhdXNlQW5pbWF0aW9uOiAoKSA9PiB2b2lkLFxuICAgIHJlc2V0QW5pbWF0aW9uOiAoKSA9PiB2b2lkLFxuICAgIHRpbWVsaW5lOiBUaW1lbGluZSB8IHVuZGVmaW5lZCxcbiAgICBzZXRUaW1lbGluZVZhbHVlOiAoeDogbnVtYmVyIHwgbnVtYmVyW10pID0+IHZvaWRcbiAgKSA9PiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsO1xufVxuXG5MYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5LmRlcHMgPSBbQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnldO1xuXG5mdW5jdGlvbiBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5KFxuICBBbmltYXRpb25Db250cm9sbGVyOiBSZXR1cm5UeXBlPHR5cGVvZiBBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeT5cbikge1xuICBjb25zdCBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXI6IFJlYWN0LkZDPExheWVyQW5pbWF0aW9uQ29udHJvbGxlclByb3BzPiA9ICh7XG4gICAgYW5pbWF0aW9uQ29uZmlnLFxuICAgIHNldExheWVyQW5pbWF0aW9uVGltZSxcbiAgICBjaGlsZHJlblxuICB9KSA9PiB7XG4gICAgY29uc3Qge3RpbWVTdGVwcywgZG9tYWlufSA9IGFuaW1hdGlvbkNvbmZpZztcblxuICAgIGNvbnN0IHNldFRpbWVsaW5lVmFsdWUgPSB1c2VDYWxsYmFjayhcbiAgICAgICh2YWx1ZTogbnVtYmVyIHwgbnVtYmVyW10pID0+IHtcbiAgICAgICAgY29uc3QgdGltZWxpbmVWYWx1ZSA9IHRvQXJyYXkodmFsdWUpWzBdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aW1lU3RlcHMpKSB7XG4gICAgICAgICAgc2V0TGF5ZXJBbmltYXRpb25UaW1lKHNuYXBUb01hcmtzKHRpbWVsaW5lVmFsdWUsIHRpbWVTdGVwcykpO1xuXG4gICAgICAgICAgLy8gVE9ETzogbWVyZ2Ugc2xpZGVyIGluIHRvIGF2b2lkIHRoaXMgc3RlcFxuICAgICAgICB9IGVsc2UgaWYgKGRvbWFpbiAmJiB0aW1lbGluZVZhbHVlID49IGRvbWFpblswXSAmJiB0aW1lbGluZVZhbHVlIDw9IGRvbWFpblsxXSkge1xuICAgICAgICAgIHNldExheWVyQW5pbWF0aW9uVGltZSh0aW1lbGluZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFtkb21haW4sIHNldExheWVyQW5pbWF0aW9uVGltZSwgdGltZVN0ZXBzXVxuICAgICk7XG5cbiAgICBjb25zdCB0aW1lbGluZSA9IGdldFRpbWVsaW5lRnJvbUFuaW1hdGlvbkNvbmZpZyhhbmltYXRpb25Db25maWcpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBbmltYXRpb25Db250cm9sbGVyXG4gICAgICAgIGtleT1cImxheWVyLWNvbnRyb2xcIlxuICAgICAgICB2YWx1ZT17TnVtYmVyKGFuaW1hdGlvbkNvbmZpZy5jdXJyZW50VGltZSl9XG4gICAgICAgIGRvbWFpbj17YW5pbWF0aW9uQ29uZmlnLmRvbWFpbn1cbiAgICAgICAgc3BlZWQ9e2FuaW1hdGlvbkNvbmZpZy5zcGVlZH1cbiAgICAgICAgaXNBbmltYXRpbmc9e2FuaW1hdGlvbkNvbmZpZy5pc0FuaW1hdGluZ31cbiAgICAgICAgc3RlcHM9e2FuaW1hdGlvbkNvbmZpZy50aW1lU3RlcHN9XG4gICAgICAgIGFuaW1hdGlvbldpbmRvdz17XG4gICAgICAgICAgYW5pbWF0aW9uQ29uZmlnLnRpbWVTdGVwcyA/IEFOSU1BVElPTl9XSU5ET1cuaW50ZXJ2YWwgOiBBTklNQVRJT05fV0lORE9XLnBvaW50XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZWxpbmVWYWx1ZT17c2V0VGltZWxpbmVWYWx1ZX1cbiAgICAgICAgdGltZWxpbmU9e3RpbWVsaW5lfVxuICAgICAgICBjaGlsZHJlbj17Y2hpbGRyZW59XG4gICAgICAvPlxuICAgICk7XG4gIH07XG4gIHJldHVybiBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExheWVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3Rvcnk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsSUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsS0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsS0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksb0JBQUEsR0FB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