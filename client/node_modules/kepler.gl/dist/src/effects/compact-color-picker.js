"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledPanelDropdown = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _styledComponents2 = require("../common/styled-components");
var _portaled = _interopRequireDefault(require("../common/portaled"));
var _singleColorPalette = _interopRequireDefault(require("../side-panel/layer-panel/single-color-palette"));
var _templateObject, _templateObject2, _templateObject3, _templateObject4; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledPanelDropdown = exports.StyledPanelDropdown = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  ", "\n  background-color: ", ";\n  box-shadow: ", ";\n  border-radius: ", ";\n  overflow-y: auto;\n  max-height: 500px;\n  position: relative;\n  z-index: 999;\n  width: 220px;\n"])), function (props) {
  return props.theme.panelDropdownScrollBar;
}, function (props) {
  return props.theme.panelBackground;
}, function (props) {
  return props.theme.panelBoxShadow;
}, function (props) {
  return props.theme.panelBorderRadius;
});
var StyledConfigSection = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n"])));
var SectionTitle = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: ", ";\n  color: ", ";\n  margin-bottom: 8px;\n"])), function (props) {
  return props.theme.inputFontSize;
}, function (props) {
  return props.theme.effectPanelTextSecondary2;
});
var StyledDropdownButtonWrapper = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  align-self: flex-start;\n  .button {\n    color: ", ";\n    display: flex;\n    gap: 5px;\n    border: none;\n    transition: background 0.2s;\n    background-color: ", ";\n    padding: 8px 5px 8px 10px;\n    &:active {\n      color: ", ";\n      background-color: ", ";\n    }\n    &:hover {\n      color: ", ";\n      background-color: ", ";\n    }\n    & > svg {\n      margin-right: 0;\n    }\n  }\n"])), function (props) {
  return props.theme.effectPanelTextSecondary2;
}, function (props) {
  return props.theme.inputBgd;
}, function (props) {
  return props.theme.effectPanelTextMain;
}, function (props) {
  return props.theme.inputBgdHover;
}, function (props) {
  return props.theme.effectPanelTextMain;
}, function (props) {
  return props.theme.inputBgdHover;
});
var DEFAULT_OFFSET = {
  top: 0,
  left: 0
};
var SingleColorPickerDropdown = function SingleColorPickerDropdown(_ref) {
  var isOpened = _ref.isOpened,
    onClose = _ref.onClose,
    selectedColor = _ref.selectedColor,
    onSelectColor = _ref.onSelectColor,
    _ref$offset = _ref.offset,
    offset = _ref$offset === void 0 ? DEFAULT_OFFSET : _ref$offset;
  var onSelectColorCb = (0, _react.useCallback)(function (v) {
    onSelectColor(v);
  }, [onSelectColor]);
  return /*#__PURE__*/_react["default"].createElement(_portaled["default"], {
    top: offset.top,
    left: offset.left,
    isOpened: isOpened,
    onClose: onClose
  }, /*#__PURE__*/_react["default"].createElement(StyledPanelDropdown, null, /*#__PURE__*/_react["default"].createElement(_singleColorPalette["default"], {
    selectedColor: selectedColor,
    onSelectColor: onSelectColorCb
  })));
};
var CompactColorPicker = function CompactColorPicker(_ref2) {
  var color = _ref2.color,
    onSetColor = _ref2.onSetColor,
    Icon = _ref2.Icon,
    label = _ref2.label;
  var _React$useState = _react["default"].useState(false),
    _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
    isColorPickerOpened = _React$useState2[0],
    setIsColorPickerOpened = _React$useState2[1];
  var hexColor = (0, _react.useMemo)(function () {
    return (0, _src.rgbToHex)(color);
  }, [color]);
  var colorBlockStyle = (0, _react.useMemo)(function () {
    return {
      width: 16,
      height: 16,
      backgroundColor: hexColor,
      borderRadius: 2
    };
  }, [hexColor]);
  var toggleDropdown = (0, _react.useCallback)(function () {
    setIsColorPickerOpened(!isColorPickerOpened);
  }, [isColorPickerOpened, setIsColorPickerOpened]);
  var closeDropdown = (0, _react.useCallback)(function () {
    setIsColorPickerOpened(false);
  }, [setIsColorPickerOpened]);
  return /*#__PURE__*/_react["default"].createElement(StyledConfigSection, null, /*#__PURE__*/_react["default"].createElement(SectionTitle, null, label), /*#__PURE__*/_react["default"].createElement(StyledDropdownButtonWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.Button, {
    onClick: toggleDropdown
  }, /*#__PURE__*/_react["default"].createElement("div", {
    style: colorBlockStyle
  }), /*#__PURE__*/_react["default"].createElement(Icon, null))), /*#__PURE__*/_react["default"].createElement(SingleColorPickerDropdown, {
    isOpened: isColorPickerOpened,
    onClose: closeDropdown,
    selectedColor: hexColor,
    onSelectColor: onSetColor
  }));
};
var _default = exports["default"] = CompactColorPicker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,