"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = EffectTimeConfiguratorFactory;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactIntl = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-intl");
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _momentTimezone = _interopRequireDefault(require("moment-timezone"));
var _suncalc = _interopRequireDefault(require("suncalc"));
var _src = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _src2 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _src3 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _src4 = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/reducers/src");
var _injector = require("../injector");
var _styledComponents2 = require("../common/styled-components");
var _checkbox = _interopRequireDefault(require("../common/checkbox"));
var _button = _interopRequireDefault(require("../common/data-table/button"));
var _icons = require("../common/icons");
var _timezoneSelector = _interopRequireDefault(require("./timezone-selector"));
var _effectTimeSlider = _interopRequireDefault(require("./effect-time-slider"));
var _effectTimeSelector = _interopRequireDefault(require("./effect-time-selector"));
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var DAY_MILISECONDS = 1000 * 60 * 60 * 24;
var StyledWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: ", "px;\n  ", "\n"])), function (props) {
  var _props$marginBottom;
  return (_props$marginBottom = props.marginBottom) !== null && _props$marginBottom !== void 0 ? _props$marginBottom : 9;
}, function (props) {
  return props.hidden ? 'display: none;' : '';
});
var SliderWrapper = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-top: 13px;\n  margin-bottom: 12px;\n  ", "\n"])), function (props) {
  return props.hidden ? 'display: none;' : '';
});
var StyledButton = (0, _styledComponents["default"])(_button["default"])(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  background-color: ", ";\n  height: 32px;\n  width: 32px;\n  padding: 5px;\n  border-radius: 4px;\n  justify-content: center;\n  &:hover {\n    color: ", ";\n    background-color: ", ";\n  }\n"])), function (props) {
  return props.theme.effectPanelTextSecondary2;
}, function (props) {
  return props.theme.inputBgd;
}, function (props) {
  return props.theme.effectPanelTextMain;
}, function (props) {
  return props.theme.inputBgdHover;
});
var StyledRadio = (0, _styledComponents["default"])(_checkbox["default"])(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  .kg-checkbox__label {\n    font-family: ", ";\n    font-size: ", ";\n  }\n  .kg-checkbox__label:before {\n    background: transparent;\n    border-color: ", ";\n  }\n  input:checked + .kg-checkbox__label:before {\n    border-color: ", ";\n  }\n  .kg-checkbox__label:after {\n    background-color: ", ";\n  }\n"])), function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.inputFontSize;
}, function (props) {
  return props.theme.effectPanelTextSecondary2;
}, function (props) {
  return props.theme.activeColor;
}, function (props) {
  return props.theme.activeColor;
});
var StyledEffectTimeConfigurator = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: 8px;\n  margin-top: 3px;\n"])));
var StyledDatePicker = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  .react-date-picker--open .react-date-picker__wrapper .react-date-picker__inputGroup {\n    border: 1px solid ", ";\n    border-radius: 4px 4px 0px 0px !important;\n  }\n  .react-calendar__navigation__prev2-button,\n  .react-calendar__navigation__next2-button {\n    display: none;\n  }\n  .react-calendar__navigation__label {\n    position: absolute;\n    top: 20px;\n  }\n  .react-calendar__navigation__arrow {\n    position: absolute;\n    top: 18px;\n    font-size: 16px;\n  }\n  .react-calendar__navigation__prev-button {\n    right: 36px;\n  }\n  .react-calendar__navigation__next-button {\n    right: 12px;\n  }\n"])), function (props) {
  return props.theme.activeColor;
});
var WithIconWrapper = _styledComponents["default"].div(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  ", "\n"])), function (props) {
  return props.width ? "width: ".concat(props.width) : '';
});
var StyledExtraIcon = _styledComponents["default"].div(_templateObject8 || (_templateObject8 = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  top: 0px;\n  left: 8px;\n  width: 0px;\n  height: 32px;\n  color: ", ";\n  pointer-events: none;\n"])), function (props) {
  return props.theme.effectPanelTextSecondary2;
});
var TextBlock = _styledComponents["default"].div(_templateObject9 || (_templateObject9 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  width: ", ";\n  font-size: ", ";\n"])), function (props) {
  return props.theme.effectPanelTextSecondary2;
}, function (props) {
  return props.width;
}, function (props) {
  return props.theme.inputFontSize;
});

/**
 * Converts date, time and timezone into a UTC timestamp.
 * @param dateStr Date string in YYYY-MM-DD format.
 * @param timeStr Time string in HH:MM format.
 * @param timezone Timezone name.
 * @returns Timestamp or null if case of bad inputs.
 */
var getTimestamp = function getTimestamp(dateStr, timeStr, timezone) {
  var timestamp = null;
  var curr = _momentTimezone["default"].tz("".concat(dateStr, "T").concat(timeStr, ":00"), timezone);
  if (curr.isValid()) {
    timestamp = curr.utc().valueOf();
  }
  return timestamp;
};

/**
 * Converts time of the day into [0, 1] range
 * @param date
 * @returns
 */
var getDayRatio = function getDayRatio(date) {
  return (date.hours() * 60 + date.minutes()) * 60 * 1000 / DAY_MILISECONDS;
};
EffectTimeConfiguratorFactory.deps = [_timezoneSelector["default"], _effectTimeSlider["default"], _effectTimeSelector["default"]];
function EffectTimeConfiguratorFactory(TimezoneSelector, EffectTimeSlider, EffectTimeSelector) {
  var EffectTimeConfigurator = function EffectTimeConfigurator(_ref) {
    var timestamp = _ref.timestamp,
      _timezone = _ref.timezone,
      timeMode = _ref.timeMode,
      onTimeParametersChanged = _ref.onChange,
      mapState = _ref.mapState,
      intl = _ref.intl;
    var timezone = (0, _react.useMemo)(function () {
      return _momentTimezone["default"].tz.names().includes(_timezone) ? _timezone : _src3.DEFAULT_TIMEZONE;
    }, [_timezone]);
    var _useMemo = (0, _react.useMemo)(function () {
        var currentMoment = _momentTimezone["default"].tz(timestamp, timezone);

        // Slider value from 0 to 1
        var dayProgress = getDayRatio(currentMoment);

        // Date picker always renders Date in local timezone
        var date = new Date();
        date.setFullYear(currentMoment.year(), currentMoment.month(), currentMoment.date());
        date.setHours(0, 0, 0, 0);
        return [date, currentMoment.toDate(), currentMoment.format('HH:mm'), currentMoment.format('YYYY-MM-DD'), dayProgress];
      }, [timestamp, timezone]),
      _useMemo2 = (0, _slicedToArray2["default"])(_useMemo, 5),
      datePickerDate = _useMemo2[0],
      fullDate = _useMemo2[1],
      formattedTime = _useMemo2[2],
      formattedDate = _useMemo2[3],
      dayTimeProgress = _useMemo2[4];
    var timeSliderConfig = (0, _react.useMemo)(function () {
      var times = _suncalc["default"].getTimes(fullDate, mapState.latitude, mapState.longitude);
      var dawn = times.dawn,
        sunrise = times.sunrise,
        sunset = times.sunset,
        dusk = times.dusk;
      return {
        dawn: getDayRatio(_momentTimezone["default"].tz(dawn.valueOf(), timezone)),
        sunrise: getDayRatio(_momentTimezone["default"].tz(sunrise.valueOf(), timezone)),
        sunset: getDayRatio(_momentTimezone["default"].tz(sunset.valueOf(), timezone)),
        dusk: getDayRatio(_momentTimezone["default"].tz(dusk.valueOf(), timezone)),
        sunriseTime: _momentTimezone["default"].tz(sunrise.valueOf(), timezone).format('hh:mm A'),
        sunsetTime: _momentTimezone["default"].tz(sunset.valueOf(), timezone).format('hh:mm A')
      };
    }, [fullDate, timezone, mapState.latitude, mapState.longitude]);
    var onTimeSliderChange = (0, _react.useCallback)(function (value) {
      var hours = (0, _src2.clamp)([0, 23], Math.floor(value[1] * 24));
      var minutes = (0, _src2.clamp)([0, 59], Math.floor((value[1] * 24 - hours) * 60));
      var newFormattedTime = "".concat(hours < 10 ? "0".concat(hours) : hours, ":").concat(minutes < 10 ? "0".concat(minutes) : minutes);
      var newTimestamp = getTimestamp(formattedDate, newFormattedTime, timezone);
      onTimeParametersChanged({
        timestamp: newTimestamp
      });
    }, [formattedDate, timezone, onTimeParametersChanged]);
    var setDate = (0, _react.useCallback)(function (newDate) {
      if (!newDate) return;
      var newFormattedDate = (0, _momentTimezone["default"])(newDate).format('YYYY-MM-DD');
      var newTimestamp = getTimestamp(newFormattedDate, formattedTime, timezone);
      onTimeParametersChanged({
        timestamp: newTimestamp
      });
    }, [formattedTime, timezone, onTimeParametersChanged]);
    var setTime = (0, _react.useCallback)(function (newTime) {
      if (!newTime) return;
      var newTimestamp = getTimestamp(formattedDate, newTime, timezone);
      onTimeParametersChanged({
        timestamp: newTimestamp
      });
    }, [formattedDate, timezone, onTimeParametersChanged]);
    var setTimezone = (0, _react.useCallback)(function (newTimezone) {
      if (!newTimezone) return;
      var newTimestamp = getTimestamp(formattedDate, formattedTime, newTimezone);
      // date and time are adjusted to have the same value but in the new timezone
      onTimeParametersChanged({
        timestamp: newTimestamp,
        timezone: newTimezone
      });
    }, [formattedDate, formattedTime, onTimeParametersChanged]);
    var setCurrentDateTime = (0, _react.useCallback)(function () {
      onTimeParametersChanged({
        timestamp: new Date().valueOf()
      });
    }, [onTimeParametersChanged]);
    var formatShortWeekday = (0, _react.useCallback)(function (locale, date) {
      return ['S', 'M', 'T', 'W', 'T', 'F', 'S'][date.getDay()];
    }, []);
    var disableDateTimePick = timeMode !== _src3.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.pick;
    return /*#__PURE__*/_react["default"].createElement(StyledEffectTimeConfigurator, null, /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      marginBottom: 16
    }, /*#__PURE__*/_react["default"].createElement(StyledRadio, {
      type: "radio",
      checked: timeMode === _src3.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.pick,
      id: "effect-time-toggle-use-pick-time",
      label: intl.formatMessage({
        id: 'effectManager.pickDateTime'
      }),
      onChange: function onChange() {
        onTimeParametersChanged({
          timeMode: _src3.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.pick
        });
      }
    })), /*#__PURE__*/_react["default"].createElement(SliderWrapper, {
      hidden: disableDateTimePick
    }, /*#__PURE__*/_react["default"].createElement(EffectTimeSlider, {
      value: dayTimeProgress,
      onChange: onTimeSliderChange,
      config: timeSliderConfig
    })), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      hidden: disableDateTimePick,
      marginBottom: 2
    }, /*#__PURE__*/_react["default"].createElement(TextBlock, {
      width: "32px"
    }), /*#__PURE__*/_react["default"].createElement(TextBlock, {
      width: "110px"
    }, /*#__PURE__*/_react["default"].createElement(_src.FormattedMessage, {
      id: 'effectManager.date'
    })), /*#__PURE__*/_react["default"].createElement(TextBlock, {
      width: "110px"
    }, /*#__PURE__*/_react["default"].createElement(_src.FormattedMessage, {
      id: 'effectManager.time'
    }))), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      hidden: disableDateTimePick,
      marginBottom: 16
    }, /*#__PURE__*/_react["default"].createElement(StyledButton, {
      onClick: setCurrentDateTime,
      "data-for": "pick-time-button",
      "data-tip": true
    }, /*#__PURE__*/_react["default"].createElement(_icons.LocationMarker, {
      height: "16px"
    }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
      id: "pick-time-button",
      effect: "solid",
      place: "top",
      delayShow: 500
    }, /*#__PURE__*/_react["default"].createElement(_src.FormattedMessage, {
      id: 'effectManager.pickCurrrentTime'
    }))), /*#__PURE__*/_react["default"].createElement(WithIconWrapper, null, /*#__PURE__*/_react["default"].createElement(StyledDatePicker, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledDatePicker, {
      value: datePickerDate,
      onChange: setDate,
      minDetail: 'month',
      formatShortWeekday: formatShortWeekday
    })), /*#__PURE__*/_react["default"].createElement(StyledExtraIcon, null, /*#__PURE__*/_react["default"].createElement(_icons.Calendar, {
      width: "16px",
      height: "32px"
    }))), /*#__PURE__*/_react["default"].createElement(WithIconWrapper, null, /*#__PURE__*/_react["default"].createElement(EffectTimeSelector, {
      value: formattedTime,
      onChange: setTime
    }), /*#__PURE__*/_react["default"].createElement(StyledExtraIcon, null, /*#__PURE__*/_react["default"].createElement(_icons.Clock, {
      width: "16px",
      height: "32px"
    })))), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      hidden: disableDateTimePick,
      marginBottom: 2
    }, /*#__PURE__*/_react["default"].createElement(TextBlock, null, /*#__PURE__*/_react["default"].createElement(_src.FormattedMessage, {
      id: 'effectManager.timezone'
    }))), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      hidden: disableDateTimePick,
      marginBottom: 24
    }, /*#__PURE__*/_react["default"].createElement(WithIconWrapper, {
      width: '100%'
    }, /*#__PURE__*/_react["default"].createElement(TimezoneSelector, {
      selected: timezone,
      onSelect: setTimezone
    }), /*#__PURE__*/_react["default"].createElement(StyledExtraIcon, null, /*#__PURE__*/_react["default"].createElement(_icons.Globe, {
      width: "16px",
      height: "32px"
    })))), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      marginBottom: 16
    }, /*#__PURE__*/_react["default"].createElement(StyledRadio, {
      type: "radio",
      checked: timeMode === _src3.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.current,
      id: "effect-time-toggle-use-current-time",
      label: intl.formatMessage({
        id: 'effectManager.currentTime'
      }),
      onChange: function onChange() {
        onTimeParametersChanged({
          timeMode: _src3.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.current
        });
      }
    })), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      marginBottom: 16
    }, /*#__PURE__*/_react["default"].createElement(StyledRadio, {
      type: "radio",
      checked: timeMode === _src3.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.animation,
      id: "effect-time-toggle-use-animation-time",
      label: 'Animation time',
      onChange: function onChange() {
        onTimeParametersChanged({
          timeMode: _src3.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.animation
        });
      }
    })));
  };

  // @ts-expect-error how to properly type?
  return (0, _injector.withState)([_src4.mapStateLens])((0, _reactIntl.injectIntl)(EffectTimeConfigurator));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3RJbnRsIiwiX3N0eWxlZENvbXBvbmVudHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX21vbWVudFRpbWV6b25lIiwiX3N1bmNhbGMiLCJfc3JjIiwiX3NyYzIiLCJfc3JjMyIsIl9zcmM0IiwiX2luamVjdG9yIiwiX3N0eWxlZENvbXBvbmVudHMyIiwiX2NoZWNrYm94IiwiX2J1dHRvbiIsIl9pY29ucyIsIl90aW1lem9uZVNlbGVjdG9yIiwiX2VmZmVjdFRpbWVTbGlkZXIiLCJfZWZmZWN0VGltZVNlbGVjdG9yIiwiX3RlbXBsYXRlT2JqZWN0IiwiX3RlbXBsYXRlT2JqZWN0MiIsIl90ZW1wbGF0ZU9iamVjdDMiLCJfdGVtcGxhdGVPYmplY3Q0IiwiX3RlbXBsYXRlT2JqZWN0NSIsIl90ZW1wbGF0ZU9iamVjdDYiLCJfdGVtcGxhdGVPYmplY3Q3IiwiX3RlbXBsYXRlT2JqZWN0OCIsIl90ZW1wbGF0ZU9iamVjdDkiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJEQVlfTUlMSVNFQ09ORFMiLCJTdHlsZWRXcmFwcGVyIiwic3R5bGVkIiwiZGl2IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbDIiLCJwcm9wcyIsIl9wcm9wcyRtYXJnaW5Cb3R0b20iLCJtYXJnaW5Cb3R0b20iLCJoaWRkZW4iLCJTbGlkZXJXcmFwcGVyIiwiU3R5bGVkQnV0dG9uIiwiQnV0dG9uIiwidGhlbWUiLCJlZmZlY3RQYW5lbFRleHRTZWNvbmRhcnkyIiwiaW5wdXRCZ2QiLCJlZmZlY3RQYW5lbFRleHRNYWluIiwiaW5wdXRCZ2RIb3ZlciIsIlN0eWxlZFJhZGlvIiwiQ2hlY2tib3giLCJmb250RmFtaWx5IiwiaW5wdXRGb250U2l6ZSIsImFjdGl2ZUNvbG9yIiwiU3R5bGVkRWZmZWN0VGltZUNvbmZpZ3VyYXRvciIsIlN0eWxlZERhdGVQaWNrZXIiLCJXaXRoSWNvbldyYXBwZXIiLCJ3aWR0aCIsImNvbmNhdCIsIlN0eWxlZEV4dHJhSWNvbiIsIlRleHRCbG9jayIsImdldFRpbWVzdGFtcCIsImRhdGVTdHIiLCJ0aW1lU3RyIiwidGltZXpvbmUiLCJ0aW1lc3RhbXAiLCJjdXJyIiwibW9tZW50IiwidHoiLCJpc1ZhbGlkIiwidXRjIiwidmFsdWVPZiIsImdldERheVJhdGlvIiwiZGF0ZSIsImhvdXJzIiwibWludXRlcyIsIkVmZmVjdFRpbWVDb25maWd1cmF0b3JGYWN0b3J5IiwiZGVwcyIsIlRpbWV6b25lU2VsZWN0b3JGYWN0b3J5IiwiRWZmZWN0VGltZVNsaWRlckZhY3RvcnkiLCJFZmZlY3RUaW1lU2VsZWN0b3JGYWN0b3J5IiwiVGltZXpvbmVTZWxlY3RvciIsIkVmZmVjdFRpbWVTbGlkZXIiLCJFZmZlY3RUaW1lU2VsZWN0b3IiLCJFZmZlY3RUaW1lQ29uZmlndXJhdG9yIiwiX3JlZiIsIl90aW1lem9uZSIsInRpbWVNb2RlIiwib25UaW1lUGFyYW1ldGVyc0NoYW5nZWQiLCJvbkNoYW5nZSIsIm1hcFN0YXRlIiwiaW50bCIsInVzZU1lbW8iLCJuYW1lcyIsImluY2x1ZGVzIiwiREVGQVVMVF9USU1FWk9ORSIsIl91c2VNZW1vIiwiY3VycmVudE1vbWVudCIsImRheVByb2dyZXNzIiwiRGF0ZSIsInNldEZ1bGxZZWFyIiwieWVhciIsIm1vbnRoIiwic2V0SG91cnMiLCJ0b0RhdGUiLCJmb3JtYXQiLCJfdXNlTWVtbzIiLCJfc2xpY2VkVG9BcnJheTIiLCJkYXRlUGlja2VyRGF0ZSIsImZ1bGxEYXRlIiwiZm9ybWF0dGVkVGltZSIsImZvcm1hdHRlZERhdGUiLCJkYXlUaW1lUHJvZ3Jlc3MiLCJ0aW1lU2xpZGVyQ29uZmlnIiwidGltZXMiLCJTdW5DYWxjIiwiZ2V0VGltZXMiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImRhd24iLCJzdW5yaXNlIiwic3Vuc2V0IiwiZHVzayIsInN1bnJpc2VUaW1lIiwic3Vuc2V0VGltZSIsIm9uVGltZVNsaWRlckNoYW5nZSIsInVzZUNhbGxiYWNrIiwidmFsdWUiLCJjbGFtcCIsIk1hdGgiLCJmbG9vciIsIm5ld0Zvcm1hdHRlZFRpbWUiLCJuZXdUaW1lc3RhbXAiLCJzZXREYXRlIiwibmV3RGF0ZSIsIm5ld0Zvcm1hdHRlZERhdGUiLCJzZXRUaW1lIiwibmV3VGltZSIsInNldFRpbWV6b25lIiwibmV3VGltZXpvbmUiLCJzZXRDdXJyZW50RGF0ZVRpbWUiLCJmb3JtYXRTaG9ydFdlZWtkYXkiLCJsb2NhbGUiLCJnZXREYXkiLCJkaXNhYmxlRGF0ZVRpbWVQaWNrIiwiTElHSFRfQU5EX1NIQURPV19FRkZFQ1RfVElNRV9NT0RFUyIsInBpY2siLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsImNoZWNrZWQiLCJpZCIsImxhYmVsIiwiZm9ybWF0TWVzc2FnZSIsImNvbmZpZyIsIkZvcm1hdHRlZE1lc3NhZ2UiLCJvbkNsaWNrIiwiTG9jYXRpb25NYXJrZXIiLCJoZWlnaHQiLCJUb29sdGlwIiwiZWZmZWN0IiwicGxhY2UiLCJkZWxheVNob3ciLCJtaW5EZXRhaWwiLCJDYWxlbmRhciIsIkNsb2NrIiwic2VsZWN0ZWQiLCJvblNlbGVjdCIsIkdsb2JlIiwiY3VycmVudCIsImFuaW1hdGlvbiIsIndpdGhTdGF0ZSIsIm1hcFN0YXRlTGVucyIsImluamVjdEludGwiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9zcmMvZWZmZWN0cy9lZmZlY3QtdGltZS1jb25maWd1cmF0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2luamVjdEludGwsIEludGxTaGFwZX0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50LXRpbWV6b25lJztcbmltcG9ydCBTdW5DYWxjIGZyb20gJ3N1bmNhbGMnO1xuXG5pbXBvcnQge01hcFN0YXRlfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuaW1wb3J0IHtjbGFtcH0gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5pbXBvcnQge1xuICBMSUdIVF9BTkRfU0hBRE9XX0VGRkVDVF9USU1FX01PREVTLFxuICBMaWdodEFuZFNoYWRvd0VmZmVjdFRpbWVNb2RlLFxuICBERUZBVUxUX1RJTUVaT05FXG59IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7bWFwU3RhdGVMZW5zfSBmcm9tICdAa2VwbGVyLmdsL3JlZHVjZXJzJztcblxuaW1wb3J0IHt3aXRoU3RhdGV9IGZyb20gJy4uL2luamVjdG9yJztcbmltcG9ydCB7U3R5bGVkRGF0ZVBpY2tlciBhcyBEYXRlUGlja2VyLCBUb29sdGlwfSBmcm9tICcuLi9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IENoZWNrYm94IGZyb20gJy4uL2NvbW1vbi9jaGVja2JveCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL2NvbW1vbi9kYXRhLXRhYmxlL2J1dHRvbic7XG5pbXBvcnQge0xvY2F0aW9uTWFya2VyLCBDYWxlbmRhciwgQ2xvY2ssIEdsb2JlfSBmcm9tICcuLi9jb21tb24vaWNvbnMnO1xuaW1wb3J0IFRpbWV6b25lU2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vdGltZXpvbmUtc2VsZWN0b3InO1xuaW1wb3J0IEVmZmVjdFRpbWVTbGlkZXJGYWN0b3J5IGZyb20gJy4vZWZmZWN0LXRpbWUtc2xpZGVyJztcbmltcG9ydCBFZmZlY3RUaW1lU2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vZWZmZWN0LXRpbWUtc2VsZWN0b3InO1xuXG5jb25zdCBEQVlfTUlMSVNFQ09ORFMgPSAxMDAwICogNjAgKiA2MCAqIDI0O1xuXG5leHBvcnQgdHlwZSBFZmZlY3RUaW1lQ29uZmlndXJhdG9yUHJvcHMgPSB7XG4gIHRpbWVzdGFtcDogbnVtYmVyO1xuICB0aW1lem9uZTogc3RyaW5nO1xuICB0aW1lTW9kZTogTGlnaHRBbmRTaGFkb3dFZmZlY3RUaW1lTW9kZTtcbiAgb25DaGFuZ2U6IChwYXJhbWV0ZXJzOiB7XG4gICAgdGltZXN0YW1wPzogbnVtYmVyIHwgbnVsbDtcbiAgICB0aW1lem9uZT86IHN0cmluZztcbiAgICB0aW1lTW9kZT86IExpZ2h0QW5kU2hhZG93RWZmZWN0VGltZU1vZGU7XG4gIH0pID0+IHZvaWQ7XG59O1xuXG50eXBlIFN0eWxlZFdyYXBwZXJQcm9wcyA9IHtkaXNhYmxlZD86IGJvb2xlYW47IG1hcmdpbkJvdHRvbT86IG51bWJlcn07XG5jb25zdCBTdHlsZWRXcmFwcGVyID0gc3R5bGVkLmRpdjxTdHlsZWRXcmFwcGVyUHJvcHM+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi1ib3R0b206ICR7cHJvcHMgPT4gcHJvcHMubWFyZ2luQm90dG9tID8/IDl9cHg7XG4gICR7cHJvcHMgPT4gKHByb3BzLmhpZGRlbiA/ICdkaXNwbGF5OiBub25lOycgOiAnJyl9XG5gO1xuXG50eXBlIFNsaWRlcldyYXBwZXJQcm9wcyA9IHtkaXNhYmxlZD86IGJvb2xlYW59O1xuY29uc3QgU2xpZGVyV3JhcHBlciA9IHN0eWxlZC5kaXY8U2xpZGVyV3JhcHBlclByb3BzPmBcbiAgbWFyZ2luLXRvcDogMTNweDtcbiAgbWFyZ2luLWJvdHRvbTogMTJweDtcbiAgJHtwcm9wcyA9PiAocHJvcHMuaGlkZGVuID8gJ2Rpc3BsYXk6IG5vbmU7JyA6ICcnKX1cbmA7XG5cbmNvbnN0IFN0eWxlZEJ1dHRvbiA9IHN0eWxlZChCdXR0b24pYFxuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5lZmZlY3RQYW5lbFRleHRTZWNvbmRhcnkyfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5pbnB1dEJnZH07XG4gIGhlaWdodDogMzJweDtcbiAgd2lkdGg6IDMycHg7XG4gIHBhZGRpbmc6IDVweDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgJjpob3ZlciB7XG4gICAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuZWZmZWN0UGFuZWxUZXh0TWFpbn07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5pbnB1dEJnZEhvdmVyfTtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkUmFkaW8gPSBzdHlsZWQoQ2hlY2tib3gpYFxuICAua2ctY2hlY2tib3hfX2xhYmVsIHtcbiAgICBmb250LWZhbWlseTogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5mb250RmFtaWx5fTtcbiAgICBmb250LXNpemU6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuaW5wdXRGb250U2l6ZX07XG4gIH1cbiAgLmtnLWNoZWNrYm94X19sYWJlbDpiZWZvcmUge1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5lZmZlY3RQYW5lbFRleHRTZWNvbmRhcnkyfTtcbiAgfVxuICBpbnB1dDpjaGVja2VkICsgLmtnLWNoZWNrYm94X19sYWJlbDpiZWZvcmUge1xuICAgIGJvcmRlci1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5hY3RpdmVDb2xvcn07XG4gIH1cbiAgLmtnLWNoZWNrYm94X19sYWJlbDphZnRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5hY3RpdmVDb2xvcn07XG4gIH1cbmA7XG5cbmNvbnN0IFN0eWxlZEVmZmVjdFRpbWVDb25maWd1cmF0b3IgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tYm90dG9tOiA4cHg7XG4gIG1hcmdpbi10b3A6IDNweDtcbmA7XG5cbmNvbnN0IFN0eWxlZERhdGVQaWNrZXIgPSBzdHlsZWQuZGl2YFxuICAucmVhY3QtZGF0ZS1waWNrZXItLW9wZW4gLnJlYWN0LWRhdGUtcGlja2VyX193cmFwcGVyIC5yZWFjdC1kYXRlLXBpY2tlcl9faW5wdXRHcm91cCB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5hY3RpdmVDb2xvcn07XG4gICAgYm9yZGVyLXJhZGl1czogNHB4IDRweCAwcHggMHB4ICFpbXBvcnRhbnQ7XG4gIH1cbiAgLnJlYWN0LWNhbGVuZGFyX19uYXZpZ2F0aW9uX19wcmV2Mi1idXR0b24sXG4gIC5yZWFjdC1jYWxlbmRhcl9fbmF2aWdhdGlvbl9fbmV4dDItYnV0dG9uIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG4gIC5yZWFjdC1jYWxlbmRhcl9fbmF2aWdhdGlvbl9fbGFiZWwge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDIwcHg7XG4gIH1cbiAgLnJlYWN0LWNhbGVuZGFyX19uYXZpZ2F0aW9uX19hcnJvdyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMThweDtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIH1cbiAgLnJlYWN0LWNhbGVuZGFyX19uYXZpZ2F0aW9uX19wcmV2LWJ1dHRvbiB7XG4gICAgcmlnaHQ6IDM2cHg7XG4gIH1cbiAgLnJlYWN0LWNhbGVuZGFyX19uYXZpZ2F0aW9uX19uZXh0LWJ1dHRvbiB7XG4gICAgcmlnaHQ6IDEycHg7XG4gIH1cbmA7XG5cbnR5cGUgV2l0aEljb25XcmFwcGVyUHJvcHMgPSB7d2lkdGg/OiBzdHJpbmd9O1xuY29uc3QgV2l0aEljb25XcmFwcGVyID0gc3R5bGVkLmRpdjxXaXRoSWNvbldyYXBwZXJQcm9wcz5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgJHtwcm9wcyA9PiAocHJvcHMud2lkdGggPyBgd2lkdGg6ICR7cHJvcHMud2lkdGh9YCA6ICcnKX1cbmA7XG5cbmNvbnN0IFN0eWxlZEV4dHJhSWNvbiA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwcHg7XG4gIGxlZnQ6IDhweDtcbiAgd2lkdGg6IDBweDtcbiAgaGVpZ2h0OiAzMnB4O1xuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5lZmZlY3RQYW5lbFRleHRTZWNvbmRhcnkyfTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG5gO1xuXG50eXBlIFRleHRCbG9ja1Byb3BzID0ge1xuICB3aWR0aD86IHN0cmluZztcbn07XG5jb25zdCBUZXh0QmxvY2sgPSBzdHlsZWQuZGl2PFRleHRCbG9ja1Byb3BzPmBcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuZWZmZWN0UGFuZWxUZXh0U2Vjb25kYXJ5Mn07XG4gIHdpZHRoOiAke3Byb3BzID0+IHByb3BzLndpZHRofTtcbiAgZm9udC1zaXplOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmlucHV0Rm9udFNpemV9O1xuYDtcblxuLyoqXG4gKiBDb252ZXJ0cyBkYXRlLCB0aW1lIGFuZCB0aW1lem9uZSBpbnRvIGEgVVRDIHRpbWVzdGFtcC5cbiAqIEBwYXJhbSBkYXRlU3RyIERhdGUgc3RyaW5nIGluIFlZWVktTU0tREQgZm9ybWF0LlxuICogQHBhcmFtIHRpbWVTdHIgVGltZSBzdHJpbmcgaW4gSEg6TU0gZm9ybWF0LlxuICogQHBhcmFtIHRpbWV6b25lIFRpbWV6b25lIG5hbWUuXG4gKiBAcmV0dXJucyBUaW1lc3RhbXAgb3IgbnVsbCBpZiBjYXNlIG9mIGJhZCBpbnB1dHMuXG4gKi9cbmNvbnN0IGdldFRpbWVzdGFtcCA9IChkYXRlU3RyOiBzdHJpbmcsIHRpbWVTdHI6IHN0cmluZywgdGltZXpvbmU6IHN0cmluZyk6IG51bWJlciB8IG51bGwgPT4ge1xuICBsZXQgdGltZXN0YW1wOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgY29uc3QgY3VyciA9IG1vbWVudC50eihgJHtkYXRlU3RyfVQke3RpbWVTdHJ9OjAwYCwgdGltZXpvbmUpO1xuICBpZiAoY3Vyci5pc1ZhbGlkKCkpIHtcbiAgICB0aW1lc3RhbXAgPSBjdXJyLnV0YygpLnZhbHVlT2YoKTtcbiAgfVxuICByZXR1cm4gdGltZXN0YW1wO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aW1lIG9mIHRoZSBkYXkgaW50byBbMCwgMV0gcmFuZ2VcbiAqIEBwYXJhbSBkYXRlXG4gKiBAcmV0dXJuc1xuICovXG5jb25zdCBnZXREYXlSYXRpbyA9IChkYXRlOiBtb21lbnQuTW9tZW50KSA9PiB7XG4gIHJldHVybiAoKGRhdGUuaG91cnMoKSAqIDYwICsgZGF0ZS5taW51dGVzKCkpICogNjAgKiAxMDAwKSAvIERBWV9NSUxJU0VDT05EUztcbn07XG5cbkVmZmVjdFRpbWVDb25maWd1cmF0b3JGYWN0b3J5LmRlcHMgPSBbXG4gIFRpbWV6b25lU2VsZWN0b3JGYWN0b3J5LFxuICBFZmZlY3RUaW1lU2xpZGVyRmFjdG9yeSxcbiAgRWZmZWN0VGltZVNlbGVjdG9yRmFjdG9yeVxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWZmZWN0VGltZUNvbmZpZ3VyYXRvckZhY3RvcnkoXG4gIFRpbWV6b25lU2VsZWN0b3I6IFJldHVyblR5cGU8dHlwZW9mIFRpbWV6b25lU2VsZWN0b3JGYWN0b3J5PixcbiAgRWZmZWN0VGltZVNsaWRlcjogUmV0dXJuVHlwZTx0eXBlb2YgRWZmZWN0VGltZVNsaWRlckZhY3Rvcnk+LFxuICBFZmZlY3RUaW1lU2VsZWN0b3I6IFJldHVyblR5cGU8dHlwZW9mIEVmZmVjdFRpbWVTZWxlY3RvckZhY3Rvcnk+XG4pOiBSZWFjdC5GQzxFZmZlY3RUaW1lQ29uZmlndXJhdG9yUHJvcHM+IHtcbiAgY29uc3QgRWZmZWN0VGltZUNvbmZpZ3VyYXRvciA9ICh7XG4gICAgdGltZXN0YW1wLFxuICAgIHRpbWV6b25lOiBfdGltZXpvbmUsXG4gICAgdGltZU1vZGUsXG4gICAgb25DaGFuZ2U6IG9uVGltZVBhcmFtZXRlcnNDaGFuZ2VkLFxuICAgIG1hcFN0YXRlLFxuICAgIGludGxcbiAgfTogRWZmZWN0VGltZUNvbmZpZ3VyYXRvclByb3BzICYge2ludGw6IEludGxTaGFwZTsgbWFwU3RhdGU6IE1hcFN0YXRlfSkgPT4ge1xuICAgIGNvbnN0IHRpbWV6b25lID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICByZXR1cm4gbW9tZW50LnR6Lm5hbWVzKCkuaW5jbHVkZXMoX3RpbWV6b25lKSA/IF90aW1lem9uZSA6IERFRkFVTFRfVElNRVpPTkU7XG4gICAgfSwgW190aW1lem9uZV0pO1xuXG4gICAgY29uc3QgW2RhdGVQaWNrZXJEYXRlLCBmdWxsRGF0ZSwgZm9ybWF0dGVkVGltZSwgZm9ybWF0dGVkRGF0ZSwgZGF5VGltZVByb2dyZXNzXSA9XG4gICAgICB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudE1vbWVudCA9IG1vbWVudC50eih0aW1lc3RhbXAsIHRpbWV6b25lKTtcblxuICAgICAgICAvLyBTbGlkZXIgdmFsdWUgZnJvbSAwIHRvIDFcbiAgICAgICAgY29uc3QgZGF5UHJvZ3Jlc3MgPSBnZXREYXlSYXRpbyhjdXJyZW50TW9tZW50KTtcblxuICAgICAgICAvLyBEYXRlIHBpY2tlciBhbHdheXMgcmVuZGVycyBEYXRlIGluIGxvY2FsIHRpbWV6b25lXG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKGN1cnJlbnRNb21lbnQueWVhcigpLCBjdXJyZW50TW9tZW50Lm1vbnRoKCksIGN1cnJlbnRNb21lbnQuZGF0ZSgpKTtcbiAgICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgY3VycmVudE1vbWVudC50b0RhdGUoKSxcbiAgICAgICAgICBjdXJyZW50TW9tZW50LmZvcm1hdCgnSEg6bW0nKSxcbiAgICAgICAgICBjdXJyZW50TW9tZW50LmZvcm1hdCgnWVlZWS1NTS1ERCcpLFxuICAgICAgICAgIGRheVByb2dyZXNzXG4gICAgICAgIF07XG4gICAgICB9LCBbdGltZXN0YW1wLCB0aW1lem9uZV0pO1xuXG4gICAgY29uc3QgdGltZVNsaWRlckNvbmZpZyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgY29uc3QgdGltZXMgPSBTdW5DYWxjLmdldFRpbWVzKGZ1bGxEYXRlLCBtYXBTdGF0ZS5sYXRpdHVkZSwgbWFwU3RhdGUubG9uZ2l0dWRlKTtcbiAgICAgIGNvbnN0IHtkYXduLCBzdW5yaXNlLCBzdW5zZXQsIGR1c2t9ID0gdGltZXM7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhd246IGdldERheVJhdGlvKG1vbWVudC50eihkYXduLnZhbHVlT2YoKSwgdGltZXpvbmUpKSxcbiAgICAgICAgc3VucmlzZTogZ2V0RGF5UmF0aW8obW9tZW50LnR6KHN1bnJpc2UudmFsdWVPZigpLCB0aW1lem9uZSkpLFxuICAgICAgICBzdW5zZXQ6IGdldERheVJhdGlvKG1vbWVudC50eihzdW5zZXQudmFsdWVPZigpLCB0aW1lem9uZSkpLFxuICAgICAgICBkdXNrOiBnZXREYXlSYXRpbyhtb21lbnQudHooZHVzay52YWx1ZU9mKCksIHRpbWV6b25lKSksXG4gICAgICAgIHN1bnJpc2VUaW1lOiBtb21lbnQudHooc3VucmlzZS52YWx1ZU9mKCksIHRpbWV6b25lKS5mb3JtYXQoJ2hoOm1tIEEnKSxcbiAgICAgICAgc3Vuc2V0VGltZTogbW9tZW50LnR6KHN1bnNldC52YWx1ZU9mKCksIHRpbWV6b25lKS5mb3JtYXQoJ2hoOm1tIEEnKVxuICAgICAgfTtcbiAgICB9LCBbZnVsbERhdGUsIHRpbWV6b25lLCBtYXBTdGF0ZS5sYXRpdHVkZSwgbWFwU3RhdGUubG9uZ2l0dWRlXSk7XG5cbiAgICBjb25zdCBvblRpbWVTbGlkZXJDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAgIHZhbHVlID0+IHtcbiAgICAgICAgY29uc3QgaG91cnMgPSBjbGFtcChbMCwgMjNdLCBNYXRoLmZsb29yKHZhbHVlWzFdICogMjQpKTtcbiAgICAgICAgY29uc3QgbWludXRlcyA9IGNsYW1wKFswLCA1OV0sIE1hdGguZmxvb3IoKHZhbHVlWzFdICogMjQgLSBob3VycykgKiA2MCkpO1xuXG4gICAgICAgIGNvbnN0IG5ld0Zvcm1hdHRlZFRpbWUgPSBgJHtob3VycyA8IDEwID8gYDAke2hvdXJzfWAgOiBob3Vyc306JHtcbiAgICAgICAgICBtaW51dGVzIDwgMTAgPyBgMCR7bWludXRlc31gIDogbWludXRlc1xuICAgICAgICB9YDtcbiAgICAgICAgY29uc3QgbmV3VGltZXN0YW1wID0gZ2V0VGltZXN0YW1wKGZvcm1hdHRlZERhdGUsIG5ld0Zvcm1hdHRlZFRpbWUsIHRpbWV6b25lKTtcbiAgICAgICAgb25UaW1lUGFyYW1ldGVyc0NoYW5nZWQoe3RpbWVzdGFtcDogbmV3VGltZXN0YW1wfSk7XG4gICAgICB9LFxuICAgICAgW2Zvcm1hdHRlZERhdGUsIHRpbWV6b25lLCBvblRpbWVQYXJhbWV0ZXJzQ2hhbmdlZF1cbiAgICApO1xuXG4gICAgY29uc3Qgc2V0RGF0ZSA9IHVzZUNhbGxiYWNrKFxuICAgICAgbmV3RGF0ZSA9PiB7XG4gICAgICAgIGlmICghbmV3RGF0ZSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IG5ld0Zvcm1hdHRlZERhdGUgPSBtb21lbnQobmV3RGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgIGNvbnN0IG5ld1RpbWVzdGFtcCA9IGdldFRpbWVzdGFtcChuZXdGb3JtYXR0ZWREYXRlLCBmb3JtYXR0ZWRUaW1lLCB0aW1lem9uZSk7XG4gICAgICAgIG9uVGltZVBhcmFtZXRlcnNDaGFuZ2VkKHt0aW1lc3RhbXA6IG5ld1RpbWVzdGFtcH0pO1xuICAgICAgfSxcbiAgICAgIFtmb3JtYXR0ZWRUaW1lLCB0aW1lem9uZSwgb25UaW1lUGFyYW1ldGVyc0NoYW5nZWRdXG4gICAgKTtcblxuICAgIGNvbnN0IHNldFRpbWUgPSB1c2VDYWxsYmFjayhcbiAgICAgIG5ld1RpbWUgPT4ge1xuICAgICAgICBpZiAoIW5ld1RpbWUpIHJldHVybjtcblxuICAgICAgICBjb25zdCBuZXdUaW1lc3RhbXAgPSBnZXRUaW1lc3RhbXAoZm9ybWF0dGVkRGF0ZSwgbmV3VGltZSwgdGltZXpvbmUpO1xuICAgICAgICBvblRpbWVQYXJhbWV0ZXJzQ2hhbmdlZCh7dGltZXN0YW1wOiBuZXdUaW1lc3RhbXB9KTtcbiAgICAgIH0sXG4gICAgICBbZm9ybWF0dGVkRGF0ZSwgdGltZXpvbmUsIG9uVGltZVBhcmFtZXRlcnNDaGFuZ2VkXVxuICAgICk7XG5cbiAgICBjb25zdCBzZXRUaW1lem9uZSA9IHVzZUNhbGxiYWNrKFxuICAgICAgbmV3VGltZXpvbmUgPT4ge1xuICAgICAgICBpZiAoIW5ld1RpbWV6b25lKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgbmV3VGltZXN0YW1wID0gZ2V0VGltZXN0YW1wKGZvcm1hdHRlZERhdGUsIGZvcm1hdHRlZFRpbWUsIG5ld1RpbWV6b25lKTtcbiAgICAgICAgLy8gZGF0ZSBhbmQgdGltZSBhcmUgYWRqdXN0ZWQgdG8gaGF2ZSB0aGUgc2FtZSB2YWx1ZSBidXQgaW4gdGhlIG5ldyB0aW1lem9uZVxuICAgICAgICBvblRpbWVQYXJhbWV0ZXJzQ2hhbmdlZCh7dGltZXN0YW1wOiBuZXdUaW1lc3RhbXAsIHRpbWV6b25lOiBuZXdUaW1lem9uZX0pO1xuICAgICAgfSxcbiAgICAgIFtmb3JtYXR0ZWREYXRlLCBmb3JtYXR0ZWRUaW1lLCBvblRpbWVQYXJhbWV0ZXJzQ2hhbmdlZF1cbiAgICApO1xuXG4gICAgY29uc3Qgc2V0Q3VycmVudERhdGVUaW1lID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgb25UaW1lUGFyYW1ldGVyc0NoYW5nZWQoe3RpbWVzdGFtcDogbmV3IERhdGUoKS52YWx1ZU9mKCl9KTtcbiAgICB9LCBbb25UaW1lUGFyYW1ldGVyc0NoYW5nZWRdKTtcblxuICAgIGNvbnN0IGZvcm1hdFNob3J0V2Vla2RheSA9IHVzZUNhbGxiYWNrKChsb2NhbGUsIGRhdGUpID0+IHtcbiAgICAgIHJldHVybiBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXVtkYXRlLmdldERheSgpXTtcbiAgICB9LCBbXSk7XG5cbiAgICBjb25zdCBkaXNhYmxlRGF0ZVRpbWVQaWNrID0gdGltZU1vZGUgIT09IExJR0hUX0FORF9TSEFET1dfRUZGRUNUX1RJTUVfTU9ERVMucGljaztcblxuICAgIHJldHVybiAoXG4gICAgICA8U3R5bGVkRWZmZWN0VGltZUNvbmZpZ3VyYXRvcj5cbiAgICAgICAgPFN0eWxlZFdyYXBwZXIgbWFyZ2luQm90dG9tPXsxNn0+XG4gICAgICAgICAgPFN0eWxlZFJhZGlvXG4gICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgY2hlY2tlZD17dGltZU1vZGUgPT09IExJR0hUX0FORF9TSEFET1dfRUZGRUNUX1RJTUVfTU9ERVMucGlja31cbiAgICAgICAgICAgIGlkPXtgZWZmZWN0LXRpbWUtdG9nZ2xlLXVzZS1waWNrLXRpbWVgfVxuICAgICAgICAgICAgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgIGlkOiAnZWZmZWN0TWFuYWdlci5waWNrRGF0ZVRpbWUnXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoKSA9PiB7XG4gICAgICAgICAgICAgIG9uVGltZVBhcmFtZXRlcnNDaGFuZ2VkKHt0aW1lTW9kZTogTElHSFRfQU5EX1NIQURPV19FRkZFQ1RfVElNRV9NT0RFUy5waWNrfSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvU3R5bGVkV3JhcHBlcj5cblxuICAgICAgICA8U2xpZGVyV3JhcHBlciBoaWRkZW49e2Rpc2FibGVEYXRlVGltZVBpY2t9PlxuICAgICAgICAgIDxFZmZlY3RUaW1lU2xpZGVyXG4gICAgICAgICAgICB2YWx1ZT17ZGF5VGltZVByb2dyZXNzfVxuICAgICAgICAgICAgb25DaGFuZ2U9e29uVGltZVNsaWRlckNoYW5nZX1cbiAgICAgICAgICAgIGNvbmZpZz17dGltZVNsaWRlckNvbmZpZ31cbiAgICAgICAgICAvPlxuICAgICAgICA8L1NsaWRlcldyYXBwZXI+XG5cbiAgICAgICAgPFN0eWxlZFdyYXBwZXIgaGlkZGVuPXtkaXNhYmxlRGF0ZVRpbWVQaWNrfSBtYXJnaW5Cb3R0b209ezJ9PlxuICAgICAgICAgIDxUZXh0QmxvY2sgd2lkdGg9XCIzMnB4XCIgLz5cbiAgICAgICAgICA8VGV4dEJsb2NrIHdpZHRoPVwiMTEwcHhcIj5cbiAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPXsnZWZmZWN0TWFuYWdlci5kYXRlJ30gLz5cbiAgICAgICAgICA8L1RleHRCbG9jaz5cbiAgICAgICAgICA8VGV4dEJsb2NrIHdpZHRoPVwiMTEwcHhcIj5cbiAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPXsnZWZmZWN0TWFuYWdlci50aW1lJ30gLz5cbiAgICAgICAgICA8L1RleHRCbG9jaz5cbiAgICAgICAgPC9TdHlsZWRXcmFwcGVyPlxuXG4gICAgICAgIDxTdHlsZWRXcmFwcGVyIGhpZGRlbj17ZGlzYWJsZURhdGVUaW1lUGlja30gbWFyZ2luQm90dG9tPXsxNn0+XG4gICAgICAgICAgPFN0eWxlZEJ1dHRvbiBvbkNsaWNrPXtzZXRDdXJyZW50RGF0ZVRpbWV9IGRhdGEtZm9yPVwicGljay10aW1lLWJ1dHRvblwiIGRhdGEtdGlwPlxuICAgICAgICAgICAgPExvY2F0aW9uTWFya2VyIGhlaWdodD1cIjE2cHhcIiAvPlxuICAgICAgICAgICAgPFRvb2x0aXAgaWQ9XCJwaWNrLXRpbWUtYnV0dG9uXCIgZWZmZWN0PVwic29saWRcIiBwbGFjZT1cInRvcFwiIGRlbGF5U2hvdz17NTAwfT5cbiAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9eydlZmZlY3RNYW5hZ2VyLnBpY2tDdXJycmVudFRpbWUnfSAvPlxuICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgIDwvU3R5bGVkQnV0dG9uPlxuICAgICAgICAgIDxXaXRoSWNvbldyYXBwZXI+XG4gICAgICAgICAgICA8U3R5bGVkRGF0ZVBpY2tlcj5cbiAgICAgICAgICAgICAgPERhdGVQaWNrZXJcbiAgICAgICAgICAgICAgICB2YWx1ZT17ZGF0ZVBpY2tlckRhdGV9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3NldERhdGV9XG4gICAgICAgICAgICAgICAgbWluRGV0YWlsPXsnbW9udGgnfVxuICAgICAgICAgICAgICAgIGZvcm1hdFNob3J0V2Vla2RheT17Zm9ybWF0U2hvcnRXZWVrZGF5fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9TdHlsZWREYXRlUGlja2VyPlxuICAgICAgICAgICAgPFN0eWxlZEV4dHJhSWNvbj5cbiAgICAgICAgICAgICAgPENhbGVuZGFyIHdpZHRoPVwiMTZweFwiIGhlaWdodD1cIjMycHhcIiAvPlxuICAgICAgICAgICAgPC9TdHlsZWRFeHRyYUljb24+XG4gICAgICAgICAgPC9XaXRoSWNvbldyYXBwZXI+XG4gICAgICAgICAgPFdpdGhJY29uV3JhcHBlcj5cbiAgICAgICAgICAgIDxFZmZlY3RUaW1lU2VsZWN0b3IgdmFsdWU9e2Zvcm1hdHRlZFRpbWV9IG9uQ2hhbmdlPXtzZXRUaW1lfSAvPlxuICAgICAgICAgICAgPFN0eWxlZEV4dHJhSWNvbj5cbiAgICAgICAgICAgICAgPENsb2NrIHdpZHRoPVwiMTZweFwiIGhlaWdodD1cIjMycHhcIiAvPlxuICAgICAgICAgICAgPC9TdHlsZWRFeHRyYUljb24+XG4gICAgICAgICAgPC9XaXRoSWNvbldyYXBwZXI+XG4gICAgICAgIDwvU3R5bGVkV3JhcHBlcj5cblxuICAgICAgICA8U3R5bGVkV3JhcHBlciBoaWRkZW49e2Rpc2FibGVEYXRlVGltZVBpY2t9IG1hcmdpbkJvdHRvbT17Mn0+XG4gICAgICAgICAgPFRleHRCbG9jaz5cbiAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPXsnZWZmZWN0TWFuYWdlci50aW1lem9uZSd9IC8+XG4gICAgICAgICAgPC9UZXh0QmxvY2s+XG4gICAgICAgIDwvU3R5bGVkV3JhcHBlcj5cblxuICAgICAgICA8U3R5bGVkV3JhcHBlciBoaWRkZW49e2Rpc2FibGVEYXRlVGltZVBpY2t9IG1hcmdpbkJvdHRvbT17MjR9PlxuICAgICAgICAgIDxXaXRoSWNvbldyYXBwZXIgd2lkdGg9eycxMDAlJ30+XG4gICAgICAgICAgICA8VGltZXpvbmVTZWxlY3RvciBzZWxlY3RlZD17dGltZXpvbmV9IG9uU2VsZWN0PXtzZXRUaW1lem9uZX0gLz5cbiAgICAgICAgICAgIDxTdHlsZWRFeHRyYUljb24+XG4gICAgICAgICAgICAgIDxHbG9iZSB3aWR0aD1cIjE2cHhcIiBoZWlnaHQ9XCIzMnB4XCIgLz5cbiAgICAgICAgICAgIDwvU3R5bGVkRXh0cmFJY29uPlxuICAgICAgICAgIDwvV2l0aEljb25XcmFwcGVyPlxuICAgICAgICA8L1N0eWxlZFdyYXBwZXI+XG5cbiAgICAgICAgPFN0eWxlZFdyYXBwZXIgbWFyZ2luQm90dG9tPXsxNn0+XG4gICAgICAgICAgPFN0eWxlZFJhZGlvXG4gICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgY2hlY2tlZD17dGltZU1vZGUgPT09IExJR0hUX0FORF9TSEFET1dfRUZGRUNUX1RJTUVfTU9ERVMuY3VycmVudH1cbiAgICAgICAgICAgIGlkPXtgZWZmZWN0LXRpbWUtdG9nZ2xlLXVzZS1jdXJyZW50LXRpbWVgfVxuICAgICAgICAgICAgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgIGlkOiAnZWZmZWN0TWFuYWdlci5jdXJyZW50VGltZSdcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgb25DaGFuZ2U9eygpID0+IHtcbiAgICAgICAgICAgICAgb25UaW1lUGFyYW1ldGVyc0NoYW5nZWQoe3RpbWVNb2RlOiBMSUdIVF9BTkRfU0hBRE9XX0VGRkVDVF9USU1FX01PREVTLmN1cnJlbnR9KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9TdHlsZWRXcmFwcGVyPlxuXG4gICAgICAgIDxTdHlsZWRXcmFwcGVyIG1hcmdpbkJvdHRvbT17MTZ9PlxuICAgICAgICAgIDxTdHlsZWRSYWRpb1xuICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgIGNoZWNrZWQ9e3RpbWVNb2RlID09PSBMSUdIVF9BTkRfU0hBRE9XX0VGRkVDVF9USU1FX01PREVTLmFuaW1hdGlvbn1cbiAgICAgICAgICAgIGlkPXtgZWZmZWN0LXRpbWUtdG9nZ2xlLXVzZS1hbmltYXRpb24tdGltZWB9XG4gICAgICAgICAgICBsYWJlbD17J0FuaW1hdGlvbiB0aW1lJ31cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoKSA9PiB7XG4gICAgICAgICAgICAgIG9uVGltZVBhcmFtZXRlcnNDaGFuZ2VkKHt0aW1lTW9kZTogTElHSFRfQU5EX1NIQURPV19FRkZFQ1RfVElNRV9NT0RFUy5hbmltYXRpb259KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9TdHlsZWRXcmFwcGVyPlxuICAgICAgPC9TdHlsZWRFZmZlY3RUaW1lQ29uZmlndXJhdG9yPlxuICAgICk7XG4gIH07XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBob3cgdG8gcHJvcGVybHkgdHlwZT9cbiAgcmV0dXJuIHdpdGhTdGF0ZShbbWFwU3RhdGVMZW5zXSkoaW5qZWN0SW50bChFZmZlY3RUaW1l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