"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = useFetchVectorTileMetadata;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react");
var _pmtiles = require("@loaders.gl/pmtiles");
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _table = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/table/src");
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var DEFAULT_PROCESS_FUNCTION = function DEFAULT_PROCESS_FUNCTION(json) {
  return _objectSpread({
    metaJson: null,
    bounds: null,
    center: null,
    maxZoom: null,
    minZoom: null,
    fields: []
  }, json);
};
/** Hook to fetch and return mvt or pmtiles metadata. */
function useFetchVectorTileMetadata(_ref) {
  var remoteTileFormat = _ref.remoteTileFormat,
    tilesetUrl = _ref.tilesetUrl,
    metadataUrl = _ref.metadataUrl,
    _ref$process = _ref.process,
    process = _ref$process === void 0 ? DEFAULT_PROCESS_FUNCTION : _ref$process;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    error = _useState2[0],
    setError = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    data = _useState4[0],
    setData = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    loading = _useState6[0],
    setLoading = _useState6[1];
  (0, _react.useEffect)(function () {
    var getAndProcessMetadata = /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var metadata, tileSource, processedMetadata;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              setError(null);
              setData(null);
              if (!metadataUrl) {
                _context.next = 33;
                break;
              }
              setLoading(true);
              _context.prev = 4;
              metadata = null;
              if (!(remoteTileFormat === _constants.RemoteTileFormat.MVT)) {
                _context.next = 12;
                break;
              }
              _context.next = 9;
              return (0, _table.getMVTMetadata)(metadataUrl);
            case 9:
              metadata = _context.sent;
              _context.next = 16;
              break;
            case 12:
              tileSource = _pmtiles.PMTilesSource.createDataSource(metadataUrl, {});
              _context.next = 15;
              return tileSource.metadata;
            case 15:
              metadata = _context.sent;
            case 16:
              if (metadata) {
                _context.next = 18;
                break;
              }
              throw new Error('Failed to fetch metadata');
            case 18:
              processedMetadata = process(metadata);
              if (!(processedMetadata instanceof Error)) {
                _context.next = 23;
                break;
              }
              setError(processedMetadata);
              _context.next = 27;
              break;
            case 23:
              setError(null);
              _context.next = 26;
              return (0, _table.getFieldsFromTile)({
                remoteTileFormat: remoteTileFormat,
                tilesetUrl: tilesetUrl,
                metadataUrl: metadataUrl,
                metadata: processedMetadata
              });
            case 26:
              setData(processedMetadata);
            case 27:
              _context.next = 32;
              break;
            case 29:
              _context.prev = 29;
              _context.t0 = _context["catch"](4);
              setError(_context.t0);
            case 32:
              setLoading(false);
            case 33:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[4, 29]]);
      }));
      return function getAndProcessMetadata() {
        return _ref2.apply(this, arguments);
      };
    }();
    getAndProcessMetadata();
  }, [metadataUrl, tilesetUrl, remoteTileFormat, setError, setData, process]);
  return {
    data: data,
    loading: loading,
    error: error
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3BtdGlsZXMiLCJfY29uc3RhbnRzIiwiX3RhYmxlIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJERUZBVUxUX1BST0NFU1NfRlVOQ1RJT04iLCJqc29uIiwibWV0YUpzb24iLCJib3VuZHMiLCJjZW50ZXIiLCJtYXhab29tIiwibWluWm9vbSIsImZpZWxkcyIsInVzZUZldGNoVmVjdG9yVGlsZU1ldGFkYXRhIiwiX3JlZiIsInJlbW90ZVRpbGVGb3JtYXQiLCJ0aWxlc2V0VXJsIiwibWV0YWRhdGFVcmwiLCJfcmVmJHByb2Nlc3MiLCJwcm9jZXNzIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZXJyb3IiLCJzZXRFcnJvciIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0IiwiZGF0YSIsInNldERhdGEiLCJfdXNlU3RhdGU1IiwiX3VzZVN0YXRlNiIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwidXNlRWZmZWN0IiwiZ2V0QW5kUHJvY2Vzc01ldGFkYXRhIiwiX3JlZjIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVnZW5lcmF0b3IiLCJtYXJrIiwiX2NhbGxlZSIsIm1ldGFkYXRhIiwidGlsZVNvdXJjZSIsInByb2Nlc3NlZE1ldGFkYXRhIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIlJlbW90ZVRpbGVGb3JtYXQiLCJNVlQiLCJnZXRNVlRNZXRhZGF0YSIsInNlbnQiLCJQTVRpbGVzU291cmNlIiwiY3JlYXRlRGF0YVNvdXJjZSIsIkVycm9yIiwiZ2V0RmllbGRzRnJvbVRpbGUiLCJ0MCIsInN0b3AiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvaG9va3MvdXNlLWZldGNoLXZlY3Rvci10aWxlLW1ldGFkYXRhLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1RpbGVKU09OfSBmcm9tICdAbG9hZGVycy5nbC9tdnQnO1xuaW1wb3J0IHtQTVRpbGVzU291cmNlLCBQTVRpbGVzTWV0YWRhdGF9IGZyb20gJ0Bsb2FkZXJzLmdsL3BtdGlsZXMnO1xuXG5pbXBvcnQge1JlbW90ZVRpbGVGb3JtYXR9IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7Z2V0TVZUTWV0YWRhdGEsIFZlY3RvclRpbGVNZXRhZGF0YSwgZ2V0RmllbGRzRnJvbVRpbGV9IGZyb20gJ0BrZXBsZXIuZ2wvdGFibGUnO1xuXG50eXBlIEZldGNoVmVjdG9yVGlsZU1ldGFkYXRhUHJvcHMgPSB7XG4gIG1ldGFkYXRhVXJsOiBzdHJpbmcgfCBudWxsO1xuICB0aWxlc2V0VXJsOiBzdHJpbmcgfCBudWxsO1xuICByZW1vdGVUaWxlRm9ybWF0OiBSZW1vdGVUaWxlRm9ybWF0O1xuICBwcm9jZXNzPzogKGpzb246IFBNVGlsZXNNZXRhZGF0YSB8IFRpbGVKU09OKSA9PiBWZWN0b3JUaWxlTWV0YWRhdGEgfCBFcnJvciB8IG51bGw7XG59O1xuXG5jb25zdCBERUZBVUxUX1BST0NFU1NfRlVOQ1RJT04gPSAoanNvbjogUE1UaWxlc01ldGFkYXRhIHwgVGlsZUpTT04pOiBWZWN0b3JUaWxlTWV0YWRhdGEgPT4ge1xuICByZXR1cm4ge1xuICAgIG1ldGFKc29uOiBudWxsLFxuICAgIGJvdW5kczogbnVsbCxcbiAgICBjZW50ZXI6IG51bGwsXG4gICAgbWF4Wm9vbTogbnVsbCxcbiAgICBtaW5ab29tOiBudWxsLFxuICAgIGZpZWxkczogW10sXG4gICAgLi4uanNvblxuICB9O1xufTtcblxudHlwZSBGZXRjaFZlY3RvclRpbGVNZXRhZGF0YVJldHVybiA9IHtcbiAgZGF0YTogVmVjdG9yVGlsZU1ldGFkYXRhIHwgbnVsbDtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgZXJyb3I6IEVycm9yIHwgbnVsbDtcbn07XG5cbi8qKiBIb29rIHRvIGZldGNoIGFuZCByZXR1cm4gbXZ0IG9yIHBtdGlsZXMgbWV0YWRhdGEuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGZXRjaFZlY3RvclRpbGVNZXRhZGF0YSh7XG4gIHJlbW90ZVRpbGVGb3JtYXQsXG4gIHRpbGVzZXRVcmwsXG4gIG1ldGFkYXRhVXJsLFxuICBwcm9jZXNzID0gREVGQVVMVF9QUk9DRVNTX0ZVTkNUSU9OXG59OiBGZXRjaFZlY3RvclRpbGVNZXRhZGF0YVByb3BzKTogRmV0Y2hWZWN0b3JUaWxlTWV0YWRhdGFSZXR1cm4ge1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPEVycm9yIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlPFZlY3RvclRpbGVNZXRhZGF0YSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBnZXRBbmRQcm9jZXNzTWV0YWRhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICBzZXRFcnJvcihudWxsKTtcbiAgICAgIHNldERhdGEobnVsbCk7XG4gICAgICBpZiAobWV0YWRhdGFVcmwpIHtcbiAgICAgICAgc2V0TG9hZGluZyh0cnVlKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGxldCBtZXRhZGF0YTogUE1UaWxlc01ldGFkYXRhIHwgVGlsZUpTT04gfCBudWxsID0gbnVsbDtcbiAgICAgICAgICBpZiAocmVtb3RlVGlsZUZvcm1hdCA9PT0gUmVtb3RlVGlsZUZvcm1hdC5NVlQpIHtcbiAgICAgICAgICAgIG1ldGFkYXRhID0gYXdhaXQgZ2V0TVZUTWV0YWRhdGEobWV0YWRhdGFVcmwpO1xuXG4gICAgICAgICAgICAvLyBNVlRTb3VyY2UgcmV0dXJucyBtZXNzeSBwYXJ0aWFsIG1ldGFkYXRhXG4gICAgICAgICAgICAvLyBNVlRTb3VyY2UuY3JlYXRlRGF0YVNvdXJjZSgnJywge1xuICAgICAgICAgICAgLy8gICBtdnQ6IHtcbiAgICAgICAgICAgIC8vICAgICBtZXRhZGF0YVVybDogZGVjb2RlVVJJQ29tcG9uZW50KHVybClcbiAgICAgICAgICAgIC8vICAgfVxuICAgICAgICAgICAgLy8gfSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGlsZVNvdXJjZSA9IFBNVGlsZXNTb3VyY2UuY3JlYXRlRGF0YVNvdXJjZShtZXRhZGF0YVVybCwge30pO1xuICAgICAgICAgICAgbWV0YWRhdGEgPSBhd2FpdCB0aWxlU291cmNlLm1ldGFkYXRhO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFNpbmNlIHdlIHN3aXRjaGVkIHRvIFNvdXJjZS5jcmVhdGVEYXRhU291cmNlIGRldGFpbGVkIHJlc3BvbnNlIGVycm9ycyBhcmVuJ3QgYXZhaWxhYmxlIGhlcmUuLi5cbiAgICAgICAgICBpZiAoIW1ldGFkYXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBtZXRhZGF0YScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZE1ldGFkYXRhID0gcHJvY2VzcyhtZXRhZGF0YSk7XG4gICAgICAgICAgaWYgKHByb2Nlc3NlZE1ldGFkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHNldEVycm9yKHByb2Nlc3NlZE1ldGFkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0RXJyb3IobnVsbCk7XG5cbiAgICAgICAgICAgIGF3YWl0IGdldEZpZWxkc0Zyb21UaWxlKHtcbiAgICAgICAgICAgICAgcmVtb3RlVGlsZUZvcm1hdCxcbiAgICAgICAgICAgICAgdGlsZXNldFVybCxcbiAgICAgICAgICAgICAgbWV0YWRhdGFVcmwsXG4gICAgICAgICAgICAgIG1ldGFkYXRhOiBwcm9jZXNzZWRNZXRhZGF0YVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNldERhdGEocHJvY2Vzc2VkTWV0YWRhdGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAobWV0YWRhdGFFcnJvcikge1xuICAgICAgICAgIHNldEVycm9yKG1ldGFkYXRhRXJyb3IgYXMgYW55KTtcbiAgICAgICAgfVxuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZ2V0QW5kUHJvY2Vzc01ldGFkYXRhKCk7XG4gIH0sIFttZXRhZGF0YVVybCwgdGlsZXNldFVybCwgcmVtb3RlVGlsZUZvcm1hdCwgc2V0RXJyb3IsIHNldERhdGEsIHByb2Nlc3NdKTtcblxuICByZXR1cm4ge2RhdGEsIGxvYWRpbmcsIGVycm9yfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFHQSxJQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxVQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFILE9BQUE7QUFBdUYsU0FBQUksUUFBQUMsQ0FBQSxFQUFBQyxDQUFBO0VBQUEsSUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUosQ0FBQTtFQUFBLElBQUFHLE1BQUEsQ0FBQUUscUJBQUE7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