"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = EffectTimeConfiguratorFactory;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactIntl = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-intl");
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _momentTimezone = _interopRequireDefault(require("moment-timezone"));
var _suncalc = _interopRequireDefault(require("suncalc"));
var _localization = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _reducers = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/reducers/src");
var _injector = require("../injector");
var _styledComponents2 = require("../common/styled-components");
var _checkbox = _interopRequireDefault(require("../common/checkbox"));
var _button = _interopRequireDefault(require("../common/data-table/button"));
var _icons = require("../common/icons");
var _timezoneSelector = _interopRequireDefault(require("./timezone-selector"));
var _effectTimeSlider = _interopRequireDefault(require("./effect-time-slider"));
var _effectTimeSelector = _interopRequireDefault(require("./effect-time-selector"));
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
var DAY_MILISECONDS = 1000 * 60 * 60 * 24;
var StyledWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: ", "px;\n  ", "\n"])), function (props) {
  var _props$marginBottom;
  return (_props$marginBottom = props.marginBottom) !== null && _props$marginBottom !== void 0 ? _props$marginBottom : 9;
}, function (props) {
  return props.hidden ? 'display: none;' : '';
});
var SliderWrapper = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-top: 13px;\n  margin-bottom: 12px;\n  ", "\n"])), function (props) {
  return props.hidden ? 'display: none;' : '';
});
var StyledButton = (0, _styledComponents["default"])(_button["default"])(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  background-color: ", ";\n  height: 32px;\n  width: 32px;\n  padding: 5px;\n  border-radius: 4px;\n  justify-content: center;\n  &:hover {\n    color: ", ";\n    background-color: ", ";\n  }\n"])), function (props) {
  return props.theme.effectPanelTextSecondary2;
}, function (props) {
  return props.theme.inputBgd;
}, function (props) {
  return props.theme.effectPanelTextMain;
}, function (props) {
  return props.theme.inputBgdHover;
});
var StyledRadio = (0, _styledComponents["default"])(_checkbox["default"])(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  .kg-checkbox__label {\n    font-family: ", ";\n    font-size: ", ";\n  }\n  .kg-checkbox__label:before {\n    background: transparent;\n    border-color: ", ";\n  }\n  input:checked + .kg-checkbox__label:before {\n    border-color: ", ";\n  }\n  .kg-checkbox__label:after {\n    background-color: ", ";\n  }\n"])), function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.inputFontSize;
}, function (props) {
  return props.theme.effectPanelTextSecondary2;
}, function (props) {
  return props.theme.activeColor;
}, function (props) {
  return props.theme.activeColor;
});
var StyledEffectTimeConfigurator = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: 8px;\n  margin-top: 3px;\n"])));
var StyledDatePicker = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  .react-date-picker--open .react-date-picker__wrapper .react-date-picker__inputGroup {\n    border: 1px solid ", ";\n    border-radius: 4px 4px 0px 0px !important;\n  }\n  .react-calendar__navigation__prev2-button,\n  .react-calendar__navigation__next2-button {\n    display: none;\n  }\n  .react-calendar__navigation__label {\n    position: absolute;\n    top: 20px;\n  }\n  .react-calendar__navigation__arrow {\n    position: absolute;\n    top: 18px;\n    font-size: 16px;\n  }\n  .react-calendar__navigation__prev-button {\n    right: 36px;\n  }\n  .react-calendar__navigation__next-button {\n    right: 12px;\n  }\n"])), function (props) {
  return props.theme.activeColor;
});
var WithIconWrapper = _styledComponents["default"].div(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  ", "\n"])), function (props) {
  return props.width ? "width: ".concat(props.width) : '';
});
var StyledExtraIcon = _styledComponents["default"].div(_templateObject8 || (_templateObject8 = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  top: 0px;\n  left: 8px;\n  width: 0px;\n  height: 32px;\n  color: ", ";\n  pointer-events: none;\n"])), function (props) {
  return props.theme.effectPanelTextSecondary2;
});
var TextBlock = _styledComponents["default"].div(_templateObject9 || (_templateObject9 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  width: ", ";\n  font-size: ", ";\n"])), function (props) {
  return props.theme.effectPanelTextSecondary2;
}, function (props) {
  return props.width;
}, function (props) {
  return props.theme.inputFontSize;
});

/**
 * Converts date, time and timezone into a UTC timestamp.
 * @param dateStr Date string in YYYY-MM-DD format.
 * @param timeStr Time string in HH:MM format.
 * @param timezone Timezone name.
 * @returns Timestamp or null if case of bad inputs.
 */
var getTimestamp = function getTimestamp(dateStr, timeStr, timezone) {
  var timestamp = null;
  var curr = _momentTimezone["default"].tz("".concat(dateStr, "T").concat(timeStr, ":00"), timezone);
  if (curr.isValid()) {
    timestamp = curr.utc().valueOf();
  }
  return timestamp;
};

/**
 * Converts time of the day into [0, 1] range
 * @param date
 * @returns
 */
var getDayRatio = function getDayRatio(date) {
  return (date.hours() * 60 + date.minutes()) * 60 * 1000 / DAY_MILISECONDS;
};
EffectTimeConfiguratorFactory.deps = [_timezoneSelector["default"], _effectTimeSlider["default"], _effectTimeSelector["default"]];
function EffectTimeConfiguratorFactory(TimezoneSelector, EffectTimeSlider, EffectTimeSelector) {
  var EffectTimeConfigurator = function EffectTimeConfigurator(_ref) {
    var timestamp = _ref.timestamp,
      _timezone = _ref.timezone,
      timeMode = _ref.timeMode,
      onTimeParametersChanged = _ref.onChange,
      mapState = _ref.mapState,
      intl = _ref.intl;
    var timezone = (0, _react.useMemo)(function () {
      return _momentTimezone["default"].tz.names().includes(_timezone) ? _timezone : _constants.DEFAULT_TIMEZONE;
    }, [_timezone]);
    var _useMemo = (0, _react.useMemo)(function () {
        var currentMoment = _momentTimezone["default"].tz(timestamp, timezone);

        // Slider value from 0 to 1
        var dayProgress = getDayRatio(currentMoment);

        // Date picker always renders Date in local timezone
        var date = new Date();
        date.setFullYear(currentMoment.year(), currentMoment.month(), currentMoment.date());
        date.setHours(0, 0, 0, 0);
        return [date, currentMoment.toDate(), currentMoment.format('HH:mm'), currentMoment.format('YYYY-MM-DD'), dayProgress];
      }, [timestamp, timezone]),
      _useMemo2 = (0, _slicedToArray2["default"])(_useMemo, 5),
      datePickerDate = _useMemo2[0],
      fullDate = _useMemo2[1],
      formattedTime = _useMemo2[2],
      formattedDate = _useMemo2[3],
      dayTimeProgress = _useMemo2[4];
    var timeSliderConfig = (0, _react.useMemo)(function () {
      var times = _suncalc["default"].getTimes(fullDate, mapState.latitude, mapState.longitude);
      var dawn = times.dawn,
        sunrise = times.sunrise,
        sunset = times.sunset,
        dusk = times.dusk;
      return {
        dawn: getDayRatio(_momentTimezone["default"].tz(dawn.valueOf(), timezone)),
        sunrise: getDayRatio(_momentTimezone["default"].tz(sunrise.valueOf(), timezone)),
        sunset: getDayRatio(_momentTimezone["default"].tz(sunset.valueOf(), timezone)),
        dusk: getDayRatio(_momentTimezone["default"].tz(dusk.valueOf(), timezone)),
        sunriseTime: _momentTimezone["default"].tz(sunrise.valueOf(), timezone).format('hh:mm A'),
        sunsetTime: _momentTimezone["default"].tz(sunset.valueOf(), timezone).format('hh:mm A')
      };
    }, [fullDate, timezone, mapState.latitude, mapState.longitude]);
    var onTimeSliderChange = (0, _react.useCallback)(function (value) {
      var hours = (0, _utils.clamp)([0, 23], Math.floor(value[1] * 24));
      var minutes = (0, _utils.clamp)([0, 59], Math.floor((value[1] * 24 - hours) * 60));
      var newFormattedTime = "".concat(hours < 10 ? "0".concat(hours) : hours, ":").concat(minutes < 10 ? "0".concat(minutes) : minutes);
      var newTimestamp = getTimestamp(formattedDate, newFormattedTime, timezone);
      onTimeParametersChanged({
        timestamp: newTimestamp
      });
    }, [formattedDate, timezone, onTimeParametersChanged]);
    var setDate = (0, _react.useCallback)(function (newDate) {
      if (!newDate) return;
      var newFormattedDate = (0, _momentTimezone["default"])(newDate).format('YYYY-MM-DD');
      var newTimestamp = getTimestamp(newFormattedDate, formattedTime, timezone);
      onTimeParametersChanged({
        timestamp: newTimestamp
      });
    }, [formattedTime, timezone, onTimeParametersChanged]);
    var setTime = (0, _react.useCallback)(function (newTime) {
      if (!newTime) return;
      var newTimestamp = getTimestamp(formattedDate, newTime, timezone);
      onTimeParametersChanged({
        timestamp: newTimestamp
      });
    }, [formattedDate, timezone, onTimeParametersChanged]);
    var setTimezone = (0, _react.useCallback)(function (newTimezone) {
      if (!newTimezone) return;
      var newTimestamp = getTimestamp(formattedDate, formattedTime, newTimezone);
      // date and time are adjusted to have the same value but in the new timezone
      onTimeParametersChanged({
        timestamp: newTimestamp,
        timezone: newTimezone
      });
    }, [formattedDate, formattedTime, onTimeParametersChanged]);
    var setCurrentDateTime = (0, _react.useCallback)(function () {
      onTimeParametersChanged({
        timestamp: new Date().valueOf()
      });
    }, [onTimeParametersChanged]);
    var formatShortWeekday = (0, _react.useCallback)(function (locale, date) {
      return ['S', 'M', 'T', 'W', 'T', 'F', 'S'][date.getDay()];
    }, []);
    var disableDateTimePick = timeMode !== _constants.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.pick;
    return /*#__PURE__*/_react["default"].createElement(StyledEffectTimeConfigurator, null, /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      marginBottom: 16
    }, /*#__PURE__*/_react["default"].createElement(StyledRadio, {
      type: "radio",
      checked: timeMode === _constants.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.pick,
      id: "effect-time-toggle-use-pick-time",
      label: intl.formatMessage({
        id: 'effectManager.pickDateTime'
      }),
      onChange: function onChange() {
        onTimeParametersChanged({
          timeMode: _constants.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.pick
        });
      }
    })), /*#__PURE__*/_react["default"].createElement(SliderWrapper, {
      hidden: disableDateTimePick
    }, /*#__PURE__*/_react["default"].createElement(EffectTimeSlider, {
      value: dayTimeProgress,
      onChange: onTimeSliderChange,
      config: timeSliderConfig
    })), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      hidden: disableDateTimePick,
      marginBottom: 2
    }, /*#__PURE__*/_react["default"].createElement(TextBlock, {
      width: "32px"
    }), /*#__PURE__*/_react["default"].createElement(TextBlock, {
      width: "110px"
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'effectManager.date'
    })), /*#__PURE__*/_react["default"].createElement(TextBlock, {
      width: "110px"
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'effectManager.time'
    }))), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      hidden: disableDateTimePick,
      marginBottom: 16
    }, /*#__PURE__*/_react["default"].createElement(StyledButton, {
      onClick: setCurrentDateTime,
      "data-for": "pick-time-button",
      "data-tip": true
    }, /*#__PURE__*/_react["default"].createElement(_icons.LocationMarker, {
      height: "16px"
    }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
      id: "pick-time-button",
      effect: "solid",
      place: "top",
      delayShow: 500
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'effectManager.pickCurrrentTime'
    }))), /*#__PURE__*/_react["default"].createElement(WithIconWrapper, null, /*#__PURE__*/_react["default"].createElement(StyledDatePicker, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledDatePicker, {
      value: datePickerDate,
      onChange: setDate,
      minDetail: 'month',
      formatShortWeekday: formatShortWeekday
    })), /*#__PURE__*/_react["default"].createElement(StyledExtraIcon, null, /*#__PURE__*/_react["default"].createElement(_icons.Calendar, {
      width: "16px",
      height: "32px"
    }))), /*#__PURE__*/_react["default"].createElement(WithIconWrapper, null, /*#__PURE__*/_react["default"].createElement(EffectTimeSelector, {
      value: formattedTime,
      onChange: setTime
    }), /*#__PURE__*/_react["default"].createElement(StyledExtraIcon, null, /*#__PURE__*/_react["default"].createElement(_icons.Clock, {
      width: "16px",
      height: "32px"
    })))), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      hidden: disableDateTimePick,
      marginBottom: 2
    }, /*#__PURE__*/_react["default"].createElement(TextBlock, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'effectManager.timezone'
    }))), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      hidden: disableDateTimePick,
      marginBottom: 24
    }, /*#__PURE__*/_react["default"].createElement(WithIconWrapper, {
      width: '100%'
    }, /*#__PURE__*/_react["default"].createElement(TimezoneSelector, {
      selected: timezone,
      onSelect: setTimezone
    }), /*#__PURE__*/_react["default"].createElement(StyledExtraIcon, null, /*#__PURE__*/_react["default"].createElement(_icons.Globe, {
      width: "16px",
      height: "32px"
    })))), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      marginBottom: 16
    }, /*#__PURE__*/_react["default"].createElement(StyledRadio, {
      type: "radio",
      checked: timeMode === _constants.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.current,
      id: "effect-time-toggle-use-current-time",
      label: intl.formatMessage({
        id: 'effectManager.currentTime'
      }),
      onChange: function onChange() {
        onTimeParametersChanged({
          timeMode: _constants.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.current
        });
      }
    })), /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      marginBottom: 16
    }, /*#__PURE__*/_react["default"].createElement(StyledRadio, {
      type: "radio",
      checked: timeMode === _constants.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.animation,
      id: "effect-time-toggle-use-animation-time",
      label: 'Animation time',
      onChange: function onChange() {
        onTimeParametersChanged({
          timeMode: _constants.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.animation
        });
      }
    })));
  };

  // @ts-expect-error how to properly type?
  return (0, _injector.withState)([_reducers.mapStateLens])((0, _reactIntl.injectIntl)(EffectTimeConfigurator));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,