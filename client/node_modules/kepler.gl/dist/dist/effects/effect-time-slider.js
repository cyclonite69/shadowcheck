"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = EffectTimeSliderFactory;
exports.getUIBlocks = getUIBlocks;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _rangeSlider = _interopRequireDefault(require("../common/range-slider"));
var _icons = require("../common/icons");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
var TimeSliderWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  width: 100%;\n  height: 48px;\n"])));
var TopRowWrapper = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 100%;\n  height: 32px;\n  display: flex;\n  position: relative;\n  align-items: center;\n\n  .day {\n    background-color: ", ";\n  }\n  .night {\n    background-color: ", ";\n  }\n  .sunrise,\n  .sunset {\n    background-color: ", ";\n  }\n  .inline_icon__day {\n    color: ", ";\n  }\n  .inline_icon__night {\n    color: ", ";\n  }\n"])), function (props) {
  return props.theme.effectPanelElementColorHovered;
}, function (props) {
  return props.theme.effectPanelElementColor;
}, function (props) {
  return props.theme.effectPanelElementColorActive;
}, function (props) {
  return props.theme.effectPanelElementColorSun;
}, function (props) {
  return props.theme.effectPanelTextSecondary2;
});
var BottomRowWrapper = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  height: 16px;\n  .bottom_icon__sunrise,\n  .bottom_icon__sunset {\n    color: ", ";\n  }\n"])), function (props) {
  return props.theme.effectPanelTextSecondary2;
});
var BackgroundBlock = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  margin: 0px;\n  padding: 0px;\n  width: ", ";\n  height: 24px;\n  pointer-events: none;\n"])), function (props) {
  return props.width;
});
var StyledIcon = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  top: 0px;\n  left: calc(", "% - 8px);\n  height: 32px;\n  pointer-events: none;\n"])), function (props) {
  return props.left;
});
var StyledBottomIcon = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  top: 0px;\n  left: calc(", "% - 27px);\n  height: 12px;\n  pointer-events: none;\n  margin-top: 1px;\n  display: flex;\n  align-items: flex-end;\n"])), function (props) {
  return props.left;
});
var RangeSliderWrapper = _styledComponents["default"].div(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  width: 100%;\n  .kg-slider {\n    padding-left: 6px;\n  }\n  .kg-range-slider {\n    padding: 0px !important;\n    background-color: transparent;\n  }\n  .kg-range-slider__bar {\n    background-color: transparent;\n  }\n  .kg-range-slider__handle {\n    height: 32px;\n    width: 8px;\n    margin-top: -14px;\n    align-items: center;\n    display: flex;\n    justify-content: center;\n  }\n  .kg-range-slider__handle::after {\n    margin-left: 1px;\n  }\n  .kg-range-slider__input {\n    height: 32px;\n    text-align: center;\n    padding: 3px 6px;\n  }\n"])));
var Text = _styledComponents["default"].div(_templateObject8 || (_templateObject8 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-left: 3px;\n  font-size: 10px;\n  line-height: 11px;\n  white-space: nowrap;\n"])));
var MODES = {
  sunrise: 'sunrise',
  day: 'day',
  sunset: 'sunset',
  night: 'night'
};

/**
 * Generate rendering blocks for each part of the day.
 */
function getUIBlocks(config) {
  var dawn = config.dawn;
  var sunrise = config.sunrise,
    sunset = config.sunset,
    dusk = config.dusk;
  if (dawn > sunrise) sunrise += 1;
  if (dawn > sunset) sunset += 1;
  if (dawn > dusk) dusk += 1;
  var blocks = [{
    start: dawn,
    end: sunrise,
    type: MODES.sunrise,
    width: 0,
    center: 0
  }, {
    start: sunrise,
    end: sunset,
    type: MODES.day,
    width: 0,
    center: 0
  }, {
    start: sunset,
    end: dusk,
    type: MODES.sunset,
    width: 0,
    center: 0
  }, {
    start: dusk,
    end: dawn,
    type: MODES.night,
    width: 0,
    center: 0
  }];
  var updatedBlocks = [];

  // sort and split ui blocks
  blocks.forEach(function (block) {
    if (block.start > block.end) {
      block.end += 1;
    }
    if (block.start > 1 && block.end > 1) {
      updatedBlocks.push(_objectSpread(_objectSpread({}, block), {}, {
        start: block.start - 1,
        end: block.end - 1
      }));
    } else if (block.end > 1) {
      updatedBlocks.push(_objectSpread(_objectSpread({}, block), {}, {
        end: 1
      }));
      updatedBlocks.push(_objectSpread(_objectSpread({}, block), {}, {
        start: 0,
        end: block.end - 1
      }));
    } else {
      updatedBlocks.push(block);
    }
  });
  updatedBlocks.sort(function (a, b) {
    return a.start - b.start;
  });
  var existingBottomBlocks = {};
  // eslint-disable-next-line complexity
  updatedBlocks.forEach(function (block) {
    block.width = (block.end - block.start) * 100;
    block.center = block.start * 100 + block.width / 2;

    // Don't display inline icons when day or night is too short.
    if ((block.type === MODES.day || block.type === MODES.night) && block.width > 5) {
      block.TopRowIcon = block.type === MODES.day ? _icons.Sun : _icons.Moon;
    }

    // bottom row icons below the slider
    if ((block.type === MODES.sunrise || block.type === MODES.sunset) && block.width > 0.1) {
      // prevent duplicates for bottom row
      var existingBlock = existingBottomBlocks[block.type];
      if (existingBlock) {
        if (existingBlock.width < block.width) existingBlock.BottomRowIcon = null;else if (existingBlock.width > block.width) return;
      }
      existingBottomBlocks[block.type] = block;

      // prevent bottom icon and labels
      block.BottomRowIcon = block.type === MODES.sunrise ? _icons.Sunrise : _icons.Sunset;
      if (block.center > 90) {
        block.center = 90;
      } else if (block.center < 10) {
        block.center = 10;
      }
      block.text = block.type === MODES.sunrise ? config.sunriseTime : config.sunsetTime;
    }
  });
  return updatedBlocks;
}
EffectTimeSliderFactory.deps = [_rangeSlider["default"]];
function EffectTimeSliderFactory(RangeSlider) {
  var EffectTimeSlider = function EffectTimeSlider(_ref) {
    var rangeSliderValue = _ref.value,
      onChange = _ref.onChange,
      config = _ref.config;
    var uiBlocks = (0, _react.useMemo)(function () {
      return getUIBlocks(config);
    }, [config]);
    var rangeSliderProps = (0, _react.useMemo)(function () {
      return {
        label: 'value',
        value1: rangeSliderValue,
        step: 0.001,
        range: [0, 1],
        value0: 0,
        onChange: onChange,
        showInput: false,
        isRanged: false
      };
    }, [rangeSliderValue, onChange]);
    return /*#__PURE__*/_react["default"].createElement(TimeSliderWrapper, null, /*#__PURE__*/_react["default"].createElement(TopRowWrapper, null, uiBlocks.map(function (block, index) {
      return /*#__PURE__*/_react["default"].createElement(BackgroundBlock, {
        key: index,
        width: "".concat(block.width, "%"),
        className: block.type
      });
    }), uiBlocks.map(function (block, index) {
      return block.TopRowIcon ? /*#__PURE__*/_react["default"].createElement(StyledIcon, {
        key: index,
        left: block.center,
        className: "inline_icon__".concat(block.type)
      }, /*#__PURE__*/_react["default"].createElement(block.TopRowIcon, {
        width: "16px",
        height: "32px"
      })) : null;
    }), /*#__PURE__*/_react["default"].createElement(RangeSliderWrapper, null, /*#__PURE__*/_react["default"].createElement(RangeSlider, rangeSliderProps))), /*#__PURE__*/_react["default"].createElement(BottomRowWrapper, null, uiBlocks.map(function (block, index) {
      return block.BottomRowIcon ? /*#__PURE__*/_react["default"].createElement(StyledBottomIcon, {
        key: index,
        left: block.center,
        className: "bottom_icon__".concat(block.type)
      }, /*#__PURE__*/_react["default"].createElement(block.BottomRowIcon, {
        width: "12px",
        height: "12px"
      }), /*#__PURE__*/_react["default"].createElement(Text, null, block.text)) : null;
    })));
  };
  return EffectTimeSlider;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,