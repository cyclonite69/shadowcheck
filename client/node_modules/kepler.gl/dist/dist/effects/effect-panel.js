"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _effectPanelHeader = _interopRequireDefault(require("./effect-panel-header"));
var _effectConfigurator = _interopRequireDefault(require("./effect-configurator"));
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function _callSuper(t, o, e) {
  return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
}
var PanelWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: 12px;\n  border-radius: 1px;\n  z-index: 1000;\n  &.dragging {\n    cursor: move;\n  }\n  margin: 3px auto 3px 25px;\n  max-width: 295px;\n"])));
EffectPanelFactory.deps = [_effectPanelHeader["default"], _effectConfigurator["default"]];
function EffectPanelFactory(EffectPanelHeader, EffectConfigurator) {
  var EffectPanel = /*#__PURE__*/function (_Component) {
    function EffectPanel() {
      var _this;
      (0, _classCallCheck2["default"])(this, EffectPanel);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, EffectPanel, [].concat(args));
      (0, _defineProperty2["default"])(_this, "_toggleEnabled", function (event) {
        event === null || event === void 0 || event.stopPropagation();
        _this.props.updateEffect(_this.props.effect.id, {
          isEnabled: !_this.props.effect.isEnabled
        });
      });
      (0, _defineProperty2["default"])(_this, "_toggleConfigActive", function (event) {
        event === null || event === void 0 || event.stopPropagation();
        _this.props.updateEffect(_this.props.effect.id, {
          isConfigActive: !_this.props.effect.isConfigActive
        });
      });
      (0, _defineProperty2["default"])(_this, "_removeEffect", function (event) {
        event === null || event === void 0 || event.stopPropagation();
        _this.props.removeEffect(_this.props.effect.id);
      });
      (0, _defineProperty2["default"])(_this, "_updateEffectConfig", function (event, id, props) {
        event === null || event === void 0 || event.stopPropagation();
        _this.props.updateEffect(id, props);
      });
      return _this;
    }
    (0, _inherits2["default"])(EffectPanel, _Component);
    return (0, _createClass2["default"])(EffectPanel, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          effect = _this$props.effect,
          isDraggable = _this$props.isDraggable,
          listeners = _this$props.listeners;
        var id = effect.id,
          type = effect.type,
          isConfigActive = effect.isConfigActive,
          isJsonEditorActive = effect.isJsonEditorActive,
          isEnabled = effect.isEnabled;
        var sortingAllowed = type !== _constants.LIGHT_AND_SHADOW_EFFECT.type;
        return /*#__PURE__*/_react["default"].createElement(PanelWrapper, {
          active: false,
          className: (0, _classnames["default"])('effect-panel', this.props.className),
          "data-testid": _constants.dataTestIds.effectPanel,
          style: this.props.style,
          onMouseDown: this.props.onMouseDown,
          onTouchStart: this.props.onTouchStart
        }, /*#__PURE__*/_react["default"].createElement(EffectPanelHeader, {
          isConfigActive: isConfigActive,
          effectId: id,
          type: type,
          isEnabled: isEnabled,
          isJsonEditorActive: isJsonEditorActive,
          onToggleEnabled: this._toggleEnabled,
          onRemoveEffect: this._removeEffect,
          onToggleEnableConfig: this._toggleConfigActive,
          isDragNDropEnabled: isDraggable && sortingAllowed,
          listeners: listeners,
          showSortHandle: type !== _constants.LIGHT_AND_SHADOW_EFFECT.type
        }), isConfigActive && /*#__PURE__*/_react["default"].createElement(EffectConfigurator, {
          key: "effect-configurator-".concat(id),
          effect: effect,
          updateEffectConfig: this._updateEffectConfig
        }));
      }
    }]);
  }(_react.Component); // @ts-expect-error fix The types of 'propTypes.isDraggable[nominalTypeHack]' are incompatible between these types.
  (0, _defineProperty2["default"])(EffectPanel, "propTypes", {
    effect: _propTypes["default"].object.isRequired,
    removeEffect: _propTypes["default"].func.isRequired,
    updateEffect: _propTypes["default"].func.isRequired,
    isDraggable: _propTypes["default"].bool
  });
  return EffectPanel;
}
var _default = exports["default"] = EffectPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,