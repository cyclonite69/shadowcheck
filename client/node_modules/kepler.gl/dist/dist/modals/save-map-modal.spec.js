"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _react2 = require("@testing-library/react");
var _saveMapModal = _interopRequireDefault(require("./save-map-modal"));
var _componentJestUtils = require("../../../../test/helpers/component-jest-utils");
var _useCloudListProvider = require("../hooks/use-cloud-list-provider");
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// @ts-nocheck
/**
 * I decided to move the next to the actual file because it makes it
 * extremely easier to mock adn test features.
 * It's easier to mock items with jest using the relative path
 * rather than trying to mock imports like @kepler.gl/components
 * which creates several side effects.
 * Colocating tests is much easier
 */
var SaveMapModal = (0, _saveMapModal["default"])();
var DEFAULT_PROS = {
  mapInfo: {
    title: 'Test Map',
    description: 'test'
  },
  exportImage: jest.fn(),
  isProviderLoading: false,
  providerError: null,
  onUpdateImageSetting: jest.fn(),
  cleanupExportImage: jest.fn(),
  onSetMapInfo: jest.fn(),
  onCancel: jest.fn(),
  onConfirm: jest.fn()
};
var UNDEFINED_MAP_TITLE_PROPS = _objectSpread(_objectSpread({}, DEFAULT_PROS), {}, {
  mapInfo: {
    description: undefined,
    title: undefined
  }
});
var DEFAULT_PROVIDER = {
  name: 'test provider',
  icon: jest.fn(),
  getManagementUrl: jest.fn().mockImplementation(function () {
    return 'provider.url';
  })
};
jest.mock("../hooks/use-cloud-list-provider", function () {
  return {
    useCloudListProvider: jest.fn().mockImplementation(function () {
      return {
        provider: null,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    })
  };
});
describe('SaveMapModal', function () {
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('renders SaveMapModal component with provider set to null and map title set', function () {
    var _renderWithTheme = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
      getByText = _renderWithTheme.getByText;
    var confirmButton = getByText('modal.button.save');
    expect(confirmButton).toBeInTheDocument();
    expect(confirmButton).toBeDisabled();
  });
  test('renders SaveMapModal component with provider set to null and map title not set', function () {
    var _renderWithTheme2 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, UNDEFINED_MAP_TITLE_PROPS)),
      getByText = _renderWithTheme2.getByText;
    var confirmButton = getByText('modal.button.save');
    expect(confirmButton).toBeInTheDocument();
    expect(confirmButton).toBeDisabled();
  });
  test('renders SaveMapModal component with provider correctly set and map title not set', function () {
    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: DEFAULT_PROVIDER,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });
    var _renderWithTheme3 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, UNDEFINED_MAP_TITLE_PROPS)),
      getByText = _renderWithTheme3.getByText;
    var confirmButton = getByText('modal.button.save');
    expect(confirmButton).toBeInTheDocument();
    expect(confirmButton).toBeDisabled();
  });
  test('renders SaveMapModal component with provider correctly set and map title set', function () {
    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: DEFAULT_PROVIDER,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });
    var _renderWithTheme4 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
      getByText = _renderWithTheme4.getByText;
    var confirmButton = getByText('modal.button.save');
    expect(confirmButton).toBeInTheDocument();
    expect(confirmButton).toBeEnabled();
  });
  test('calls onCancel when cancel button is clicked', function () {
    var _renderWithTheme5 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
      getByText = _renderWithTheme5.getByText;
    _react2.fireEvent.click(getByText('modal.button.defaultCancel'));
    expect(DEFAULT_PROS.onCancel).toHaveBeenCalled();
  });
  test('calls onConfirm with provider when confirm button is clicked', function () {
    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: DEFAULT_PROVIDER,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });
    var _renderWithTheme6 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
      getByText = _renderWithTheme6.getByText;
    var confirmButton = getByText('modal.button.save');
    _react2.fireEvent.click(confirmButton);
    expect(DEFAULT_PROS.onConfirm).toHaveBeenCalled();
  });
  test('does not render loading animation when isProviderLoading is true', function () {
    var _renderWithTheme7 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
      queryAllByTestId = _renderWithTheme7.queryAllByTestId;
    expect(queryAllByTestId(_constants.dataTestIds.providerLoading)).toHaveLength(0);
  });
  test('renders loading animation when isProviderLoading is true', function () {
    var _renderWithTheme8 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, (0, _extends2["default"])({}, DEFAULT_PROS, {
        isProviderLoading: true
      }))),
      getByTestId = _renderWithTheme8.getByTestId;
    expect(getByTestId(_constants.dataTestIds.providerLoading)).toBeInTheDocument();
  });
  test('renders no error if provider error is undefined', function () {
    var _renderWithTheme9 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, DEFAULT_PROS)),
      queryAllByText = _renderWithTheme9.queryAllByText;
    expect(queryAllByText('modal.statusPanel.error')).toHaveLength(0);
  });
  test('displays provider error message when providerError is present', function () {
    var _renderWithTheme10 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, (0, _extends2["default"])({}, DEFAULT_PROS, {
        providerError: {
          message: 'Error message'
        }
      }))),
      getByText = _renderWithTheme10.getByText;
    expect(getByText('modal.statusPanel.error')).toBeInTheDocument();
  });
  test('call onSetMapInfo upon typing map (provider is set)', function () {
    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: DEFAULT_PROVIDER,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });
    var _renderWithTheme11 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, UNDEFINED_MAP_TITLE_PROPS)),
      getByTestId = _renderWithTheme11.getByTestId,
      getByPlaceholderText = _renderWithTheme11.getByPlaceholderText;
    var mapInfoPanel = getByTestId(_constants.dataTestIds.providerMapInfoPanel);
    expect(mapInfoPanel).toBeInTheDocument();
    var titleInput = getByPlaceholderText('Type map title');
    expect(titleInput).toBeInTheDocument();
    _react2.fireEvent.change(titleInput, {
      target: {
        value: 'first kepler map'
      }
    });
    expect(DEFAULT_PROS.onSetMapInfo).toHaveBeenCalledWith({
      title: 'first kepler map'
    });
  });
  test('call onUpdateImageSetting', function () {
    _useCloudListProvider.useCloudListProvider.mockImplementation(function () {
      return {
        provider: DEFAULT_PROVIDER,
        setProvider: jest.fn(),
        cloudProviders: []
      };
    });
    (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(SaveMapModal, UNDEFINED_MAP_TITLE_PROPS));

    // first time the component mount
    expect(DEFAULT_PROS.onUpdateImageSetting).toHaveBeenCalledWith({
      exporting: true
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfc2F2ZU1hcE1vZGFsIiwiX2NvbXBvbmVudEplc3RVdGlscyIsIl91c2VDbG91ZExpc3RQcm92aWRlciIsIl9jb25zdGFudHMiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIlNhdmVNYXBNb2RhbCIsIkRFRkFVTFRfUFJPUyIsIm1hcEluZm8iLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiZXhwb3J0SW1hZ2UiLCJqZXN0IiwiZm4iLCJpc1Byb3ZpZGVyTG9hZGluZyIsInByb3ZpZGVyRXJyb3IiLCJvblVwZGF0ZUltYWdlU2V0dGluZyIsImNsZWFudXBFeHBvcnRJbWFnZSIsIm9uU2V0TWFwSW5mbyIsIm9uQ2FuY2VsIiwib25Db25maXJtIiwiVU5ERUZJTkVEX01BUF9USVRMRV9QUk9QUyIsInVuZGVmaW5lZCIsIkRFRkFVTFRfUFJPVklERVIiLCJuYW1lIiwiaWNvbiIsImdldE1hbmFnZW1lbnRVcmwiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJtb2NrIiwidXNlQ2xvdWRMaXN0UHJvdmlkZXIiLCJwcm92aWRlciIsInNldFByb3ZpZGVyIiwiY2xvdWRQcm92aWRlcnMiLCJkZXNjcmliZSIsImFmdGVyRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJ0ZXN0IiwiX3JlbmRlcldpdGhUaGVtZSIsInJlbmRlcldpdGhUaGVtZSIsImNyZWF0ZUVsZW1lbnQiLCJnZXRCeVRleHQiLCJjb25maXJtQnV0dG9uIiwiZXhwZWN0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJ0b0JlRGlzYWJsZWQiLCJfcmVuZGVyV2l0aFRoZW1lMiIsIl9yZW5kZXJXaXRoVGhlbWUzIiwiX3JlbmRlcldpdGhUaGVtZTQiLCJ0b0JlRW5hYmxlZCIsIl9yZW5kZXJXaXRoVGhlbWU1IiwiZmlyZUV2ZW50IiwiY2xpY2siLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlcldpdGhUaGVtZTYiLCJfcmVuZGVyV2l0aFRoZW1lNyIsInF1ZXJ5QWxsQnlUZXN0SWQiLCJkYXRhVGVzdElkcyIsInByb3ZpZGVyTG9hZGluZyIsInRvSGF2ZUxlbmd0aCIsIl9yZW5kZXJXaXRoVGhlbWU4IiwiX2V4dGVuZHMyIiwiZ2V0QnlUZXN0SWQiLCJfcmVuZGVyV2l0aFRoZW1lOSIsInF1ZXJ5QWxsQnlUZXh0IiwiX3JlbmRlcldpdGhUaGVtZTEwIiwibWVzc2FnZSIsIl9yZW5kZXJXaXRoVGhlbWUxMSIsImdldEJ5UGxhY2Vob2xkZXJUZXh0IiwibWFwSW5mb1BhbmVsIiwicHJvdmlkZXJNYXBJbmZvUGFuZWwiLCJ0aXRsZUlucHV0IiwiY2hhbmdlIiwidGFyZ2V0IiwidmFsdWUiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImV4cG9ydGluZyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RhbHMvc2F2ZS1tYXAtbW9kYWwuc3BlYy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuLy8gQHRzLW5vY2hlY2tcblxuLyoqXG4gKiBJIGRlY2lkZWQgdG8gbW92ZSB0aGUgbmV4dCB0byB0aGUgYWN0dWFsIGZpbGUgYmVjYXVzZSBpdCBtYWtlcyBpdFxuICogZXh0cmVtZWx5IGVhc2llciB0byBtb2NrIGFkbiB0ZXN0IGZlYXR1cmVzLlxuICogSXQncyBlYXNpZXIgdG8gbW9jayBpdGVtcyB3aXRoIGplc3QgdXNpbmcgdGhlIHJlbGF0aXZlIHBhdGhcbiAqIHJhdGhlciB0aGFuIHRyeWluZyB0byBtb2NrIGltcG9ydHMgbGlrZSBAa2VwbGVyLmdsL2NvbXBvbmVudHNcbiAqIHdoaWNoIGNyZWF0ZXMgc2V2ZXJhbCBzaWRlIGVmZmVjdHMuXG4gKiBDb2xvY2F0aW5nIHRlc3RzIGlzIG11Y2ggZWFzaWVyXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7ZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCBTYXZlTWFwTW9kYWxGYWN0b3J5IGZyb20gJy4vc2F2ZS1tYXAtbW9kYWwnO1xuaW1wb3J0IHtyZW5kZXJXaXRoVGhlbWV9IGZyb20gJ3Rlc3QvaGVscGVycy9jb21wb25lbnQtamVzdC11dGlscyc7XG5pbXBvcnQge3VzZUNsb3VkTGlzdFByb3ZpZGVyfSBmcm9tICcuLi9ob29rcy91c2UtY2xvdWQtbGlzdC1wcm92aWRlcic7XG5pbXBvcnQge2RhdGFUZXN0SWRzfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5cbmNvbnN0IFNhdmVNYXBNb2RhbCA9IFNhdmVNYXBNb2RhbEZhY3RvcnkoKTtcblxuY29uc3QgREVGQVVMVF9QUk9TID0ge1xuICBtYXBJbmZvOiB7XG4gICAgdGl0bGU6ICdUZXN0IE1hcCcsXG4gICAgZGVzY3JpcHRpb246ICd0ZXN0J1xuICB9LFxuICBleHBvcnRJbWFnZTogamVzdC5mbigpLFxuICBpc1Byb3ZpZGVyTG9hZGluZzogZmFsc2UsXG4gIHByb3ZpZGVyRXJyb3I6IG51bGwsXG4gIG9uVXBkYXRlSW1hZ2VTZXR0aW5nOiBqZXN0LmZuKCksXG4gIGNsZWFudXBFeHBvcnRJbWFnZTogamVzdC5mbigpLFxuICBvblNldE1hcEluZm86IGplc3QuZm4oKSxcbiAgb25DYW5jZWw6IGplc3QuZm4oKSxcbiAgb25Db25maXJtOiBqZXN0LmZuKClcbn07XG5cbmNvbnN0IFVOREVGSU5FRF9NQVBfVElUTEVfUFJPUFMgPSB7XG4gIC4uLkRFRkFVTFRfUFJPUyxcbiAgbWFwSW5mbzoge1xuICAgIGRlc2NyaXB0aW9uOiB1bmRlZmluZWQsXG4gICAgdGl0bGU6IHVuZGVmaW5lZFxuICB9XG59O1xuXG5jb25zdCBERUZBVUxUX1BST1ZJREVSID0ge1xuICBuYW1lOiAndGVzdCBwcm92aWRlcicsXG4gIGljb246IGplc3QuZm4oKSxcbiAgZ2V0TWFuYWdlbWVudFVybDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAncHJvdmlkZXIudXJsJylcbn07XG5cbmplc3QubW9jaygnLi4vaG9va3MvdXNlLWNsb3VkLWxpc3QtcHJvdmlkZXInLCAoKSA9PiAoe1xuICB1c2VDbG91ZExpc3RQcm92aWRlcjogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIHByb3ZpZGVyOiBudWxsLFxuICAgIHNldFByb3ZpZGVyOiBqZXN0LmZuKCksXG4gICAgY2xvdWRQcm92aWRlcnM6IFtdXG4gIH0pKVxufSkpO1xuXG5kZXNjcmliZSgnU2F2ZU1hcE1vZGFsJywgKCkgPT4ge1xuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICB0ZXN0KCdyZW5kZXJzIFNhdmVNYXBNb2RhbCBjb21wb25lbnQgd2l0aCBwcm92aWRlciBzZXQgdG8gbnVsbCBhbmQgbWFwIHRpdGxlIHNldCcsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcldpdGhUaGVtZSg8U2F2ZU1hcE1vZGFsIHsuLi5ERUZBVUxUX1BST1N9IC8+KTtcbiAgICBjb25zdCBjb25maXJtQnV0dG9uID0gZ2V0QnlUZXh0KCdtb2RhbC5idXR0b24uc2F2ZScpO1xuICAgIGV4cGVjdChjb25maXJtQnV0dG9uKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChjb25maXJtQnV0dG9uKS50b0JlRGlzYWJsZWQoKTtcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyBTYXZlTWFwTW9kYWwgY29tcG9uZW50IHdpdGggcHJvdmlkZXIgc2V0IHRvIG51bGwgYW5kIG1hcCB0aXRsZSBub3Qgc2V0JywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyV2l0aFRoZW1lKDxTYXZlTWFwTW9kYWwgey4uLlVOREVGSU5FRF9NQVBfVElUTEVfUFJPUFN9IC8+KTtcbiAgICBjb25zdCBjb25maXJtQnV0dG9uID0gZ2V0QnlUZXh0KCdtb2RhbC5idXR0b24uc2F2ZScpO1xuICAgIGV4cGVjdChjb25maXJtQnV0dG9uKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChjb25maXJtQnV0dG9uKS50b0JlRGlzYWJsZWQoKTtcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyBTYXZlTWFwTW9kYWwgY29tcG9uZW50IHdpdGggcHJvdmlkZXIgY29ycmVjdGx5IHNldCBhbmQgbWFwIHRpdGxlIG5vdCBzZXQnLCAoKSA9PiB7XG4gICAgdXNlQ2xvdWRMaXN0UHJvdmlkZXIubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICBwcm92aWRlcjogREVGQVVMVF9QUk9WSURFUixcbiAgICAgIHNldFByb3ZpZGVyOiBqZXN0LmZuKCksXG4gICAgICBjbG91ZFByb3ZpZGVyczogW11cbiAgICB9KSk7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXJXaXRoVGhlbWUoPFNhdmVNYXBNb2RhbCB7Li4uVU5ERUZJTkVEX01BUF9USVRMRV9QUk9QU30gLz4pO1xuICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBnZXRCeVRleHQoJ21vZGFsLmJ1dHRvbi5zYXZlJyk7XG4gICAgZXhwZWN0KGNvbmZpcm1CdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KGNvbmZpcm1CdXR0b24pLnRvQmVEaXNhYmxlZCgpO1xuICB9KTtcblxuICB0ZXN0KCdyZW5kZXJzIFNhdmVNYXBNb2RhbCBjb21wb25lbnQgd2l0aCBwcm92aWRlciBjb3JyZWN0bHkgc2V0IGFuZCBtYXAgdGl0bGUgc2V0JywgKCkgPT4ge1xuICAgIHVzZUNsb3VkTGlzdFByb3ZpZGVyLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgcHJvdmlkZXI6IERFRkFVTFRfUFJPVklERVIsXG4gICAgICBzZXRQcm92aWRlcjogamVzdC5mbigpLFxuICAgICAgY2xvdWRQcm92aWRlcnM6IFtdXG4gICAgfSkpO1xuICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyV2l0aFRoZW1lKDxTYXZlTWFwTW9kYWwgey4uLkRFRkFVTFRfUFJPU30gLz4pO1xuICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBnZXRCeVRleHQoJ21vZGFsLmJ1dHRvbi5zYXZlJyk7XG4gICAgZXhwZWN0KGNvbmZpcm1CdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KGNvbmZpcm1CdXR0b24pLnRvQmVFbmFibGVkKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NhbGxzIG9uQ2FuY2VsIHdoZW4gY2FuY2VsIGJ1dHRvbiBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyV2l0aFRoZW1lKDxTYXZlTWFwTW9kYWwgey4uLkRFRkFVTFRfUFJPU30gLz4pO1xuICAgIGZpcmVFdmVudC5jbGljayhnZXRCeVRleHQoJ21vZGFsLmJ1dHRvbi5kZWZhdWx0Q2FuY2VsJykpO1xuICAgIGV4cGVjdChERUZBVUxUX1BST1Mub25DYW5jZWwpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FsbHMgb25Db25maXJtIHdpdGggcHJvdmlkZXIgd2hlbiBjb25maXJtIGJ1dHRvbiBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAgIHVzZUNsb3VkTGlzdFByb3ZpZGVyLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgcHJvdmlkZXI6IERFRkFVTFRfUFJPVklERVIsXG4gICAgICBzZXRQcm92aWRlcjogamVzdC5mbigpLFxuICAgICAgY2xvdWRQcm92aWRlcnM6IFtdXG4gICAgfSkpO1xuICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyV2l0aFRoZW1lKDxTYXZlTWFwTW9kYWwgey4uLkRFRkFVTFRfUFJPU30gLz4pO1xuICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBnZXRCeVRleHQoJ21vZGFsLmJ1dHRvbi5zYXZlJyk7XG4gICAgZmlyZUV2ZW50LmNsaWNrKGNvbmZpcm1CdXR0b24pO1xuICAgIGV4cGVjdChERUZBVUxUX1BST1Mub25Db25maXJtKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2RvZXMgbm90IHJlbmRlciBsb2FkaW5nIGFuaW1hdGlvbiB3aGVuIGlzUHJvdmlkZXJMb2FkaW5nIGlzIHRydWUnLCAoKSA9PiB7XG4gICAgY29uc3Qge3F1ZXJ5QWxsQnlUZXN0SWR9ID0gcmVuZGVyV2l0aFRoZW1lKDxTYXZlTWFwTW9kYWwgey4uLkRFRkFVTFRfUFJPU30gLz4pO1xuICAgIGV4cGVjdChxdWVyeUFsbEJ5VGVzdElkKGRhdGFUZXN0SWRzLnByb3ZpZGVyTG9hZGluZykpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyBsb2FkaW5nIGFuaW1hdGlvbiB3aGVuIGlzUHJvdmlkZXJMb2FkaW5nIGlzIHRydWUnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcldpdGhUaGVtZShcbiAgICAgIDxTYXZlTWFwTW9kYWwgey4uLkRFRkFVTFRfUFJPU30gaXNQcm92aWRlckxvYWRpbmc9e3RydWV9IC8+XG4gICAgKTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoZGF0YVRlc3RJZHMucHJvdmlkZXJMb2FkaW5nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyBubyBlcnJvciBpZiBwcm92aWRlciBlcnJvciBpcyB1bmRlZmluZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qge3F1ZXJ5QWxsQnlUZXh0fSA9IHJlbmRlcldpdGhUaGVtZSg8U2F2ZU1hcE1vZGFsIHsuLi5ERUZBVUxUX1BST1N9IC8+KTtcbiAgICBleHBlY3QocXVlcnlBbGxCeVRleHQoJ21vZGFsLnN0YXR1c1BhbmVsLmVycm9yJykpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSk7XG5cbiAgdGVzdCgnZGlzcGxheXMgcHJvdmlkZXIgZXJyb3IgbWVzc2FnZSB3aGVuIHByb3ZpZGVyRXJyb3IgaXMgcHJlc2VudCcsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcldpdGhUaGVtZShcbiAgICAgIDxTYXZlTWFwTW9kYWwgey4uLkRFRkFVTFRfUFJPU30gcHJvdmlkZXJFcnJvcj17e21lc3NhZ2U6ICdFcnJvciBtZXNzYWdlJ319IC8+XG4gICAgKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdtb2RhbC5zdGF0dXNQYW5lbC5lcnJvcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICB0ZXN0KCdjYWxsIG9uU2V0TWFwSW5mbyB1cG9uIHR5cGluZyBtYXAgKHByb3ZpZGVyIGlzIHNldCknLCAoKSA9PiB7XG4gICAgdXNlQ2xvdWRMaXN0UHJvdmlkZXIubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICBwcm92aWRlcjogREVGQVVMVF9QUk9WSURFUixcbiAgICAgIHNldFByb3ZpZGVyOiBqZXN0LmZuKCksXG4gICAgICBjbG91ZFByb3ZpZGVyczogW11cbiAgICB9KSk7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkLCBnZXRCeVBsYWNlaG9sZGVyVGV4dH0gPSByZW5kZXJXaXRoVGhlbWUoXG4gICAgICA8U2F2ZU1hcE1vZGFsIHsuLi5VTkRFRklORURfTUFQX1RJVExFX1BST1BTfSAvPlxuICAgICk7XG5cbiAgICBjb25zdCBtYXBJbmZvUGFuZWwgPSBnZXRCeVRlc3RJZChkYXRhVGVzdElkcy5wcm92aWRlck1hcEluZm9QYW5lbCk7XG4gICAgZXhwZWN0KG1hcEluZm9QYW5lbCkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIGNvbnN0IHRpdGxlSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgnVHlwZSBtYXAgdGl0bGUnKTtcbiAgICBleHBlY3QodGl0bGVJbnB1dCkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIGZpcmVFdmVudC5jaGFuZ2UodGl0bGVJbnB1dCwge3RhcmdldDoge3ZhbHVlOiAnZmlyc3Qga2VwbGVyIG1hcCd9fSk7XG4gICAgZXhwZWN0KERFRkFVTFRfUFJPUy5vblNldE1hcEluZm8pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHt0aXRsZTogJ2ZpcnN0IGtlcGxlciBtYXAnfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NhbGwgb25VcGRhdGVJbWFnZVNldHRpbmcnLCAoKSA9PiB7XG4gICAgdXNlQ2xvdWRMaXN0UHJvdmlkZXIubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICBwcm92aWRlcjogREVGQVVMVF9QUk9WSURFUixcbiAgICAgIHNldFByb3ZpZGVyOiBqZXN0LmZuKCksXG4gICAgICBjbG91ZFByb3ZpZGVyczogW11cbiAgICB9KSk7XG5cbiAgICByZW5kZXJXaXRoVGhlbWUoPFNhdmVNYXBNb2RhbCB7Li4uVU5ERUZJTkVEX01BUF9USVRMRV9QUk9QU30gLz4pO1xuXG4gICAgLy8gZmlyc3QgdGltZSB0aGUgY29tcG9uZW50IG1vdW50XG4gICAgZXhwZWN0KERFRkFVTFRfUFJPUy5vblVwZGF0ZUltYWdlU2V0dGluZykudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgZXhwb3J0aW5nOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBY0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsbUJBQUEsR0FBQUgsT0FB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