"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _get = _interopRequireDefault(require("lodash/get"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

// TODO: this should be turned into a custom hook
/**
 * A wrapper component in modals contain a image preview of the map with cloud providers
 * It sets export image size based on provider thumbnail size
 * @type {React.FunctionComponent<ImageModalContainerProps>}
 */
var ImageModalContainer = function ImageModalContainer(_ref) {
  var onUpdateImageSetting = _ref.onUpdateImageSetting,
    cleanupExportImage = _ref.cleanupExportImage,
    provider = _ref.provider,
    children = _ref.children;
  (0, _react.useEffect)(function () {
    onUpdateImageSetting({
      exporting: true
    });
    return function () {
      cleanupExportImage();
    };
  }, [onUpdateImageSetting, cleanupExportImage]);
  (0, _react.useEffect)(function () {
    if (provider) {
      if (provider.thumbnail) {
        onUpdateImageSetting({
          mapW: (0, _get["default"])(provider, ['thumbnail', 'width']) || _constants.MAP_THUMBNAIL_DIMENSION.width,
          mapH: (0, _get["default"])(provider, ['thumbnail', 'height']) || _constants.MAP_THUMBNAIL_DIMENSION.height,
          ratio: _constants.EXPORT_IMG_RATIOS.CUSTOM,
          legend: false
        });
      }
    } else {
      onUpdateImageSetting({
        mapW: _constants.MAP_THUMBNAIL_DIMENSION.width,
        mapH: _constants.MAP_THUMBNAIL_DIMENSION.height,
        ratio: _constants.EXPORT_IMG_RATIOS.CUSTOM,
        legend: false
      });
    }
  }, [provider, onUpdateImageSetting]);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, children);
};
var _default = exports["default"] = ImageModalContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jb25zdGFudHMiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJJbWFnZU1vZGFsQ29udGFpbmVyIiwiX3JlZiIsIm9uVXBkYXRlSW1hZ2VTZXR0aW5nIiwiY2xlYW51cEV4cG9ydEltYWdlIiwicHJvdmlkZXIiLCJjaGlsZHJlbiIsInVzZUVmZmVjdCIsImV4cG9ydGluZyIsInRodW1ibmFpbCIsIm1hcFciLCJNQVBfVEhVTUJOQUlMX0RJTUVOU0lPTiIsIndpZHRoIiwibWFwSCIsImhlaWdodCIsInJhdGlvIiwiRVhQT1JUX0lNR19SQVRJT1MiLCJDVVNUT00iLCJsZWdlbmQiLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kYWxzL2ltYWdlLW1vZGFsLWNvbnRhaW5lci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC9nZXQnO1xuXG5pbXBvcnQge01BUF9USFVNQk5BSUxfRElNRU5TSU9OLCBFWFBPUlRfSU1HX1JBVElPU30gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtTZXRFeHBvcnRJbWFnZVNldHRpbmdVcGRhdGVyQWN0aW9ufSBmcm9tICdAa2VwbGVyLmdsL2FjdGlvbnMnO1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAnQGtlcGxlci5nbC9jbG91ZC1wcm92aWRlcnMnO1xuXG5leHBvcnQgdHlwZSBJbWFnZU1vZGFsQ29udGFpbmVyUHJvcHMgPSB7XG4gIHByb3ZpZGVyPzogUHJvdmlkZXIgfCBudWxsO1xuICBvblVwZGF0ZUltYWdlU2V0dGluZzogKG5ld1NldHRpbmc6IFNldEV4cG9ydEltYWdlU2V0dGluZ1VwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXSkgPT4gdm9pZDtcbiAgY2xlYW51cEV4cG9ydEltYWdlOiAoKSA9PiB2b2lkO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbn07XG5cbi8vIFRPRE86IHRoaXMgc2hvdWxkIGJlIHR1cm5lZCBpbnRvIGEgY3VzdG9tIGhvb2tcbi8qKlxuICogQSB3cmFwcGVyIGNvbXBvbmVudCBpbiBtb2RhbHMgY29udGFpbiBhIGltYWdlIHByZXZpZXcgb2YgdGhlIG1hcCB3aXRoIGNsb3VkIHByb3ZpZGVyc1xuICogSXQgc2V0cyBleHBvcnQgaW1hZ2Ugc2l6ZSBiYXNlZCBvbiBwcm92aWRlciB0aHVtYm5haWwgc2l6ZVxuICogQHR5cGUge1JlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PEltYWdlTW9kYWxDb250YWluZXJQcm9wcz59XG4gKi9cbmNvbnN0IEltYWdlTW9kYWxDb250YWluZXI6IFJlYWN0LkZDPEltYWdlTW9kYWxDb250YWluZXJQcm9wcz4gPSAoe1xuICBvblVwZGF0ZUltYWdlU2V0dGluZyxcbiAgY2xlYW51cEV4cG9ydEltYWdlLFxuICBwcm92aWRlcixcbiAgY2hpbGRyZW5cbn0pID0+IHtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBvblVwZGF0ZUltYWdlU2V0dGluZyh7ZXhwb3J0aW5nOiB0cnVlfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFudXBFeHBvcnRJbWFnZSgpO1xuICAgIH07XG4gIH0sIFtvblVwZGF0ZUltYWdlU2V0dGluZywgY2xlYW51cEV4cG9ydEltYWdlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJvdmlkZXIpIHtcbiAgICAgIGlmIChwcm92aWRlci50aHVtYm5haWwpIHtcbiAgICAgICAgb25VcGRhdGVJbWFnZVNldHRpbmcoe1xuICAgICAgICAgIG1hcFc6IGdldChwcm92aWRlciwgWyd0aHVtYm5haWwnLCAnd2lkdGgnXSkgfHwgTUFQX1RIVU1CTkFJTF9ESU1FTlNJT04ud2lkdGgsXG4gICAgICAgICAgbWFwSDogZ2V0KHByb3ZpZGVyLCBbJ3RodW1ibmFpbCcsICdoZWlnaHQnXSkgfHwgTUFQX1RIVU1CTkFJTF9ESU1FTlNJT04uaGVpZ2h0LFxuICAgICAgICAgIHJhdGlvOiBFWFBPUlRfSU1HX1JBVElPUy5DVVNUT00sXG4gICAgICAgICAgbGVnZW5kOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb25VcGRhdGVJbWFnZVNldHRpbmcoe1xuICAgICAgICBtYXBXOiBNQVBfVEhVTUJOQUlMX0RJTUVOU0lPTi53aWR0aCxcbiAgICAgICAgbWFwSDogTUFQX1RIVU1CTkFJTF9ESU1FTlNJT04uaGVpZ2h0LFxuICAgICAgICByYXRpbzogRVhQT1JUX0lNR19SQVRJT1MuQ1VTVE9NLFxuICAgICAgICBsZWdlbmQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtwcm92aWRlciwgb25VcGRhdGVJbWFnZVNldHRpbmddKTtcblxuICByZXR1cm4gPD57Y2hpbGRyZW59PC8+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2VNb2RhbENvbnRhaW5lcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxJQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFFQSxJQUFB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