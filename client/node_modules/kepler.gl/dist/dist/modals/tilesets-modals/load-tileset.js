"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactJsonPretty = _interopRequireDefault(require("react-json-pretty"));
var _reactVirtualized = require("react-virtualized");
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _layers = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/layers/src");
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _loadDataFooter = _interopRequireDefault(require("./load-data-footer"));
var _tilesetIcon = _interopRequireDefault(require("./tileset-icon"));
var _tilesetVectorForm = _interopRequireDefault(require("./tileset-vector-form"));
var _tilesetRasterForm = _interopRequireDefault(require("./tileset-raster-form"));
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
var WIDTH_ICON = '70px';
var LoadTilesetTabContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n"])), function (props) {
  return props.theme.AZURE;
});
var Container = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  grid-gap: 20px;\n  background-color: ", ";\n"])), function (props) {
  return props.theme.WHITE;
});
var TilesetTypeContainer = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: grid;\n  grid-template-columns: repeat(4, ", ");\n  column-gap: 10px;\n  margin-bottom: 20px;\n"])), WIDTH_ICON);
var MetaContainer = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  max-height: 400px;\n  background-color: ", ";\n"])), function (_ref) {
  var theme = _ref.theme;
  return theme.editorBackground;
});
var MetaInnerContainer = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  border: 1px solid ", ";\n  background-color: white;\n  border-radius: 2px;\n  display: inline-block;\n  font: inherit;\n  line-height: 1.5em;\n  padding: 0.5em 3.5em 0.5em 1em;\n  box-sizing: border-box;\n  overflow-y: scroll;\n  overflow-x: auto;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  height: ", "px;\n  width: ", "px;\n  color: ", ";\n  font-size: 11px;\n  font-family: ", ";\n  max-width: 600px;\n"])), function (props) {
  return props.theme.selectBorderColorLT;
}, function (props) {
  return props.height;
}, function (props) {
  return props.width;
}, function (props) {
  return props.theme.textColorLT;
}, function (props) {
  return props.theme.fontFamily;
});
var StyledHeaderMessage = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  font-size: 14px;\n"])), function (props) {
  return props.theme.textColorLT;
});
var TILE_TYPES = [{
  id: 'vectorTile',
  label: 'Vector Tile',
  Icon: _layers.VectorTileIcon,
  Component: _tilesetVectorForm["default"]
}, {
  id: 'rasterTile',
  label: 'Raster Tile',
  Icon: _layers.RasterTileIcon,
  Component: _tilesetRasterForm["default"]
}];
function isReady(response) {
  return response.dataset && !response.loading && !response.error;
}
function LoadTilesetTabFactory() {
  var LoadTilesetTab = function LoadTilesetTab(_ref2) {
    var onTilesetAdded = _ref2.onTilesetAdded,
      isAddingDatasets = _ref2.isAddingDatasets;
    var _useState = (0, _react.useState)(0),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      typeIndex = _useState2[0],
      setTypeIndex = _useState2[1];
    var _useState3 = (0, _react.useState)({}),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      response = _useState4[0],
      setResponse = _useState4[1];
    var error = response.error;
    var loading = response.loading;
    var data = response.metadata;
    var jsonDataText = (0, _react.useMemo)(function () {
      return JSON.stringify(data, null, 2);
    }, [data]);
    var createTileDataset = (0, _react.useCallback)(function () {
      var dataset = response.dataset,
        metadata = response.metadata;
      if (dataset) {
        onTilesetAdded(dataset, metadata);
      }
    }, [onTilesetAdded, response]);

    // temp patch to hide raster tile layer while in development
    var enableRasterTileLayer = (0, _utils.getApplicationConfig)().enableRasterTileLayer;
    var tileTypes = (0, _react.useMemo)(function () {
      return enableRasterTileLayer ? TILE_TYPES : [TILE_TYPES[0]];
    }, [enableRasterTileLayer]);
    var CurrentForm = tileTypes[typeIndex].Component;
    return /*#__PURE__*/_react["default"].createElement(LoadTilesetTabContainer, null, /*#__PURE__*/_react["default"].createElement(Container, null, /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(StyledHeaderMessage, null, "Tileset Type"), /*#__PURE__*/_react["default"].createElement(TilesetTypeContainer, {
      className: "tileset-type"
    }, tileTypes.map(function (tileType, index) {
      return /*#__PURE__*/_react["default"].createElement(_tilesetIcon["default"], {
        key: tileType.label,
        name: tileType.label,
        Icon: /*#__PURE__*/_react["default"].createElement(tileType.Icon, {
          height: WIDTH_ICON
        }),
        onClick: function onClick() {
          return setTypeIndex(index);
        },
        selected: typeIndex === index
      });
    })), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(CurrentForm, {
      setResponse: setResponse
    }))), /*#__PURE__*/_react["default"].createElement(MetaContainer, null, data && /*#__PURE__*/_react["default"].createElement(_reactVirtualized.AutoSizer, null, function (_ref3) {
      var height = _ref3.height,
        width = _ref3.width;
      return /*#__PURE__*/_react["default"].createElement(MetaInnerContainer, {
        height: height,
        width: width
      }, /*#__PURE__*/_react["default"].createElement(_reactJsonPretty["default"], {
        id: "json-pretty",
        json: jsonDataText
      }));
    }))), /*#__PURE__*/_react["default"].createElement(_loadDataFooter["default"], {
      disabled: Boolean(error) || !isReady(response),
      isLoading: loading || isAddingDatasets,
      onConfirm: createTileDataset,
      confirmText: "tilesetSetup.addTilesetText",
      errorText: error && (0, _utils.getError)(error)
    }));
  };
  return LoadTilesetTab;
}
var _default = exports["default"] = LoadTilesetTabFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,