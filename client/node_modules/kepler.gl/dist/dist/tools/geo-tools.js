"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGeoTools = getGeoTools;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactRedux = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-redux/lib");
var _geoda = require("@openassistant/geoda");
var _osm = require("@openassistant/osm");
var _processors = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/processors/src");
var _actions = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/actions/src");
var _lisaTool = require("./lisa-tool");
var _utils = require("./utils");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function getGeoTools(aiAssistant, datasets, layers, layerData) {
  // context for geo tools
  var getValues = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(datasetName, variableName) {
      var values;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            values = (0, _utils.getValuesFromDataset)(datasets, layers, datasetName, variableName);
            return _context.abrupt("return", values);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function getValues(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  var getGeometries = /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(datasetName) {
      var geoms, geojson;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            geoms = (0, _utils.getGeometriesFromDataset)(datasets, layers, layerData, datasetName);
            if (geoms.length === 0) {
              // get the geoms from the cache
              geojson = (0, _osm.getCachedData)(datasetName);
              if (geojson && 'features' in geojson) {
                geoms = geojson.features;
              }
            }
            return _context2.abrupt("return", geoms);
          case 3:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function getGeometries(_x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  var getMapboxToken = function getMapboxToken() {
    if (aiAssistant.config.mapboxToken) {
      return aiAssistant.config.mapboxToken;
    }
    throw new Error('Mapbox token is not provided');
  };

  // geo tools
  var classifyTool = _objectSpread(_objectSpread({}, _geoda.dataClassify), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.dataClassify.context), {}, {
      getValues: getValues
    })
  });
  var weightsTool = _objectSpread(_objectSpread({}, _geoda.spatialWeights), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.spatialWeights.context), {}, {
      getGeometries: getGeometries
    })
  });
  var globalMoranTool = _objectSpread(_objectSpread({}, _geoda.globalMoran), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.globalMoran.context), {}, {
      getValues: getValues
    })
  });
  var regressionTool = _objectSpread(_objectSpread({}, _geoda.spatialRegression), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.spatialRegression.context), {}, {
      getValues: getValues
    })
  });
  var lisaTool = _objectSpread(_objectSpread({}, _geoda.lisa), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.lisa.context), {}, {
      getValues: getValues
    }),
    component: _lisaTool.LisaToolComponent
  });
  var spatialJoinTool = _objectSpread(_objectSpread({}, _geoda.spatialJoin), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.spatialJoin.context), {}, {
      getValues: getValues,
      getGeometries: getGeometries
    }),
    component: CustomSpatialJoinToolComponent
  });
  var spatialFilterTool = _objectSpread(_objectSpread({}, _geoda.spatialFilter), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.spatialFilter.context), {}, {
      getValues: getValues,
      getGeometries: getGeometries
    }),
    component: CustomSpatialJoinToolComponent
  });
  var routingTool = _objectSpread(_objectSpread({}, _osm.routing), {}, {
    context: _objectSpread(_objectSpread({}, _osm.routing.context), {}, {
      getMapboxToken: getMapboxToken
    })
  });
  var isochroneTool = _objectSpread(_objectSpread({}, _osm.isochrone), {}, {
    context: _objectSpread(_objectSpread({}, _osm.isochrone.context), {}, {
      getMapboxToken: getMapboxToken
    })
  });
  var bufferTool = _objectSpread(_objectSpread({}, _geoda.buffer), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.buffer.context), {}, {
      getGeometries: getGeometries
    })
  });
  var centroidTool = _objectSpread(_objectSpread({}, _geoda.centroid), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.centroid.context), {}, {
      getGeometries: getGeometries
    })
  });
  var dissolveTool = _objectSpread(_objectSpread({}, _geoda.dissolve), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.dissolve.context), {}, {
      getGeometries: getGeometries
    })
  });
  var lengthTool = _objectSpread(_objectSpread({}, _geoda.length), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.length.context), {}, {
      getGeometries: getGeometries
    })
  });
  var areaTool = _objectSpread(_objectSpread({}, _geoda.area), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.area.context), {}, {
      getGeometries: getGeometries
    })
  });
  var perimeterTool = _objectSpread(_objectSpread({}, _geoda.perimeter), {}, {
    context: _objectSpread(_objectSpread({}, _geoda.perimeter.context), {}, {
      getGeometries: getGeometries
    })
  });
  var roadsTool = _objectSpread(_objectSpread({}, _osm.roads), {}, {
    context: _objectSpread(_objectSpread({}, _osm.roads.context), {}, {
      getGeometries: getGeometries
    })
  });
  return {
    classifyTool: classifyTool,
    weightsTool: weightsTool,
    globalMoranTool: globalMoranTool,
    regressionTool: regressionTool,
    lisaTool: lisaTool,
    spatialJoinTool: spatialJoinTool,
    spatialFilterTool: spatialFilterTool,
    bufferTool: bufferTool,
    centroidTool: centroidTool,
    dissolveTool: dissolveTool,
    lengthTool: lengthTool,
    areaTool: areaTool,
    perimeterTool: perimeterTool,
    getUsStateGeojson: _osm.getUsStateGeojson,
    getUsCountyGeojson: _osm.getUsCountyGeojson,
    getUsZipcodeGeojson: _osm.getUsZipcodeGeojson,
    queryUSZipcodes: _osm.queryUSZipcodes,
    geocoding: _osm.geocoding,
    routing: routingTool,
    isochrone: isochroneTool,
    roads: roadsTool
  };
}

/**
 * Use SpatialJoinToolComponent to add the join result to kepler.gl
 */
function CustomSpatialJoinToolComponent(props) {
  var dispatch = (0, _reactRedux.useDispatch)();
  (0, _react.useEffect)(function () {
    function addJoinedDatasetToMap() {
      return _addJoinedDatasetToMap.apply(this, arguments);
    }
    function _addJoinedDatasetToMap() {
      _addJoinedDatasetToMap = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        var parsedData;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!(props.joinedDatasetId && props.joinedDataset)) {
                _context3.next = 5;
                break;
              }
              _context3.next = 3;
              return (0, _processors.processFileData)({
                content: {
                  data: props.joinedDataset,
                  fileName: props.joinedDatasetId
                },
                fileCache: []
              });
            case 3:
              parsedData = _context3.sent;
              dispatch((0, _actions.addDataToMap)({
                datasets: parsedData,
                options: {
                  autoCreateLayers: true,
                  centerMap: false
                }
              }));
            case 5:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      return _addJoinedDatasetToMap.apply(this, arguments);
    }
    addJoinedDatasetToMap();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react["default"].createElement(_geoda.SpatialJoinToolComponent, props);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,