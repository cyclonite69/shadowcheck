"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddLayerToolComponent = AddLayerToolComponent;
exports.addLayer = void 0;
exports.guessDefaultLayer = guessDefaultLayer;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _reactRedux = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-redux/lib");
var _layers = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/layers/src");
var _reducers = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/reducers/src");
var _actions = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/actions/src");
var _utils = require("../utils");
var _utils2 = require("@openassistant/utils");
var _zod = require("zod");
var _react = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react");
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var addLayer = exports.addLayer = (0, _utils2.tool)({
  description: 'add a kepler.gl map layer',
  parameters: _zod.z.object({
    datasetName: _zod.z.string().describe('The name of the dataset. Note: please do NOT use the datasetId.'),
    fieldName: _zod.z.string(),
    layerType: _zod.z["enum"](['point', 'arc', 'line', 'grid', 'hexagon', 'geojson', 'cluster', 'heatmap', 'h3', 'trip', 's2']),
    colorScale: _zod.z["enum"](['quantile', 'quantize', 'ordinal', 'custom']).optional(),
    customColorScale: _zod.z.array(_zod.z.number()).optional().describe('An array of numeric breakpoints used to define custom color intervals. Only applicable when colorScale is set to "custom"')
  }),
  execute: executeAddLayer,
  component: AddLayerToolComponent
});
function isAddLayerArgs(args) {
  return (0, _typeof2["default"])(args) === 'object' && args !== null && 'datasetName' in args && 'fieldName' in args && 'layerType' in args;
}
function isAddLayerFunctionContext(context) {
  return context && typeof context.getDatasets === 'function';
}
function executeAddLayer(_x, _x2) {
  return _executeAddLayer.apply(this, arguments);
}
function _executeAddLayer() {
  _executeAddLayer = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(args, options) {
    var datasetName, fieldName, layerType, _args$colorScale, colorScale, customColorScale, datasets, datasetId, dataset, field, layer, colorField, customColorRange, newColors, newLayer;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          if (isAddLayerArgs(args)) {
            _context.next = 3;
            break;
          }
          throw new Error('Invalid addLayer arguments');
        case 3:
          if (isAddLayerFunctionContext(options.context)) {
            _context.next = 5;
            break;
          }
          throw new Error('Invalid addLayer context');
        case 5:
          datasetName = args.datasetName, fieldName = args.fieldName, layerType = args.layerType, _args$colorScale = args.colorScale, colorScale = _args$colorScale === void 0 ? 'quantile' : _args$colorScale, customColorScale = args.customColorScale;
          datasets = options.context.getDatasets(); // check if dataset exists in kepler.gl
          datasetId = Object.keys(datasets).find(function (dataId) {
            return datasets[dataId].label === datasetName;
          });
          if (datasetId) {
            _context.next = 10;
            break;
          }
          throw new Error("Dataset ".concat(datasetName, " not found."));
        case 10:
          // check if field exists in the dataset
          dataset = datasets[datasetId];
          field = dataset.fields.find(function (f) {
            return f.name === fieldName;
          });
          if (field) {
            _context.next = 14;
            break;
          }
          throw new Error("Field ".concat(fieldName, " not found."));
        case 14:
          if (['quantile', 'quantize', 'ordinal', 'custom'].includes(colorScale)) {
            _context.next = 16;
            break;
          }
          throw new Error("Invalid color scale: ".concat(colorScale, "."));
        case 16:
          if (!(colorScale === 'custom' && !customColorScale)) {
            _context.next = 18;
            break;
          }
          throw new Error('Custom color scale or breaks is required when colorScale is "custom".');
        case 18:
          // check if layerType is valid
          layer = guessDefaultLayer(dataset, layerType);
          if (layer) {
            _context.next = 21;
            break;
          }
          throw new Error("Invalid layer type: ".concat(layerType, "."));
        case 21:
          colorField = {
            name: field.name,
            type: field.type
          }; // create custom colorRange if needed
          customColorRange = layer.config.visConfig.colorRange;
          if (colorScale === 'custom') {
            newColors = (0, _utils.interpolateColor)(customColorRange.colors, customColorScale.length + 1);
            customColorRange = _objectSpread(_objectSpread({}, customColorRange), {}, {
              colors: newColors,
              colorMap: newColors.map(function (color, index) {
                return [customColorScale[index] || null, color];
              })
            });
          }

          // construct new layer config for addLayer() action
          newLayer = {
            id: layer.id,
            type: layer.type,
            config: _objectSpread(_objectSpread({}, layer.config), {}, {
              dataId: datasetId,
              label: "".concat(field.name, "-").concat(colorScale),
              columns: Object.keys(layer.config.columns).reduce(function (acc, key) {
                acc[key] = layer.config.columns[key].value;
                return acc;
              }, {}),
              colorScale: colorScale,
              colorField: colorField,
              strokeColorScale: colorScale,
              strokeColorField: colorField,
              visConfig: _objectSpread(_objectSpread({}, layer.config.visConfig), {}, {
                colorRange: customColorRange,
                strokeColorRange: customColorRange
              }, customColorScale ? {
                colorDomain: customColorScale,
                strokeColorDomain: customColorScale
              } : {})
            })
          };
          return _context.abrupt("return", {
            llmResult: {
              success: true,
              layer: JSON.stringify(newLayer),
              details: "map layer with ".concat(field.name, " and ").concat(colorScale, " color scale will be added to the map.")
            },
            additionalData: {
              layer: newLayer,
              datasetId: datasetId
            }
          });
        case 28:
          _context.prev = 28;
          _context.t0 = _context["catch"](0);
          return _context.abrupt("return", {
            llmResult: {
              success: false,
              error: _context.t0 instanceof Error ? _context.t0.message : 'Unknown error',
              instruction: 'Try to fix the error. If the error persists, pause the execution and ask the user to try with different prompt and context.'
            }
          });
        case 31:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 28]]);
  }));
  return _executeAddLayer.apply(this, arguments);
}
function guessDefaultLayer(dataset, layerType) {
  // special case for hexagon layer, which could be implemented as findDefaultLayerProps() in hexagon-layer.tsx
  if (layerType === 'hexagon') {
    if (dataset.fieldPairs && dataset.fieldPairs.length > 0) {
      var props = dataset.fieldPairs.map(function (fieldPair) {
        return {
          isVisible: true,
          label: 'Hexbin',
          columns: fieldPair.pair
        };
      });
      var _layer = new _layers.LayerClasses.hexagon(props[0]);
      return _layer;
    }
  }
  var defaultLayers = (0, _reducers.findDefaultLayer)(dataset, _layers.LayerClasses);
  var layer = defaultLayers.find(function (l) {
    return l.type === layerType;
  });
  return layer || defaultLayers.length > 0 ? defaultLayers[0] : null;
}
function AddLayerToolComponent(_ref) {
  var layer = _ref.layer,
    datasetId = _ref.datasetId;
  var dispatch = (0, _reactRedux.useDispatch)();
  (0, _react.useEffect)(function () {
    dispatch((0, _actions.addLayer)(layer, datasetId));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,