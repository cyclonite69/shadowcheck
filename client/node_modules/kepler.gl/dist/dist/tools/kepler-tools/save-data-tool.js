"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SaveDataToMapToolComponent = SaveDataToMapToolComponent;
exports.saveDataToMap = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _utils = require("@openassistant/utils");
var _osm = require("@openassistant/osm");
var _zod = require("zod");
var _react = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react");
var _reactRedux = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-redux/lib");
var _processors = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/processors/src");
var _actions = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/actions/src");
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
      t && (r = t);
      var _n = 0,
        F = function F() {};
      return {
        s: F,
        n: function n() {
          return _n >= r.length ? {
            done: !0
          } : {
            done: !1,
            value: r[_n++]
          };
        },
        e: function e(r) {
          throw r;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o,
    a = !0,
    u = !1;
  return {
    s: function s() {
      t = t.call(r);
    },
    n: function n() {
      var r = t.next();
      return a = r.done, r;
    },
    e: function e(r) {
      u = !0, o = r;
    },
    f: function f() {
      try {
        a || null == t["return"] || t["return"]();
      } finally {
        if (u) throw o;
      }
    }
  };
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var saveDataToMap = exports.saveDataToMap = (0, _utils.tool)({
  description: 'Save data generated from other tools e.g. buffer, zipcode, county, state, isochrone, etc. to kepler.gl. Please avoid using blank space or special characters in the saveDatasetName.',
  parameters: _zod.z.object({
    datasetNames: _zod.z.array(_zod.z.string()),
    saveDatasetName: _zod.z.string()
  }),
  execute: function () {
    var _execute = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(args) {
      var datasetNames, saveDatasetName, loadedDatasetNames, result, _iterator, _step, datasetName, geoms, datasetId;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            datasetNames = args.datasetNames, saveDatasetName = args.saveDatasetName;
            loadedDatasetNames = [];
            result = [];
            _iterator = _createForOfIteratorHelper(datasetNames);
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                datasetName = _step.value;
                geoms = (0, _osm.getCachedData)(datasetName);
                if (geoms) {
                  // TODO: the geoms could be BinaryGeometry here
                  result.push(geoms);
                  loadedDatasetNames.push(datasetName);
                  // remove the dataset from the cache
                  (0, _osm.removeCachedData)(datasetName);
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            if (!(result.length === 0)) {
              _context.next = 8;
              break;
            }
            throw new Error("Can not save dataset, No datasets found from ".concat(datasetNames.join(', ')));
          case 8:
            // create a unique id for the combined datasets
            datasetId = saveDatasetName ? "".concat(saveDatasetName, "_").concat((0, _osm.generateId)()) : (0, _osm.generateId)();
            return _context.abrupt("return", {
              llmResult: {
                success: true,
                savedDatasetName: datasetId,
                details: "Successfully save dataset: ".concat(datasetId, " in kepler.gl")
              },
              additionalData: {
                result: result,
                loadedDatasetNames: loadedDatasetNames,
                datasetId: datasetId
              }
            });
          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](0);
            return _context.abrupt("return", {
              llmResult: {
                success: false,
                details: "Can not save data to kepler.gl, ".concat(_context.t0)
              }
            });
          case 15:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 12]]);
    }));
    function execute(_x) {
      return _execute.apply(this, arguments);
    }
    return execute;
  }(),
  component: SaveDataToMapToolComponent
});
function SaveDataToMapToolComponent(_ref) {
  var result = _ref.result,
    datasetId = _ref.datasetId;
  var dispatch = (0, _reactRedux.useDispatch)();
  (0, _react.useEffect)(function () {
    function addDatasetsToMap() {
      return _addDatasetsToMap.apply(this, arguments);
    }
    function _addDatasetsToMap() {
      _addDatasetsToMap = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var combinedGeojson, parsedData;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              // combine the datasets (FeatureCollection[]) into one FeatureCollection
              combinedGeojson = result.reduce(function (acc, geom) {
                return _objectSpread(_objectSpread({}, acc), {}, {
                  features: [].concat((0, _toConsumableArray2["default"])(acc.features), (0, _toConsumableArray2["default"])(geom.features))
                });
              }, {
                type: 'FeatureCollection',
                features: []
              }); // add the geojson to kepler.gl
              _context2.next = 3;
              return (0, _processors.processFileData)({
                content: {
                  data: combinedGeojson,
                  fileName: "".concat(datasetId)
                },
                fileCache: []
              });
            case 3:
              parsedData = _context2.sent;
              // update the id of parsedData
              // parsedData[0].info.id = datasetId;

              dispatch((0, _actions.addDataToMap)({
                datasets: parsedData,
                options: {
                  autoCreateLayers: true,
                  centerMap: false
                }
              }));
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return _addDatasetsToMap.apply(this, arguments);
    }
    addDatasetsToMap();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,