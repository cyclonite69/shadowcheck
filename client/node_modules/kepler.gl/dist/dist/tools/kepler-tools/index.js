"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKeplerTools = getKeplerTools;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _basemapTool = require("./basemap-tool");
var _layerCreationTool = require("./layer-creation-tool");
var _layerStyleTool = require("./layer-style-tool");
var _loaddataTool = require("./loaddata-tool");
var _boundaryTool = require("./boundary-tool");
var _saveDataTool = require("./save-data-tool");
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function getKeplerTools(visState, aiAssistant) {
  // context for tools
  var getDatasets = function getDatasets() {
    return visState.datasets;
  };
  var getLayers = function getLayers() {
    return visState.layers;
  };
  var getLoaders = function getLoaders() {
    return {
      loaders: visState.loaders,
      loadOptions: visState.loadOptions
    };
  };

  // tool: addLayer
  var addLayerTool = _objectSpread(_objectSpread({}, _layerCreationTool.addLayer), {}, {
    context: {
      getDatasets: getDatasets
    }
  });

  // tool: updateLayerColor
  var updateLayerColorTool = _objectSpread(_objectSpread({}, _layerStyleTool.updateLayerColor), {}, {
    context: {
      getLayers: getLayers
    }
  });

  // tool: loadData
  var loadDataTool = _objectSpread(_objectSpread({}, _loaddataTool.loadData), {}, {
    context: {
      getLoaders: getLoaders
    }
  });

  // tool: mapBoundary
  var mapBoundaryTool = _objectSpread(_objectSpread({}, _boundaryTool.mapBoundary), {}, {
    context: {
      getMapBoundary: function getMapBoundary() {
        var _aiAssistant$keplerGl;
        return (_aiAssistant$keplerGl = aiAssistant.keplerGl) === null || _aiAssistant$keplerGl === void 0 ? void 0 : _aiAssistant$keplerGl.mapBoundary;
      }
    }
  });
  return {
    basemap: _basemapTool.basemap,
    addLayer: addLayerTool,
    updateLayerColor: updateLayerColorTool,
    loadData: loadDataTool,
    mapBoundary: mapBoundaryTool,
    saveDataToMap: _saveDataTool.saveDataToMap
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmFzZW1hcFRvb2wiLCJyZXF1aXJlIiwiX2xheWVyQ3JlYXRpb25Ub29sIiwiX2xheWVyU3R5bGVUb29sIiwiX2xvYWRkYXRhVG9vbCIsIl9ib3VuZGFyeVRvb2wiLCJfc2F2ZURhdGFUb29sIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRLZXBsZXJUb29scyIsInZpc1N0YXRlIiwiYWlBc3Npc3RhbnQiLCJnZXREYXRhc2V0cyIsImRhdGFzZXRzIiwiZ2V0TGF5ZXJzIiwibGF5ZXJzIiwiZ2V0TG9hZGVycyIsImxvYWRlcnMiLCJsb2FkT3B0aW9ucyIsImFkZExheWVyVG9vbCIsImFkZExheWVyIiwiY29udGV4dCIsInVwZGF0ZUxheWVyQ29sb3JUb29sIiwidXBkYXRlTGF5ZXJDb2xvciIsImxvYWREYXRhVG9vbCIsImxvYWREYXRhIiwibWFwQm91bmRhcnlUb29sIiwibWFwQm91bmRhcnkiLCJnZXRNYXBCb3VuZGFyeSIsIl9haUFzc2lzdGFudCRrZXBsZXJHbCIsImtlcGxlckdsIiwiYmFzZW1hcCIsInNhdmVEYXRhVG9NYXAiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdG9vbHMva2VwbGVyLXRvb2xzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7VmlzU3RhdGV9IGZyb20gJ0BrZXBsZXIuZ2wvc2NoZW1hcyc7XG5cbmltcG9ydCB7YmFzZW1hcH0gZnJvbSAnLi9iYXNlbWFwLXRvb2wnO1xuaW1wb3J0IHthZGRMYXllciwgQWRkTGF5ZXJUb29sfSBmcm9tICcuL2xheWVyLWNyZWF0aW9uLXRvb2wnO1xuaW1wb3J0IHt1cGRhdGVMYXllckNvbG9yfSBmcm9tICcuL2xheWVyLXN0eWxlLXRvb2wnO1xuaW1wb3J0IHtsb2FkRGF0YSwgTG9hZERhdGFUb29sfSBmcm9tICcuL2xvYWRkYXRhLXRvb2wnO1xuaW1wb3J0IHttYXBCb3VuZGFyeX0gZnJvbSAnLi9ib3VuZGFyeS10b29sJztcbmltcG9ydCB7c2F2ZURhdGFUb01hcH0gZnJvbSAnLi9zYXZlLWRhdGEtdG9vbCc7XG5pbXBvcnQge0FpQXNzaXN0YW50U3RhdGV9IGZyb20gJy4uLy4uL3JlZHVjZXJzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtlcGxlclRvb2xzKHZpc1N0YXRlOiBWaXNTdGF0ZSwgYWlBc3Npc3RhbnQ6IEFpQXNzaXN0YW50U3RhdGUpIHtcbiAgLy8gY29udGV4dCBmb3IgdG9vbHNcbiAgY29uc3QgZ2V0RGF0YXNldHMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHZpc1N0YXRlLmRhdGFzZXRzO1xuICB9O1xuXG4gIGNvbnN0IGdldExheWVycyA9ICgpID0+IHtcbiAgICByZXR1cm4gdmlzU3RhdGUubGF5ZXJzO1xuICB9O1xuXG4gIGNvbnN0IGdldExvYWRlcnMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvYWRlcnM6IHZpc1N0YXRlLmxvYWRlcnMsXG4gICAgICBsb2FkT3B0aW9uczogdmlzU3RhdGUubG9hZE9wdGlvbnNcbiAgICB9O1xuICB9O1xuXG4gIC8vIHRvb2w6IGFkZExheWVyXG4gIGNvbnN0IGFkZExheWVyVG9vbDogQWRkTGF5ZXJUb29sID0ge1xuICAgIC4uLmFkZExheWVyLFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIGdldERhdGFzZXRzXG4gICAgfVxuICB9O1xuXG4gIC8vIHRvb2w6IHVwZGF0ZUxheWVyQ29sb3JcbiAgY29uc3QgdXBkYXRlTGF5ZXJDb2xvclRvb2wgPSB7XG4gICAgLi4udXBkYXRlTGF5ZXJDb2xvcixcbiAgICBjb250ZXh0OiB7XG4gICAgICBnZXRMYXllcnNcbiAgICB9XG4gIH07XG5cbiAgLy8gdG9vbDogbG9hZERhdGFcbiAgY29uc3QgbG9hZERhdGFUb29sOiBMb2FkRGF0YVRvb2wgPSB7XG4gICAgLi4ubG9hZERhdGEsXG4gICAgY29udGV4dDoge1xuICAgICAgZ2V0TG9hZGVyc1xuICAgIH1cbiAgfTtcblxuICAvLyB0b29sOiBtYXBCb3VuZGFyeVxuICBjb25zdCBtYXBCb3VuZGFyeVRvb2wgPSB7XG4gICAgLi4ubWFwQm91bmRhcnksXG4gICAgY29udGV4dDoge1xuICAgICAgZ2V0TWFwQm91bmRhcnk6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGFpQXNzaXN0YW50LmtlcGxlckdsPy5tYXBCb3VuZGFyeTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBiYXNlbWFwLFxuICAgIGFkZExheWVyOiBhZGRMYXllclRvb2wsXG4gICAgdXBkYXRlTGF5ZXJDb2xvcjogdXBkYXRlTGF5ZXJDb2xvclRvb2wsXG4gICAgbG9hZERhdGE6IGxvYWREYXRhVG9vbCxcbiAgICBtYXBCb3VuZGFyeTogbWFwQm91bmRhcnlUb29sLFxuICAgIHNhdmVEYXRhVG9NYXBcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFLQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxrQkFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsZUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsYUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksYUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssYUFBQSxHQUFBTCxPQUFBO0FBQStDLFNBQUFNLFFBQUFDLENBQUEsRUFBQUMsQ0FBQTtFQUFBLElBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUE7RUFBQSxJQUFBRyxNQUFBLENBQUFFLHFCQUFBO0lBQUEsSUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUE7SUFBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBO01BQUEsT0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQTtJQUFBLEtBQUFQLENBQUEsQ0FBQVEsSUFBQSxDQUFBQyxLQUFBLENBQUFULENBQUEsRUFBQUksQ0FBQTtFQUFBO0VBQUEsT0FBQUosQ0FBQTtBQUFBO0FBQUEsU0FBQVUsY0FBQVosQ0FBQTtFQUFBLFNBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQTtJQUFBLElBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQTtJQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQTtNQUFBLElBQUFlLGdCQUFBLGFBQUFoQixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBO0lBQUEsS0FBQUUsTUFBQSxDQUFBYyx5QkFBQSxHQUFBZCxNQUFBLENBQUFlLGdCQUFBLENBQUFsQixDQUFBLEVBQUFHLE1BQUEsQ0FBQWMseUJBQUEsQ0FBQWYsQ0FBQSxLQUFBSCxPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxHQUFBYSxPQUFBLFdBQUFkLENBQUE7TUFBQUUsTUFBQSxDQUFBZ0IsY0FBQSxDQUFBbkIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQU4sQ0FBQSxFQUFBRCxDQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFELENBQUE7QUFBQSxFQVYvQztBQUNBO0FBWU8sU0FBU29CLGNBQWNBLENBQUNDLFFBQWtCLEVBQUVDLFdBQTZCLEVBQUU7RUFDaEY7RUFDQSxJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBQSxFQUFTO0lBQ3hCLE9BQU9GLFFBQVEsQ0FBQ0csUUFBUTtFQUMxQixDQUFDO0VBRUQsSUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVNBLENBQUEsRUFBUztJQUN0QixPQUFPSixRQUFRLENBQUNLLE1BQU07RUFDeEIsQ0FBQztFQUVELElBQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFVQSxDQUFBLEVBQVM7SUFDdkIsT0FBTztNQUNMQyxPQUFPLEVBQUVQLFFBQVEsQ0FBQ08sT0FBTztNQUN6QkMsV0FBVyxFQUFFUixRQUFRLENBQUNRO0lBQ3hCLENBQUM7RUFDSCxDQUFDOztFQUVEO0VBQ0EsSUFBTUMsWUFBMEIsR0FBQWxCLGFBQUEsQ0FBQUEsYUFBQSxLQUMzQmxCLGtCQUFBLENBQUFxQyxRQUFRO0lBQ1hDLE9BQU8sRUFBRTtNQUNQVCxXQUFXLEVBQVhBO0lBQ0Y7RUFBQyxFQUNGOztFQUVEO0VBQ0EsSUFBTVUsb0JBQW9CLEdBQUFyQixhQUFBLENBQUFBLGFBQUEsS0FDckJqQixlQUFBLENBQUF1QyxnQkFBZ0I7SUFDbkJGLE9BQU8sRUFBRTtNQUNQUCxTQUFTLEVBQVRBO0lBQ0Y7RUFBQyxFQUNGOztFQUVEO0VBQ0EsSUFBTVUsWUFBMEIsR0FBQXZCLGFBQUEsQ0FBQUEsYUFBQSxLQUMzQmhCLGFBQUEsQ0FBQXdDLFFBQVE7SUFDWEosT0FBTyxFQUFFO01BQ1BMLFVBQVUsRUFBVkE7SUFDRjtFQUFDLEVBQ0Y7O0VBRUQ7RUFDQSxJQUFNVSxlQUFlLEdBQUF6QixhQUFBLENBQUFBLGFBQUEsS0FDaEJmLGFBQUEsQ0FBQXlDLFdBQVc7SUFDZE4sT0FBTyxFQUFFO01BQ1BPLGNBQWMsRUFBRSxTQUFoQkEsY0FBY0EsQ0FBQSxFQUFRO1FBQUEsSUFBQUMscUJBQUE7UUFDcEIsUUFBQUEscUJBQUEsR0FBT2xCLFdBQVcsQ0FBQ21CLFFBQVEsY0FBQUQscUJBQUEsdUJBQXBCQSxxQkFBQSxDQUFzQkYsV0FBVztNQUMxQztJQUNGO0VBQUMsRUFDRjtFQUVELE9BQU87SUFDTEksT0FBTyxFQUFQbEQsWUFBQSxDQUFBa0QsT0FBTztJQUNQWCxRQUFRLEVBQUVELFlBQVk7SUFDdEJJLGdCQUFnQixFQUFFRCxvQkFBb0I7SUFDdENHLFFBQVEsRUFBRUQsWUFBWTtJQUN0QkcsV0FBVyxFQUFFRCxlQUFlO0lBQzVCTSxhQUFhLEVBQWI3QyxhQUFBLENBQUE2QztFQUNGLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==