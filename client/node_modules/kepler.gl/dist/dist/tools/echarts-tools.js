"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEchartsTools = getEchartsTools;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _echarts = require("@openassistant/echarts");
var _styles = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/styles/src");
var _actions = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/actions/src");
var _utils = require("./utils");
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function getEchartsTools(datasets, layers, dispatch) {
  var _boxplot$context, _bubbleChart$context, _histogram$context, _pcp$context, _scatterplot$context;
  // context for tools
  var getValues = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(datasetName, variableName) {
      var values;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            values = (0, _utils.getValuesFromDataset)(datasets, layers, datasetName, variableName);
            return _context.abrupt("return", values);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function getValues(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  var onSelected = function onSelected(datasetName, selectedIndices) {
    var triggerLayerReRender = function triggerLayerReRender(layer, isValid) {
      dispatch((0, _actions.layerSetIsValid)(layer, isValid));
    };
    (0, _utils.highlightRows)(datasets, layers, datasetName, selectedIndices, triggerLayerReRender);
  };
  var theme = _styles.theme.textColor === _styles.textColorLT ? 'light' : 'dark';

  // Create the boxplot tool with the getValues implementation
  var boxplotTool = _objectSpread(_objectSpread({}, _echarts.boxplot), {}, {
    context: _objectSpread(_objectSpread({}, _echarts.boxplot.context), {}, {
      getValues: getValues,
      onSelected: onSelected,
      config: _objectSpread(_objectSpread({}, (_boxplot$context = _echarts.boxplot.context) === null || _boxplot$context === void 0 ? void 0 : _boxplot$context.config), {}, {
        theme: theme
      })
    })
  });

  // Create the bubble chart tool with the getValues implementation
  var bubbleChartTool = _objectSpread(_objectSpread({}, _echarts.bubbleChart), {}, {
    context: _objectSpread(_objectSpread({}, _echarts.bubbleChart.context), {}, {
      getValues: getValues,
      onSelected: onSelected,
      config: _objectSpread(_objectSpread({}, (_bubbleChart$context = _echarts.bubbleChart.context) === null || _bubbleChart$context === void 0 ? void 0 : _bubbleChart$context.config), {}, {
        theme: theme
      })
    })
  });
  var histogramTool = _objectSpread(_objectSpread({}, _echarts.histogram), {}, {
    context: _objectSpread(_objectSpread({}, _echarts.histogram.context), {}, {
      getValues: getValues,
      onSelected: onSelected,
      config: _objectSpread(_objectSpread({}, (_histogram$context = _echarts.histogram.context) === null || _histogram$context === void 0 ? void 0 : _histogram$context.config), {}, {
        theme: theme
      })
    })
  });
  var pcpTool = _objectSpread(_objectSpread({}, _echarts.pcp), {}, {
    context: _objectSpread(_objectSpread({}, _echarts.pcp.context), {}, {
      getValues: getValues,
      onSelected: onSelected,
      config: _objectSpread(_objectSpread({}, (_pcp$context = _echarts.pcp.context) === null || _pcp$context === void 0 ? void 0 : _pcp$context.config), {}, {
        theme: theme
      })
    })
  });
  var scatterplotTool = _objectSpread(_objectSpread({}, _echarts.scatterplot), {}, {
    context: _objectSpread(_objectSpread({}, _echarts.scatterplot.context), {}, {
      getValues: getValues,
      onSelected: onSelected,
      config: _objectSpread(_objectSpread({}, (_scatterplot$context = _echarts.scatterplot.context) === null || _scatterplot$context === void 0 ? void 0 : _scatterplot$context.config), {}, {
        theme: theme
      })
    })
  });
  return {
    boxplotTool: boxplotTool,
    bubbleChartTool: bubbleChartTool,
    histogramTool: histogramTool,
    pcpTool: pcpTool,
    scatterplotTool: scatterplotTool
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,