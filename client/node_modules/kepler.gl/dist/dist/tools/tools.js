"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupLLMTools = setupLLMTools;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _echartsTools = require("./echarts-tools");
var _geoTools = require("./geo-tools");
var _keplerTools = require("./kepler-tools");
var _queryTool = require("./query-tool");
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function setupLLMTools(_ref) {
  var visState = _ref.visState,
    aiAssistant = _ref.aiAssistant,
    dispatch = _ref.dispatch;
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, (0, _keplerTools.getKeplerTools)(visState, aiAssistant)), (0, _echartsTools.getEchartsTools)(visState.datasets, visState.layers, dispatch)), (0, _geoTools.getGeoTools)(aiAssistant, visState.datasets, visState.layers, visState.layerData)), (0, _queryTool.getQueryTool)(visState.datasets, visState.layers));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZWNoYXJ0c1Rvb2xzIiwicmVxdWlyZSIsIl9nZW9Ub29scyIsIl9rZXBsZXJUb29scyIsIl9xdWVyeVRvb2wiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInNldHVwTExNVG9vbHMiLCJfcmVmIiwidmlzU3RhdGUiLCJhaUFzc2lzdGFudCIsImRpc3BhdGNoIiwiZ2V0S2VwbGVyVG9vbHMiLCJnZXRFY2hhcnRzVG9vbHMiLCJkYXRhc2V0cyIsImxheWVycyIsImdldEdlb1Rvb2xzIiwibGF5ZXJEYXRhIiwiZ2V0UXVlcnlUb29sIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rvb2xzL3Rvb2xzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge1Zpc1N0YXRlfSBmcm9tICdAa2VwbGVyLmdsL3NjaGVtYXMnO1xuaW1wb3J0IHtEaXNwYXRjaH0gZnJvbSAncmVkdXgnO1xuXG5pbXBvcnQge0FpQXNzaXN0YW50U3RhdGV9IGZyb20gJy4uL3JlZHVjZXJzJztcbmltcG9ydCB7Z2V0RWNoYXJ0c1Rvb2xzfSBmcm9tICcuL2VjaGFydHMtdG9vbHMnO1xuaW1wb3J0IHtnZXRHZW9Ub29sc30gZnJvbSAnLi9nZW8tdG9vbHMnO1xuaW1wb3J0IHtnZXRLZXBsZXJUb29sc30gZnJvbSAnLi9rZXBsZXItdG9vbHMnO1xuaW1wb3J0IHtnZXRRdWVyeVRvb2x9IGZyb20gJy4vcXVlcnktdG9vbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cExMTVRvb2xzKHtcbiAgdmlzU3RhdGUsXG4gIGFpQXNzaXN0YW50LFxuICBkaXNwYXRjaFxufToge1xuICB2aXNTdGF0ZTogVmlzU3RhdGU7XG4gIGFpQXNzaXN0YW50OiBBaUFzc2lzdGFudFN0YXRlO1xuICBkaXNwYXRjaDogRGlzcGF0Y2g7XG59KSB7XG4gIHJldHVybiB7XG4gICAgLi4uZ2V0S2VwbGVyVG9vbHModmlzU3RhdGUsIGFpQXNzaXN0YW50KSxcbiAgICAuLi5nZXRFY2hhcnRzVG9vbHModmlzU3RhdGUuZGF0YXNldHMsIHZpc1N0YXRlLmxheWVycywgZGlzcGF0Y2gpLFxuICAgIC4uLmdldEdlb1Rvb2xzKGFpQXNzaXN0YW50LCB2aXNTdGF0ZS5kYXRhc2V0cywgdmlzU3RhdGUubGF5ZXJzLCB2aXNTdGF0ZS5sYXllckRhdGEpLFxuICAgIC4uLmdldFF1ZXJ5VG9vbCh2aXNTdGF0ZS5kYXRhc2V0cywgdmlzU3RhdGUubGF5ZXJzKVxuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQU9BLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFNBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFVBQUEsR0FBQUgsT0FBQTtBQUEwQyxTQUFBSSxRQUFBQyxDQUFBLEVBQUFDLENBQUE7RUFBQSxJQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBO0VBQUEsSUFBQUcsTUFBQSxDQUFBRSxxQkFBQTtJQUFBLElBQUFDLENBQUEsR0FBQUgsTUFBQSxDQUFBRSxxQkFBQSxDQUFBTCxDQUFBO0lBQUFDLENBQUEsS0FBQUssQ0FBQSxHQUFBQSxDQUFBLENBQUFDLE1BQUEsV0FBQU4sQ0FBQTtNQUFBLE9BQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUE7SUFBQSxLQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUE7RUFBQTtFQUFBLE9BQUFKLENBQUE7QUFBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUE7RUFBQSxTQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQVksU0FBQSxDQUFBQyxNQUFBLEVBQUFiLENBQUE7SUFBQSxJQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUE7SUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUE7TUFBQSxJQUFBZSxnQkFBQSxhQUFBaEIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsQ0FBQUQsQ0FBQTtJQUFBLEtBQUFFLE1BQUEsQ0FBQWMseUJBQUEsR0FBQWQsTUFBQSxDQUFBZSxnQkFBQSxDQUFBbEIsQ0FBQSxFQUFBRyxNQUFBLENBQUFjLHlCQUFBLENBQUFmLENBQUEsS0FBQUgsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsR0FBQWEsT0FBQSxXQUFBZCxDQUFBO01BQUFFLE1BQUEsQ0FBQWdCLGNBQUEsQ0FBQW5CLENBQUEsRUFBQUMsQ0FBQSxFQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFOLENBQUEsRUFBQUQsQ0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBRCxDQUFBO0FBQUEsRUFWMUM7QUFDQTtBQVdPLFNBQVNvQixhQUFhQSxDQUFBQyxJQUFBLEVBUTFCO0VBQUEsSUFQREMsUUFBUSxHQUFBRCxJQUFBLENBQVJDLFFBQVE7SUFDUkMsV0FBVyxHQUFBRixJQUFBLENBQVhFLFdBQVc7SUFDWEMsUUFBUSxHQUFBSCxJQUFBLENBQVJHLFFBQVE7RUFNUixPQUFBWixhQUFBLENBQUFBLGFBQUEsQ0FBQUEsYUFBQSxDQUFBQSxhQUFBLEtBQ0ssSUFBQWYsWUFBQSxDQUFBNEIsY0FBYyxFQUFDSCxRQUFRLEVBQUVDLFdBQVcsQ0FBQyxHQUNyQyxJQUFBN0IsYUFBQSxDQUFBZ0MsZUFBZSxFQUFDSixRQUFRLENBQUNLLFFBQVEsRUFBRUwsUUFBUSxDQUFDTSxNQUFNLEVBQUVKLFFBQVEsQ0FBQyxHQUM3RCxJQUFBNUIsU0FBQSxDQUFBaUMsV0FBVyxFQUFDTixXQUFXLEVBQUVELFFBQVEsQ0FBQ0ssUUFBUSxFQUFFTCxRQUFRLENBQUNNLE1BQU0sRUFBRU4sUUFBUSxDQUFDUSxTQUFTLENBQUMsR0FDaEYsSUFBQWhDLFVBQUEsQ0FBQWlDLFlBQVksRUFBQ1QsUUFBUSxDQUFDSyxRQUFRLEVBQUVMLFFBQVEsQ0FBQ00sTUFBTSxDQUFDO0FBRXZEIiwiaWdub3JlTGlzdCI6W119