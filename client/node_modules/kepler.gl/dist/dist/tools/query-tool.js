"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueryTool = getQueryTool;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactRedux = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-redux/lib");
var _actions = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/actions/src");
var _duckdb = require("@openassistant/duckdb");
var _utils = require("./utils");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
      t && (r = t);
      var _n = 0,
        F = function F() {};
      return {
        s: F,
        n: function n() {
          return _n >= r.length ? {
            done: !0
          } : {
            done: !1,
            value: r[_n++]
          };
        },
        e: function e(r) {
          throw r;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o,
    a = !0,
    u = !1;
  return {
    s: function s() {
      t = t.call(r);
    },
    n: function n() {
      var r = t.next();
      return a = r.done, r;
    },
    e: function e(r) {
      u = !0, o = r;
    },
    f: function f() {
      try {
        a || null == t["return"] || t["return"]();
      } finally {
        if (u) throw o;
      }
    }
  };
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function getQueryTool(datasets, layers) {
  // context for query tools
  var getValues = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(datasetName, variableName) {
      var values;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            values = (0, _utils.getValuesFromDataset)(datasets, layers, datasetName, variableName);
            return _context.abrupt("return", values);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function getValues(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  // customize a filterDataset tool from localQuery tool
  var filterDataset = _objectSpread(_objectSpread({}, _duckdb.localQuery), {}, {
    description: "filter the user dataset by using a select SQL query in duckdb and save the result as a new dataset. Please note:\n1. REQUIRED: In the SQL query, please use a sub-query to add an auto-increment column 'row_index' to the original dataset.\n2. The SQL query should return the selected row_index values.\n3. Please only use the variable user mentioned for variableNames.\nFor example: 'SELECT row_index  FROM (SELECT row_number() OVER () AS row_index, * FROM dataset_name) WHERE Count > 0'\n",
    context: _objectSpread(_objectSpread({}, _duckdb.localQuery.context), {}, {
      getValues: getValues
    }),
    component: FilterDatasetComponent
  });

  // customize a generic query tool from localQuery tool
  var genericQuery = _objectSpread(_objectSpread({}, _duckdb.localQuery), {}, {
    description: "execute a generic select SQL query in duckdb to answer user's question. Please note:\n1. This tool is NOT for filtering the user dataset.\n2. This tool does NOT support geometry column and geometric operations.\n3. The variableNames should not be empty. If it is not provided, then pick a variable name from the dataset.\n4. There is no need to add a sub-query to add an auto-increment column 'row_index' to the original dataset.\n",
    context: _objectSpread(_objectSpread({}, _duckdb.localQuery.context), {}, {
      getValues: getValues
    })
  });
  return {
    filterDataset: filterDataset,
    genericQuery: genericQuery
  };
}
function FilterDatasetComponent(_ref2) {
  var columnData = _ref2.columnData,
    datasetName = _ref2.datasetName,
    sql = _ref2.sql,
    dbTableName = _ref2.dbTableName,
    filteredDatasetName = _ref2.filteredDatasetName;
  var datasets = (0, _reactRedux.useSelector)(function (state) {
    return state.demo.keplerGl.map.visState.datasets;
  });
  var layers = (0, _reactRedux.useSelector)(function (state) {
    return state.demo.keplerGl.map.visState.layers;
  });
  var queryInProgress = (0, _react.useRef)(null);
  var dispatch = (0, _reactRedux.useDispatch)();
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    error = _useState2[0],
    setError = _useState2[1];
  (0, _react.useEffect)(function () {
    // check if the filteredDatasetName is already in the datasets
    var newDatasetId = Object.keys(datasets).find(function (dataId) {
      return datasets[dataId].label === filteredDatasetName;
    });
    // if the filteredDatasetName is already in the datasets, return
    if (newDatasetId) return;
    var query = /*#__PURE__*/function () {
      var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (!queryInProgress.current) {
                _context3.next = 3;
                break;
              }
              _context3.next = 3;
              return queryInProgress.current;
            case 3:
              // Create a new promise for this query
              queryInProgress.current = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
                var duckDB, safeDbTableName, conn, arrowResult, result, filteredDataset;
                return _regenerator["default"].wrap(function _callee2$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.prev = 0;
                      _context2.next = 3;
                      return (0, _duckdb.getDuckDB)();
                    case 3:
                      duckDB = _context2.sent;
                      if (duckDB) {
                        _context2.next = 6;
                        break;
                      }
                      throw new Error('DuckDB instance is not initialized');
                    case 6:
                      if (!(columnData && dbTableName && sql)) {
                        _context2.next = 21;
                        break;
                      }
                      // use double quotes for the table name
                      safeDbTableName = "".concat(dbTableName); // connect to the database
                      _context2.next = 10;
                      return duckDB.connect();
                    case 10:
                      conn = _context2.sent;
                      _context2.next = 13;
                      return conn.query(sql);
                    case 13:
                      arrowResult = _context2.sent;
                      // convert the arrow result to a json array
                      result = arrowResult.toArray().map(function (row) {
                        return row.toJSON();
                      }); // delete the table from the database
                      _context2.next = 17;
                      return conn.query("DROP TABLE ".concat(safeDbTableName));
                    case 17:
                      _context2.next = 19;
                      return conn.close();
                    case 19:
                      // filter the dataset with the query result
                      filteredDataset = filterDataset(datasets, layers, datasetName, result, filteredDatasetName);
                      if (filteredDataset) {
                        // add the new dataset to the map
                        dispatch((0, _actions.addDataToMap)({
                          datasets: [filteredDataset],
                          options: {
                            autoCreateLayers: true,
                            centerMap: false
                          }
                        }));
                      }
                    case 21:
                      _context2.next = 27;
                      break;
                    case 23:
                      _context2.prev = 23;
                      _context2.t0 = _context2["catch"](0);
                      console.error(_context2.t0);
                      setError(_context2.t0 instanceof Error ? _context2.t0.message : 'Unknown error occurred');
                    case 27:
                      _context2.prev = 27;
                      queryInProgress.current = null;
                      return _context2.finish(27);
                    case 30:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee2, null, [[0, 23, 27, 30]]);
              }))();

              // Wait for the query to complete
              _context3.next = 6;
              return queryInProgress.current;
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      return function query() {
        return _ref3.apply(this, arguments);
      };
    }();
    query();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return error ? /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      color: 'red',
      fontSize: '8px'
    }
  }, error) : null;
}
function filterDataset(datasets, layers, datasetName, filteredRows, filteredDatasetName) {
  // find datasetId from datasets
  var datasetId = Object.keys(datasets).find(function (dataId) {
    return datasets[dataId].label === datasetName;
  });
  if (!datasetId) return;

  // filter the original dataset
  var originalDataset = datasets[datasetId];
  var fields = originalDataset.fields;
  var rows;
  if (originalDataset.type === 'vector-tile') {
    var columnData = [];
    var _iterator = _createForOfIteratorHelper(fields),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var field = _step.value;
        // get the values from the vector tile layer
        var values = (0, _utils.getValuesFromVectorTileLayer)(datasetId, layers, field);
        columnData.push(values);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    rows = filteredRows.map(function (rowIndex) {
      return columnData.map(function (column) {
        return column[Number(rowIndex['row_index']) - 1];
      });
    });
  } else {
    rows = filteredRows.map(function (rowIndex) {
      return fields.map(function (field) {
        return originalDataset.getValue(field.name, Number(rowIndex['row_index']) - 1);
      });
    });
  }

  // create a new dataset with the filtered data
  var newDataset = {
    info: {
      id: filteredDatasetName,
      label: filteredDatasetName
    },
    data: {
      fields: fields,
      rows: rows
    }
  };
  return newDataset;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,