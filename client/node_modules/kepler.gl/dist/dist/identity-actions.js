"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renameEntry = exports.registerEntry = exports.deleteEntry = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _actionTypes = _interopRequireDefault(require("./action-types"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 *
 * Add a new kepler.gl instance in `keplerGlReducer`. This action is called under-the-hood when a `KeplerGl` component is **mounted** to the dom.
 * Note that if you dispatch actions such as adding data to a kepler.gl instance before the React component is mounted, the action will not be
 * performed. Instance reducer can only handle actions when it is instantiated.
 * @memberof rootActions
 * @param payload
 * @param payload.id - ***required** The id of the instance
 * @param payload.mint - Whether to use a fresh empty state, when `mint: true` it will *always* load a fresh state when the component is re-mounted.
 * When `mint: false` it will register with existing instance state under the same `id`, when the component is unmounted then mounted again. Default: `true`
 * @param payload.mapboxApiAccessToken - mapboxApiAccessToken to be saved in `map-style` reducer.
 * @param payload.mapboxApiUrl - mapboxApiUrl to be saved in `map-style` reducer.
 * @param payload.mapStylesReplaceDefault - mapStylesReplaceDefault to be saved in `map-style` reducer.
 * @param payload.initialUiState - initial ui state
 * @public
 */
var registerEntry = exports.registerEntry = (0, _toolkit.createAction)(_actionTypes["default"].REGISTER_ENTRY, function (payload) {
  return {
    payload: payload
  };
});

/**
 *
 * Delete an instance from `keplerGlReducer`. This action is called under-the-hood when a `KeplerGl` component is **un-mounted** to the dom.
 * If `mint` is set to be `true` in the component prop, the instance state will be deleted from the root reducer. Otherwise, the root reducer will keep
 * the instance state and later transfer it to a newly mounted component with the same `id`
 * @memberof rootActions
 * @param {string} id - the id of the instance to be deleted
 * @public
 */
var deleteEntry = exports.deleteEntry = (0, _toolkit.createAction)(_actionTypes["default"].DELETE_ENTRY, function (id) {
  return {
    payload: {
      id: id
    }
  };
});

/**
 *
 * Rename an instance in the root reducer, keep its entire state
 *
 * @memberof rootActions
 * @param {string} oldId - ***required** old id
 * @param {string} newId - ***required** new id
 * @public
 */
var renameEntry = exports.renameEntry = (0, _toolkit.createAction)(_actionTypes["default"].RENAME_ENTRY, function (oldId, newId) {
  return {
    payload: {
      oldId: oldId,
      newId: newId
    }
  };
});

/**
 * This declaration is needed to group actions in docs
 */
/**
 * Root actions managers adding and removing instances in root reducer.
 * Under-the-hood, when a `KeplerGl` component is mounted or unmounted,
 * it will automatically calls these actions to add itself to the root reducer.
 * However, sometimes the data is ready before the component is registered in the reducer,
 * in this case, you can manually call these actions or the corresponding updater to add it to the reducer.
 *
 * @public
 */
/* eslint-disable  @typescript-eslint/no-unused-vars */
// @ts-ignore
var rootActions = null;
/* eslint-enable  @typescript-eslint/no-unused-vars */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9vbGtpdCIsInJlcXVpcmUiLCJfYWN0aW9uVHlwZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVnaXN0ZXJFbnRyeSIsImV4cG9ydHMiLCJjcmVhdGVBY3Rpb24iLCJSRUdJU1RFUl9FTlRSWSIsInBheWxvYWQiLCJkZWxldGVFbnRyeSIsIkRFTEVURV9FTlRSWSIsImlkIiwicmVuYW1lRW50cnkiLCJSRU5BTUVfRU5UUlkiLCJvbGRJZCIsIm5ld0lkIiwicm9vdEFjdGlvbnMiXSwic291cmNlcyI6WyIuLi9zcmMvaWRlbnRpdHktYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge2NyZWF0ZUFjdGlvbn0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XG5pbXBvcnQge2RlZmF1bHQgYXMgQWN0aW9uVHlwZXN9IGZyb20gJy4vYWN0aW9uLXR5cGVzJztcbmltcG9ydCB7VWlTdGF0ZX0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFJlZ2lzdGVyRW50cnlVcGRhdGVyQWN0aW9uID0ge1xuICBwYXlsb2FkOiB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBtaW50PzogYm9vbGVhbjtcbiAgICBtYXBib3hBcGlBY2Nlc3NUb2tlbj86IHN0cmluZztcbiAgICBtYXBib3hBcGlVcmw/OiBzdHJpbmc7XG4gICAgbWFwU3R5bGVzUmVwbGFjZURlZmF1bHQ/OiBib29sZWFuO1xuICAgIGluaXRpYWxVaVN0YXRlPzogUGFydGlhbDxVaVN0YXRlPjtcbiAgfTtcbn07XG5cbmV4cG9ydCB0eXBlIFJlbmFtZUVudHJ5VXBkYXRlckFjdGlvbiA9IHtcbiAgcGF5bG9hZDoge1xuICAgIG9sZElkOiBzdHJpbmc7XG4gICAgbmV3SWQ6IHN0cmluZztcbiAgfTtcbn07XG4vKipcbiAqXG4gKiBBZGQgYSBuZXcga2VwbGVyLmdsIGluc3RhbmNlIGluIGBrZXBsZXJHbFJlZHVjZXJgLiBUaGlzIGFjdGlvbiBpcyBjYWxsZWQgdW5kZXItdGhlLWhvb2Qgd2hlbiBhIGBLZXBsZXJHbGAgY29tcG9uZW50IGlzICoqbW91bnRlZCoqIHRvIHRoZSBkb20uXG4gKiBOb3RlIHRoYXQgaWYgeW91IGRpc3BhdGNoIGFjdGlvbnMgc3VjaCBhcyBhZGRpbmcgZGF0YSB0byBhIGtlcGxlci5nbCBpbnN0YW5jZSBiZWZvcmUgdGhlIFJlYWN0IGNvbXBvbmVudCBpcyBtb3VudGVkLCB0aGUgYWN0aW9uIHdpbGwgbm90IGJlXG4gKiBwZXJmb3JtZWQuIEluc3RhbmNlIHJlZHVjZXIgY2FuIG9ubHkgaGFuZGxlIGFjdGlvbnMgd2hlbiBpdCBpcyBpbnN0YW50aWF0ZWQuXG4gKiBAbWVtYmVyb2Ygcm9vdEFjdGlvbnNcbiAqIEBwYXJhbSBwYXlsb2FkXG4gKiBAcGFyYW0gcGF5bG9hZC5pZCAtICoqKnJlcXVpcmVkKiogVGhlIGlkIG9mIHRoZSBpbnN0YW5jZVxuICogQHBhcmFtIHBheWxvYWQubWludCAtIFdoZXRoZXIgdG8gdXNlIGEgZnJlc2ggZW1wdHkgc3RhdGUsIHdoZW4gYG1pbnQ6IHRydWVgIGl0IHdpbGwgKmFsd2F5cyogbG9hZCBhIGZyZXNoIHN0YXRlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyByZS1tb3VudGVkLlxuICogV2hlbiBgbWludDogZmFsc2VgIGl0IHdpbGwgcmVnaXN0ZXIgd2l0aCBleGlzdGluZyBpbnN0YW5jZSBzdGF0ZSB1bmRlciB0aGUgc2FtZSBgaWRgLCB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkIHRoZW4gbW91bnRlZCBhZ2Fpbi4gRGVmYXVsdDogYHRydWVgXG4gKiBAcGFyYW0gcGF5bG9hZC5tYXBib3hBcGlBY2Nlc3NUb2tlbiAtIG1hcGJveEFwaUFjY2Vzc1Rva2VuIHRvIGJlIHNhdmVkIGluIGBtYXAtc3R5bGVgIHJlZHVjZXIuXG4gKiBAcGFyYW0gcGF5bG9hZC5tYXBib3hBcGlVcmwgLSBtYXBib3hBcGlVcmwgdG8gYmUgc2F2ZWQgaW4gYG1hcC1zdHlsZWAgcmVkdWNlci5cbiAqIEBwYXJhbSBwYXlsb2FkLm1hcFN0eWxlc1JlcGxhY2VEZWZhdWx0IC0gbWFwU3R5bGVzUmVwbGFjZURlZmF1bHQgdG8gYmUgc2F2ZWQgaW4gYG1hcC1zdHlsZWAgcmVkdWNlci5cbiAqIEBwYXJhbSBwYXlsb2FkLmluaXRpYWxVaVN0YXRlIC0gaW5pdGlhbCB1aSBzdGF0ZVxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJFbnRyeTogKGVudHJ5OiBSZWdpc3RlckVudHJ5VXBkYXRlckFjdGlvblsncGF5bG9hZCddKSA9PiB7XG4gIHR5cGU6IHR5cGVvZiBBY3Rpb25UeXBlcy5SRUdJU1RFUl9FTlRSWTtcbiAgcGF5bG9hZDogUmVnaXN0ZXJFbnRyeVVwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXTtcbn0gPSBjcmVhdGVBY3Rpb24oQWN0aW9uVHlwZXMuUkVHSVNURVJfRU5UUlksIChwYXlsb2FkOiBSZWdpc3RlckVudHJ5VXBkYXRlckFjdGlvblsncGF5bG9hZCddKSA9PiAoe1xuICBwYXlsb2FkXG59KSk7XG5cbi8qKlxuICpcbiAqIERlbGV0ZSBhbiBpbnN0YW5jZSBmcm9tIGBrZXBsZXJHbFJlZHVjZXJgLiBUaGlzIGFjdGlvbiBpcyBjYWxsZWQgdW5kZXItdGhlLWhvb2Qgd2hlbiBhIGBLZXBsZXJHbGAgY29tcG9uZW50IGlzICoqdW4tbW91bnRlZCoqIHRvIHRoZSBkb20uXG4gKiBJZiBgbWludGAgaXMgc2V0IHRvIGJlIGB0cnVlYCBpbiB0aGUgY29tcG9uZW50IHByb3AsIHRoZSBpbnN0YW5jZSBzdGF0ZSB3aWxsIGJlIGRlbGV0ZWQgZnJvbSB0aGUgcm9vdCByZWR1Y2VyLiBPdGhlcndpc2UsIHRoZSByb290IHJlZHVjZXIgd2lsbCBrZWVwXG4gKiB0aGUgaW5zdGFuY2Ugc3RhdGUgYW5kIGxhdGVyIHRyYW5zZmVyIGl0IHRvIGEgbmV3bHkgbW91bnRlZCBjb21wb25lbnQgd2l0aCB0aGUgc2FtZSBgaWRgXG4gKiBAbWVtYmVyb2Ygcm9vdEFjdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIHRoZSBpZCBvZiB0aGUgaW5zdGFuY2UgdG8gYmUgZGVsZXRlZFxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgZGVsZXRlRW50cnk6IChpZDogc3RyaW5nKSA9PiB7XG4gIHR5cGU6IHR5cGVvZiBBY3Rpb25UeXBlcy5ERUxFVEVfRU5UUlk7XG4gIHBheWxvYWQ6IHtpZDogc3RyaW5nfTtcbn0gPSBjcmVhdGVBY3Rpb24oQWN0aW9uVHlwZXMuREVMRVRFX0VOVFJZLCAoaWQ6IHN0cmluZykgPT4gKHtwYXlsb2FkOiB7aWQ6IGlkfX0pKTtcblxuLyoqXG4gKlxuICogUmVuYW1lIGFuIGluc3RhbmNlIGluIHRoZSByb290IHJlZHVjZXIsIGtlZXAgaXRzIGVudGlyZSBzdGF0ZVxuICpcbiAqIEBtZW1iZXJvZiByb290QWN0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IG9sZElkIC0gKioqcmVxdWlyZWQqKiBvbGQgaWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdJZCAtICoqKnJlcXVpcmVkKiogbmV3IGlkXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCByZW5hbWVFbnRyeTogKFxuICBvbGRJZDogc3RyaW5nLFxuICBuZXdJZDogc3RyaW5nXG4pID0+IHtcbiAgdHlwZTogdHlwZW9mIEFjdGlvblR5cGVzLlJFTkFNRV9FTlRSWTtcbiAgcGF5bG9hZDogUmVuYW1lRW50cnlVcGRhdGVyQWN0aW9uWydwYXlsb2FkJ107XG59ID0gY3JlYXRlQWN0aW9uKEFjdGlvblR5cGVzLlJFTkFNRV9FTlRSWSwgKG9sZElkOiBzdHJpbmcsIG5ld0lkOiBzdHJpbmcpID0+ICh7XG4gIHBheWxvYWQ6IHtcbiAgICBvbGRJZCxcbiAgICBuZXdJZFxuICB9XG59KSk7XG5cbi8qKlxuICogVGhpcyBkZWNsYXJhdGlvbiBpcyBuZWVkZWQgdG8gZ3JvdXAgYWN0aW9ucyBpbiBkb2NzXG4gKi9cbi8qKlxuICogUm9vdCBhY3Rpb25zIG1hbmFnZXJzIGFkZGluZyBhbmQgcmVtb3ZpbmcgaW5zdGFuY2VzIGluIHJvb3QgcmVkdWNlci5cbiAqIFVuZGVyLXRoZS1ob29kLCB3aGVuIGEgYEtlcGxlckdsYCBjb21wb25lbnQgaXMgbW91bnRlZCBvciB1bm1vdW50ZWQsXG4gKiBpdCB3aWxsIGF1dG9tYXRpY2FsbHkgY2FsbHMgdGhlc2UgYWN0aW9ucyB0byBhZGQgaXRzZWxmIHRvIHRoZSByb290IHJlZHVjZXIuXG4gKiBIb3dldmVyLCBzb21ldGltZXMgdGhlIGRhdGEgaXMgcmVhZHkgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgcmVnaXN0ZXJlZCBpbiB0aGUgcmVkdWNlcixcbiAqIGluIHRoaXMgY2FzZSwgeW91IGNhbiBtYW51YWxseSBjYWxsIHRoZXNlIGFjdGlvbnMgb3IgdGhlIGNvcnJlc3BvbmRpbmcgdXBkYXRlciB0byBhZGQgaXQgdG8gdGhlIHJlZHVjZXIuXG4gKlxuICogQHB1YmxpY1xuICovXG4vKiBlc2xpbnQtZGlzYWJsZSAgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG4vLyBAdHMtaWdub3JlXG5jb25zdCByb290QWN0aW9ucyA9IG51bGw7XG4vKiBlc2xpbnQtZW5hYmxlICBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUpBO0FBQ0E7O0FBdUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUcsYUFHWixHQUFBQyxPQUFBLENBQUFELGFBQUEsR0FBRyxJQUFBSixRQUFBLENBQUFNLFlBQVksRUFBQ0osWUFBQSxXQUFXLENBQUNLLGNBQWMsRUFBRSxVQUFDQyxPQUE4QztFQUFBLE9BQU07SUFDaEdBLE9BQU8sRUFBUEE7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1DLFdBR1osR0FBQUosT0FBQSxDQUFBSSxXQUFBLEdBQUcsSUFBQVQsUUFBQSxDQUFBTSxZQUFZLEVBQUNKLFlBQUEsV0FBVyxDQUFDUSxZQUFZLEVBQUUsVUFBQ0MsRUFBVTtFQUFBLE9BQU07SUFBQ0gsT0FBTyxFQUFFO01BQUNHLEVBQUUsRUFBRUE7SUFBRTtFQUFDLENBQUM7QUFBQSxDQUFDLENBQUM7O0FBRWpGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1DLFdBTVosR0FBQVAsT0FBQSxDQUFBTyxXQUFBLEdBQUcsSUFBQVosUUFBQSxDQUFBTSxZQUFZLEVBQUNKLFlBQUEsV0FBVyxDQUFDVyxZQUFZLEVBQUUsVUFBQ0MsS0FBYSxFQUFFQyxLQUFhO0VBQUEsT0FBTTtJQUM1RVAsT0FBTyxFQUFFO01BQ1BNLEtBQUssRUFBTEEsS0FBSztNQUNMQyxLQUFLLEVBQUxBO0lBQ0Y7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQyxXQUFXLEdBQUcsSUFBSTtBQUN4QiIsImlnbm9yZUxpc3QiOltdfQ==