"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connect = void 0;
var _reactRedux = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-redux/lib");
var _withLocalSelector = _interopRequireDefault(require("./with-local-selector"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

// eslint-disable-next-line @typescript-eslint/no-unused-vars
var defaultMapStateToProps = function defaultMapStateToProps(state, _, __) {
  return state;
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var defaultMapDispatchToProps = function defaultMapDispatchToProps() {
  return function (dispatch, _, __) {
    return {
      dispatch: dispatch
    };
  };
};
var connect = exports.connect = function connect() {
  var mapStateToProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultMapStateToProps;
  var makeMapDispatchToProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMapDispatchToProps;
  var reduxMergeProps = arguments.length > 2 ? arguments[2] : undefined;
  var options = arguments.length > 3 ? arguments[3] : undefined;
  return function (BaseComponent) {
    var mapDispatchToProps = makeMapDispatchToProps();
    var reduxMapState = function reduxMapState(state, props) {
      return mapStateToProps(props.selector(state), props, state);
    };
    var reduxMapDispatch = function reduxMapDispatch(dispatch, props) {
      return mapDispatchToProps(props.dispatch, props, dispatch);
    };
    var ReduxComponent = (0, _reactRedux.connect)(reduxMapState, reduxMapDispatch, reduxMergeProps, options)(BaseComponent);

    // save selector to context so it can be accessed by its children
    return (0, _withLocalSelector["default"])(ReduxComponent);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3RSZWR1eCIsInJlcXVpcmUiLCJfd2l0aExvY2FsU2VsZWN0b3IiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyIsInN0YXRlIiwiXyIsIl9fIiwiZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcyIsImRpc3BhdGNoIiwiY29ubmVjdCIsImV4cG9ydHMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJtYWtlTWFwRGlzcGF0Y2hUb1Byb3BzIiwicmVkdXhNZXJnZVByb3BzIiwib3B0aW9ucyIsIkJhc2VDb21wb25lbnQiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJyZWR1eE1hcFN0YXRlIiwicHJvcHMiLCJzZWxlY3RvciIsInJlZHV4TWFwRGlzcGF0Y2giLCJSZWR1eENvbXBvbmVudCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25uZWN0L2tlcGxlcmdsLWNvbm5lY3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IHtKU1hFbGVtZW50Q29uc3RydWN0b3J9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Y29ubmVjdCBhcyByZWR1eENvbm5lY3QsIEdldFByb3BzLCBNYXRjaGluZ30gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHdpdGhMb2NhbFNlbGVjdG9yIGZyb20gJy4vd2l0aC1sb2NhbC1zZWxlY3Rvcic7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmNvbnN0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIF8sIF9fKSA9PiBzdGF0ZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmNvbnN0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHMgPSAoKSA9PiAoZGlzcGF0Y2gsIF8sIF9fKSA9PiAoe2Rpc3BhdGNofSk7XG5cbmV4cG9ydCBjb25zdCBjb25uZWN0ID1cbiAgPFQgZXh0ZW5kcyBKU1hFbGVtZW50Q29uc3RydWN0b3I8TWF0Y2hpbmc8YW55LCBHZXRQcm9wczxUPj4+PihcbiAgICBtYXBTdGF0ZVRvUHJvcHMgPSBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzLFxuICAgIG1ha2VNYXBEaXNwYXRjaFRvUHJvcHMgPSBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgIHJlZHV4TWVyZ2VQcm9wcz8sXG4gICAgb3B0aW9ucz9cbiAgKSA9PlxuICAoQmFzZUNvbXBvbmVudDogVCkgPT4ge1xuICAgIGNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IG1ha2VNYXBEaXNwYXRjaFRvUHJvcHMoKTtcbiAgICBjb25zdCByZWR1eE1hcFN0YXRlID0gKHN0YXRlLCBwcm9wcykgPT4gbWFwU3RhdGVUb1Byb3BzKHByb3BzLnNlbGVjdG9yKHN0YXRlKSwgcHJvcHMsIHN0YXRlKTtcblxuICAgIGNvbnN0IHJlZHV4TWFwRGlzcGF0Y2ggPSAoZGlzcGF0Y2gsIHByb3BzKSA9PlxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzKHByb3BzLmRpc3BhdGNoLCBwcm9wcywgZGlzcGF0Y2gpO1xuXG4gICAgY29uc3QgUmVkdXhDb21wb25lbnQgPSByZWR1eENvbm5lY3QoXG4gICAgICByZWR1eE1hcFN0YXRlLFxuICAgICAgcmVkdXhNYXBEaXNwYXRjaCxcbiAgICAgIHJlZHV4TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnNcbiAgICApKEJhc2VDb21wb25lbnQpO1xuXG4gICAgLy8gc2F2ZSBzZWxlY3RvciB0byBjb250ZXh0IHNvIGl0IGNhbiBiZSBhY2Nlc3NlZCBieSBpdHMgY2hpbGRyZW5cbiAgICByZXR1cm4gd2l0aExvY2FsU2VsZWN0b3IoUmVkdXhDb21wb25lbnQpO1xuICB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSUEsSUFBQUEsV0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsa0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUxBO0FBQ0E7O0FBTUE7QUFDQSxJQUFNRyxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXNCQSxDQUFJQyxLQUFLLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtFQUFBLE9BQUtGLEtBQUs7QUFBQTtBQUN0RDtBQUNBLElBQU1HLHlCQUF5QixHQUFHLFNBQTVCQSx5QkFBeUJBLENBQUE7RUFBQSxPQUFTLFVBQUNDLFFBQVEsRUFBRUgsQ0FBQyxFQUFFQyxFQUFFO0lBQUEsT0FBTTtNQUFDRSxRQUFRLEVBQVJBO0lBQVEsQ0FBQztFQUFBLENBQUM7QUFBQTtBQUVsRSxJQUFNQyxPQUFPLEdBQUFDLE9BQUEsQ0FBQUQsT0FBQSxHQUNsQixTQURXQSxPQUFPQSxDQUFBO0VBQUEsSUFFaEJFLGVBQWUsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUdULHNCQUFzQjtFQUFBLElBQ3hDWSxzQkFBc0IsR0FBQUgsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUdMLHlCQUF5QjtFQUFBLElBQ2xEUyxlQUFnQixHQUFBSixTQUFBLENBQUFDLE1BQUEsT0FBQUQsU0FBQSxNQUFBRSxTQUFBO0VBQUEsSUFDaEJHLE9BQVEsR0FBQUwsU0FBQSxDQUFBQyxNQUFBLE9BQUFELFNBQUEsTUFBQUUsU0FBQTtFQUFBLE9BRVYsVUFBQ0ksYUFBZ0IsRUFBSztJQUNwQixJQUFNQyxrQkFBa0IsR0FBR0osc0JBQXNCLENBQUMsQ0FBQztJQUNuRCxJQUFNSyxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUloQixLQUFLLEVBQUVpQixLQUFLO01BQUEsT0FBS1YsZUFBZSxDQUFDVSxLQUFLLENBQUNDLFFBQVEsQ0FBQ2xCLEtBQUssQ0FBQyxFQUFFaUIsS0FBSyxFQUFFakIsS0FBSyxDQUFDO0lBQUE7SUFFNUYsSUFBTW1CLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQUlmLFFBQVEsRUFBRWEsS0FBSztNQUFBLE9BQ3ZDRixrQkFBa0IsQ0FBQ0UsS0FBSyxDQUFDYixRQUFRLEVBQUVhLEtBQUssRUFBRWIsUUFBUSxDQUFDO0lBQUE7SUFFckQsSUFBTWdCLGNBQWMsR0FBRyxJQUFBekIsV0FBQSxDQUFBVSxPQUFZLEVBQ2pDVyxhQUFhLEVBQ2JHLGdCQUFnQixFQUNoQlAsZUFBZSxFQUNmQyxPQUNGLENBQUMsQ0FBQ0MsYUFBYSxDQUFDOztJQUVoQjtJQUNBLE9BQU8sSUFBQWpCLGtCQUFBLFdBQWlCLEVBQUN1QixjQUFjLENBQUM7RUFDMUMsQ0FBQztBQUFBIiwiaWdub3JlTGlzdCI6W119