"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = DatasetInfoFactory;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _d3Format = require("d3-format");
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _localization = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var numFormat = (0, _d3Format.format)(',');
var StyledDataRowCount = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: 11px;\n  color: ", ";\n  padding-left: 19px;\n"])), function (props) {
  return props.theme.subtextColor;
});
function DatasetInfoFactory() {
  var DatasetInfo = function DatasetInfo(_ref) {
    var dataset = _ref.dataset;
    return /*#__PURE__*/_react["default"].createElement(StyledDataRowCount, {
      className: "source-data-rows"
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: dataset.type === _constants.DatasetType.VECTOR_TILE ? 'datasetInfo.vectorTile' : dataset.type === _constants.DatasetType.RASTER_TILE ? 'datasetInfo.rasterTile' : 'datasetInfo.rowCount',
      values: {
        rowCount: numFormat(dataset.dataContainer.numRows())
      }
    }));
  };
  return DatasetInfo;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zdHlsZWRDb21wb25lbnRzIiwiX2QzRm9ybWF0IiwiX2NvbnN0YW50cyIsIl9sb2NhbGl6YXRpb24iLCJfdGVtcGxhdGVPYmplY3QiLCJudW1Gb3JtYXQiLCJmb3JtYXQiLCJTdHlsZWREYXRhUm93Q291bnQiLCJkaXYiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsMiIsInByb3BzIiwidGhlbWUiLCJzdWJ0ZXh0Q29sb3IiLCJEYXRhc2V0SW5mb0ZhY3RvcnkiLCJEYXRhc2V0SW5mbyIsIl9yZWYiLCJkYXRhc2V0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsIkZvcm1hdHRlZE1lc3NhZ2UiLCJpZCIsInR5cGUiLCJEYXRhc2V0VHlwZSIsIlZFQ1RPUl9USUxFIiwiUkFTVEVSX1RJTEUiLCJ2YWx1ZXMiLCJyb3dDb3VudCIsImRhdGFDb250YWluZXIiLCJudW1Sb3dzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NpZGUtcGFuZWwvY29tbW9uL2RhdGFzZXQtaW5mby50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHtmb3JtYXR9IGZyb20gJ2QzLWZvcm1hdCc7XG5cbmltcG9ydCB7RGF0YXNldFR5cGV9IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuaW1wb3J0IHtEYXRhQ29udGFpbmVySW50ZXJmYWNlfSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcblxuY29uc3QgbnVtRm9ybWF0ID0gZm9ybWF0KCcsJyk7XG5cbnR5cGUgTWluaURhdGFzZXQgPSB7XG4gIGRhdGFDb250YWluZXI6IERhdGFDb250YWluZXJJbnRlcmZhY2U7XG4gIHR5cGU/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBEYXRhc2V0SW5mb1Byb3BzID0ge1xuICBkYXRhc2V0OiBNaW5pRGF0YXNldDtcbn07XG5cbmNvbnN0IFN0eWxlZERhdGFSb3dDb3VudCA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuc3VidGV4dENvbG9yfTtcbiAgcGFkZGluZy1sZWZ0OiAxOXB4O1xuYDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGF0YXNldEluZm9GYWN0b3J5KCkge1xuICBjb25zdCBEYXRhc2V0SW5mbzogUmVhY3QuRkM8RGF0YXNldEluZm9Qcm9wcz4gPSAoe2RhdGFzZXR9OiBEYXRhc2V0SW5mb1Byb3BzKSA9PiAoXG4gICAgPFN0eWxlZERhdGFSb3dDb3VudCBjbGFzc05hbWU9XCJzb3VyY2UtZGF0YS1yb3dzXCI+XG4gICAgICA8Rm9ybWF0dGVkTWVzc2FnZVxuICAgICAgICBpZD17XG4gICAgICAgICAgZGF0YXNldC50eXBlID09PSBEYXRhc2V0VHlwZS5WRUNUT1JfVElMRVxuICAgICAgICAgICAgPyAnZGF0YXNldEluZm8udmVjdG9yVGlsZSdcbiAgICAgICAgICAgIDogZGF0YXNldC50eXBlID09PSBEYXRhc2V0VHlwZS5SQVNURVJfVElMRVxuICAgICAgICAgICAgPyAnZGF0YXNldEluZm8ucmFzdGVyVGlsZSdcbiAgICAgICAgICAgIDogJ2RhdGFzZXRJbmZvLnJvd0NvdW50J1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlcz17e3Jvd0NvdW50OiBudW1Gb3JtYXQoZGF0YXNldC5kYXRhQ29udGFpbmVyLm51bVJvd3MoKSl9fVxuICAgICAgLz5cbiAgICA8L1N0eWxlZERhdGFSb3dDb3VudD5cbiAgKTtcblxuICByZXR1cm4gRGF0YXNldEluZm87XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsaUJBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFNBQUEsR0FBQUYsT0FBQTtBQUVBLElBQUFHLFVBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUosT0FBQTtBQUF5RCxJQUFBSyxlQUFBLEVBUnpEO0FBQ0E7QUFVQSxJQUFNQyxTQUFTLEdBQUcsSUFBQUosU0FBQSxDQUFBSyxNQUFNLEVBQUMsR0FBRyxDQUFDO0FBVzdCLElBQU1DLGtCQUFrQixHQUFHUCxpQkFBQSxXQUFNLENBQUNRLEdBQUcsQ0FBQUosZUFBQSxLQUFBQSxlQUFBLE9BQUFLLHVCQUFBLGtGQUUxQixVQUFBQyxLQUFLO0VBQUEsT0FBSUEsS0FBSyxDQUFDQyxLQUFLLENBQUNDLFlBQVk7QUFBQSxFQUUzQztBQUVjLFNBQVNDLGtCQUFrQkEsQ0FBQSxFQUFHO0VBQzNDLElBQU1DLFdBQXVDLEdBQUcsU0FBMUNBLFdBQXVDQSxDQUFBQyxJQUFBO0lBQUEsSUFBS0MsT0FBTyxHQUFBRCxJQUFBLENBQVBDLE9BQU87SUFBQSxvQkFDdkRuQixNQUFBLFlBQUFvQixhQUFBLENBQUNWLGtCQUFrQjtNQUFDVyxTQUFTLEVBQUM7SUFBa0IsZ0JBQzlDckIsTUFBQSxZQUFBb0IsYUFBQSxDQUFDZCxhQUFBLENBQUFnQixnQkFBZ0I7TUFDZkMsRUFBRSxFQUNBSixPQUFPLENBQUNLLElBQUksS0FBS25CLFVBQUEsQ0FBQW9CLFdBQVcsQ0FBQ0MsV0FBVyxHQUNwQyx3QkFBd0IsR0FDeEJQLE9BQU8sQ0FBQ0ssSUFBSSxLQUFLbkIsVUFBQSxDQUFBb0IsV0FBVyxDQUFDRSxXQUFXLEdBQ3hDLHdCQUF3QixHQUN4QixzQkFDTDtNQUNEQyxNQUFNLEVBQUU7UUFBQ0MsUUFBUSxFQUFFckIsU0FBUyxDQUFDVyxPQUFPLENBQUNXLGFBQWEsQ0FBQ0MsT0FBTyxDQUFDLENBQUM7TUFBQztJQUFFLENBQ2hFLENBQ2lCLENBQUM7RUFBQSxDQUN0QjtFQUVELE9BQU9kLFdBQVc7QUFDcEIiLCJpZ25vcmVMaXN0IjpbXX0=