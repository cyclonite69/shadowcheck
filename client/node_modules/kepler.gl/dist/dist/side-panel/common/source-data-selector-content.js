"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _itemSelector = _interopRequireDefault(require("../../common/item-selector/item-selector"));
var _datasetTag = _interopRequireDefault(require("./dataset-tag"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

SourceDataSelectorContentFactory.deps = [_datasetTag["default"]];
function SourceDataSelectorContentFactory(DatasetTag) {
  var DatasetItem = function DatasetItem(_ref) {
    var value = _ref.value;
    return /*#__PURE__*/_react["default"].createElement(DatasetTag, {
      dataset: value
    });
  };
  var SourceDataSelectorContent = function SourceDataSelectorContent(_ref2) {
    var className = _ref2.className,
      datasets = _ref2.datasets,
      dataId = _ref2.dataId,
      inputTheme = _ref2.inputTheme,
      onSelect = _ref2.onSelect,
      defaultValue = _ref2.defaultValue,
      disabled = _ref2.disabled;
    var dsOptions = (0, _react.useMemo)(function () {
      return Object.values(datasets).map(function (ds) {
        return {
          label: ds.label,
          value: ds.id,
          color: ds.color
        };
      });
    }, [datasets]);
    var selectedItems = (0, _react.useMemo)(function () {
      return dataId ? (Array.isArray(dataId) && dataId || [dataId]).map(function (id) {
        return datasets[id];
      }) : [];
    }, [dataId, datasets]);
    return /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
      className: className,
      inputTheme: inputTheme,
      selectedItems: selectedItems,
      options: dsOptions,
      getOptionValue: 'value',
      filterOption: 'label',
      multiSelect: false,
      onChange: onSelect,
      placeholder: defaultValue,
      disabled: disabled,
      displayOption: 'label',
      DropDownLineItemRenderComponent: DatasetItem
    });
  };
  return SourceDataSelectorContent;
}
var _default = exports["default"] = SourceDataSelectorContentFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfaXRlbVNlbGVjdG9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9kYXRhc2V0VGFnIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiU291cmNlRGF0YVNlbGVjdG9yQ29udGVudEZhY3RvcnkiLCJkZXBzIiwiRGF0YXNldFRhZyIsIkRhdGFzZXRJdGVtIiwiX3JlZiIsInZhbHVlIiwiY3JlYXRlRWxlbWVudCIsImRhdGFzZXQiLCJTb3VyY2VEYXRhU2VsZWN0b3JDb250ZW50IiwiX3JlZjIiLCJjbGFzc05hbWUiLCJkYXRhc2V0cyIsImRhdGFJZCIsImlucHV0VGhlbWUiLCJvblNlbGVjdCIsImRlZmF1bHRWYWx1ZSIsImRpc2FibGVkIiwiZHNPcHRpb25zIiwidXNlTWVtbyIsInZhbHVlcyIsIm1hcCIsImRzIiwibGFiZWwiLCJpZCIsImNvbG9yIiwic2VsZWN0ZWRJdGVtcyIsIkFycmF5IiwiaXNBcnJheSIsIm9wdGlvbnMiLCJnZXRPcHRpb25WYWx1ZSIsImZpbHRlck9wdGlvbiIsIm11bHRpU2VsZWN0Iiwib25DaGFuZ2UiLCJwbGFjZWhvbGRlciIsImRpc3BsYXlPcHRpb24iLCJEcm9wRG93bkxpbmVJdGVtUmVuZGVyQ29tcG9uZW50IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NpZGUtcGFuZWwvY29tbW9uL3NvdXJjZS1kYXRhLXNlbGVjdG9yLWNvbnRlbnQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZU1lbW99IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEl0ZW1TZWxlY3RvciBmcm9tICcuLi8uLi9jb21tb24vaXRlbS1zZWxlY3Rvci9pdGVtLXNlbGVjdG9yJztcbmltcG9ydCBEYXRhc2V0VGFnRmFjdG9yeSBmcm9tICcuL2RhdGFzZXQtdGFnJztcbmltcG9ydCB7U291cmNlRGF0YVNlbGVjdG9yUHJvcHN9IGZyb20gJy4vdHlwZXMnO1xuXG5Tb3VyY2VEYXRhU2VsZWN0b3JDb250ZW50RmFjdG9yeS5kZXBzID0gW0RhdGFzZXRUYWdGYWN0b3J5XTtcblxuZnVuY3Rpb24gU291cmNlRGF0YVNlbGVjdG9yQ29udGVudEZhY3RvcnkoRGF0YXNldFRhZykge1xuICBjb25zdCBEYXRhc2V0SXRlbSA9ICh7dmFsdWV9KSA9PiA8RGF0YXNldFRhZyBkYXRhc2V0PXt2YWx1ZX0gLz47XG5cbiAgY29uc3QgU291cmNlRGF0YVNlbGVjdG9yQ29udGVudCA9ICh7XG4gICAgY2xhc3NOYW1lLFxuICAgIGRhdGFzZXRzLFxuICAgIGRhdGFJZCxcbiAgICBpbnB1dFRoZW1lLFxuICAgIG9uU2VsZWN0LFxuICAgIGRlZmF1bHRWYWx1ZSxcbiAgICBkaXNhYmxlZFxuICB9OiBTb3VyY2VEYXRhU2VsZWN0b3JQcm9wcykgPT4ge1xuICAgIGNvbnN0IGRzT3B0aW9ucyA9IHVzZU1lbW8oXG4gICAgICAoKSA9PlxuICAgICAgICBPYmplY3QudmFsdWVzKGRhdGFzZXRzKS5tYXAoZHMgPT4gKHtcbiAgICAgICAgICBsYWJlbDogZHMubGFiZWwsXG4gICAgICAgICAgdmFsdWU6IGRzLmlkLFxuICAgICAgICAgIGNvbG9yOiBkcy5jb2xvclxuICAgICAgICB9KSksXG4gICAgICBbZGF0YXNldHNdXG4gICAgKTtcblxuICAgIGNvbnN0IHNlbGVjdGVkSXRlbXMgPSB1c2VNZW1vKFxuICAgICAgKCkgPT4gKGRhdGFJZCA/ICgoQXJyYXkuaXNBcnJheShkYXRhSWQpICYmIGRhdGFJZCkgfHwgW2RhdGFJZF0pLm1hcChpZCA9PiBkYXRhc2V0c1tpZF0pIDogW10pLFxuICAgICAgW2RhdGFJZCwgZGF0YXNldHNdXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8SXRlbVNlbGVjdG9yXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICBpbnB1dFRoZW1lPXtpbnB1dFRoZW1lfVxuICAgICAgICBzZWxlY3RlZEl0ZW1zPXtzZWxlY3RlZEl0ZW1zfVxuICAgICAgICBvcHRpb25zPXtkc09wdGlvbnN9XG4gICAgICAgIGdldE9wdGlvblZhbHVlPXsndmFsdWUnfVxuICAgICAgICBmaWx0ZXJPcHRpb249eydsYWJlbCd9XG4gICAgICAgIG11bHRpU2VsZWN0PXtmYWxzZX1cbiAgICAgICAgb25DaGFuZ2U9e29uU2VsZWN0fVxuICAgICAgICBwbGFjZWhvbGRlcj17ZGVmYXVsdFZhbHVlfVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIGRpc3BsYXlPcHRpb249eydsYWJlbCd9XG4gICAgICAgIERyb3BEb3duTGluZUl0ZW1SZW5kZXJDb21wb25lbnQ9e0RhdGFzZXRJdGVtfVxuICAgICAgLz5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBTb3VyY2VEYXRhU2VsZWN0b3JDb250ZW50O1xufVxuXG5leHBvcnQgZGVmYXVsdCBTb3VyY2VEYXRhU2VsZWN0b3JDb250ZW50RmFjdG9yeTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxhQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFBOEMsU0FBQUkseUJBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQTtFQUFBLElBQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQTtJQUFBLE9BQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBO0VBQUEsR0FBQUYsQ0FBQTtBQUFBO0FBQUEsU0FBQU4sd0JBQUFNLENBQUEsRUFBQUUsQ0FBQTtFQUFBLEtBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQTtFQUFBLGFBQUFBLENBQUEsZ0JBQUFLLE9BQUEsQ0FBQUwsQ0FBQSwwQkFBQUEsQ0FBQTtJQUFBLFdBQUFBO0VBQUE7RUFBQSxJQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUE7RUFBQSxJQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBO0VBQUEsSUFBQVEsQ0FBQTtNQUFBQyxTQUFBO0lBQUE7SUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQTtFQUFBLFNBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQTtJQUFBLElBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQTtJQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUE7RUFBQTtFQUFBLE9BQUFOLENBQUEsY0FBQVIsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFBQTtBQU45QztBQUNBOztBQVFBVyxnQ0FBZ0MsQ0FBQ0MsSUFBSSxHQUFHLENBQUN0QixXQUFBLFdBQWlCLENBQUM7QUFFM0QsU0FBU3FCLGdDQUFnQ0EsQ0FBQ0UsVUFBVSxFQUFFO0VBQ3BELElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFBQyxJQUFBO0lBQUEsSUFBS0MsS0FBSyxHQUFBRCxJQUFBLENBQUxDLEtBQUs7SUFBQSxvQkFBTS9CLE1BQUEsWUFBQWdDLGFBQUEsQ0FBQ0osVUFBVTtNQUFDSyxPQUFPLEVBQUVGO0lBQU0sQ0FBRSxDQUFDO0VBQUE7RUFFL0QsSUFBTUcseUJBQXlCLEdBQUcsU0FBNUJBLHlCQUF5QkEsQ0FBQUMsS0FBQSxFQVFBO0lBQUEsSUFQN0JDLFNBQVMsR0FBQUQsS0FBQSxDQUFUQyxTQUFTO01BQ1RDLFFBQVEsR0FBQUYsS0FBQSxDQUFSRSxRQUFRO01BQ1JDLE1BQU0sR0FBQUgsS0FBQSxDQUFORyxNQUFNO01BQ05DLFVBQVUsR0FBQUosS0FBQSxDQUFWSSxVQUFVO01BQ1ZDLFFBQVEsR0FBQUwsS0FBQSxDQUFSSyxRQUFRO01BQ1JDLFlBQVksR0FBQU4sS0FBQSxDQUFaTSxZQUFZO01BQ1pDLFFBQVEsR0FBQVAsS0FBQSxDQUFSTyxRQUFRO0lBRVIsSUFBTUMsU0FBUyxHQUFHLElBQUEzQyxNQUFBLENBQUE0QyxPQUFPLEVBQ3ZCO01BQUEsT0FDRTFCLE1BQU0sQ0FBQzJCLE1BQU0sQ0FBQ1IsUUFBUSxDQUFDLENBQUNTLEdBQUcsQ0FBQyxVQUFBQyxFQUFFO1FBQUEsT0FBSztVQUNqQ0MsS0FBSyxFQUFFRCxFQUFFLENBQUNDLEtBQUs7VUFDZmpCLEtBQUssRUFBRWdCLEVBQUUsQ0FBQ0UsRUFBRTtVQUNaQyxLQUFLLEVBQUVILEVBQUUsQ0FBQ0c7UUFDWixDQUFDO01BQUEsQ0FBQyxDQUFDO0lBQUEsR0FDTCxDQUFDYixRQUFRLENBQ1gsQ0FBQztJQUVELElBQU1jLGFBQWEsR0FBRyxJQUFBbkQsTUFBQSxDQUFBNEMsT0FBTyxFQUMzQjtNQUFBLE9BQU9OLE1BQU0sR0FBRyxDQUFFYyxLQUFLLENBQUNDLE9BQU8sQ0FBQ2YsTUFBTSxDQUFDLElBQUlBLE1BQU0sSUFBSyxDQUFDQSxNQUFNLENBQUMsRUFBRVEsR0FBRyxDQUFDLFVBQUFHLEVBQUU7UUFBQSxPQUFJWixRQUFRLENBQUNZLEVBQUUsQ0FBQztNQUFBLEVBQUMsR0FBRyxFQUFFO0lBQUEsQ0FBQyxFQUM3RixDQUFDWCxNQUFNLEVBQUVELFFBQVEsQ0FDbkIsQ0FBQztJQUVELG9CQUNFckMsTUFBQSxZQUFBZ0MsYUFBQSxDQUFDN0IsYUFBQSxXQUFZO01BQ1hpQyxTQUFTLEVBQUVBLFNBQVU7TUFDckJHLFVBQVUsRUFBRUEsVUFBVztNQUN2QlksYUFBYSxFQUFFQSxhQUFjO01BQzdCRyxPQUFPLEVBQUVYLFNBQVU7TUFDbkJZLGNBQWMsRUFBRSxPQUFRO01BQ3hCQyxZQUFZLEVBQUUsT0FBUTtNQUN0QkMsV0FBVyxFQUFFLEtBQU07TUFDbkJDLFFBQVEsRUFBRWxCLFFBQVM7TUFDbkJtQixXQUFXLEVBQUVsQixZQUFhO01BQzFCQyxRQUFRLEVBQUVBLFFBQVM7TUFDbkJrQixhQUFhLEVBQUUsT0FBUTtNQUN2QkMsK0JBQStCLEVBQUVoQztJQUFZLENBQzlDLENBQUM7RUFFTixDQUFDO0VBRUQsT0FBT0sseUJBQXlCO0FBQ2xDO0FBQUMsSUFBQTRCLFFBQUEsR0FBQUMsT0FBQSxjQUVjckMsZ0NBQWdDIiwiaWdub3JlTGlzdCI6W119