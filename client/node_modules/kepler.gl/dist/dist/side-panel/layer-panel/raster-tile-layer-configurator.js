"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _layers = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/layers/src");
var _localization = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _rasterTileColormapListItem = require("./raster-tile-colormap-list-item");
var _styledComponents2 = require("../../common/styled-components");
var _switch = _interopRequireDefault(require("../../common/switch"));
var _infoHelper = _interopRequireDefault(require("../../common/info-helper"));
var _itemSelector = _interopRequireDefault(require("../../common/item-selector/item-selector"));
var _visConfigSlider = _interopRequireDefault(require("../../side-panel/layer-panel/vis-config-slider"));
var _layerConfigGroup = _interopRequireDefault(require("../../side-panel/layer-panel/layer-config-group"));
var _visConfigSwitch = _interopRequireDefault(require("../../side-panel/layer-panel/vis-config-switch"));
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
var STAC_SEARCH_UI_ENABLED = true;
var StyledVisConfigSwitch = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n\n  .vis-config-switch__title {\n    display: flex;\n  }\n"])));
var CustomVisConfigSwitch = function CustomVisConfigSwitch(_ref) {
  var _ref$layer = _ref.layer,
    id = _ref$layer.id,
    config = _ref$layer.config,
    property = _ref.property,
    _onChange2 = _ref.onChange,
    label = _ref.label,
    disabled = _ref.disabled;
  return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, {
    disabled: Boolean(disabled)
  }, /*#__PURE__*/_react["default"].createElement(StyledVisConfigSwitch, {
    className: "vis-config-switch"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "vis-config-switch__title"
  }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabelWrapper, null, label ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, label && /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: label
  }) || (0, _utils.capitalizeFirstLetter)(property)) : null)), /*#__PURE__*/_react["default"].createElement("div", {
    className: "vis-config-switch__switch"
  }, /*#__PURE__*/_react["default"].createElement(_switch["default"], {
    checked: config.visConfig[property],
    id: "".concat(id, "-").concat(property, "-switch"),
    onChange: function onChange() {
      return _onChange2((0, _defineProperty2["default"])({}, property, !config.visConfig[property]));
    }
  }))));
};
var StyledLayerConfigurator = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-top: 12px;\n"])));
var DescriptionText = (0, _styledComponents["default"])(_styledComponents2.PanelLabel)(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  text-transform: none;\n  display: inline;\n  color: ", ";\n\n  a {\n    text-decoration: underline;\n    margin-left: 4px;\n  }\n"])), function (props) {
  return props.theme.subtextColor;
});

// TODO: combine these two helpers into one
function findVisConfigItemById(layer, prop) {
  return layer.visConfigSettings[prop].options.find(function (op) {
    return op.id === layer.config.visConfig[prop];
  });
}
function findItemById(layer, options, prop) {
  // For now it's possible that non-raster metadata will be passed to the raster configurator, so
  // options may be null
  return options === null || options === void 0 ? void 0 : options.find(function (op) {
    return op.id === layer.config.visConfig[prop];
  });
}

/**
 * Generate drop down labels for single band selector
 * @param stac - STAC item metadata object
 * @returns array of {id, label} elements
 */
function getBandSelectorOptions(stac) {
  var eoBands = (0, _layers.getEOBands)(stac) || [];
  return eoBands.map(function (eoBand) {
    return {
      id: eoBand.name || eoBand.common_name,
      label: eoBand.common_name ? "".concat(eoBand.name || eoBand.common_name, " (").concat(eoBand.common_name, ")") : eoBand.name
    };
  });
}
function getCategoricalColormapListItem(categoricalColorMap) {
  var categoricalItem;
  if (categoricalColorMap) {
    categoricalItem = {
      label: 'Categorical',
      id: _layers.CATEGORICAL_COLORMAP_ID
    };
  }
  return categoricalItem;
}

/**
 * Check if data source global pixel color range is calculated correctly
 * @param layer - raster layer
 * @param stac - STAC metadata object
 * @param preset - preset name
 * @param singleBandPresetOptions - options for single band preset
 * @returns boolean value
 */
function isDataSourceColorRangeAvailable(layer, stac, preset, singleBandPresetOptions) {
  var minPixelValue = null;
  var maxPixelValue = null;
  var dataSourceParams = layer.getDataSourceParams(stac, preset, {
    singleBand: singleBandPresetOptions
  });
  if (dataSourceParams) {
    minPixelValue = dataSourceParams.minPixelValue;
    maxPixelValue = dataSourceParams.maxPixelValue;
  }
  return minPixelValue !== null && maxPixelValue !== null;
}

/**
 * Updates color parameters based on a change in visualization preset.
 *
 * This function adjusts the color processing parameters when the visualization
 * preset changes, based on whether the preset is switching to or from a
 * single-band. Determines whether to apply color
 * enhancements or reset parameters based on the preset transition.
 *
 * @param stac A STAC (SpatioTemporal Asset Catalog) object representing the dataset.
 * @param newPreset The old visualization preset being applied.
 * @param newPreset The new visualization preset being applied.
 * @returns The updated color parameters to apply.
 */
function updateColorParamsOnPresetChange(stac, oldPreset, newPreset) {
  var colorParams = {};
  var colorOverrides = _layers.DATA_SOURCE_COLOR_DEFAULTS[stac.id];
  if (colorOverrides) return colorParams;
  var bandOfInterest = 'singleBand';
  if (oldPreset === bandOfInterest && newPreset !== bandOfInterest) {
    // enchance colors for multiband combinations
    colorParams = colorOverrides;
  } else if (oldPreset !== bandOfInterest && newPreset === bandOfInterest) {
    // reset image processng params
    colorParams = _layers.RASTER_COLOR_RESET_PARAMS;
  }
  return colorParams;
}
RasterTileLayerConfiguratorFactory.deps = [_layerConfigGroup["default"], _visConfigSlider["default"], _infoHelper["default"], _visConfigSwitch["default"]];
function RasterTileLayerConfiguratorFactory(LayerConfigGroup, VisConfigSlider, InfoHelper, VisConfigSwitch) {
  /**
   * Wrapper around configurator to check for dataset.metadata being null/undefined
   */
  var STACCheckConfiguratorWrapper = function STACCheckConfiguratorWrapper(_ref2) {
    var layer = _ref2.layer,
      visConfiguratorProps = _ref2.visConfiguratorProps,
      dataset = _ref2.dataset;
    var stac = dataset === null || dataset === void 0 ? void 0 : dataset.metadata;

    // If no dataset is loaded into Kepler, stac can be undefined
    if (!stac) {
      return null;
    }
    return /*#__PURE__*/_react["default"].createElement(RasterTileLayerConfigurator, {
      layer: layer,
      visConfiguratorProps: visConfiguratorProps,
      dataset: dataset
    });
  };

  // eslint-disable-next-line complexity
  var RasterTileLayerConfigurator = function RasterTileLayerConfigurator(_ref3) {
    var _stac$rasterTileServe2;
    var layer = _ref3.layer,
      visConfiguratorProps = _ref3.visConfiguratorProps,
      dataset = _ref3.dataset;
    var _layer$config$visConf = layer.config.visConfig,
      preset = _layer$config$visConf.preset,
      nonLinearRescaling = _layer$config$visConf.nonLinearRescaling,
      useSTACSearching = _layer$config$visConf.useSTACSearching,
      categoricalColorMap = _layer$config$visConf.colorRange.colorMap,
      dynamicColor = _layer$config$visConf.dynamicColor,
      singleBandName = _layer$config$visConf.singleBandName;
    var stac = dataset === null || dataset === void 0 ? void 0 : dataset.metadata;
    var availablePresets = (0, _react.useMemo)(function () {
      return (0, _layers.filterAvailablePresets)(stac, _layers.PRESET_OPTIONS);
    }, [stac]);
    var presetOptions = (0, _react.useMemo)(function () {
      return layer.visConfigSettings.preset.options.filter(function (_ref4) {
        var id = _ref4.id;
        return availablePresets === null || availablePresets === void 0 ? void 0 : availablePresets.includes(id);
      });
    }, [layer.visConfigSettings.preset.options, availablePresets]);
    var singleBandOptions = (0, _react.useMemo)(function () {
      return getBandSelectorOptions(stac);
    }, [stac]);
    var colormapOptions = (0, _react.useMemo)(function () {
      var options = (0, _toConsumableArray2["default"])(layer.visConfigSettings.colormapId.options);
      var categoricalListItem = getCategoricalColormapListItem(categoricalColorMap);
      if (categoricalListItem) {
        options.push(categoricalListItem);
      }
      return options;
    }, [layer.visConfigSettings.colormapId.options, categoricalColorMap]);
    var _ref5 = _layers.PRESET_OPTIONS[preset] || {},
      bandCombination = _ref5.bandCombination;
    var colormapAllowed = (0, _layers.isColormapAllowed)(bandCombination);
    var rescalingAllowed = !categoricalColorMap && (0, _layers.isRescalingAllowed)(bandCombination);
    var filterAllowed = (0, _layers.isFilterAllowed)(bandCombination);

    // Here we show the UI when useSTACSearching is explicitly set to true so that the UI shows up
    var stacSearchAllowed = (0, _layers.isSearchableStac)(stac) || useSTACSearching;
    var selectedColormap = findVisConfigItemById(layer, 'colormapId') || getCategoricalColormapListItem(categoricalColorMap);
    var selectedPreset = findVisConfigItemById(layer, 'preset');
    var selectedSingleBandName = findItemById(layer, singleBandOptions, 'singleBandName');
    var singleBandPresetOptions = (0, _layers.getSingleBandPresetOptions)(stac, singleBandName);
    var _getRasterStatisticsM = (0, _layers.getRasterStatisticsMinMax)(stac, preset, singleBandPresetOptions),
      _getRasterStatisticsM2 = (0, _slicedToArray2["default"])(_getRasterStatisticsM, 2),
      minCategoricalBandValue = _getRasterStatisticsM2[0],
      maxCategoricalBandValue = _getRasterStatisticsM2[1];
    var ColorMapListItem = (0, _react.useMemo)(function () {
      return (0, _rasterTileColormapListItem.getColorMapListItemComponent)({
        colorMap: categoricalColorMap,
        minValue: minCategoricalBandValue,
        maxValue: maxCategoricalBandValue
      });
    }, [categoricalColorMap, minCategoricalBandValue, maxCategoricalBandValue]);
    var isDynamicColorsOnly = !isDataSourceColorRangeAvailable(layer, stac, preset, singleBandPresetOptions);

    // Default of `dynamicColor` is false. Set it true if it is not possible to get data source
    // wide color range
    (0, _react.useEffect)(function () {
      if (isDynamicColorsOnly && !dynamicColor) {
        visConfiguratorProps.onChange({
          dynamicColor: true
        });
      }
    }, [visConfiguratorProps, dynamicColor, isDynamicColorsOnly]);

    // For PMTiles in raster format, only show opacity and terrain options for now
    if (stac.pmtilesType === _constants.PMTilesType.RASTER) {
      var _stac$rasterTileServe;
      return /*#__PURE__*/_react["default"].createElement(StyledLayerConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, {
        label: "Visual Settings",
        collapsible: false
      }), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps))), (0, _utils.getApplicationConfig)().rasterServerSupportsElevation && ((_stac$rasterTileServe = stac.rasterTileServerUrls) === null || _stac$rasterTileServe === void 0 ? void 0 : _stac$rasterTileServe.length) && /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, {
        label: "Terrain"
      }), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, visConfiguratorProps, layer.visConfigSettings.enableTerrain))));
    }
    return /*#__PURE__*/_react["default"].createElement(StyledLayerConfigurator, null, availablePresets && /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, {
      label: "Image Selection",
      collapsible: false
    }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, "Preset"), /*#__PURE__*/_react["default"].createElement(InfoHelper, {
      id: "preset",
      description: "Select a preset to describe how to combine spectral bands."
    })), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
      selectedItems: selectedPreset,
      options: presetOptions,
      multiSelect: false,
      searchable: false,
      displayOption: "label",
      getOptionValue: "id",
      onChange: function onChange(newPreset) {
        var overrides = updateColorParamsOnPresetChange(stac, visConfiguratorProps.layer.config.visConfig.preset, newPreset);
        visConfiguratorProps.onChange(_objectSpread(_objectSpread({}, overrides), {}, {
          preset: newPreset
        }));
      }
    }), selectedPreset !== null && selectedPreset !== void 0 && selectedPreset.description ? /*#__PURE__*/_react["default"].createElement(DescriptionText, null, selectedPreset === null || selectedPreset === void 0 ? void 0 : selectedPreset.description, selectedPreset !== null && selectedPreset !== void 0 && selectedPreset.infoUrl ? /*#__PURE__*/_react["default"].createElement("a", {
      target: "_blank",
      rel: "noopener noreferrer",
      href: selectedPreset === null || selectedPreset === void 0 ? void 0 : selectedPreset.infoUrl
    }, "More Info") : null) : null), selectedPreset.id === 'singleBand' && /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, "Single Band Name"), /*#__PURE__*/_react["default"].createElement(InfoHelper, {
      id: "".concat(layer.id, "-single-band-name"),
      description: "Select a single band."
    })), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
      selectedItems: selectedSingleBandName,
      options: singleBandOptions,
      multiSelect: false,
      searchable: false,
      displayOption: "label",
      getOptionValue: "id",
      onChange: function onChange(val) {
        visConfiguratorProps.onChange({
          singleBandName: val
        });
      }
    })), STAC_SEARCH_UI_ENABLED && stacSearchAllowed && /*#__PURE__*/_react["default"].createElement(CustomVisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.useSTACSearching, visConfiguratorProps)), STAC_SEARCH_UI_ENABLED && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, stacSearchAllowed && useSTACSearching ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, "STAC Search Provider")), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], (0, _extends2["default"])({}, layer.visConfigSettings.stacSearchProvider, {
      selectedItems: findVisConfigItemById(layer, 'stacSearchProvider'),
      placeholder: "Choose search provider",
      multiSelect: false,
      searchable: false,
      displayOption: "label",
      getOptionValue: "id",
      onChange: function onChange(val) {
        // TODO: check when switching layers so that you don't mismatch allowed mosaics with layers
        visConfiguratorProps.onChange({
          stacSearchProvider: val
        });
      }
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, "Date Range")), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Input, {
      type: "text",
      id: "".concat(layer.id, "-startDate"),
      onChange: function onChange(_ref6) {
        var value = _ref6.target.value;
        visConfiguratorProps.onChange({
          startDate: value
        });
      },
      value: layer.config.visConfig.startDate
    }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Input, {
      type: "text",
      id: "".concat(layer.id, "-endDate"),
      onChange: function onChange(_ref7) {
        var value = _ref7.target.value;
        visConfiguratorProps.onChange({
          endDate: value
        });
      },
      value: layer.config.visConfig.endDate
    }), /*#__PURE__*/_react["default"].createElement(DescriptionText, null, "Date format must be \"YYYY-MM-DD\"")) : null)), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, {
      label: "Visual Settings",
      collapsible: false
    }), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)), colormapAllowed && /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, "Colormap"), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
      selectedItems: selectedColormap,
      options: colormapOptions,
      multiSelect: false,
      displayOption: "label",
      getOptionValue: "id",
      onChange: function onChange(val) {
        visConfiguratorProps.onChange({
          colormapId: val
        });
      },
      DropDownLineItemRenderComponent: ColorMapListItem,
      filterOption: "label",
      searchable: true
    }))), rescalingAllowed && /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, {
      label: "Rescaling"
    }), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, visConfiguratorProps, layer.visConfigSettings.dynamicColor, {
      disabled: isDynamicColorsOnly
    })), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.nonLinearRescaling, visConfiguratorProps, {
      label: nonLinearRescaling ? 'Non-Linear Rescaling' : 'Linear Rescaling'
    })), nonLinearRescaling ? /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.gammaContrastFactor, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sigmoidalContrastFactor, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sigmoidalBiasFactor, visConfiguratorProps))) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.linearRescalingFactor, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.saturationValue, visConfiguratorProps))), filterAllowed && /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.filterEnabled, visConfiguratorProps, {
      collapsible: true
    }), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.filterRange, visConfiguratorProps))), (0, _utils.getApplicationConfig)().rasterServerSupportsElevation && ((_stac$rasterTileServe2 = stac.rasterTileServerUrls) === null || _stac$rasterTileServe2 === void 0 ? void 0 : _stac$rasterTileServe2.length) && /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, {
      label: "Terrain"
    }), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, visConfiguratorProps, layer.visConfigSettings.enableTerrain))));
  };
  return STACCheckConfiguratorWrapper;
}
var _default = exports["default"] = RasterTileLayerConfiguratorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY29uc3RhbnRzIiwiX2xheWVycyIsIl9sb2NhbGl6YXRpb24iLCJfdXRpbHMiLCJfcmFzdGVyVGlsZUNvbG9ybWFwTGlzdEl0ZW0iLCJfc3R5bGVkQ29tcG9uZW50czIiLCJfc3dpdGNoIiwiX2luZm9IZWxwZXIiLCJfaXRlbVNlbGVjdG9yIiwiX3Zpc0NvbmZpZ1NsaWRlciIsIl9sYXllckNvbmZpZ0dyb3VwIiwiX3Zpc0NvbmZpZ1N3aXRjaCIsIl90ZW1wbGF0ZU9iamVjdCIsIl90ZW1wbGF0ZU9iamVjdDIiLCJfdGVtcGxhdGVPYmplY3QzIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0Iiwib3duS2V5cyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiU1RBQ19TRUFSQ0hfVUlfRU5BQkxFRCIsIlN0eWxlZFZpc0NvbmZpZ1N3aXRjaCIsImRpdiIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwyIiwiQ3VzdG9tVmlzQ29uZmlnU3dpdGNoIiwiX3JlZiIsIl9yZWYkbGF5ZXIiLCJsYXllciIsImlkIiwiY29uZmlnIiwicHJvcGVydHkiLCJfb25DaGFuZ2UyIiwib25DaGFuZ2UiLCJsYWJlbCIsImRpc2FibGVkIiwiY3JlYXRlRWxlbWVudCIsIlNpZGVQYW5lbFNlY3Rpb24iLCJCb29sZWFuIiwiY2xhc3NOYW1lIiwiUGFuZWxMYWJlbFdyYXBwZXIiLCJQYW5lbExhYmVsIiwiRm9ybWF0dGVkTWVzc2FnZSIsImNhcGl0YWxpemVGaXJzdExldHRlciIsImNoZWNrZWQiLCJ2aXNDb25maWciLCJjb25jYXQiLCJTdHlsZWRMYXllckNvbmZpZ3VyYXRvciIsIkRlc2NyaXB0aW9uVGV4dCIsInByb3BzIiwidGhlbWUiLCJzdWJ0ZXh0Q29sb3IiLCJmaW5kVmlzQ29uZmlnSXRlbUJ5SWQiLCJwcm9wIiwidmlzQ29uZmlnU2V0dGluZ3MiLCJvcHRpb25zIiwiZmluZCIsIm9wIiwiZmluZEl0ZW1CeUlkIiwiZ2V0QmFuZFNlbGVjdG9yT3B0aW9ucyIsInN0YWMiLCJlb0JhbmRzIiwiZ2V0RU9CYW5kcyIsIm1hcCIsImVvQmFuZCIsIm5hbWUiLCJjb21tb25fbmFtZSIsImdldENhdGVnb3JpY2FsQ29sb3JtYXBMaXN0SXRlbSIsImNhdGVnb3JpY2FsQ29sb3JNYXAiLCJjYXRlZ29yaWNhbEl0ZW0iLCJDQVRFR09SSUNBTF9DT0xPUk1BUF9JRCIsImlzRGF0YVNvdXJjZUNvbG9yUmFuZ2VBdmFpbGFibGUiLCJwcmVzZXQiLCJzaW5nbGVCYW5kUHJlc2V0T3B0aW9ucyIsIm1pblBpeGVsVmFsdWUiLCJtYXhQaXhlbFZhbHVlIiwiZGF0YVNvdXJjZVBhcmFtcyIsImdldERhdGFTb3VyY2VQYXJhbXMiLCJzaW5nbGVCYW5kIiwidXBkYXRlQ29sb3JQYXJhbXNPblByZXNldENoYW5nZSIsIm9sZFByZXNldCIsIm5ld1ByZXNldCIsImNvbG9yUGFyYW1zIiwiY29sb3JPdmVycmlkZXMiLCJEQVRBX1NPVVJDRV9DT0xPUl9ERUZBVUxUUyIsImJhbmRPZkludGVyZXN0IiwiUkFTVEVSX0NPTE9SX1JFU0VUX1BBUkFNUyIsIlJhc3RlclRpbGVMYXllckNvbmZpZ3VyYXRvckZhY3RvcnkiLCJkZXBzIiwiTGF5ZXJDb25maWdHcm91cCIsIlZpc0NvbmZpZ1NsaWRlciIsIkluZm9IZWxwZXIiLCJWaXNDb25maWdTd2l0Y2giLCJTVEFDQ2hlY2tDb25maWd1cmF0b3JXcmFwcGVyIiwiX3JlZjIiLCJ2aXNDb25maWd1cmF0b3JQcm9wcyIsImRhdGFzZXQiLCJtZXRhZGF0YSIsIlJhc3RlclRpbGVMYXllckNvbmZpZ3VyYXRvciIsIl9yZWYzIiwiX3N0YWMkcmFzdGVyVGlsZVNlcnZlMiIsIl9sYXllciRjb25maWckdmlzQ29uZiIsIm5vbkxpbmVhclJlc2NhbGluZyIsInVzZVNUQUNTZWFyY2hpbmciLCJjb2xvclJhbmdlIiwiY29sb3JNYXAiLCJkeW5hbWljQ29sb3IiLCJzaW5nbGVCYW5kTmFtZSIsImF2YWlsYWJsZVByZXNldHMiLCJ1c2VNZW1vIiwiZmlsdGVyQXZhaWxhYmxlUHJlc2V0cyIsIlBSRVNFVF9PUFRJT05TIiwicHJlc2V0T3B0aW9ucyIsIl9yZWY0IiwiaW5jbHVkZXMiLCJzaW5nbGVCYW5kT3B0aW9ucyIsImNvbG9ybWFwT3B0aW9ucyIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJjb2xvcm1hcElkIiwiY2F0ZWdvcmljYWxMaXN0SXRlbSIsIl9yZWY1IiwiYmFuZENvbWJpbmF0aW9uIiwiY29sb3JtYXBBbGxvd2VkIiwiaXNDb2xvcm1hcEFsbG93ZWQiLCJyZXNjYWxpbmdBbGxvd2VkIiwiaXNSZXNjYWxpbmdBbGxvd2VkIiwiZmlsdGVyQWxsb3dlZCIsImlzRmlsdGVyQWxsb3dlZCIsInN0YWNTZWFyY2hBbGxvd2VkIiwiaXNTZWFyY2hhYmxlU3RhYyIsInNlbGVjdGVkQ29sb3JtYXAiLCJzZWxlY3RlZFByZXNldCIsInNlbGVjdGVkU2luZ2xlQmFuZE5hbWUiLCJnZXRTaW5nbGVCYW5kUHJlc2V0T3B0aW9ucyIsIl9nZXRSYXN0ZXJTdGF0aXN0aWNzTSIsImdldFJhc3RlclN0YXRpc3RpY3NNaW5NYXgiLCJfZ2V0UmFzdGVyU3RhdGlzdGljc00yIiwiX3NsaWNlZFRvQXJyYXkyIiwibWluQ2F0ZWdvcmljYWxCYW5kVmFsdWUiLCJtYXhDYXRlZ29yaWNhbEJhbmRWYWx1ZSIsIkNvbG9yTWFwTGlzdEl0ZW0iLCJnZXRDb2xvck1hcExpc3RJdGVtQ29tcG9uZW50IiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsImlzRHluYW1pY0NvbG9yc09ubHkiLCJ1c2VFZmZlY3QiLCJwbXRpbGVzVHlwZSIsIlBNVGlsZXNUeXBlIiwiUkFTVEVSIiwiX3N0YWMkcmFzdGVyVGlsZVNlcnZlIiwiX2V4dGVuZHMyIiwiY29sbGFwc2libGUiLCJvcGFjaXR5IiwiZ2V0QXBwbGljYXRpb25Db25maWciLCJyYXN0ZXJTZXJ2ZXJTdXBwb3J0c0VsZXZhdGlvbiIsInJhc3RlclRpbGVTZXJ2ZXJVcmxzIiwiZW5hYmxlVGVycmFpbiIsImRlc2NyaXB0aW9uIiwic2VsZWN0ZWRJdGVtcyIsIm11bHRpU2VsZWN0Iiwic2VhcmNoYWJsZSIsImRpc3BsYXlPcHRpb24iLCJnZXRPcHRpb25WYWx1ZSIsIm92ZXJyaWRlcyIsImluZm9VcmwiLCJ0YXJnZXQiLCJyZWwiLCJocmVmIiwidmFsIiwiRnJhZ21lbnQiLCJzdGFjU2VhcmNoUHJvdmlkZXIiLCJwbGFjZWhvbGRlciIsIklucHV0IiwidHlwZSIsIl9yZWY2IiwidmFsdWUiLCJzdGFydERhdGUiLCJfcmVmNyIsImVuZERhdGUiLCJEcm9wRG93bkxpbmVJdGVtUmVuZGVyQ29tcG9uZW50IiwiZmlsdGVyT3B0aW9uIiwiZ2FtbWFDb250cmFzdEZhY3RvciIsInNpZ21vaWRhbENvbnRyYXN0RmFjdG9yIiwic2lnbW9pZGFsQmlhc0ZhY3RvciIsImxpbmVhclJlc2NhbGluZ0ZhY3RvciIsInNhdHVyYXRpb25WYWx1ZSIsImZpbHRlckVuYWJsZWQiLCJmaWx0ZXJSYW5nZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL3Jhc3Rlci10aWxlLWxheWVyLWNvbmZpZ3VyYXRvci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0LCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IHtQTVRpbGVzVHlwZX0gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtcbiAgZmlsdGVyQXZhaWxhYmxlUHJlc2V0cyxcbiAgZ2V0RU9CYW5kcyxcbiAgZ2V0UmFzdGVyU3RhdGlzdGljc01pbk1heCxcbiAgZ2V0U2luZ2xlQmFuZFByZXNldE9wdGlvbnMsXG4gIGlzQ29sb3JtYXBBbGxvd2VkLFxuICBpc0ZpbHRlckFsbG93ZWQsXG4gIGlzUmVzY2FsaW5nQWxsb3dlZCxcbiAgaXNTZWFyY2hhYmxlU3RhYyxcbiAgQ29tcGxldGVTVEFDT2JqZWN0LFxuICBHZXRUaWxlRGF0YUN1c3RvbVByb3BzLFxuICBEYXRhU291cmNlUGFyYW1zLFxuICBQcmVzZXRPcHRpb24sXG4gIFJhc3RlclRpbGVMYXllcixcbiAgQ0FURUdPUklDQUxfQ09MT1JNQVBfSUQsXG4gIFBSRVNFVF9PUFRJT05TLFxuICBSQVNURVJfQ09MT1JfUkVTRVRfUEFSQU1TLFxuICBEQVRBX1NPVVJDRV9DT0xPUl9ERUZBVUxUU1xufSBmcm9tICdAa2VwbGVyLmdsL2xheWVycyc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2V9IGZyb20gJ0BrZXBsZXIuZ2wvbG9jYWxpemF0aW9uJztcbmltcG9ydCB7Y2FwaXRhbGl6ZUZpcnN0TGV0dGVyLCBnZXRBcHBsaWNhdGlvbkNvbmZpZ30gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5pbXBvcnQge0tlcGxlclRhYmxlIGFzIEtlcGxlckRhdGFzZXR9IGZyb20gJ0BrZXBsZXIuZ2wvdGFibGUnO1xuaW1wb3J0IHR5cGUge1N0YWNUeXBlc30gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5cbmltcG9ydCB7Z2V0Q29sb3JNYXBMaXN0SXRlbUNvbXBvbmVudH0gZnJvbSAnLi9yYXN0ZXItdGlsZS1jb2xvcm1hcC1saXN0LWl0ZW0nO1xuXG5pbXBvcnQge1xuICBJbnB1dCxcbiAgUGFuZWxMYWJlbCxcbiAgUGFuZWxMYWJlbFdyYXBwZXIsXG4gIFNpZGVQYW5lbFNlY3Rpb25cbn0gZnJvbSAnLi4vLi4vY29tbW9uL3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBTd2l0Y2ggZnJvbSAnLi4vLi4vY29tbW9uL3N3aXRjaCc7XG5pbXBvcnQgSW5mb0hlbHBlckZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL2luZm8taGVscGVyJztcbmltcG9ydCBJdGVtU2VsZWN0b3IgZnJvbSAnLi4vLi4vY29tbW9uL2l0ZW0tc2VsZWN0b3IvaXRlbS1zZWxlY3Rvcic7XG5pbXBvcnQgVmlzQ29uZmlnU2xpZGVyRmFjdG9yeSBmcm9tICcuLi8uLi9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL3Zpcy1jb25maWctc2xpZGVyJztcbmltcG9ydCBMYXllckNvbmZpZ0dyb3VwRmFjdG9yeSBmcm9tICcuLi8uLi9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL2xheWVyLWNvbmZpZy1ncm91cCc7XG5pbXBvcnQgVmlzQ29uZmlnU3dpdGNoRmFjdG9yeSBmcm9tICcuLi8uLi9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL3Zpcy1jb25maWctc3dpdGNoJztcblxudHlwZSBFT0JhbmQgPSBTdGFjVHlwZXMuQmFuZDtcblxuY29uc3QgU1RBQ19TRUFSQ0hfVUlfRU5BQkxFRCA9IHRydWU7XG5cbmNvbnN0IFN0eWxlZFZpc0NvbmZpZ1N3aXRjaCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcblxuICAudmlzLWNvbmZpZy1zd2l0Y2hfX3RpdGxlIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICB9XG5gO1xuXG5jb25zdCBDdXN0b21WaXNDb25maWdTd2l0Y2ggPSAoe1xuICBsYXllcjoge2lkLCBjb25maWd9LFxuICBwcm9wZXJ0eSxcbiAgb25DaGFuZ2UsXG4gIGxhYmVsLFxuICBkaXNhYmxlZFxufToge1xuICBsYXllcjogUmFzdGVyVGlsZUxheWVyO1xuICBwcm9wZXJ0eTogc3RyaW5nO1xuICBvbkNoYW5nZTogKHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGRpc2FibGVkOiBib29sZWFuO1xufSkgPT4gKFxuICA8U2lkZVBhbmVsU2VjdGlvbiBkaXNhYmxlZD17Qm9vbGVhbihkaXNhYmxlZCl9PlxuICAgIDxTdHlsZWRWaXNDb25maWdTd2l0Y2ggY2xhc3NOYW1lPVwidmlzLWNvbmZpZy1zd2l0Y2hcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlzLWNvbmZpZy1zd2l0Y2hfX3RpdGxlXCI+XG4gICAgICAgIDxQYW5lbExhYmVsV3JhcHBlcj5cbiAgICAgICAgICB7bGFiZWwgPyAoXG4gICAgICAgICAgICA8UGFuZWxMYWJlbD5cbiAgICAgICAgICAgICAgeyhsYWJlbCAmJiA8Rm9ybWF0dGVkTWVzc2FnZSBpZD17bGFiZWx9IC8+KSB8fCBjYXBpdGFsaXplRmlyc3RMZXR0ZXIocHJvcGVydHkpfVxuICAgICAgICAgICAgPC9QYW5lbExhYmVsPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L1BhbmVsTGFiZWxXcmFwcGVyPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpcy1jb25maWctc3dpdGNoX19zd2l0Y2hcIj5cbiAgICAgICAgPFN3aXRjaFxuICAgICAgICAgIGNoZWNrZWQ9e2NvbmZpZy52aXNDb25maWdbcHJvcGVydHldfVxuICAgICAgICAgIGlkPXtgJHtpZH0tJHtwcm9wZXJ0eX0tc3dpdGNoYH1cbiAgICAgICAgICBvbkNoYW5nZT17KCkgPT4gb25DaGFuZ2Uoe1twcm9wZXJ0eV06ICFjb25maWcudmlzQ29uZmlnW3Byb3BlcnR5XX0pfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9TdHlsZWRWaXNDb25maWdTd2l0Y2g+XG4gIDwvU2lkZVBhbmVsU2VjdGlvbj5cbik7XG5cbmNvbnN0IFN0eWxlZExheWVyQ29uZmlndXJhdG9yID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmNvbnN0IERlc2NyaXB0aW9uVGV4dCA9IHN0eWxlZChQYW5lbExhYmVsKWBcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gIGRpc3BsYXk6IGlubGluZTtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuc3VidGV4dENvbG9yfTtcblxuICBhIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICBtYXJnaW4tbGVmdDogNHB4O1xuICB9XG5gO1xuXG4vLyBUT0RPOiBjb21iaW5lIHRoZXNlIHR3byBoZWxwZXJzIGludG8gb25lXG5mdW5jdGlvbiBmaW5kVmlzQ29uZmlnSXRlbUJ5SWQobGF5ZXIsIHByb3ApIHtcbiAgcmV0dXJuIGxheWVyLnZpc0NvbmZpZ1NldHRpbmdzW3Byb3BdLm9wdGlvbnMuZmluZChvcCA9PiBvcC5pZCA9PT0gbGF5ZXIuY29uZmlnLnZpc0NvbmZpZ1twcm9wXSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRJdGVtQnlJZChsYXllciwgb3B0aW9ucywgcHJvcCkge1xuICAvLyBGb3Igbm93IGl0J3MgcG9zc2libGUgdGhhdCBub24tcmFzdGVyIG1ldGFkYXRhIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSByYXN0ZXIgY29uZmlndXJhdG9yLCBzb1xuICAvLyBvcHRpb25zIG1heSBiZSBudWxsXG4gIHJldHVybiBvcHRpb25zPy5maW5kKG9wID0+IG9wLmlkID09PSBsYXllci5jb25maWcudmlzQ29uZmlnW3Byb3BdKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBkcm9wIGRvd24gbGFiZWxzIGZvciBzaW5nbGUgYmFuZCBzZWxlY3RvclxuICogQHBhcmFtIHN0YWMgLSBTVEFDIGl0ZW0gbWV0YWRhdGEgb2JqZWN0XG4gKiBAcmV0dXJucyBhcnJheSBvZiB7aWQsIGxhYmVsfSBlbGVtZW50c1xuICovXG5mdW5jdGlvbiBnZXRCYW5kU2VsZWN0b3JPcHRpb25zKHN0YWM6IENvbXBsZXRlU1RBQ09iamVjdCk6IHtpZD86IHN0cmluZzsgbGFiZWw/OiBzdHJpbmd9W10ge1xuICBjb25zdCBlb0JhbmRzID0gZ2V0RU9CYW5kcyhzdGFjKSB8fCBbXTtcbiAgcmV0dXJuIGVvQmFuZHMubWFwKChlb0JhbmQ6IEVPQmFuZCkgPT4gKHtcbiAgICBpZDogZW9CYW5kLm5hbWUgfHwgZW9CYW5kLmNvbW1vbl9uYW1lLFxuICAgIGxhYmVsOiBlb0JhbmQuY29tbW9uX25hbWVcbiAgICAgID8gYCR7ZW9CYW5kLm5hbWUgfHwgZW9CYW5kLmNvbW1vbl9uYW1lfSAoJHtlb0JhbmQuY29tbW9uX25hbWV9KWBcbiAgICAgIDogZW9CYW5kLm5hbWVcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBnZXRDYXRlZ29yaWNhbENvbG9ybWFwTGlzdEl0ZW0oY2F0ZWdvcmljYWxDb2xvck1hcCkge1xuICBsZXQgY2F0ZWdvcmljYWxJdGVtOiB7bGFiZWw6IHN0cmluZzsgaWQ6IHN0cmluZ30gfCB1bmRlZmluZWQ7XG4gIGlmIChjYXRlZ29yaWNhbENvbG9yTWFwKSB7XG4gICAgY2F0ZWdvcmljYWxJdGVtID0ge2xhYmVsOiAnQ2F0ZWdvcmljYWwnLCBpZDogQ0FURUdPUklDQUxfQ09MT1JNQVBfSUR9O1xuICB9XG4gIHJldHVybiBjYXRlZ29yaWNhbEl0ZW07XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgZGF0YSBzb3VyY2UgZ2xvYmFsIHBpeGVsIGNvbG9yIHJhbmdlIGlzIGNhbGN1bGF0ZWQgY29ycmVjdGx5XG4gKiBAcGFyYW0gbGF5ZXIgLSByYXN0ZXIgbGF5ZXJcbiAqIEBwYXJhbSBzdGFjIC0gU1RBQyBtZXRhZGF0YSBvYmplY3RcbiAqIEBwYXJhbSBwcmVzZXQgLSBwcmVzZXQgbmFtZVxuICogQHBhcmFtIHNpbmdsZUJhbmRQcmVzZXRPcHRpb25zIC0gb3B0aW9ucyBmb3Igc2luZ2xlIGJhbmQgcHJlc2V0XG4gKiBAcmV0dXJucyBib29sZWFuIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0YVNvdXJjZUNvbG9yUmFuZ2VBdmFpbGFibGUoXG4gIGxheWVyOiBSYXN0ZXJUaWxlTGF5ZXIsXG4gIHN0YWM6IENvbXBsZXRlU1RBQ09iamVjdCxcbiAgcHJlc2V0OiBzdHJpbmcsXG4gIHNpbmdsZUJhbmRQcmVzZXRPcHRpb25zOiBQcmVzZXRPcHRpb25bJ3NpbmdsZUJhbmQnXVxuKTogYm9vbGVhbiB7XG4gIGxldCBtaW5QaXhlbFZhbHVlOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgbGV0IG1heFBpeGVsVmFsdWU6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBjb25zdCBkYXRhU291cmNlUGFyYW1zOiBEYXRhU291cmNlUGFyYW1zIHwgbnVsbCA9IGxheWVyLmdldERhdGFTb3VyY2VQYXJhbXMoc3RhYywgcHJlc2V0LCB7XG4gICAgc2luZ2xlQmFuZDogc2luZ2xlQmFuZFByZXNldE9wdGlvbnNcbiAgfSk7XG4gIGlmIChkYXRhU291cmNlUGFyYW1zKSB7XG4gICAgbWluUGl4ZWxWYWx1ZSA9IGRhdGFTb3VyY2VQYXJhbXMubWluUGl4ZWxWYWx1ZTtcbiAgICBtYXhQaXhlbFZhbHVlID0gZGF0YVNvdXJjZVBhcmFtcy5tYXhQaXhlbFZhbHVlO1xuICB9XG4gIHJldHVybiBtaW5QaXhlbFZhbHVlICE9PSBudWxsICYmIG1heFBpeGVsVmFsdWUgIT09IG51bGw7XG59XG5cbi8qKlxuICogVXBkYXRlcyBjb2xvciBwYXJhbWV0ZXJzIGJhc2VkIG9uIGEgY2hhbmdlIGluIHZpc3VhbGl6YXRpb24gcHJlc2V0LlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYWRqdXN0cyB0aGUgY29sb3IgcHJvY2Vzc2luZyBwYXJhbWV0ZXJzIHdoZW4gdGhlIHZpc3VhbGl6YXRpb25cbiAqIHByZXNldCBjaGFuZ2VzLCBiYXNlZCBvbiB3aGV0aGVyIHRoZSBwcmVzZXQgaXMgc3dpdGNoaW5nIHRvIG9yIGZyb20gYVxuICogc2luZ2xlLWJhbmQuIERldGVybWluZXMgd2hldGhlciB0byBhcHBseSBjb2xvclxuICogZW5oYW5jZW1lbnRzIG9yIHJlc2V0IHBhcmFtZXRlcnMgYmFzZWQgb24gdGhlIHByZXNldCB0cmFuc2l0aW9uLlxuICpcbiAqIEBwYXJhbSBzdGFjIEEgU1RBQyAoU3BhdGlvVGVtcG9yYWwgQXNzZXQgQ2F0YWxvZykgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgZGF0YXNldC5cbiAqIEBwYXJhbSBuZXdQcmVzZXQgVGhlIG9sZCB2aXN1YWxpemF0aW9uIHByZXNldCBiZWluZyBhcHBsaWVkLlxuICogQHBhcmFtIG5ld1ByZXNldCBUaGUgbmV3IHZpc3VhbGl6YXRpb24gcHJlc2V0IGJlaW5nIGFwcGxpZWQuXG4gKiBAcmV0dXJucyBUaGUgdXBkYXRlZCBjb2xvciBwYXJhbWV0ZXJzIHRvIGFwcGx5LlxuICovXG5mdW5jdGlvbiB1cGRhdGVDb2xvclBhcmFtc09uUHJlc2V0Q2hhbmdlKFxuICBzdGFjOiBDb21wbGV0ZVNUQUNPYmplY3QsXG4gIG9sZFByZXNldDogc3RyaW5nLFxuICBuZXdQcmVzZXQ6IHN0cmluZ1xuKSB7XG4gIGxldCBjb2xvclBhcmFtcyA9IHt9O1xuICBjb25zdCBjb2xvck92ZXJyaWRlcyA9IERBVEFfU09VUkNFX0NPTE9SX0RFRkFVTFRTW3N0YWMuaWRdO1xuICBpZiAoY29sb3JPdmVycmlkZXMpIHJldHVybiBjb2xvclBhcmFtcztcblxuICBjb25zdCBiYW5kT2ZJbnRlcmVzdCA9ICdzaW5nbGVCYW5kJztcbiAgaWYgKG9sZFByZXNldCA9PT0gYmFuZE9mSW50ZXJlc3QgJiYgbmV3UHJlc2V0ICE9PSBiYW5kT2ZJbnRlcmVzdCkge1xuICAgIC8vIGVuY2hhbmNlIGNvbG9ycyBmb3IgbXVsdGliYW5kIGNvbWJpbmF0aW9uc1xuICAgIGNvbG9yUGFyYW1zID0gY29sb3JPdmVycmlkZXM7XG4gIH0gZWxzZSBpZiAob2xkUHJlc2V0ICE9PSBiYW5kT2ZJbnRlcmVzdCAmJiBuZXdQcmVzZXQgPT09IGJhbmRPZkludGVyZXN0KSB7XG4gICAgLy8gcmVzZXQgaW1hZ2UgcHJvY2Vzc25nIHBhcmFtc1xuICAgIGNvbG9yUGFyYW1zID0gUkFTVEVSX0NPTE9SX1JFU0VUX1BBUkFNUztcbiAgfVxuXG4gIHJldHVybiBjb2xvclBhcmFtcztcbn1cblxudHlwZSBSYXN0ZXJUaWxlTGF5ZXJDb25maWd1cmF0b3JQcm9wcyA9IHtcbiAgbGF5ZXI6IFJhc3RlclRpbGVMYXllcjtcbiAgdmlzQ29uZmlndXJhdG9yUHJvcHM6IGFueTtcbiAgZGF0YXNldDogS2VwbGVyRGF0YXNldDtcbn07XG5cblJhc3RlclRpbGVMYXllckNvbmZpZ3VyYXRvckZhY3RvcnkuZGVwcyA9IFtcbiAgTGF5ZXJDb25maWdHcm91cEZhY3RvcnksXG4gIFZpc0NvbmZpZ1NsaWRlckZhY3RvcnksXG4gIEluZm9IZWxwZXJGYWN0b3J5LFxuICBWaXNDb25maWdTd2l0Y2hGYWN0b3J5XG5dO1xuXG5mdW5jdGlvbiBSYXN0ZXJUaWxlTGF5ZXJDb25maWd1cmF0b3JGYWN0b3J5KFxuICBMYXllckNvbmZpZ0dyb3VwOiBSZXR1cm5UeXBlPHR5cGVvZiBMYXllckNvbmZpZ0dyb3VwRmFjdG9yeT4sXG4gIFZpc0NvbmZpZ1NsaWRlcjogUmV0dXJuVHlwZTx0eXBlb2YgVmlzQ29uZmlnU2xpZGVyRmFjdG9yeT4sXG4gIEluZm9IZWxwZXI6IFJldHVyblR5cGU8dHlwZW9mIEluZm9IZWxwZXJGYWN0b3J5PixcbiAgVmlzQ29uZmlnU3dpdGNoOiBSZXR1cm5UeXBlPHR5cGVvZiBWaXNDb25maWdTd2l0Y2hGYWN0b3J5PlxuKTogUmVhY3QuRkM8UmFzdGVyVGlsZUxheWVyQ29uZmlndXJhdG9yUHJvcHM+IHtcbiAgLyoqXG4gICAqIFdyYXBwZXIgYXJvdW5kIGNvbmZpZ3VyYXRvciB0byBjaGVjayBmb3IgZGF0YXNldC5tZXRhZGF0YSBiZWluZyBudWxsL3VuZGVmaW5lZFxuICAgKi9cbiAgY29uc3QgU1RBQ0NoZWNrQ29uZmlndXJhdG9yV3JhcHBlciA9ICh7XG4gICAgbGF5ZXIsXG4gICAgdmlzQ29uZmlndXJhdG9yUHJvcHMsXG4gICAgZGF0YXNldFxuICB9OiBSYXN0ZXJUaWxlTGF5ZXJDb25maWd1cmF0b3JQcm9wcykgPT4ge1xuICAgIGNvbnN0IHN0YWMgPSBkYXRhc2V0Py5tZXRhZGF0YTtcblxuICAgIC8vIElmIG5vIGRhdGFzZXQgaXMgbG9hZGVkIGludG8gS2VwbGVyLCBzdGFjIGNhbiBiZSB1bmRlZmluZWRcbiAgICBpZiAoIXN0YWMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8UmFzdGVyVGlsZUxheWVyQ29uZmlndXJhdG9yXG4gICAgICAgIGxheWVyPXtsYXllcn1cbiAgICAgICAgdmlzQ29uZmlndXJhdG9yUHJvcHM9e3Zpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICBkYXRhc2V0PXtkYXRhc2V0fVxuICAgICAgLz5cbiAgICApO1xuICB9O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gIGNvbnN0IFJhc3RlclRpbGVMYXllckNvbmZpZ3VyYXRvcjogUmVhY3QuRkM8UmFzdGVyVGlsZUxheWVyQ29uZmlndXJhdG9yUHJvcHM+ID0gKHtcbiAgICBsYXllcixcbiAgICB2aXNDb25maWd1cmF0b3JQcm9wcyxcbiAgICBkYXRhc2V0XG4gIH0pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwcmVzZXQsXG4gICAgICBub25MaW5lYXJSZXNjYWxpbmcsXG4gICAgICB1c2VTVEFDU2VhcmNoaW5nLFxuICAgICAgY29sb3JSYW5nZToge2NvbG9yTWFwOiBjYXRlZ29yaWNhbENvbG9yTWFwfSxcbiAgICAgIGR5bmFtaWNDb2xvcixcbiAgICAgIHNpbmdsZUJhbmROYW1lXG4gICAgfSA9IGxheWVyLmNvbmZpZy52aXNDb25maWc7XG5cbiAgICBjb25zdCBzdGFjID0gZGF0YXNldD8ubWV0YWRhdGEgYXMgR2V0VGlsZURhdGFDdXN0b21Qcm9wc1snc3RhYyddO1xuXG4gICAgY29uc3QgYXZhaWxhYmxlUHJlc2V0cyA9IHVzZU1lbW8oKCkgPT4gZmlsdGVyQXZhaWxhYmxlUHJlc2V0cyhzdGFjLCBQUkVTRVRfT1BUSU9OUyksIFtzdGFjXSk7XG5cbiAgICBjb25zdCBwcmVzZXRPcHRpb25zID0gdXNlTWVtbyhcbiAgICAgICgpID0+XG4gICAgICAgIChcbiAgICAgICAgICBsYXllci52aXNDb25maWdTZXR0aW5ncy5wcmVzZXQub3B0aW9ucyBhcyB1bmtub3duIGFzIHtcbiAgICAgICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgICAgICBsYWJlbDogc3RyaW5nO1xuICAgICAgICAgIH1bXVxuICAgICAgICApLmZpbHRlcigoe2lkfSkgPT4gYXZhaWxhYmxlUHJlc2V0cz8uaW5jbHVkZXMoaWQpKSxcbiAgICAgIFtsYXllci52aXNDb25maWdTZXR0aW5ncy5wcmVzZXQub3B0aW9ucywgYXZhaWxhYmxlUHJlc2V0c11cbiAgICApO1xuICAgIGNvbnN0IHNpbmdsZUJhbmRPcHRpb25zID0gdXNlTWVtbygoKSA9PiBnZXRCYW5kU2VsZWN0b3JPcHRpb25zKHN0YWMpLCBbc3RhY10pO1xuICAgIGNvbnN0IGNvbG9ybWFwT3B0aW9ucyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IFtcbiAgICAgICAgLi4uKGxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmNvbG9ybWFwSWQub3B0aW9ucyBhcyB1bmtub3duIGFzIHtcbiAgICAgICAgICBpZDogc3RyaW5nO1xuICAgICAgICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgICAgIH1bXSlcbiAgICAgIF07XG4gICAgICBjb25zdCBjYXRlZ29yaWNhbExpc3RJdGVtID0gZ2V0Q2F0ZWdvcmljYWxDb2xvcm1hcExpc3RJdGVtKGNhdGVnb3JpY2FsQ29sb3JNYXApO1xuICAgICAgaWYgKGNhdGVnb3JpY2FsTGlzdEl0ZW0pIHtcbiAgICAgICAgb3B0aW9ucy5wdXNoKGNhdGVnb3JpY2FsTGlzdEl0ZW0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfSwgW2xheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmNvbG9ybWFwSWQub3B0aW9ucywgY2F0ZWdvcmljYWxDb2xvck1hcF0pO1xuXG4gICAgY29uc3Qge2JhbmRDb21iaW5hdGlvbn0gPSBQUkVTRVRfT1BUSU9OU1twcmVzZXRdIHx8IHt9O1xuICAgIGNvbnN0IGNvbG9ybWFwQWxsb3dlZCA9IGlzQ29sb3JtYXBBbGxvd2VkKGJhbmRDb21iaW5hdGlvbik7XG4gICAgY29uc3QgcmVzY2FsaW5nQWxsb3dlZCA9ICFjYXRlZ29yaWNhbENvbG9yTWFwICYmIGlzUmVzY2FsaW5nQWxsb3dlZChiYW5kQ29tYmluYXRpb24pO1xuICAgIGNvbnN0IGZpbHRlckFsbG93ZWQgPSBpc0ZpbHRlckFsbG93ZWQoYmFuZENvbWJpbmF0aW9uKTtcblxuICAgIC8vIEhlcmUgd2Ugc2hvdyB0aGUgVUkgd2hlbiB1c2VTVEFDU2VhcmNoaW5nIGlzIGV4cGxpY2l0bHkgc2V0IHRvIHRydWUgc28gdGhhdCB0aGUgVUkgc2hvd3MgdXBcbiAgICBjb25zdCBzdGFjU2VhcmNoQWxsb3dlZCA9IGlzU2VhcmNoYWJsZVN0YWMoc3RhYykgfHwgdXNlU1RBQ1NlYXJjaGluZztcblxuICAgIGNvbnN0IHNlbGVjdGVkQ29sb3JtYXAgPVxuICAgICAgZmluZFZpc0NvbmZpZ0l0ZW1CeUlkKGxheWVyLCAnY29sb3JtYXBJZCcpIHx8XG4gICAgICBnZXRDYXRlZ29yaWNhbENvbG9ybWFwTGlzdEl0ZW0oY2F0ZWdvcmljYWxDb2xvck1hcCk7XG4gICAgY29uc3Qgc2VsZWN0ZWRQcmVzZXQgPSBmaW5kVmlzQ29uZmlnSXRlbUJ5SWQobGF5ZXIsICdwcmVzZXQnKTtcbiAgICBjb25zdCBzZWxlY3RlZFNpbmdsZUJhbmROYW1lID0gZmluZEl0ZW1CeUlkKGxheWVyLCBzaW5nbGVCYW5kT3B0aW9ucywgJ3NpbmdsZUJhbmROYW1lJyk7XG5cbiAgICBjb25zdCBzaW5nbGVCYW5kUHJlc2V0T3B0aW9ucyA9IGdldFNpbmdsZUJhbmRQcmVzZXRPcHRpb25zKHN0YWMsIHNpbmdsZUJhbmROYW1lKTtcbiAgICBjb25zdCBbbWluQ2F0ZWdvcmljYWxCYW5kVmFsdWUsIG1heENhdGVnb3JpY2FsQmFuZFZhbHVlXSA9IGdldFJhc3RlclN0YXRpc3RpY3NNaW5NYXgoXG4gICAgICBzdGFjLFxuICAgICAgcHJlc2V0LFxuICAgICAgc2luZ2xlQmFuZFByZXNldE9wdGlvbnNcbiAgICApO1xuICAgIGNvbnN0IENvbG9yTWFwTGlzdEl0ZW0gPSB1c2VNZW1vKFxuICAgICAgKCkgPT5cbiAgICAgICAgZ2V0Q29sb3JNYXBMaXN0SXRlbUNvbXBvbmVudCh7XG4gICAgICAgICAgY29sb3JNYXA6IGNhdGVnb3JpY2FsQ29sb3JNYXAsXG4gICAgICAgICAgbWluVmFsdWU6IG1pbkNhdGVnb3JpY2FsQmFuZFZhbHVlLFxuICAgICAgICAgIG1heFZhbHVlOiBtYXhDYXRlZ29yaWNhbEJhbmRWYWx1ZVxuICAgICAgICB9KSxcbiAgICAgIFtjYXRlZ29yaWNhbENvbG9yTWFwLCBtaW5DYXRlZ29yaWNhbEJhbmRWYWx1ZSwgbWF4Q2F0ZWdvcmljYWxCYW5kVmFsdWVdXG4gICAgKTtcbiAgICBjb25zdCBpc0R5bmFtaWNDb2xvcnNPbmx5ID0gIWlzRGF0YVNvdXJjZUNvbG9yUmFuZ2VBdmFpbGFibGUoXG4gICAgICBsYXllcixcbiAgICAgIHN0YWMsXG4gICAgICBwcmVzZXQsXG4gICAgICBzaW5nbGVCYW5kUHJlc2V0T3B0aW9uc1xuICAgICk7XG5cbiAgICAvLyBEZWZhdWx0IG9mIGBkeW5hbWljQ29sb3JgIGlzIGZhbHNlLiBTZXQgaXQgdHJ1ZSBpZiBpdCBpcyBub3QgcG9zc2libGUgdG8gZ2V0IGRhdGEgc291cmNlXG4gICAgLy8gd2lkZSBjb2xvciByYW5nZVxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoaXNEeW5hbWljQ29sb3JzT25seSAmJiAhZHluYW1pY0NvbG9yKSB7XG4gICAgICAgIHZpc0NvbmZpZ3VyYXRvclByb3BzLm9uQ2hhbmdlKHtkeW5hbWljQ29sb3I6IHRydWV9KTtcbiAgICAgIH1cbiAgICB9LCBbdmlzQ29uZmlndXJhdG9yUHJvcHMsIGR5bmFtaWNDb2xvciwgaXNEeW5hbWljQ29sb3JzT25seV0pO1xuXG4gICAgLy8gRm9yIFBNVGlsZXMgaW4gcmFzdGVyIGZvcm1hdCwgb25seSBzaG93IG9wYWNpdHkgYW5kIHRlcnJhaW4gb3B0aW9ucyBmb3Igbm93XG4gICAgaWYgKHN0YWMucG10aWxlc1R5cGUgPT09IFBNVGlsZXNUeXBlLlJBU1RFUikge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFN0eWxlZExheWVyQ29uZmlndXJhdG9yPlxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gbGFiZWw9XCJWaXN1YWwgU2V0dGluZ3NcIiBjb2xsYXBzaWJsZT17ZmFsc2V9PlxuICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlciB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Mub3BhY2l0eX0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgICB7Z2V0QXBwbGljYXRpb25Db25maWcoKS5yYXN0ZXJTZXJ2ZXJTdXBwb3J0c0VsZXZhdGlvbiAmJlxuICAgICAgICAgICAgc3RhYy5yYXN0ZXJUaWxlU2VydmVyVXJscz8ubGVuZ3RoICYmIChcbiAgICAgICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSBsYWJlbD1cIlRlcnJhaW5cIj5cbiAgICAgICAgICAgICAgICA8VmlzQ29uZmlnU3dpdGNoXG4gICAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZW5hYmxlVGVycmFpbn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L1N0eWxlZExheWVyQ29uZmlndXJhdG9yPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFN0eWxlZExheWVyQ29uZmlndXJhdG9yPlxuICAgICAgICB7YXZhaWxhYmxlUHJlc2V0cyAmJiAoXG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSBsYWJlbD1cIkltYWdlIFNlbGVjdGlvblwiIGNvbGxhcHNpYmxlPXtmYWxzZX0+XG4gICAgICAgICAgICA8U2lkZVBhbmVsU2VjdGlvbj5cbiAgICAgICAgICAgICAgPFBhbmVsTGFiZWxXcmFwcGVyPlxuICAgICAgICAgICAgICAgIDxQYW5lbExhYmVsPlByZXNldDwvUGFuZWxMYWJlbD5cbiAgICAgICAgICAgICAgICA8SW5mb0hlbHBlclxuICAgICAgICAgICAgICAgICAgaWQ9XCJwcmVzZXRcIlxuICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb249XCJTZWxlY3QgYSBwcmVzZXQgdG8gZGVzY3JpYmUgaG93IHRvIGNvbWJpbmUgc3BlY3RyYWwgYmFuZHMuXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L1BhbmVsTGFiZWxXcmFwcGVyPlxuICAgICAgICAgICAgICA8SXRlbVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJdGVtcz17c2VsZWN0ZWRQcmVzZXR9XG4gICAgICAgICAgICAgICAgb3B0aW9ucz17cHJlc2V0T3B0aW9uc31cbiAgICAgICAgICAgICAgICBtdWx0aVNlbGVjdD17ZmFsc2V9XG4gICAgICAgICAgICAgICAgc2VhcmNoYWJsZT17ZmFsc2V9XG4gICAgICAgICAgICAgICAgZGlzcGxheU9wdGlvbj1cImxhYmVsXCJcbiAgICAgICAgICAgICAgICBnZXRPcHRpb25WYWx1ZT1cImlkXCJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17bmV3UHJlc2V0ID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG92ZXJyaWRlcyA9IHVwZGF0ZUNvbG9yUGFyYW1zT25QcmVzZXRDaGFuZ2UoXG4gICAgICAgICAgICAgICAgICAgIHN0YWMsXG4gICAgICAgICAgICAgICAgICAgIHZpc0NvbmZpZ3VyYXRvclByb3BzLmxheWVyLmNvbmZpZy52aXNDb25maWcucHJlc2V0LFxuICAgICAgICAgICAgICAgICAgICBuZXdQcmVzZXQgYXMgc3RyaW5nXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgdmlzQ29uZmlndXJhdG9yUHJvcHMub25DaGFuZ2Uoey4uLm92ZXJyaWRlcywgcHJlc2V0OiBuZXdQcmVzZXR9KTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB7c2VsZWN0ZWRQcmVzZXQ/LmRlc2NyaXB0aW9uID8gKFxuICAgICAgICAgICAgICAgIDxEZXNjcmlwdGlvblRleHQ+XG4gICAgICAgICAgICAgICAgICB7c2VsZWN0ZWRQcmVzZXQ/LmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAge3NlbGVjdGVkUHJlc2V0Py5pbmZvVXJsID8gKFxuICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCIgaHJlZj17c2VsZWN0ZWRQcmVzZXQ/LmluZm9Vcmx9PlxuICAgICAgICAgICAgICAgICAgICAgIE1vcmUgSW5mb1xuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICA8L0Rlc2NyaXB0aW9uVGV4dD5cbiAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICA8L1NpZGVQYW5lbFNlY3Rpb24+XG5cbiAgICAgICAgICAgIHtzZWxlY3RlZFByZXNldC5pZCA9PT0gJ3NpbmdsZUJhbmQnICYmIChcbiAgICAgICAgICAgICAgPFNpZGVQYW5lbFNlY3Rpb24+XG4gICAgICAgICAgICAgICAgPFBhbmVsTGFiZWxXcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgPFBhbmVsTGFiZWw+U2luZ2xlIEJhbmQgTmFtZTwvUGFuZWxMYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxJbmZvSGVscGVyXG4gICAgICAgICAgICAgICAgICAgIGlkPXtgJHtsYXllci5pZH0tc2luZ2xlLWJhbmQtbmFtZWB9XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwiU2VsZWN0IGEgc2luZ2xlIGJhbmQuXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9QYW5lbExhYmVsV3JhcHBlcj5cbiAgICAgICAgICAgICAgICA8SXRlbVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW1zPXtzZWxlY3RlZFNpbmdsZUJhbmROYW1lfVxuICAgICAgICAgICAgICAgICAgb3B0aW9ucz17c2luZ2xlQmFuZE9wdGlvbnN9XG4gICAgICAgICAgICAgICAgICBtdWx0aVNlbGVjdD17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICBzZWFyY2hhYmxlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgIGRpc3BsYXlPcHRpb249XCJsYWJlbFwiXG4gICAgICAgICAgICAgICAgICBnZXRPcHRpb25WYWx1ZT1cImlkXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt2YWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2aXNDb25maWd1cmF0b3JQcm9wcy5vbkNoYW5nZSh7c2luZ2xlQmFuZE5hbWU6IHZhbH0pO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L1NpZGVQYW5lbFNlY3Rpb24+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICB7U1RBQ19TRUFSQ0hfVUlfRU5BQkxFRCAmJiBzdGFjU2VhcmNoQWxsb3dlZCAmJiAoXG4gICAgICAgICAgICAgIDxDdXN0b21WaXNDb25maWdTd2l0Y2hcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MudXNlU1RBQ1NlYXJjaGluZ31cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICB7U1RBQ19TRUFSQ0hfVUlfRU5BQkxFRCAmJiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAge3N0YWNTZWFyY2hBbGxvd2VkICYmIHVzZVNUQUNTZWFyY2hpbmcgPyAoXG4gICAgICAgICAgICAgICAgICA8U2lkZVBhbmVsU2VjdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPFBhbmVsTGFiZWxXcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICAgIDxQYW5lbExhYmVsPlNUQUMgU2VhcmNoIFByb3ZpZGVyPC9QYW5lbExhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8L1BhbmVsTGFiZWxXcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICA8SXRlbVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnN0YWNTZWFyY2hQcm92aWRlcn1cbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEl0ZW1zPXtmaW5kVmlzQ29uZmlnSXRlbUJ5SWQobGF5ZXIsICdzdGFjU2VhcmNoUHJvdmlkZXInKX1cbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkNob29zZSBzZWFyY2ggcHJvdmlkZXJcIlxuICAgICAgICAgICAgICAgICAgICAgIG11bHRpU2VsZWN0PXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hhYmxlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5T3B0aW9uPVwibGFiZWxcIlxuICAgICAgICAgICAgICAgICAgICAgIGdldE9wdGlvblZhbHVlPVwiaWRcIlxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt2YWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogY2hlY2sgd2hlbiBzd2l0Y2hpbmcgbGF5ZXJzIHNvIHRoYXQgeW91IGRvbid0IG1pc21hdGNoIGFsbG93ZWQgbW9zYWljcyB3aXRoIGxheWVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlzQ29uZmlndXJhdG9yUHJvcHMub25DaGFuZ2Uoe3N0YWNTZWFyY2hQcm92aWRlcjogdmFsfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICAgICAgICA8UGFuZWxMYWJlbFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgPFBhbmVsTGFiZWw+RGF0ZSBSYW5nZTwvUGFuZWxMYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPC9QYW5lbExhYmVsV3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgIGlkPXtgJHtsYXllci5pZH0tc3RhcnREYXRlYH1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KHt0YXJnZXQ6IHt2YWx1ZX19KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNDb25maWd1cmF0b3JQcm9wcy5vbkNoYW5nZSh7c3RhcnREYXRlOiB2YWx1ZX0pO1xuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2xheWVyLmNvbmZpZy52aXNDb25maWcuc3RhcnREYXRlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgaWQ9e2Ake2xheWVyLmlkfS1lbmREYXRlYH1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KHt0YXJnZXQ6IHt2YWx1ZX19KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNDb25maWd1cmF0b3JQcm9wcy5vbkNoYW5nZSh7ZW5kRGF0ZTogdmFsdWV9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtsYXllci5jb25maWcudmlzQ29uZmlnLmVuZERhdGV9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxEZXNjcmlwdGlvblRleHQ+RGF0ZSBmb3JtYXQgbXVzdCBiZSBcIllZWVktTU0tRERcIjwvRGVzY3JpcHRpb25UZXh0PlxuICAgICAgICAgICAgICAgICAgPC9TaWRlUGFuZWxTZWN0aW9uPlxuICAgICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuICAgICAgICApfVxuXG4gICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gbGFiZWw9XCJWaXN1YWwgU2V0dGluZ3NcIiBjb2xsYXBzaWJsZT17ZmFsc2V9PlxuICAgICAgICAgIDxWaXNDb25maWdTbGlkZXIgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLm9wYWNpdHl9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICB7Y29sb3JtYXBBbGxvd2VkICYmIChcbiAgICAgICAgICAgIDxTaWRlUGFuZWxTZWN0aW9uPlxuICAgICAgICAgICAgICA8UGFuZWxMYWJlbD5Db2xvcm1hcDwvUGFuZWxMYWJlbD5cbiAgICAgICAgICAgICAgPEl0ZW1TZWxlY3RvclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkSXRlbXM9e3NlbGVjdGVkQ29sb3JtYXB9XG4gICAgICAgICAgICAgICAgb3B0aW9ucz17Y29sb3JtYXBPcHRpb25zfVxuICAgICAgICAgICAgICAgIG11bHRpU2VsZWN0PXtmYWxzZX1cbiAgICAgICAgICAgICAgICBkaXNwbGF5T3B0aW9uPVwibGFiZWxcIlxuICAgICAgICAgICAgICAgIGdldE9wdGlvblZhbHVlPVwiaWRcIlxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt2YWwgPT4ge1xuICAgICAgICAgICAgICAgICAgdmlzQ29uZmlndXJhdG9yUHJvcHMub25DaGFuZ2Uoe2NvbG9ybWFwSWQ6IHZhbH0pO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgRHJvcERvd25MaW5lSXRlbVJlbmRlckNvbXBvbmVudD17Q29sb3JNYXBMaXN0SXRlbX1cbiAgICAgICAgICAgICAgICBmaWx0ZXJPcHRpb249XCJsYWJlbFwiXG4gICAgICAgICAgICAgICAgc2VhcmNoYWJsZVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9TaWRlUGFuZWxTZWN0aW9uPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICB7LyogUmVzY2FsaW5nICovfVxuICAgICAgICB7cmVzY2FsaW5nQWxsb3dlZCAmJiAoXG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSBsYWJlbD1cIlJlc2NhbGluZ1wiPlxuICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaFxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5keW5hbWljQ29sb3J9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtpc0R5bmFtaWNDb2xvcnNPbmx5fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxWaXNDb25maWdTd2l0Y2hcbiAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLm5vbkxpbmVhclJlc2NhbGluZ31cbiAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICBsYWJlbD17bm9uTGluZWFyUmVzY2FsaW5nID8gJ05vbi1MaW5lYXIgUmVzY2FsaW5nJyA6ICdMaW5lYXIgUmVzY2FsaW5nJ31cbiAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgIHsvKiBUT0RPOiBhZGQgc2xpZGVycyBmb3IgcmVkLCBncmVlbiwgYmx1ZSwgbm90IGEgc2luZ2xlIHNsaWRlciAqL31cbiAgICAgICAgICAgIHtub25MaW5lYXJSZXNjYWxpbmcgPyAoXG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmdhbW1hQ29udHJhc3RGYWN0b3J9XG4gICAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc2lnbW9pZGFsQ29udHJhc3RGYWN0b3J9XG4gICAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc2lnbW9pZGFsQmlhc0ZhY3Rvcn1cbiAgICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MubGluZWFyUmVzY2FsaW5nRmFjdG9yfVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnNhdHVyYXRpb25WYWx1ZX1cbiAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICl9XG5cbiAgICAgICAge2ZpbHRlckFsbG93ZWQgJiYgKFxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwXG4gICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZmlsdGVyRW5hYmxlZH1cbiAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgIGNvbGxhcHNpYmxlXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlciB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZmlsdGVyUmFuZ2V9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICl9XG5cbiAgICAgICAge2dldEFwcGxpY2F0aW9uQ29uZmlnKCkucmFzdGVyU2VydmVyU3VwcG9ydHNFbGV2YXRpb24gJiZcbiAgICAgICAgICBzdGFjLnJhc3RlclRpbGVTZXJ2ZXJVcmxzPy5sZW5ndGggJiYgKFxuICAgICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSBsYWJlbD1cIlRlcnJhaW5cIj5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaFxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZW5hYmxlVGVycmFpbn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgICApfVxuICAgICAgPC9TdHlsZWRMYXllckNvbmZpZ3VyYXRvcj5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBTVEFDQ2hlY2tDb25maWd1cmF0b3JXcmFwcGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSYXN0ZXJUaWxlTGF5ZXJDb25maWd1cmF0b3JGYWN0b3J5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsaUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUVBLElBQUFHLFVBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUosT0FBQTtBQW1CQSxJQUFBSyxhQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxNQUFBLEdBQUFOLE9BQUE7QUFJQSxJQUFBTywyQkFBQSxHQUFBUCxPQUFBO0FBRUEsSUFBQVEsa0JBQUEsR0FBQVIsT0FBQTtBQU1BLElBQUFTLE9BQUEsR0FBQVAsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFVLFdBQUEsR0FBQVIsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFXLGFBQUEsR0FBQVQsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFZLGdCQUFBLEdBQUFWLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBYSxpQkFBQSxHQUFBWCxzQkFB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