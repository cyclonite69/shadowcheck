"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _localization = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _itemSelector = _interopRequireDefault(require("../../common/item-selector/item-selector"));
var _styledComponents = require("../../common/styled-components");
var _colorScaleSelector = _interopRequireDefault(require("./color-scale-selector"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var SizeScaleSelector = function SizeScaleSelector(_ref) {
  var dropdownSelectProps = (0, _extends2["default"])({}, ((0, _objectDestructuringEmpty2["default"])(_ref), _ref));
  return /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], dropdownSelectProps);
};
DimensionScaleSelectorFactory.deps = [_colorScaleSelector["default"]];
function DimensionScaleSelectorFactory(ColorScaleSelector) {
  var DimensionScaleSelector = function DimensionScaleSelector(_ref2) {
    var _layer$config$colorUI;
    var layer = _ref2.layer,
      channel = _ref2.channel,
      dataset = _ref2.dataset,
      label = _ref2.label,
      onChange = _ref2.onChange,
      setColorUI = _ref2.setColorUI;
    var channelScaleType = channel.channelScaleType,
      domain = channel.domain,
      field = channel.field,
      key = channel.key,
      range = channel.range,
      scale = channel.scale;
    var scaleType = scale ? layer.config[scale] : null;
    var layerScaleOptions = layer.getScaleOptions(key);
    var scaleOptions = layerScaleOptions.map(function (op) {
      return {
        label: _constants.SCALE_TYPE_NAMES[op] || op,
        value: op
      };
    });
    var disabled = scaleOptions.length < 2;
    var isColorScale = channelScaleType === _constants.CHANNEL_SCALES.color || layer.config.aggregatedBins && channelScaleType === _constants.CHANNEL_SCALES.colorAggr;
    var onSelect = (0, _react.useCallback)(function (val, newRange) {
      return onChange((0, _defineProperty2["default"])({}, scale, val), key, newRange ? (0, _defineProperty2["default"])({}, range, newRange) : undefined);
    }, [onChange, range, scale, key]);
    var _setColorUI = (0, _react.useCallback)(function (newConfig) {
      return setColorUI(range, newConfig);
    }, [range, setColorUI]);
    var dropdownSelectProps = {
      disabled: disabled,
      selectedItems: scaleOptions.filter(function (op) {
        return op.value === scaleType;
      }),
      options: scaleOptions,
      multiSelect: false,
      searchable: false,
      onChange: onSelect,
      displayOption: 'label',
      getOptionValue: 'value',
      channelKey: key
    };
    return /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(_styledComponents.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: label ? "scale.".concat((0, _utils.camelize)(label)) : 'misc.scale',
      defaultMessage: label
    })), isColorScale && dataset ? /*#__PURE__*/_react["default"].createElement(ColorScaleSelector, (0, _extends2["default"])({}, dropdownSelectProps, {
      layer: layer,
      field: layer.config[field],
      dataset: dataset,
      onSelect: onSelect,
      scaleType: scaleType,
      domain: layer.config[domain],
      aggregatedBins: layer.config.aggregatedBins,
      range: layer.config.visConfig[range],
      setColorUI: _setColorUI,
      colorUIConfig: (_layer$config$colorUI = layer.config.colorUI) === null || _layer$config$colorUI === void 0 ? void 0 : _layer$config$colorUI[range]
    })) : /*#__PURE__*/_react["default"].createElement(SizeScaleSelector, dropdownSelectProps));
  };
  return DimensionScaleSelector;
}
var _default = exports["default"] = DimensionScaleSelectorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uc3RhbnRzIiwicmVxdWlyZSIsIl9sb2NhbGl6YXRpb24iLCJfdXRpbHMiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9pdGVtU2VsZWN0b3IiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N0eWxlZENvbXBvbmVudHMiLCJfY29sb3JTY2FsZVNlbGVjdG9yIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiU2l6ZVNjYWxlU2VsZWN0b3IiLCJfcmVmIiwiZHJvcGRvd25TZWxlY3RQcm9wcyIsIl9leHRlbmRzMiIsIl9vYmplY3REZXN0cnVjdHVyaW5nRW1wdHkyIiwiY3JlYXRlRWxlbWVudCIsIkRpbWVuc2lvblNjYWxlU2VsZWN0b3JGYWN0b3J5IiwiZGVwcyIsIkNvbG9yU2NhbGVTZWxlY3RvciIsIkRpbWVuc2lvblNjYWxlU2VsZWN0b3IiLCJfcmVmMiIsIl9sYXllciRjb25maWckY29sb3JVSSIsImxheWVyIiwiY2hhbm5lbCIsImRhdGFzZXQiLCJsYWJlbCIsIm9uQ2hhbmdlIiwic2V0Q29sb3JVSSIsImNoYW5uZWxTY2FsZVR5cGUiLCJkb21haW4iLCJmaWVsZCIsImtleSIsInJhbmdlIiwic2NhbGUiLCJzY2FsZVR5cGUiLCJjb25maWciLCJsYXllclNjYWxlT3B0aW9ucyIsImdldFNjYWxlT3B0aW9ucyIsInNjYWxlT3B0aW9ucyIsIm1hcCIsIm9wIiwiU0NBTEVfVFlQRV9OQU1FUyIsInZhbHVlIiwiZGlzYWJsZWQiLCJsZW5ndGgiLCJpc0NvbG9yU2NhbGUiLCJDSEFOTkVMX1NDQUxFUyIsImNvbG9yIiwiYWdncmVnYXRlZEJpbnMiLCJjb2xvckFnZ3IiLCJvblNlbGVjdCIsInVzZUNhbGxiYWNrIiwidmFsIiwibmV3UmFuZ2UiLCJfZGVmaW5lUHJvcGVydHkyIiwidW5kZWZpbmVkIiwiX3NldENvbG9yVUkiLCJuZXdDb25maWciLCJzZWxlY3RlZEl0ZW1zIiwiZmlsdGVyIiwib3B0aW9ucyIsIm11bHRpU2VsZWN0Iiwic2VhcmNoYWJsZSIsImRpc3BsYXlPcHRpb24iLCJnZXRPcHRpb25WYWx1ZSIsImNoYW5uZWxLZXkiLCJTaWRlUGFuZWxTZWN0aW9uIiwiUGFuZWxMYWJlbCIsIkZvcm1hdHRlZE1lc3NhZ2UiLCJpZCIsImNvbmNhdCIsImNhbWVsaXplIiwiZGVmYXVsdE1lc3NhZ2UiLCJ2aXNDb25maWciLCJjb2xvclVJQ29uZmlnIiwiY29sb3JVSSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL2RpbWVuc2lvbi1zY2FsZS1zZWxlY3Rvci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IHtDSEFOTkVMX1NDQUxFUywgU0NBTEVfVFlQRV9OQU1FU30gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtGb3JtYXR0ZWRNZXNzYWdlfSBmcm9tICdAa2VwbGVyLmdsL2xvY2FsaXphdGlvbic7XG5pbXBvcnQge0NvbG9yVUksIExheWVyVmlzQ29uZmlnfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCB7Y2FtZWxpemV9IGZyb20gJ0BrZXBsZXIuZ2wvdXRpbHMnO1xuaW1wb3J0IHtMYXllciwgVmlzdWFsQ2hhbm5lbH0gZnJvbSAnQGtlcGxlci5nbC9sYXllcnMnO1xuaW1wb3J0IHtkZWZhdWx0IGFzIFJlYWN0LCB1c2VDYWxsYmFja30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtGaWVsZH0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQgSXRlbVNlbGVjdG9yIGZyb20gJy4uLy4uL2NvbW1vbi9pdGVtLXNlbGVjdG9yL2l0ZW0tc2VsZWN0b3InO1xuaW1wb3J0IHtQYW5lbExhYmVsLCBTaWRlUGFuZWxTZWN0aW9ufSBmcm9tICcuLi8uLi9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IENvbG9yU2NhbGVTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9jb2xvci1zY2FsZS1zZWxlY3Rvcic7XG5pbXBvcnQge0tlcGxlclRhYmxlfSBmcm9tICdAa2VwbGVyLmdsL3RhYmxlJztcblxuY29uc3QgU2l6ZVNjYWxlU2VsZWN0b3IgPSAoey4uLmRyb3Bkb3duU2VsZWN0UHJvcHN9OiBhbnkpID0+IChcbiAgPEl0ZW1TZWxlY3RvciB7Li4uZHJvcGRvd25TZWxlY3RQcm9wc30gLz5cbik7XG5cbmV4cG9ydCB0eXBlIERpbWVuc2lvblNjYWxlU2VsZWN0b3JQcm9wcyA9IHtcbiAgbGF5ZXI6IExheWVyO1xuICBjaGFubmVsOiBWaXN1YWxDaGFubmVsO1xuICBsYWJlbD86IHN0cmluZztcbiAgZGF0YXNldDogS2VwbGVyVGFibGUgfCB1bmRlZmluZWQ7XG4gIG9uQ2hhbmdlOiAoXG4gICAgbmV3Q29uZmlnOiB7W2tleTogc3RyaW5nXTogRmllbGQgfCBudWxsIHwgc3RyaW5nfSxcbiAgICBrZXk6IHN0cmluZyxcbiAgICBuZXdWaXNDb25maWc/OiBQYXJ0aWFsPExheWVyVmlzQ29uZmlnPlxuICApID0+IHZvaWQ7XG4gIHNldENvbG9yVUk6IChyYW5nZTogc3RyaW5nLCBuZXdDb25maWc6IHtba2V5IGluIGtleW9mIENvbG9yVUldOiBDb2xvclVJW2tleV19KSA9PiB2b2lkO1xufTtcblxuRGltZW5zaW9uU2NhbGVTZWxlY3RvckZhY3RvcnkuZGVwcyA9IFtDb2xvclNjYWxlU2VsZWN0b3JGYWN0b3J5XTtcblxuZnVuY3Rpb24gRGltZW5zaW9uU2NhbGVTZWxlY3RvckZhY3RvcnkoXG4gIENvbG9yU2NhbGVTZWxlY3RvcjogUmV0dXJuVHlwZTx0eXBlb2YgQ29sb3JTY2FsZVNlbGVjdG9yRmFjdG9yeT5cbik6IFJlYWN0LkZDPERpbWVuc2lvblNjYWxlU2VsZWN0b3JQcm9wcz4ge1xuICBjb25zdCBEaW1lbnNpb25TY2FsZVNlbGVjdG9yOiBSZWFjdC5GQzxEaW1lbnNpb25TY2FsZVNlbGVjdG9yUHJvcHM+ID0gKHtcbiAgICBsYXllcixcbiAgICBjaGFubmVsLFxuICAgIGRhdGFzZXQsXG4gICAgbGFiZWwsXG4gICAgb25DaGFuZ2UsXG4gICAgc2V0Q29sb3JVSVxuICB9KSA9PiB7XG4gICAgY29uc3Qge2NoYW5uZWxTY2FsZVR5cGUsIGRvbWFpbiwgZmllbGQsIGtleSwgcmFuZ2UsIHNjYWxlfSA9IGNoYW5uZWw7XG4gICAgY29uc3Qgc2NhbGVUeXBlID0gc2NhbGUgPyBsYXllci5jb25maWdbc2NhbGVdIDogbnVsbDtcbiAgICBjb25zdCBsYXllclNjYWxlT3B0aW9ucyA9IGxheWVyLmdldFNjYWxlT3B0aW9ucyhrZXkpO1xuICAgIGNvbnN0IHNjYWxlT3B0aW9ucyA9IGxheWVyU2NhbGVPcHRpb25zLm1hcChvcCA9PiAoe1xuICAgICAgbGFiZWw6IFNDQUxFX1RZUEVfTkFNRVNbb3BdIHx8IG9wLFxuICAgICAgdmFsdWU6IG9wXG4gICAgfSkpO1xuICAgIGNvbnN0IGRpc2FibGVkID0gc2NhbGVPcHRpb25zLmxlbmd0aCA8IDI7XG4gICAgY29uc3QgaXNDb2xvclNjYWxlID1cbiAgICAgIGNoYW5uZWxTY2FsZVR5cGUgPT09IENIQU5ORUxfU0NBTEVTLmNvbG9yIHx8XG4gICAgICAobGF5ZXIuY29uZmlnLmFnZ3JlZ2F0ZWRCaW5zICYmIGNoYW5uZWxTY2FsZVR5cGUgPT09IENIQU5ORUxfU0NBTEVTLmNvbG9yQWdncik7XG5cbiAgICBjb25zdCBvblNlbGVjdCA9IHVzZUNhbGxiYWNrKFxuICAgICAgKHZhbCwgbmV3UmFuZ2UpID0+IG9uQ2hhbmdlKHtbc2NhbGVdOiB2YWx9LCBrZXksIG5ld1JhbmdlID8ge1tyYW5nZV06IG5ld1JhbmdlfSA6IHVuZGVmaW5lZCksXG4gICAgICBbb25DaGFuZ2UsIHJhbmdlLCBzY2FsZSwga2V5XVxuICAgICk7XG4gICAgY29uc3QgX3NldENvbG9yVUkgPSB1c2VDYWxsYmFjayhuZXdDb25maWcgPT4gc2V0Q29sb3JVSShyYW5nZSwgbmV3Q29uZmlnKSwgW3JhbmdlLCBzZXRDb2xvclVJXSk7XG5cbiAgICBjb25zdCBkcm9wZG93blNlbGVjdFByb3BzID0ge1xuICAgICAgZGlzYWJsZWQsXG4gICAgICBzZWxlY3RlZEl0ZW1zOiBzY2FsZU9wdGlvbnMuZmlsdGVyKG9wID0+IG9wLnZhbHVlID09PSBzY2FsZVR5cGUpLFxuICAgICAgb3B0aW9uczogc2NhbGVPcHRpb25zLFxuICAgICAgbXVsdGlTZWxlY3Q6IGZhbHNlLFxuICAgICAgc2VhcmNoYWJsZTogZmFsc2UsXG4gICAgICBvbkNoYW5nZTogb25TZWxlY3QsXG4gICAgICBkaXNwbGF5T3B0aW9uOiAnbGFiZWwnLFxuICAgICAgZ2V0T3B0aW9uVmFsdWU6ICd2YWx1ZScsXG4gICAgICBjaGFubmVsS2V5OiBrZXlcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxTaWRlUGFuZWxTZWN0aW9uPlxuICAgICAgICA8UGFuZWxMYWJlbD5cbiAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZVxuICAgICAgICAgICAgaWQ9e2xhYmVsID8gYHNjYWxlLiR7Y2FtZWxpemUobGFiZWwpfWAgOiAnbWlzYy5zY2FsZSd9XG4gICAgICAgICAgICBkZWZhdWx0TWVzc2FnZT17bGFiZWx9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9QYW5lbExhYmVsPlxuICAgICAgICB7aXNDb2xvclNjYWxlICYmIGRhdGFzZXQgPyAoXG4gICAgICAgICAgPENvbG9yU2NhbGVTZWxlY3RvclxuICAgICAgICAgICAgey4uLmRyb3Bkb3duU2VsZWN0UHJvcHN9XG4gICAgICAgICAgICBsYXllcj17bGF5ZXJ9XG4gICAgICAgICAgICBmaWVsZD17bGF5ZXIuY29uZmlnW2ZpZWxkXX1cbiAgICAgICAgICAgIGRhdGFzZXQ9e2RhdGFzZXR9XG4gICAgICAgICAgICBvblNlbGVjdD17b25TZWxlY3R9XG4gICAgICAgICAgICBzY2FsZVR5cGU9e3NjYWxlVHlwZX1cbiAgICAgICAgICAgIGRvbWFpbj17bGF5ZXIuY29uZmlnW2RvbWFpbl19XG4gICAgICAgICAgICBhZ2dyZWdhdGVkQmlucz17bGF5ZXIuY29uZmlnLmFnZ3JlZ2F0ZWRCaW5zfVxuICAgICAgICAgICAgcmFuZ2U9e2xheWVyLmNvbmZpZy52aXNDb25maWdbcmFuZ2VdfVxuICAgICAgICAgICAgc2V0Q29sb3JVST17X3NldENvbG9yVUl9XG4gICAgICAgICAgICBjb2xvclVJQ29uZmlnPXtsYXllci5jb25maWcuY29sb3JVST8uW3JhbmdlXX1cbiAgICAgICAgICAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxTaXplU2NhbGVTZWxlY3RvciB7Li4uZHJvcGRvd25TZWxlY3RQcm9wc30gLz5cbiAgICAgICAgKX1cbiAgICAgIDwvU2lkZVBhbmVsU2VjdGlvbj5cbiAgICApO1xuICB9O1xuICByZXR1cm4gRGltZW5zaW9uU2NhbGVTZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRGltZW5zaW9uU2NhbGVTZWxlY3RvckZhY3Rvcnk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBR0EsSUFBQUEsVUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBRUEsSUFBQUcsTUFBQSxHQUFBQyx1QkFBQSxDQUFBSixPQUFBO0FBRUEsSUFBQUssYUFBQSxHQUFBQyxzQkFBQSxDQUFBTixPQUFBO0FBQ0EsSUFBQU8saUJBQUEsR0FBQVAsT0FBQTtBQUNBLElBQUFRLG1CQUFBLEdBQUFGLHNCQUFBLENBQUFOLE9BQUE7QUFB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