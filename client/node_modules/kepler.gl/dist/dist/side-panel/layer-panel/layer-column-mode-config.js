"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColumnModeConfigFactory = ColumnModeConfigFactory;
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _styledComponents2 = require("../../common/styled-components");
var _checkbox = _interopRequireDefault(require("../../common/checkbox"));
var _panelHeaderAction = _interopRequireDefault(require("../panel-header-action"));
var _layerColumnConfig = _interopRequireDefault(require("./layer-column-config"));
var _localization = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _icons = require("../../common/icons");
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
var TopRow = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n"])));
var Separator = (0, _styledComponents["default"])(function (_ref) {
  var children = _ref.children,
    className = _ref.className;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "separator-line-cell"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "separator-line"
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: "separator-content"
  }, children), /*#__PURE__*/_react["default"].createElement("div", {
    className: "separator-line-cell"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "separator-line"
  })));
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: row;\n  & > * + * {\n    margin-left: 10px;\n  }\n  & > .separator-line-cell {\n    display: flex;\n    flex-grow: 1;\n    align-items: center;\n  }\n  & > .separator-content {\n    color: ", ";\n  }\n  & > .separator-line-cell > .separator-line {\n    display: flex;\n    border-bottom: 1px solid ", ";\n    width: 100%;\n    line-height: 1px;\n    height: 1px;\n  }\n"])), function (props) {
  return props.theme.labelColor;
}, function (props) {
  return props.theme.labelColor;
});
var ConfigPanesContainer = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  & > * + * {\n    margin-top: 10px;\n  }\n  fieldset {\n    border: 1px solid ", ";\n    margin: 0;\n  }\n  legend {\n    display: flex;\n    label {\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.labelColor;
}, function (props) {
  return props.theme.labelColor;
});
ColumnModeConfigFactory.deps = [_panelHeaderAction["default"]];
function ColumnModeConfigFactory(PanelHeaderAction) {
  var ColumnModeConfig = function ColumnModeConfig(_ref2) {
    var id = _ref2.id,
      supportedColumnModes = _ref2.supportedColumnModes,
      selectedColumnMode = _ref2.selectedColumnMode,
      columns = _ref2.columns,
      renderColumnConfig = _ref2.renderColumnConfig,
      selectColumnMode = _ref2.selectColumnMode,
      _ref2$getHelpHandler = _ref2.getHelpHandler,
      getHelpHandler = _ref2$getHelpHandler === void 0 ? function () {
        return null;
      } : _ref2$getHelpHandler;
    var columnModes = (0, _react.useMemo)(function () {
      return supportedColumnModes ? supportedColumnModes.map(function (_ref3) {
        var key = _ref3.key,
          label = _ref3.label,
          requiredColumns = _ref3.requiredColumns,
          optionalColumns = _ref3.optionalColumns;
        var allColumns = (requiredColumns || []).concat(optionalColumns || []).reduce(function (acc, k) {
          acc[k] = columns[k];
          return acc;
        }, {});
        return {
          key: key,
          label: label,
          columns: allColumns
        };
      }) : Object.keys(columns).length > 0 ? [{
        key: 'default',
        label: '',
        columns: columns
      }] : [];
    }, [supportedColumnModes, columns]);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, columnModes.length > 0 ? /*#__PURE__*/_react["default"].createElement(TopRow, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'columns.title'
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "layer.required"
    }))) : null, /*#__PURE__*/_react["default"].createElement(ConfigPanesContainer, null, columnModes.map(function (modeConfig, i) {
      var columnMode = modeConfig.key,
        label = modeConfig.label;
      var isSelected = selectedColumnMode === columnMode || columnModes.length === 1;
      var columnPanel = renderColumnConfig(modeConfig, isSelected);
      var helpHandler = getHelpHandler(modeConfig);
      var selectColumnModeHandler = function selectColumnModeHandler() {
        return selectColumnMode(modeConfig);
      };
      return /*#__PURE__*/_react["default"].createElement(_react.Fragment, {
        key: columnMode
      }, i > 0 ? /*#__PURE__*/_react["default"].createElement(Separator, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
        id: "layer.columnModesSeparator"
      })) : null, columnModes.length > 1 ? /*#__PURE__*/_react["default"].createElement("div", {
        className: "layer-column-mode-panel"
      }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledPanelHeader, {
        className: "interaction-panel__header"
      }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelHeaderContent, {
        className: "interaction-panel__header__content"
      }, /*#__PURE__*/_react["default"].createElement(_checkbox["default"], {
        type: "radio",
        name: "layer-".concat(id, "-input-modes"),
        checked: isSelected,
        id: "".concat(id, "-input-column-").concat(columnMode),
        label: label,
        onChange: selectColumnModeHandler
      })), helpHandler ? /*#__PURE__*/_react["default"].createElement("div", {
        className: "interaction-panel__header__actions"
      }, /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
        id: "".concat(id, "-help-button"),
        className: "layer__help-button",
        tooltip: 'layerConfiguration.howTo',
        onClick: helpHandler,
        IconComponent: _icons.Help
      })) : null), /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelContent, {
        className: "interaction-panel__content"
      }, columnPanel)) : columnPanel);
    })));
  };
  return ColumnModeConfig;
}
LayerColumnModeConfigFactory.deps = [_layerColumnConfig["default"], ColumnModeConfigFactory];
function LayerColumnModeConfigFactory(LayerColumnConfig, ColumnModeConfig) {
  var LayerColumnModeConfig = function LayerColumnModeConfig(_ref4) {
    var id = _ref4.id,
      layer = _ref4.layer,
      supportedColumnModes = _ref4.supportedColumnModes,
      layerConfig = _ref4.layerConfig,
      fields = _ref4.fields,
      fieldPairs = _ref4.fieldPairs,
      openModal = _ref4.openModal,
      _updateLayerConfig = _ref4.updateLayerConfig;
    var columns = layerConfig.columns;
    var selectColumnMode = (0, _react.useCallback)(function (_ref5) {
      var columnMode = _ref5.key;
      _updateLayerConfig({
        columnMode: columnMode
      });
    }, [_updateLayerConfig]);
    var renderColumnConfig = (0, _react.useCallback)(function (_ref6, isSelected) {
      var columnMode = _ref6.key,
        cols = _ref6.columns;
      return /*#__PURE__*/_react["default"].createElement(LayerColumnConfig, {
        columnPairs: layer.columnPairs,
        columns: cols,
        assignColumnPairs: layer.assignColumnPairs.bind(layer),
        assignColumn: layer.assignColumn.bind(layer),
        columnLabels: layer.columnLabels,
        fields: fields,
        fieldPairs: fieldPairs,
        updateLayerConfig: function updateLayerConfig(config) {
          return _updateLayerConfig(_objectSpread(_objectSpread({}, config), !isSelected && columnMode !== 'defaut' ? {
            columnMode: columnMode
          } : {}));
        },
        isActive: isSelected
      });
    }, [layer, _updateLayerConfig, fieldPairs, fields]);
    var getHelpHandler = (0, _react.useCallback)(function (_ref7) {
      var _layer$layerInfoModal;
      var columnMode = _ref7.key;
      var modal = (_layer$layerInfoModal = layer.layerInfoModal) === null || _layer$layerInfoModal === void 0 ? void 0 : _layer$layerInfoModal[columnMode];
      if (modal) {
        return function () {
          return openModal(modal);
        };
      }
      return null;
    }, [layer, openModal]);
    return /*#__PURE__*/_react["default"].createElement(ColumnModeConfig, {
      id: id,
      supportedColumnModes: supportedColumnModes,
      selectedColumnMode: layerConfig.columnMode,
      columns: columns,
      selectColumnMode: selectColumnMode,
      renderColumnConfig: renderColumnConfig,
      getHelpHandler: getHelpHandler
    });
  };
  return LayerColumnModeConfig;
}
var _default = exports["default"] = LayerColumnModeConfigFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,