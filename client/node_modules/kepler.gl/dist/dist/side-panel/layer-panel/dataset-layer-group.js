"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _datasetLayerSection = _interopRequireDefault(require("./dataset-layer-section"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

DatasetLayerGroupFactory.deps = [_datasetLayerSection["default"]];
function DatasetLayerGroupFactory(DatasetLayerSection) {
  var DatasetLayerGroup = function DatasetLayerGroup(props) {
    var datasets = props.datasets,
      showDatasetTable = props.showDatasetTable,
      layers = props.layers,
      updateTableColor = props.updateTableColor,
      showDeleteDataset = props.showDeleteDataset,
      removeDataset = props.removeDataset,
      layerOrder = props.layerOrder,
      layerClasses = props.layerClasses,
      uiStateActions = props.uiStateActions,
      visStateActions = props.visStateActions,
      mapStateActions = props.mapStateActions;
    var datasetLayerSectionData = (0, _react.useMemo)(function () {
      return Object.values(datasets).map(function (dataset) {
        // Global layer order will contain the correct order of layers
        // We just empty the positions in layers array (for each dataset)
        // where the layer doesn't belong to a dataset and set it to null
        var datasetLayers = layers.map(function (layer) {
          return layer.config.dataId === dataset.id ? layer : null;
        }).filter(function (layer) {
          return Boolean(layer);
        });
        return {
          dataset: dataset,
          datasetLayers: datasetLayers
        };
      });
    }, [datasets, layers]);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, datasetLayerSectionData.map(function (dlsData) {
      return /*#__PURE__*/_react["default"].createElement(DatasetLayerSection, {
        key: dlsData.dataset.id,
        dataset: dlsData.dataset,
        layers: dlsData.datasetLayers,
        datasets: datasets,
        showDatasetTable: showDatasetTable,
        updateTableColor: updateTableColor,
        showDeleteDataset: showDeleteDataset,
        removeDataset: removeDataset,
        layerOrder: layerOrder,
        layerClasses: layerClasses,
        uiStateActions: uiStateActions,
        visStateActions: visStateActions,
        mapStateActions: mapStateActions
      });
    }));
  };
  return DatasetLayerGroup;
}
var _default = exports["default"] = DatasetLayerGroupFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,