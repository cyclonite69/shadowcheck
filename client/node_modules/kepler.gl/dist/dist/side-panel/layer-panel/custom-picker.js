"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _reactColor = require("react-color");
var _styles = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/styles/src");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// This was put in because 3rd party library react-color doesn't yet cater for customized color of child component <SketchField> which contains HEX/RGB input text box
// Issue raised: https://github.com/casesandberg/react-color/issues/631

var StyledPicker = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .sketch-picker {\n    span {\n      color: ", " !important;\n      font-family: ", ";\n    }\n    input {\n      text-align: center;\n      font-family: ", ";\n      color: ", " !important;\n      border-color: ", " !important;\n      box-shadow: none !important;\n      background-color: ", " !important;\n\n      &:hover {\n        cursor: ", ";\n        background-color: ", ";\n        border-color: ", ";\n      }\n\n      &:active,\n      &:focus,\n      &.focus,\n      &.active {\n        outline: 0;\n        background-color: ", ";\n        border-color: ", ";\n        box-shadow: ", ";\n      }\n    }\n    label {\n      color: ", " !important;\n    }\n  }\n"])), function (props) {
  return props.theme.labelColor;
}, function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.inputColor;
}, function (props) {
  return props.theme.secondaryInputBgd;
}, function (props) {
  return props.theme.inputBgdHover;
}, function (props) {
  return props.type === 'number' || props.type === 'text' ? 'text' : 'pointer';
}, function (props) {
  return props.active ? props.theme.inputBgdActive : props.theme.inputBgdHover;
}, function (props) {
  return props.active ? props.theme.inputBorderActiveColor : props.theme.inputBorderHoverColor;
}, function (props) {
  return props.theme.inputBgdActive;
}, function (props) {
  return props.theme.inputBorderActiveColor;
}, function (props) {
  return props.theme.inputBoxShadowActive;
}, function (props) {
  return props.theme.subtextColor;
});
var PRESET_COLORS = [];
var defaultProps = {
  color: '#f00',
  theme: {
    panelBackground: _styles.panelBackground
  },
  onChange: function onChange() {
    // no-op
  }
};

// Note: When using SketchPicker, the parent component CustomPicker can be invoked as a function without props by ReactDOM.
var CustomPicker = function CustomPicker() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultProps;
  var color = props.color,
    onChange = props.onChange,
    theme = props.theme;
  var pickerStyle = (0, _react.useMemo)(function () {
    return {
      picker: {
        width: '200px',
        padding: '10px 10px 8px',
        boxSizing: 'initial',
        background: theme.panelBackground
      }
    };
  }, [theme.panelBackground]);
  return /*#__PURE__*/_react["default"].createElement(StyledPicker, null, /*#__PURE__*/_react["default"].createElement(_reactColor.SketchPicker, {
    color: color,
    onChange: onChange,
    presetColors: PRESET_COLORS,
    styles: pickerStyle,
    disableAlpha: true
  }));
};
var _default = exports["default"] = (0, _styledComponents.withTheme)(CustomPicker);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,