"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.PaletteConfig = exports.ColorPaletteItem = exports.ALL_TYPES = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _localization = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _itemSelector = _interopRequireDefault(require("../../common/item-selector/item-selector"));
var _styledComponents2 = require("../../common/styled-components");
var _switch = _interopRequireDefault(require("../../common/switch"));
var _colorPalette = _interopRequireDefault(require("./color-palette"));
var _customPalette = _interopRequireDefault(require("./custom-palette"));
var _d3Array = require("d3-array");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// @ts-ignore cant concat 'all' to PALETTE_TYPES values
var ALL_TYPES = exports.ALL_TYPES = Object.values(_constants.PALETTE_TYPES).concat(['all']);
var MAX_STEPS = 20;
var ALL_STEPS = (0, _d3Array.range)(2, MAX_STEPS + 1, 1);
var StyledColorConfig = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 12px 12px 0 12px;\n"])));
var StyledColorRangeSelector = _styledComponents["default"].div.attrs({
  className: 'color-range-selector'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  padding-bottom: 12px;\n"])));
var StyledColorPalette = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 0 8px 8px 8px;\n"])));
var StyledPaletteConfig = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  .color-palette__config__select {\n    width: 40%;\n    display: flex;\n    flex-direction: row-reverse;\n\n    .item-selector {\n      width: 100%;\n    }\n  }\n"])));
var CONFIG_SETTINGS = {
  type: {
    type: 'select',
    options: ALL_TYPES
  },
  steps: {
    type: 'select',
    options: ALL_STEPS,
    disabled: function disabled(colorRange) {
      return (0, _utils.hasColorMap)(colorRange);
    },
    reason: 'color.disableStepReason'
  },
  reversed: {
    type: 'switch',
    options: [true, false]
  },
  colorBlindSafe: {
    type: 'switch',
    options: [true, false]
  },
  custom: {
    label: 'customPalette',
    type: 'switch',
    options: [true, false]
  }
};
var displayOption = function displayOption(d) {
  return (0, _utils.capitalizeFirstLetter)(d);
};
var getOptionValue = function getOptionValue(d) {
  return d;
};
var noop = function noop() {
  // do nothing
};
ColorRangeSelectorFactory.deps = [_customPalette["default"]];
function ColorRangeSelectorFactory(CustomPalette) {
  var ColorRangeSelector = function ColorRangeSelector(_ref) {
    var _ref$colorPalettes = _ref.colorPalettes,
      colorPalettes = _ref$colorPalettes === void 0 ? _constants.KEPLER_COLOR_PALETTES : _ref$colorPalettes,
      colorPaletteUI = _ref.colorPaletteUI,
      _ref$setColorPaletteU = _ref.setColorPaletteUI,
      setColorPaletteUI = _ref$setColorPaletteU === void 0 ? noop : _ref$setColorPaletteU,
      _ref$onSelectColorRan = _ref.onSelectColorRange,
      onSelectColorRange = _ref$onSelectColorRan === void 0 ? noop : _ref$onSelectColorRan,
      selectedColorRange = _ref.selectedColorRange;
    var customPalette = colorPaletteUI.customPalette,
      showSketcher = colorPaletteUI.showSketcher,
      colorRangeConfig = colorPaletteUI.colorRangeConfig;
    var type = colorRangeConfig.type,
      steps = colorRangeConfig.steps,
      colorBlindSafe = colorRangeConfig.colorBlindSafe,
      reversed = colorRangeConfig.reversed;
    var filteredColorPalettes = (0, _react.useMemo)(function () {
      var _colorPalettes$filter;
      return (_colorPalettes$filter = colorPalettes === null || colorPalettes === void 0 ? void 0 : colorPalettes.filter(function (palette) {
        return (0, _utils.paletteIsType)(palette, type) && (0, _utils.paletteIsSteps)(palette, steps) && (0, _utils.paletteIsColorBlindSafe)(palette, colorBlindSafe);
      })) !== null && _colorPalettes$filter !== void 0 ? _colorPalettes$filter : [];
    }, [colorPalettes, colorBlindSafe, steps, type]);
    var _updateConfig = (0, _react.useCallback)(function (_ref2) {
      var key = _ref2.key,
        value = _ref2.value;
      setColorPaletteUI({
        colorRangeConfig: (0, _defineProperty2["default"])({}, key, value)
      });
    }, [setColorPaletteUI]);
    var _onCustomPaletteCancel = (0, _react.useCallback)(function () {
      setColorPaletteUI({
        showSketcher: false,
        colorRangeConfig: {
          custom: false
        }
      });
    }, [setColorPaletteUI]);
    var _onApply = (0, _react.useCallback)(function (e) {
      return onSelectColorRange(customPalette, e);
    }, [customPalette, onSelectColorRange]);
    var _onSelectPalette = (0, _react.useCallback)(function (colorPalette, e) {
      var newColorRange = (0, _utils.updateColorRangeBySelectedPalette)(selectedColorRange, colorPalette, {
        steps: steps,
        reversed: reversed
      });
      onSelectColorRange(newColorRange, e);
    }, [selectedColorRange, reversed, steps, onSelectColorRange]);
    return /*#__PURE__*/_react["default"].createElement(StyledColorRangeSelector, null, /*#__PURE__*/_react["default"].createElement(StyledColorConfig, null, (colorRangeConfig.custom ? ['custom'] : Object.keys(colorRangeConfig)).map(function (key) {
      return CONFIG_SETTINGS[key] ? /*#__PURE__*/_react["default"].createElement(PaletteConfig, {
        key: key,
        prop: key,
        label: CONFIG_SETTINGS[key].label || key,
        config: CONFIG_SETTINGS[key],
        value: colorRangeConfig[key],
        onChange: _updateConfig,
        disabled: CONFIG_SETTINGS[key].disabled ? CONFIG_SETTINGS[key].disabled(selectedColorRange) : false,
        reason: CONFIG_SETTINGS[key].reason
      }) : null;
    })), colorRangeConfig.custom ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(StyledColorPalette, null, /*#__PURE__*/_react["default"].createElement(_colorPalette["default"], {
      colors: customPalette.colors
    })), /*#__PURE__*/_react["default"].createElement(CustomPalette, {
      customPalette: customPalette,
      showSketcher: showSketcher,
      onApply: _onApply,
      setColorPaletteUI: setColorPaletteUI,
      onCancel: _onCustomPaletteCancel
    })) : /*#__PURE__*/_react["default"].createElement("div", {
      className: "color-palette__group"
    }, filteredColorPalettes.map(function (colorPalette, i) {
      return /*#__PURE__*/_react["default"].createElement(ColorPaletteItem, {
        key: "".concat(colorPalette.name, "-").concat(i),
        colorPalette: colorPalette,
        selectedColorRange: selectedColorRange,
        onSelect: _onSelectPalette,
        reversed: reversed,
        steps: steps
      });
    })));
  };
  return ColorRangeSelector;
}
var PaletteConfig = exports.PaletteConfig = function PaletteConfig(_ref3) {
  var prop = _ref3.prop,
    label = _ref3.label,
    value = _ref3.value,
    _ref3$config = _ref3.config,
    type = _ref3$config.type,
    options = _ref3$config.options,
    onChange = _ref3.onChange,
    disabled = _ref3.disabled,
    reason = _ref3.reason;
  var updateSelect = (0, _react.useCallback)(function (val) {
    return onChange({
      key: prop,
      value: val
    });
  }, [onChange, prop]);
  var updateSwitch = (0, _react.useCallback)(function () {
    return onChange({
      key: prop,
      value: !value
    });
  }, [onChange, prop, value]);
  return /*#__PURE__*/_react["default"].createElement(StyledPaletteConfig, {
    className: "color-palette__config",
    onClick: function onClick(e) {
      return e.stopPropagation();
    }
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "color-palette__config__label"
  }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: "color.".concat(label)
  }))), /*#__PURE__*/_react["default"].createElement("div", {
    className: "color-palette__config__select",
    "data-tip": true,
    "data-for": "color-range-config-".concat(prop)
  }, type === 'select' && /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
    selectedItems: value,
    options: options,
    multiSelect: false,
    searchable: false,
    onChange: updateSelect,
    disabled: disabled,
    inputTheme: "secondary",
    displayOption: displayOption,
    getOptionValue: getOptionValue
  }), type === 'switch' && /*#__PURE__*/_react["default"].createElement(_switch["default"], {
    checked: Boolean(value),
    id: "".concat(label, "-toggle"),
    onChange: updateSwitch,
    disabled: disabled,
    secondary: true
  }), disabled && reason ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
    id: "color-range-config-".concat(prop),
    place: "right"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      maxWidth: '214px'
    }
  }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: reason
  }))) : null));
};
var StyledColorRange = _styledComponents["default"].div.attrs({
  className: 'color-palette-outer'
})(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 0 8px;\n  &:hover {\n    background-color: ", ";\n    cursor: pointer;\n  }\n"])), function (props) {
  return props.theme.panelBackgroundHover;
});
var ColorPaletteItem = exports.ColorPaletteItem = function ColorPaletteItem(_ref4) {
  var colorPalette = _ref4.colorPalette,
    steps = _ref4.steps,
    selectedColorRange = _ref4.selectedColorRange,
    onSelect = _ref4.onSelect,
    reversed = _ref4.reversed;
  var colors = (0, _react.useMemo)(function () {
    return colorPalette.colors(steps);
  }, [colorPalette, steps]);
  var onClick = (0, _react.useCallback)(function (e) {
    return onSelect(colorPalette, e);
  }, [colorPalette, onSelect]);
  return /*#__PURE__*/_react["default"].createElement(StyledColorRange, {
    onClick: onClick
  }, /*#__PURE__*/_react["default"].createElement(_colorPalette["default"], {
    colors: colors,
    isReversed: reversed,
    isSelected: colorPalette.name === selectedColorRange.name
  }));
};
var _default = exports["default"] = ColorRangeSelectorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,