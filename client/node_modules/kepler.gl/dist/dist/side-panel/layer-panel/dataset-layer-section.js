"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _sourceDataCatalog = _interopRequireDefault(require("../common/source-data-catalog"));
var _layerList = _interopRequireDefault(require("./layer-list"));
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _excluded = ["rasterTile"];
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
var DatasetLayerSectionWrapper = _styledComponents["default"].div.attrs({
  className: 'dataset-layer-section'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: 16px;\n"])));
DatasetLayerSectionFactory.deps = [_sourceDataCatalog["default"], _layerList["default"]];
function DatasetLayerSectionFactory(SourceDataCatalog, LayerList) {
  var DatasetLayerSection = function DatasetLayerSection(props) {
    var dataset = props.dataset,
      datasets = props.datasets,
      showDatasetTable = props.showDatasetTable,
      layers = props.layers,
      updateTableColor = props.updateTableColor,
      showDeleteDataset = props.showDeleteDataset,
      removeDataset = props.removeDataset,
      layerOrder = props.layerOrder,
      layerClasses = props.layerClasses,
      uiStateActions = props.uiStateActions,
      visStateActions = props.visStateActions,
      mapStateActions = props.mapStateActions;
    var datasetCatalog = (0, _react.useMemo)(function () {
      return (0, _defineProperty2["default"])({}, dataset.id, dataset);
    }, [dataset]);
    var enableRasterTileLayer = (0, _utils.getApplicationConfig)().enableRasterTileLayer;
    var filteredLayerClasses = (0, _react.useMemo)(function () {
      if (enableRasterTileLayer) return layerClasses;
      /* eslint-disable @typescript-eslint/no-unused-vars */
      var rasterTile = layerClasses.rasterTile,
        restClasses = (0, _objectWithoutProperties2["default"])(layerClasses, _excluded);
      return restClasses;
    }, [enableRasterTileLayer, layerClasses]);
    return /*#__PURE__*/_react["default"].createElement(DatasetLayerSectionWrapper, null, /*#__PURE__*/_react["default"].createElement(SourceDataCatalog, {
      datasets: datasetCatalog,
      showDatasetTable: showDatasetTable,
      updateTableColor: updateTableColor,
      removeDataset: removeDataset,
      showDeleteDataset: showDeleteDataset
    }), /*#__PURE__*/_react["default"].createElement(LayerList, {
      datasets: datasets,
      layerOrder: layerOrder,
      layers: layers,
      layerClasses: filteredLayerClasses,
      uiStateActions: uiStateActions,
      visStateActions: visStateActions,
      mapStateActions: mapStateActions,
      isSortable: false
    }));
  };
  return DatasetLayerSection;
}
var _default = exports["default"] = DatasetLayerSectionFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,