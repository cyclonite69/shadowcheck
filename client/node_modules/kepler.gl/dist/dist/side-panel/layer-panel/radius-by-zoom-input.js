"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactSortableHoc = require("react-sortable-hoc");
var _styledComponents = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _commonUtils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/common-utils/src");
var _common = require("../../common");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// @ts-expect-error - react-sortable-hoc libdef does not match true exports
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
var SliderInput = (0, _styledComponents["default"])(_common.Input)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  width: 48px;\n  margin: 0 4px 0 8px;\n  font-size: ", ";\n"])), function (props) {
  return props.theme.list1Size;
});
var StyledInputRow = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  width: 100%;\n  justify-content: space-between;\n  .layer__drag-handle {\n    visibility: ", ";\n  }\n  .side-panel-panel__label {\n    margin-bottom: 0;\n    text-transform: none;\n  }\n"])), function (props) {
  return props.isEditing ? 'visible' : 'hidden';
});
var StyledTrash = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  display: flex;\n  align-items: center;\n  margin-left: 8px;\n  visibility: ", ";\n\n  &:hover {\n    cursor: pointer;\n    color: ", ";\n  }\n"])), function (props) {
  return props.theme.subtextColor;
}, function (props) {
  return props.isEditing ? 'visible' : 'hidden';
}, function (props) {
  return props.theme.subtextColorActive;
});
var StyledDragHandle = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  opacity: 0;\n"])));
var dragHandleActive = (0, _styledComponents.css)(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  .layer__drag-handle {\n    color: ", ";\n    opacity: 1;\n    cursor: move;\n  }\n"])), function (props) {
  return props.theme.textColorHl;
});
var StyledSortableItem = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  padding: 4px 0;\n  z-index: ", ";\n  margin-left: -6px;\n\n  &:not(.sorting) {\n    &:hover {\n      ", ";\n    }\n  }\n\n  &.sorting-colors {\n    background-color: ", ";\n    ", ";\n  }\n"])), function (props) {
  return props.theme.dropdownWrapperZ + 1;
}, dragHandleActive, function (props) {
  return props.theme.panelBackgroundHover;
}, dragHandleActive);
var SortableContainer = (0, _reactSortableHoc.sortableContainer)(function (_ref) {
  var children = _ref.children;
  return /*#__PURE__*/_react["default"].createElement("div", null, children);
});
var DragHandle = (0, _reactSortableHoc.sortableHandle)(function (_ref2) {
  var className = _ref2.className,
    children = _ref2.children;
  return /*#__PURE__*/_react["default"].createElement(StyledDragHandle, {
    className: className
  }, children);
});
var SortableItem = (0, _reactSortableHoc.sortableElement)(function (_ref3) {
  var children = _ref3.children,
    isSorting = _ref3.isSorting;
  return /*#__PURE__*/_react["default"].createElement(StyledSortableItem, {
    className: (0, _classnames["default"])('custom-palette__sortable-items', {
      sorting: isSorting
    })
  }, children);
});
function stringToNumber(val) {
  return val === '' ? null : Number(val);
}
var InputRow = function InputRow(_ref4) {
  var idx = _ref4.idx,
    stop = _ref4.stop,
    value = _ref4.value,
    isSorting = _ref4.isSorting,
    isEditing = _ref4.isEditing,
    _onChange = _ref4.onChange,
    onRemove = _ref4.onRemove;
  return /*#__PURE__*/_react["default"].createElement(SortableItem, {
    key: idx,
    index: idx,
    isSorting: isSorting
  }, /*#__PURE__*/_react["default"].createElement(StyledInputRow, {
    isEditing: isEditing
  }, /*#__PURE__*/_react["default"].createElement(DragHandle, {
    className: "layer__drag-handle"
  }, /*#__PURE__*/_react["default"].createElement(_common.Icons.VertDots, {
    height: "20px"
  })), /*#__PURE__*/_react["default"].createElement(_common.PanelLabel, null, "zoom"), /*#__PURE__*/_react["default"].createElement(SliderInput, {
    className: "vis-config-zoom__input__stop",
    type: "number",
    id: "".concat(idx, "-stop"),
    key: "".concat(idx, "-stop"),
    value: stop,
    onChange: function onChange(e) {
      return _onChange([stringToNumber(e.target.value), value]);
    },
    disabled: !isEditing
  }), /*#__PURE__*/_react["default"].createElement(SliderInput, {
    className: "vis-config-zoom__input__value",
    type: "number",
    id: "".concat(idx, "-value"),
    key: "".concat(idx, "-value"),
    value: value,
    onChange: function onChange(e) {
      return _onChange([stop, stringToNumber(e.target.value)]);
    },
    disabled: !isEditing
  }), /*#__PURE__*/_react["default"].createElement(_common.PanelLabel, null, "px"), /*#__PURE__*/_react["default"].createElement(StyledTrash, {
    isEditing: isEditing
  }, /*#__PURE__*/_react["default"].createElement(_common.Icons.Trash, {
    onClick: onRemove,
    height: "16px"
  }))));
};
function insertStop(stops) {
  var newStops = null;
  var i = 0;
  while (!newStops && i < stops.length) {
    if (stops[i][0] + 1 < stops[i + 1][0]) {
      var st = stops[i][0] + 1;
      var value = (stops[i][1] + stops[i + 1][1]) / 2;
      newStops = [].concat((0, _toConsumableArray2["default"])(stops.slice(0, i + 1)), [[st, value]], (0, _toConsumableArray2["default"])(stops.slice(i + 1)));
    } else {
      i++;
    }
  }
  if (!newStops) {
    newStops = [].concat((0, _toConsumableArray2["default"])(stops.slice(0, i)), [[stops[i][0], (stops[i][1] + stops[i + 1][1]) / 2]], (0, _toConsumableArray2["default"])(stops.slice(i)));
  }
  return newStops;
}
var VisConfigByZoomInputContainer = _styledComponents["default"].div(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: ", ";\n  margin: 8px 8px 12px 8px;\n\n  .bottom-action {\n    margin-top: 8px;\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n  }\n\n  .bottom-action.editing {\n    justify-content: space-between;\n  }\n"])), function (props) {
  return props.isEditing ? props.theme.AZURE950 : 'transparent';
});
var VisConfigByZoomInput = function VisConfigByZoomInput(_ref5) {
  var _ref5$config = _ref5.config,
    config = _ref5$config === void 0 ? {} : _ref5$config,
    property = _ref5.property,
    onChange = _ref5.onChange;
  var _useState = (0, _react.useState)(config.stops || []),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    stopsState = _useState2[0],
    setStops = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    isSorting = _useState4[0],
    toggleSorting = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    isEditing = _useState6[0],
    toggleEditing = _useState6[1];
  var onConfirm = (0, _react.useCallback)(function () {
    onChange((0, _defineProperty2["default"])({}, property, _objectSpread(_objectSpread({}, config), {}, {
      stops: stopsState
    })));
    toggleEditing(false);
  }, [property, config, stopsState, onChange, toggleEditing]);
  var addStop = (0, _react.useCallback)(function () {
    return setStops(insertStop(stopsState));
  }, [setStops, stopsState]);
  var removeStop = (0, _react.useCallback)(function (i) {
    return setStops([].concat((0, _toConsumableArray2["default"])(stopsState.slice(0, i)), (0, _toConsumableArray2["default"])(stopsState.slice(i + 1))));
  }, [setStops, stopsState]);
  var onSortEnd = (0, _react.useCallback)(function (_ref6) {
    var oldIndex = _ref6.oldIndex,
      newIndex = _ref6.newIndex;
    var newStopsState = (0, _commonUtils.arrayMove)(stopsState, oldIndex, newIndex);
    setStops(newStopsState);
    toggleSorting(false);
  }, [stopsState, setStops, toggleSorting]);
  var onSortStart = (0, _react.useCallback)(function () {
    toggleSorting(true);
  }, [toggleSorting]);
  return /*#__PURE__*/_react["default"].createElement(VisConfigByZoomInputContainer, {
    isEditing: isEditing
  }, /*#__PURE__*/_react["default"].createElement(SortableContainer, {
    className: "custom-palette-container",
    onSortEnd: onSortEnd,
    onSortStart: onSortStart,
    lockAxis: "y",
    helperClass: "sorting-colors",
    useDragHandle: true
  }, stopsState.map(function (stop, idx) {
    return /*#__PURE__*/_react["default"].createElement(InputRow, {
      isEditing: isEditing,
      key: "input-".concat(idx),
      idx: idx,
      stop: stop[0],
      value: stop[1],
      isSorting: isSorting,
      onChange: function onChange(v) {
        return setStops(Object.assign((0, _toConsumableArray2["default"])(stopsState || []), (0, _defineProperty2["default"])({}, idx, v)));
      },
      onRemove: function onRemove() {
        return removeStop(idx);
      }
    });
  })), isEditing ? /*#__PURE__*/_react["default"].createElement("div", {
    className: "bottom-action editing"
  }, /*#__PURE__*/_react["default"].createElement(_common.Button, {
    secondary: true,
    onClick: addStop,
    small: true
  }, /*#__PURE__*/_react["default"].createElement(_common.Icons.Add, {
    height: "16px"
  }), " Add Stop"), /*#__PURE__*/_react["default"].createElement(_common.Button, {
    onClick: onConfirm,
    small: true
  }, "Confirm")) : /*#__PURE__*/_react["default"].createElement("div", {
    className: "bottom-action"
  }, /*#__PURE__*/_react["default"].createElement(_common.Button, {
    onClick: function onClick() {
      return toggleEditing(true);
    },
    small: true
  }, "Edit")));
};
var _default = exports["default"] = VisConfigByZoomInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,