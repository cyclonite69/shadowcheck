"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _commonUtils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/common-utils/src");
var _columnSelector = _interopRequireDefault(require("./column-selector"));
var _styledComponents = require("../../common/styled-components");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 * only provide suggested field pairs if there is a match,
 * otherwise the user can select a suggested field pair that will create invalid columns and a hard crash
 */
function getValidFieldPairsSuggestionsForColumn(enhancedFieldPairs, columnPairs, columnKey) {
  if (enhancedFieldPairs && columnPairs !== null && columnPairs !== void 0 && columnPairs[columnKey]) {
    var columnPair = columnPairs[columnKey];
    var matchingFieldPairs = enhancedFieldPairs.filter(function (_ref) {
      var pair = _ref.pair;
      return (0, _commonUtils.toArray)(columnPair.fieldPairKey).some(function (fieldPairKey) {
        return Object.prototype.hasOwnProperty.call(pair, fieldPairKey);
      });
    });
    return matchingFieldPairs.length > 0 ? matchingFieldPairs : null;
  }
  return null;
}
LayerColumnConfigFactory.deps = [_columnSelector["default"]];
function LayerColumnConfigFactory(ColumnSelector) {
  var LayerColumnConfig = function LayerColumnConfig(_ref2) {
    var columnPairs = _ref2.columnPairs,
      fieldPairs = _ref2.fieldPairs,
      columns = _ref2.columns,
      columnLabels = _ref2.columnLabels,
      fields = _ref2.fields,
      updateLayerConfig = _ref2.updateLayerConfig,
      assignColumn = _ref2.assignColumn,
      assignColumnPairs = _ref2.assignColumnPairs,
      isActive = _ref2.isActive;
    var enhancedFieldPairs = (0, _react.useMemo)(function () {
      return columnPairs && fieldPairs ? fieldPairs.map(function (fp) {
        return {
          name: fp.defaultName,
          type: 'point',
          pair: fp.pair
        };
      }) : null;
    }, [columnPairs, fieldPairs]);
    var onUpdateColumn = (0, _react.useCallback)(function (key, value) {
      var assignedColumns = value && value.pair && columnPairs ? assignColumnPairs(key, value.pair) : assignColumn(key, value);
      updateLayerConfig({
        columns: assignedColumns
      });
    }, [updateLayerConfig, columnPairs, assignColumnPairs, assignColumn]);
    if (!Object.keys(columns).length) {
      // don't render if columns is empty
      return /*#__PURE__*/_react["default"].createElement("div", null);
    }
    return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement("div", {
      className: "layer-config__column"
    }, Object.keys(columns).map(function (key) {
      return /*#__PURE__*/_react["default"].createElement(ColumnSelector, {
        column: columns[key],
        columns: columns,
        label: columnLabels && columnLabels[key] || key,
        key: key,
        allFields: fields,
        fieldPairs: getValidFieldPairsSuggestionsForColumn(enhancedFieldPairs, columnPairs, key),
        onSelect: function onSelect(val) {
          return onUpdateColumn(key, val);
        },
        isActive: isActive
      });
    }))));
  };
  return LayerColumnConfig;
}
var _default = exports["default"] = LayerColumnConfigFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfY29tbW9uVXRpbHMiLCJfY29sdW1uU2VsZWN0b3IiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N0eWxlZENvbXBvbmVudHMiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJnZXRWYWxpZEZpZWxkUGFpcnNTdWdnZXN0aW9uc0ZvckNvbHVtbiIsImVuaGFuY2VkRmllbGRQYWlycyIsImNvbHVtblBhaXJzIiwiY29sdW1uS2V5IiwiY29sdW1uUGFpciIsIm1hdGNoaW5nRmllbGRQYWlycyIsImZpbHRlciIsIl9yZWYiLCJwYWlyIiwidG9BcnJheSIsImZpZWxkUGFpcktleSIsInNvbWUiLCJwcm90b3R5cGUiLCJsZW5ndGgiLCJMYXllckNvbHVtbkNvbmZpZ0ZhY3RvcnkiLCJkZXBzIiwiQ29sdW1uU2VsZWN0b3IiLCJMYXllckNvbHVtbkNvbmZpZyIsIl9yZWYyIiwiZmllbGRQYWlycyIsImNvbHVtbnMiLCJjb2x1bW5MYWJlbHMiLCJmaWVsZHMiLCJ1cGRhdGVMYXllckNvbmZpZyIsImFzc2lnbkNvbHVtbiIsImFzc2lnbkNvbHVtblBhaXJzIiwiaXNBY3RpdmUiLCJ1c2VNZW1vIiwibWFwIiwiZnAiLCJuYW1lIiwiZGVmYXVsdE5hbWUiLCJ0eXBlIiwib25VcGRhdGVDb2x1bW4iLCJ1c2VDYWxsYmFjayIsImtleSIsInZhbHVlIiwiYXNzaWduZWRDb2x1bW5zIiwia2V5cyIsImNyZWF0ZUVsZW1lbnQiLCJTaWRlUGFuZWxTZWN0aW9uIiwiY2xhc3NOYW1lIiwiY29sdW1uIiwibGFiZWwiLCJhbGxGaWVsZHMiLCJvblNlbGVjdCIsInZhbCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL2xheWVyLWNvbHVtbi1jb25maWcudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7TGF5ZXJCYXNlQ29uZmlnfSBmcm9tICdAa2VwbGVyLmdsL2xheWVycyc7XG5pbXBvcnQge1xuICBGaWVsZFBhaXIsXG4gIENvbHVtblBhaXJzLFxuICBMYXllckNvbHVtbnMsXG4gIENvbHVtbkxhYmVscyxcbiAgRW5oYW5jZWRGaWVsZFBhaXJcbn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge3RvQXJyYXl9IGZyb20gJ0BrZXBsZXIuZ2wvY29tbW9uLXV0aWxzJztcblxuaW1wb3J0IENvbHVtblNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL2NvbHVtbi1zZWxlY3Rvcic7XG5pbXBvcnQge01pbmltYWxGaWVsZH0gZnJvbSAnLi4vLi4vY29tbW9uL2ZpZWxkLXNlbGVjdG9yJztcbmltcG9ydCB7U2lkZVBhbmVsU2VjdGlvbn0gZnJvbSAnLi4vLi4vY29tbW9uL3N0eWxlZC1jb21wb25lbnRzJztcblxuZXhwb3J0IHR5cGUgTGF5ZXJDb2x1bW5Db25maWdQcm9wczxGaWVsZE9wdGlvbiBleHRlbmRzIE1pbmltYWxGaWVsZD4gPSB7XG4gIGNvbHVtbnM6IExheWVyQ29sdW1ucztcbiAgZmllbGRzOiBGaWVsZE9wdGlvbltdO1xuICBhc3NpZ25Db2x1bW5QYWlyczogKGtleTogc3RyaW5nLCBwYWlyOiBGaWVsZFBhaXIpID0+IExheWVyQ29sdW1ucztcbiAgYXNzaWduQ29sdW1uOiAoa2V5OiBzdHJpbmcsIGZpZWxkOiBGaWVsZE9wdGlvbikgPT4gTGF5ZXJDb2x1bW5zO1xuICB1cGRhdGVMYXllckNvbmZpZzogKG5ld0NvbmZpZzogUGFydGlhbDxMYXllckJhc2VDb25maWc+KSA9PiB2b2lkO1xuICB1cGRhdGVMYXllclR5cGU/OiAobmV3VHlwZTogc3RyaW5nKSA9PiB2b2lkO1xuICBjb2x1bW5QYWlycz86IENvbHVtblBhaXJzIHwgbnVsbDtcbiAgZmllbGRQYWlycz86IEZpZWxkUGFpcltdO1xuICBjb2x1bW5MYWJlbHM6IENvbHVtbkxhYmVscyB8IG51bGw7XG4gIGlzQWN0aXZlOiBib29sZWFuO1xufTtcblxuLyoqXG4gKiBvbmx5IHByb3ZpZGUgc3VnZ2VzdGVkIGZpZWxkIHBhaXJzIGlmIHRoZXJlIGlzIGEgbWF0Y2gsXG4gKiBvdGhlcndpc2UgdGhlIHVzZXIgY2FuIHNlbGVjdCBhIHN1Z2dlc3RlZCBmaWVsZCBwYWlyIHRoYXQgd2lsbCBjcmVhdGUgaW52YWxpZCBjb2x1bW5zIGFuZCBhIGhhcmQgY3Jhc2hcbiAqL1xuZnVuY3Rpb24gZ2V0VmFsaWRGaWVsZFBhaXJzU3VnZ2VzdGlvbnNGb3JDb2x1bW4oXG4gIGVuaGFuY2VkRmllbGRQYWlyczogRW5oYW5jZWRGaWVsZFBhaXJbXSB8IG51bGwsXG4gIGNvbHVtblBhaXJzOiBDb2x1bW5QYWlycyB8IG51bGwgfCB1bmRlZmluZWQsXG4gIGNvbHVtbktleTogc3RyaW5nXG4pOiBFbmhhbmNlZEZpZWxkUGFpcltdIHwgbnVsbCB7XG4gIGlmIChlbmhhbmNlZEZpZWxkUGFpcnMgJiYgY29sdW1uUGFpcnM/Lltjb2x1bW5LZXldKSB7XG4gICAgY29uc3QgY29sdW1uUGFpciA9IGNvbHVtblBhaXJzW2NvbHVtbktleV07XG4gICAgY29uc3QgbWF0Y2hpbmdGaWVsZFBhaXJzID0gZW5oYW5jZWRGaWVsZFBhaXJzLmZpbHRlcigoe3BhaXJ9KSA9PiB7XG4gICAgICByZXR1cm4gdG9BcnJheShjb2x1bW5QYWlyLmZpZWxkUGFpcktleSkuc29tZShmaWVsZFBhaXJLZXkgPT5cbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhaXIsIGZpZWxkUGFpcktleSlcbiAgICAgICk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hdGNoaW5nRmllbGRQYWlycy5sZW5ndGggPiAwID8gbWF0Y2hpbmdGaWVsZFBhaXJzIDogbnVsbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuTGF5ZXJDb2x1bW5Db25maWdGYWN0b3J5LmRlcHMgPSBbQ29sdW1uU2VsZWN0b3JGYWN0b3J5XTtcblxuZnVuY3Rpb24gTGF5ZXJDb2x1bW5Db25maWdGYWN0b3J5KENvbHVtblNlbGVjdG9yOiBSZXR1cm5UeXBlPHR5cGVvZiBDb2x1bW5TZWxlY3RvckZhY3Rvcnk+KSB7XG4gIGNvbnN0IExheWVyQ29sdW1uQ29uZmlnOiBSZWFjdC5GQzxMYXllckNvbHVtbkNvbmZpZ1Byb3BzPE1pbmltYWxGaWVsZCAmIHtmaWVsZElkeDogbnVtYmVyfT4+ID0gKHtcbiAgICBjb2x1bW5QYWlycyxcbiAgICBmaWVsZFBhaXJzLFxuICAgIGNvbHVtbnMsXG4gICAgY29sdW1uTGFiZWxzLFxuICAgIGZpZWxkcyxcbiAgICB1cGRhdGVMYXllckNvbmZpZyxcbiAgICBhc3NpZ25Db2x1bW4sXG4gICAgYXNzaWduQ29sdW1uUGFpcnMsXG4gICAgaXNBY3RpdmVcbiAgfSkgPT4ge1xuICAgIGNvbnN0IGVuaGFuY2VkRmllbGRQYWlyczogRW5oYW5jZWRGaWVsZFBhaXJbXSB8IG51bGwgPSB1c2VNZW1vKFxuICAgICAgKCkgPT5cbiAgICAgICAgY29sdW1uUGFpcnMgJiYgZmllbGRQYWlyc1xuICAgICAgICAgID8gZmllbGRQYWlycy5tYXAoZnAgPT4gKHtcbiAgICAgICAgICAgICAgbmFtZTogZnAuZGVmYXVsdE5hbWUsXG4gICAgICAgICAgICAgIHR5cGU6ICdwb2ludCcsXG4gICAgICAgICAgICAgIHBhaXI6IGZwLnBhaXJcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIDogbnVsbCxcbiAgICAgIFtjb2x1bW5QYWlycywgZmllbGRQYWlyc11cbiAgICApO1xuXG4gICAgY29uc3Qgb25VcGRhdGVDb2x1bW4gPSB1c2VDYWxsYmFjayhcbiAgICAgIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IGFzc2lnbmVkQ29sdW1ucyA9XG4gICAgICAgICAgdmFsdWUgJiYgdmFsdWUucGFpciAmJiBjb2x1bW5QYWlyc1xuICAgICAgICAgICAgPyBhc3NpZ25Db2x1bW5QYWlycyhrZXksIHZhbHVlLnBhaXIpXG4gICAgICAgICAgICA6IGFzc2lnbkNvbHVtbihrZXksIHZhbHVlKTtcblxuICAgICAgICB1cGRhdGVMYXllckNvbmZpZyh7Y29sdW1uczogYXNzaWduZWRDb2x1bW5zfSk7XG4gICAgICB9LFxuICAgICAgW3VwZGF0ZUxheWVyQ29uZmlnLCBjb2x1bW5QYWlycywgYXNzaWduQ29sdW1uUGFpcnMsIGFzc2lnbkNvbHVtbl1cbiAgICApO1xuXG4gICAgaWYgKCFPYmplY3Qua2V5cyhjb2x1bW5zKS5sZW5ndGgpIHtcbiAgICAgIC8vIGRvbid0IHJlbmRlciBpZiBjb2x1bW5zIGlzIGVtcHR5XG4gICAgICByZXR1cm4gPGRpdiAvPjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPFNpZGVQYW5lbFNlY3Rpb24+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsYXllci1jb25maWdfX2NvbHVtblwiPlxuICAgICAgICAgICAge09iamVjdC5rZXlzKGNvbHVtbnMpLm1hcChrZXkgPT4gKFxuICAgICAgICAgICAgICA8Q29sdW1uU2VsZWN0b3JcbiAgICAgICAgICAgICAgICBjb2x1bW49e2NvbHVtbnNba2V5XX1cbiAgICAgICAgICAgICAgICBjb2x1bW5zPXtjb2x1bW5zfVxuICAgICAgICAgICAgICAgIGxhYmVsPXsoY29sdW1uTGFiZWxzICYmIGNvbHVtbkxhYmVsc1trZXldKSB8fCBrZXl9XG4gICAgICAgICAgICAgICAga2V5PXtrZXl9XG4gICAgICAgICAgICAgICAgYWxsRmllbGRzPXtmaWVsZHN9XG4gICAgICAgICAgICAgICAgZmllbGRQYWlycz17Z2V0VmFsaWRGaWVsZFBhaXJzU3VnZ2VzdGlvbnNGb3JDb2x1bW4oXG4gICAgICAgICAgICAgICAgICBlbmhhbmNlZEZpZWxkUGFpcnMsXG4gICAgICAgICAgICAgICAgICBjb2x1bW5QYWlycyxcbiAgICAgICAgICAgICAgICAgIGtleVxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgb25TZWxlY3Q9e3ZhbCA9PiBvblVwZGF0ZUNvbHVtbihrZXksIHZhbCl9XG4gICAgICAgICAgICAgICAgaXNBY3RpdmU9e2lzQWN0aXZlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU2lkZVBhbmVsU2VjdGlvbj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIExheWVyQ29sdW1uQ29uZmlnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBMYXllckNvbHVtbkNvbmZpZ0ZhY3Rvcnk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBVUEsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsZUFBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBRUEsSUFBQUksaUJBQUEsR0FBQUosT0FBQTtBQUFnRSxTQUFBSyx5QkFBQUMsQ0FBQTtFQUFBLHlCQUFBQyxPQUFBO0VBQUEsSUFBQUMsQ0FBQSxPQUFBRCxPQUFBO0lBQUFFLENBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBO0lBQUEsT0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUE7RUFBQSxHQUFBRixDQUFBO0FBQUE7QUFBQSxTQUFBUCx3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