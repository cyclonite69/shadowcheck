"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = require("../common/styled-components");
var _mapStyleSelector = _interopRequireDefault(require("./map-style-panel/map-style-selector"));
var _mapLayerSelector = _interopRequireDefault(require("./map-style-panel/map-layer-selector"));
var _panelTitle = _interopRequireDefault(require("../side-panel/panel-title"));
var _icons = require("../common/icons");
var _reactIntl = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-intl");
var _localization = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

MapManagerFactory.deps = [_mapStyleSelector["default"], _mapLayerSelector["default"], _panelTitle["default"]];
function MapManagerFactory(MapStyleSelector, LayerGroupSelector, PanelTitle) {
  var MapManager = function MapManager(_ref) {
    var mapStyle = _ref.mapStyle,
      intl = _ref.intl,
      mapStyleActions = _ref.mapStyleActions,
      showAddMapStyleModal = _ref.showAddMapStyleModal,
      panelMetadata = _ref.panelMetadata;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isSelecting = _useState2[0],
      setIsSelecting = _useState2[1];
    var mapStyleChange = mapStyleActions.mapStyleChange,
      removeCustomMapStyle = mapStyleActions.removeCustomMapStyle;
    var currentStyle = mapStyle.mapStyles[mapStyle.styleType] || {};
    var editableLayers = currentStyle.layerGroups || [];
    var toggleSelecting = (0, _react.useCallback)(function () {
      setIsSelecting(function (prev) {
        return !prev;
      });
    }, [setIsSelecting]);
    var mapStyles = mapStyle.mapStyles;
    var selectStyle = (0, _react.useCallback)(function (val) {
      mapStyleChange(val);
      setIsSelecting(false);
    }, [mapStyleChange, setIsSelecting]);
    var customMapStylesActions = (0, _react.useMemo)(function () {
      var actionsPerCustomStyle = {};
      Object.values(mapStyles).filter(function (mapStyle) {
        return Boolean(mapStyle.custom);
      }).forEach(function (_ref2) {
        var id = _ref2.id;
        actionsPerCustomStyle[id] = [{
          id: "remove-map-style-".concat(id),
          IconComponent: _icons.Trash,
          tooltip: 'tooltip.removeBaseMapStyle',
          onClick: function onClick() {
            return removeCustomMapStyle({
              id: id
            });
          }
        }];
      });
      return actionsPerCustomStyle;
    }, [mapStyles, removeCustomMapStyle]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "map-style-panel"
    }, /*#__PURE__*/_react["default"].createElement(PanelTitle, {
      className: "map-manager-title",
      title: intl.formatMessage({
        id: panelMetadata.label
      })
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.Button, {
      className: "add-map-style-button",
      onClick: showAddMapStyleModal
    }, /*#__PURE__*/_react["default"].createElement(_icons.Add, {
      height: "12px"
    }), /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'mapManager.addMapStyle'
    }))), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(MapStyleSelector, {
      mapStyle: mapStyle,
      isSelecting: isSelecting,
      onChange: selectStyle,
      toggleActive: toggleSelecting,
      customMapStylesActions: customMapStylesActions
    }), editableLayers.length ? /*#__PURE__*/_react["default"].createElement(LayerGroupSelector, {
      layers: mapStyle.visibleLayerGroups,
      editableLayers: editableLayers,
      topLayers: mapStyle.topLayerGroups,
      onChange: mapStyleActions.mapConfigChange,
      threeDBuildingColor: mapStyle.threeDBuildingColor,
      on3dBuildingColorChange: mapStyleActions.set3dBuildingColor,
      backgroundColor: mapStyle.backgroundColor,
      onBackgroundColorChange: mapStyleActions.setBackgroundColor
    }) : null));
  };
  return (0, _reactIntl.injectIntl)(MapManager);
}
var _default = exports["default"] = MapManagerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,