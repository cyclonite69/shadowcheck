"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactIntl = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-intl");
var _interactionPanel = _interopRequireDefault(require("./interaction-panel/interaction-panel"));
var _panelTitle = _interopRequireDefault(require("./panel-title"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

InteractionManagerFactory.deps = [_interactionPanel["default"], _panelTitle["default"]];
function InteractionManagerFactory(InteractionPanel, PanelTitle) {
  var InteractionManager = function InteractionManager(_ref) {
    var interactionConfig = _ref.interactionConfig,
      datasets = _ref.datasets,
      visStateActions = _ref.visStateActions,
      panelMetadata = _ref.panelMetadata;
    var onConfigChange = visStateActions.interactionConfigChange,
      setColumnDisplayFormat = visStateActions.setColumnDisplayFormat;
    var intl = (0, _reactIntl.useIntl)();
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "interaction-manager"
    }, /*#__PURE__*/_react["default"].createElement(PanelTitle, {
      className: "interaction-manager-title",
      title: intl.formatMessage({
        id: panelMetadata.label
      })
    }), Object.keys(interactionConfig).map(function (key) {
      return /*#__PURE__*/_react["default"].createElement(InteractionPanel, {
        datasets: datasets,
        config: interactionConfig[key],
        key: key,
        onConfigChange: onConfigChange,
        setColumnDisplayFormat: setColumnDisplayFormat
      });
    }));
  };
  return InteractionManager;
}
var _default = exports["default"] = InteractionManagerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdEludGwiLCJfaW50ZXJhY3Rpb25QYW5lbCIsIl9wYW5lbFRpdGxlIiwiSW50ZXJhY3Rpb25NYW5hZ2VyRmFjdG9yeSIsImRlcHMiLCJJbnRlcmFjdGlvblBhbmVsIiwiUGFuZWxUaXRsZSIsIkludGVyYWN0aW9uTWFuYWdlciIsIl9yZWYiLCJpbnRlcmFjdGlvbkNvbmZpZyIsImRhdGFzZXRzIiwidmlzU3RhdGVBY3Rpb25zIiwicGFuZWxNZXRhZGF0YSIsIm9uQ29uZmlnQ2hhbmdlIiwiaW50ZXJhY3Rpb25Db25maWdDaGFuZ2UiLCJzZXRDb2x1bW5EaXNwbGF5Rm9ybWF0IiwiaW50bCIsInVzZUludGwiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwidGl0bGUiLCJmb3JtYXRNZXNzYWdlIiwiaWQiLCJsYWJlbCIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJrZXkiLCJjb25maWciLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvc2lkZS1wYW5lbC9pbnRlcmFjdGlvbi1tYW5hZ2VyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHt1c2VJbnRsfSBmcm9tICdyZWFjdC1pbnRsJztcblxuaW1wb3J0IHtJbnRlcmFjdGlvbkNvbmZpZ30gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge1Zpc1N0YXRlQWN0aW9uc30gZnJvbSAnQGtlcGxlci5nbC9hY3Rpb25zJztcbmltcG9ydCB7RGF0YXNldHN9IGZyb20gJ0BrZXBsZXIuZ2wvdGFibGUnO1xuXG5pbXBvcnQgSW50ZXJhY3Rpb25QYW5lbEZhY3RvcnkgZnJvbSAnLi9pbnRlcmFjdGlvbi1wYW5lbC9pbnRlcmFjdGlvbi1wYW5lbCc7XG5pbXBvcnQgUGFuZWxUaXRsZUZhY3RvcnkgZnJvbSAnLi9wYW5lbC10aXRsZSc7XG5cbmltcG9ydCB7UGFuZWxNZXRhfSBmcm9tICcuL2NvbW1vbi90eXBlcyc7XG5cbnR5cGUgSW50ZXJhY3Rpb25NYW5hZ2VyUHJvcHMgPSB7XG4gIGludGVyYWN0aW9uQ29uZmlnOiBJbnRlcmFjdGlvbkNvbmZpZztcbiAgZGF0YXNldHM6IERhdGFzZXRzO1xuICB2aXNTdGF0ZUFjdGlvbnM6IHR5cGVvZiBWaXNTdGF0ZUFjdGlvbnM7XG4gIHBhbmVsTWV0YWRhdGE6IFBhbmVsTWV0YTtcbn07XG5cbkludGVyYWN0aW9uTWFuYWdlckZhY3RvcnkuZGVwcyA9IFtJbnRlcmFjdGlvblBhbmVsRmFjdG9yeSwgUGFuZWxUaXRsZUZhY3RvcnldO1xuXG5mdW5jdGlvbiBJbnRlcmFjdGlvbk1hbmFnZXJGYWN0b3J5KFxuICBJbnRlcmFjdGlvblBhbmVsOiBSZXR1cm5UeXBlPHR5cGVvZiBJbnRlcmFjdGlvblBhbmVsRmFjdG9yeT4sXG4gIFBhbmVsVGl0bGU6IFJldHVyblR5cGU8dHlwZW9mIFBhbmVsVGl0bGVGYWN0b3J5PlxuKSB7XG4gIGNvbnN0IEludGVyYWN0aW9uTWFuYWdlcjogUmVhY3QuRkM8SW50ZXJhY3Rpb25NYW5hZ2VyUHJvcHM+ID0gKHtcbiAgICBpbnRlcmFjdGlvbkNvbmZpZyxcbiAgICBkYXRhc2V0cyxcbiAgICB2aXNTdGF0ZUFjdGlvbnMsXG4gICAgcGFuZWxNZXRhZGF0YVxuICB9KSA9PiB7XG4gICAgY29uc3Qge2ludGVyYWN0aW9uQ29uZmlnQ2hhbmdlOiBvbkNvbmZpZ0NoYW5nZSwgc2V0Q29sdW1uRGlzcGxheUZvcm1hdH0gPSB2aXNTdGF0ZUFjdGlvbnM7XG4gICAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnRlcmFjdGlvbi1tYW5hZ2VyXCI+XG4gICAgICAgIDxQYW5lbFRpdGxlXG4gICAgICAgICAgY2xhc3NOYW1lPVwiaW50ZXJhY3Rpb24tbWFuYWdlci10aXRsZVwiXG4gICAgICAgICAgdGl0bGU9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IHBhbmVsTWV0YWRhdGEubGFiZWx9KX1cbiAgICAgICAgLz5cbiAgICAgICAge09iamVjdC5rZXlzKGludGVyYWN0aW9uQ29uZmlnKS5tYXAoa2V5ID0+IChcbiAgICAgICAgICA8SW50ZXJhY3Rpb25QYW5lbFxuICAgICAgICAgICAgZGF0YXNldHM9e2RhdGFzZXRzfVxuICAgICAgICAgICAgY29uZmlnPXtpbnRlcmFjdGlvbkNvbmZpZ1trZXldfVxuICAgICAgICAgICAga2V5PXtrZXl9XG4gICAgICAgICAgICBvbkNvbmZpZ0NoYW5nZT17b25Db25maWdDaGFuZ2V9XG4gICAgICAgICAgICBzZXRDb2x1bW5EaXNwbGF5Rm9ybWF0PXtzZXRDb2x1bW5EaXNwbGF5Rm9ybWF0fVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gSW50ZXJhY3Rpb25NYW5hZ2VyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmFjdGlvbk1hbmFnZXJGYWN0b3J5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRCxPQUFBO0FBTUEsSUFBQUUsaUJBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFdBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQVhBO0FBQ0E7O0FBcUJBSSx5QkFBeUIsQ0FBQ0MsSUFBSSxHQUFHLENBQUNILGlCQUFBLFdBQXVCLEVBQUVDLFdBQUEsV0FBaUIsQ0FBQztBQUU3RSxTQUFTQyx5QkFBeUJBLENBQ2hDRSxnQkFBNEQsRUFDNURDLFVBQWdELEVBQ2hEO0VBQ0EsSUFBTUMsa0JBQXFELEdBQUcsU0FBeERBLGtCQUFxREEsQ0FBQUMsSUFBQSxFQUtyRDtJQUFBLElBSkpDLGlCQUFpQixHQUFBRCxJQUFBLENBQWpCQyxpQkFBaUI7TUFDakJDLFFBQVEsR0FBQUYsSUFBQSxDQUFSRSxRQUFRO01BQ1JDLGVBQWUsR0FBQUgsSUFBQSxDQUFmRyxlQUFlO01BQ2ZDLGFBQWEsR0FBQUosSUFBQSxDQUFiSSxhQUFhO0lBRWIsSUFBZ0NDLGNBQWMsR0FBNEJGLGVBQWUsQ0FBbEZHLHVCQUF1QjtNQUFrQkMsc0JBQXNCLEdBQUlKLGVBQWUsQ0FBekNJLHNCQUFzQjtJQUN0RSxJQUFNQyxJQUFJLEdBQUcsSUFBQWhCLFVBQUEsQ0FBQWlCLE9BQU8sRUFBQyxDQUFDO0lBQ3RCLG9CQUNFcEIsTUFBQSxZQUFBcUIsYUFBQTtNQUFLQyxTQUFTLEVBQUM7SUFBcUIsZ0JBQ2xDdEIsTUFBQSxZQUFBcUIsYUFBQSxDQUFDWixVQUFVO01BQ1RhLFNBQVMsRUFBQywyQkFBMkI7TUFDckNDLEtBQUssRUFBRUosSUFBSSxDQUFDSyxhQUFhLENBQUM7UUFBQ0MsRUFBRSxFQUFFVixhQUFhLENBQUNXO01BQUssQ0FBQztJQUFFLENBQ3RELENBQUMsRUFDREMsTUFBTSxDQUFDQyxJQUFJLENBQUNoQixpQkFBaUIsQ0FBQyxDQUFDaUIsR0FBRyxDQUFDLFVBQUFDLEdBQUc7TUFBQSxvQkFDckM5QixNQUFBLFlBQUFxQixhQUFBLENBQUNiLGdCQUFnQjtRQUNmSyxRQUFRLEVBQUVBLFFBQVM7UUFDbkJrQixNQUFNLEVBQUVuQixpQkFBaUIsQ0FBQ2tCLEdBQUcsQ0FBRTtRQUMvQkEsR0FBRyxFQUFFQSxHQUFJO1FBQ1RkLGNBQWMsRUFBRUEsY0FBZTtRQUMvQkUsc0JBQXNCLEVBQUVBO01BQXVCLENBQ2hELENBQUM7SUFBQSxDQUNILENBQ0UsQ0FBQztFQUVWLENBQUM7RUFFRCxPQUFPUixrQkFBa0I7QUFDM0I7QUFBQyxJQUFBc0IsUUFBQSxHQUFBQyxPQUFBLGNBRWMzQix5QkFBeUIiLCJpZ25vcmVMaXN0IjpbXX0=