"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _styledComponents2 = require("../common/styled-components");
var _timeRangeSlider = _interopRequireDefault(require("../common/time-range-slider"));
var _floatingTimeDisplay = _interopRequireDefault(require("../common/animation-control/floating-time-display"));
var _timeRangeFilter = require("./time-range-filter");
var _timeWidgetTop = _interopRequireDefault(require("./time-widget-top"));
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
var TimeBottomWidgetInner = (0, _styledComponents["default"])(_styledComponents2.BottomWidgetInner)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 6px 32px 24px 32px;\n"])));
TimeWidgetFactory.deps = [_timeRangeSlider["default"], _floatingTimeDisplay["default"], _timeWidgetTop["default"]];
function TimeWidgetFactory(TimeRangeSlider, FloatingTimeDisplay, TimeWidgetTop) {
  var TimeWidget = function TimeWidget(_ref) {
    var datasets = _ref.datasets,
      filter = _ref.filter,
      layers = _ref.layers,
      index = _ref.index,
      readOnly = _ref.readOnly,
      showTimeDisplay = _ref.showTimeDisplay,
      setFilterAnimationTime = _ref.setFilterAnimationTime,
      onClose = _ref.onClose,
      onToggleMinify = _ref.onToggleMinify,
      resetAnimation = _ref.resetAnimation,
      isAnimatable = _ref.isAnimatable,
      updateAnimationSpeed = _ref.updateAnimationSpeed,
      toggleAnimation = _ref.toggleAnimation,
      setFilterPlot = _ref.setFilterPlot,
      setFilterAnimationWindow = _ref.setFilterAnimationWindow,
      animationConfig = _ref.animationConfig,
      timeline = _ref.timeline;
    var _updateAnimationSpeed = (0, _react.useCallback)(function (speed) {
      return updateAnimationSpeed(index, speed);
    }, [updateAnimationSpeed, index]);
    var _toggleAnimation = (0, _react.useCallback)(function () {
      return toggleAnimation(index);
    }, [toggleAnimation, index]);
    var isMinified = (0, _react.useMemo)(function () {
      return filter.view === _constants.FILTER_VIEW_TYPES.minified;
    }, [filter]);
    var _setFilterAnimationWindow = (0, _react.useCallback)(function (animationWindow) {
      return setFilterAnimationWindow({
        id: filter.id,
        animationWindow: animationWindow
      });
    }, [setFilterAnimationWindow, filter.id]);
    var timeSliderOnChange = (0, _react.useCallback)(function (value) {
      return setFilterAnimationTime(index, 'value', value);
    }, [setFilterAnimationTime, index]);
    var _setFilterPlot = (0, _react.useCallback)(function (newProp, valueIndex) {
      return setFilterPlot(index, newProp, valueIndex);
    }, [index, setFilterPlot]);
    var timeRangeSlideProps = (0, _react.useMemo)(function () {
      return (0, _timeRangeFilter.timeRangeSliderFieldsSelector)(filter, datasets, layers);
    }, [filter, datasets, layers]);
    return /*#__PURE__*/_react["default"].createElement(TimeBottomWidgetInner, {
      className: "bottom-widget--inner"
    }, /*#__PURE__*/_react["default"].createElement(TimeWidgetTop, {
      filter: filter,
      readOnly: readOnly,
      datasets: datasets,
      setFilterPlot: _setFilterPlot,
      index: index,
      onClose: onClose,
      onToggleMinify: onToggleMinify,
      isMinified: isMinified
    }), /*#__PURE__*/_react["default"].createElement(TimeRangeSlider, (0, _extends2["default"])({}, timeRangeSlideProps, {
      onChange: timeSliderOnChange,
      toggleAnimation: _toggleAnimation,
      updateAnimationSpeed: _updateAnimationSpeed,
      setFilterAnimationWindow: _setFilterAnimationWindow,
      hideTimeTitle: showTimeDisplay,
      resetAnimation: resetAnimation,
      isAnimatable: isAnimatable,
      setFilterPlot: _setFilterPlot,
      animationConfig: animationConfig,
      isMinified: isMinified,
      timeline: timeline
    })), showTimeDisplay ? /*#__PURE__*/_react["default"].createElement(FloatingTimeDisplay, {
      currentTime: filter.value,
      defaultTimeFormat: filter.defaultTimeFormat,
      timeFormat: filter.timeFormat,
      timezone: filter.timezone
    }) : null);
  };
  return /*#__PURE__*/_react["default"].memo(TimeWidget);
}
var _default = exports["default"] = TimeWidgetFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,