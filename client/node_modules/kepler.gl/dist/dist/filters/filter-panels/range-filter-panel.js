"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _rangeFilter = _interopRequireDefault(require("../range-filter"));
var _filterPanelWithFieldSelect = _interopRequireDefault(require("./filter-panel-with-field-select"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

RangeFilterPanelFactory.deps = [_filterPanelWithFieldSelect["default"], _rangeFilter["default"]];
function RangeFilterPanelFactory(FieldPanelWithFieldSelect, RangeFilterComponent) {
  var RangeFilterPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var idx = _ref.idx,
      datasets = _ref.datasets,
      allAvailableFields = _ref.allAvailableFields,
      filter = _ref.filter,
      removeFilter = _ref.removeFilter,
      setFilter = _ref.setFilter,
      setFilterPlot = _ref.setFilterPlot;
    var onSetFilter = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'value', value);
    }, [idx, setFilter]);
    var onSetFilterPlot = (0, _react.useCallback)(function (newProp, valueIndex) {
      return setFilterPlot(idx, newProp, valueIndex);
    }, [idx, setFilterPlot]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "range-filter-panel"
    }, /*#__PURE__*/_react["default"].createElement(FieldPanelWithFieldSelect, {
      allAvailableFields: allAvailableFields,
      datasets: datasets,
      filter: filter,
      idx: idx,
      removeFilter: removeFilter,
      setFilter: setFilter
    }, filter.type && /*#__PURE__*/_react["default"].createElement("div", {
      className: "filter-panel__filter"
    }, /*#__PURE__*/_react["default"].createElement(RangeFilterComponent, {
      filter: filter,
      setFilter: onSetFilter,
      setFilterPlot: onSetFilterPlot
    }))));
  });
  RangeFilterPanel.displayName = 'RangeFilterPanel';
  return RangeFilterPanel;
}
var _default = exports["default"] = RangeFilterPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmFuZ2VGaWx0ZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2ZpbHRlclBhbmVsV2l0aEZpZWxkU2VsZWN0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiUmFuZ2VGaWx0ZXJQYW5lbEZhY3RvcnkiLCJkZXBzIiwiRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdCIsIlJhbmdlRmlsdGVyQ29tcG9uZW50IiwiUmFuZ2VGaWx0ZXJQYW5lbCIsIm1lbW8iLCJfcmVmIiwiaWR4IiwiZGF0YXNldHMiLCJhbGxBdmFpbGFibGVGaWVsZHMiLCJmaWx0ZXIiLCJyZW1vdmVGaWx0ZXIiLCJzZXRGaWx0ZXIiLCJzZXRGaWx0ZXJQbG90Iiwib25TZXRGaWx0ZXIiLCJ1c2VDYWxsYmFjayIsInZhbHVlIiwib25TZXRGaWx0ZXJQbG90IiwibmV3UHJvcCIsInZhbHVlSW5kZXgiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwidHlwZSIsImRpc3BsYXlOYW1lIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ZpbHRlcnMvZmlsdGVyLXBhbmVscy9yYW5nZS1maWx0ZXItcGFuZWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFuZ2VGaWx0ZXJGYWN0b3J5IGZyb20gJy4uL3JhbmdlLWZpbHRlcic7XG5pbXBvcnQge1JhbmdlRmlsdGVyfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCBGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0RmFjdG9yeSBmcm9tICcuL2ZpbHRlci1wYW5lbC13aXRoLWZpZWxkLXNlbGVjdCc7XG5pbXBvcnQge0ZpbHRlclBhbmVsQ29tcG9uZW50fSBmcm9tICcuL3R5cGVzJztcblxuUmFuZ2VGaWx0ZXJQYW5lbEZhY3RvcnkuZGVwcyA9IFtGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0RmFjdG9yeSwgUmFuZ2VGaWx0ZXJGYWN0b3J5XTtcblxuZnVuY3Rpb24gUmFuZ2VGaWx0ZXJQYW5lbEZhY3RvcnkoXG4gIEZpZWxkUGFuZWxXaXRoRmllbGRTZWxlY3Q6IFJldHVyblR5cGU8dHlwZW9mIEZpZWxkUGFuZWxXaXRoRmllbGRTZWxlY3RGYWN0b3J5PixcbiAgUmFuZ2VGaWx0ZXJDb21wb25lbnQ6IFJldHVyblR5cGU8dHlwZW9mIFJhbmdlRmlsdGVyRmFjdG9yeT5cbikge1xuICBjb25zdCBSYW5nZUZpbHRlclBhbmVsOiBGaWx0ZXJQYW5lbENvbXBvbmVudDxSYW5nZUZpbHRlcj4gPSBSZWFjdC5tZW1vKFxuICAgICh7aWR4LCBkYXRhc2V0cywgYWxsQXZhaWxhYmxlRmllbGRzLCBmaWx0ZXIsIHJlbW92ZUZpbHRlciwgc2V0RmlsdGVyLCBzZXRGaWx0ZXJQbG90fSkgPT4ge1xuICAgICAgY29uc3Qgb25TZXRGaWx0ZXIgPSB1c2VDYWxsYmFjayh2YWx1ZSA9PiBzZXRGaWx0ZXIoaWR4LCAndmFsdWUnLCB2YWx1ZSksIFtpZHgsIHNldEZpbHRlcl0pO1xuICAgICAgY29uc3Qgb25TZXRGaWx0ZXJQbG90ID0gdXNlQ2FsbGJhY2soXG4gICAgICAgIChuZXdQcm9wLCB2YWx1ZUluZGV4KSA9PiBzZXRGaWx0ZXJQbG90KGlkeCwgbmV3UHJvcCwgdmFsdWVJbmRleCksXG4gICAgICAgIFtpZHgsIHNldEZpbHRlclBsb3RdXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJhbmdlLWZpbHRlci1wYW5lbFwiPlxuICAgICAgICAgIDxGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0XG4gICAgICAgICAgICBhbGxBdmFpbGFibGVGaWVsZHM9e2FsbEF2YWlsYWJsZUZpZWxkc31cbiAgICAgICAgICAgIGRhdGFzZXRzPXtkYXRhc2V0c31cbiAgICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxuICAgICAgICAgICAgaWR4PXtpZHh9XG4gICAgICAgICAgICByZW1vdmVGaWx0ZXI9e3JlbW92ZUZpbHRlcn1cbiAgICAgICAgICAgIHNldEZpbHRlcj17c2V0RmlsdGVyfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtmaWx0ZXIudHlwZSAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlsdGVyLXBhbmVsX19maWx0ZXJcIj5cbiAgICAgICAgICAgICAgICA8UmFuZ2VGaWx0ZXJDb21wb25lbnRcbiAgICAgICAgICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxuICAgICAgICAgICAgICAgICAgc2V0RmlsdGVyPXtvblNldEZpbHRlcn1cbiAgICAgICAgICAgICAgICAgIHNldEZpbHRlclBsb3Q9e29uU2V0RmlsdGVyUGxvdH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9GaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuICApO1xuXG4gIFJhbmdlRmlsdGVyUGFuZWwuZGlzcGxheU5hbWUgPSAnUmFuZ2VGaWx0ZXJQYW5lbCc7XG5cbiAgcmV0dXJuIFJhbmdlRmlsdGVyUGFuZWw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhbmdlRmlsdGVyUGFuZWxGYWN0b3J5O1xuIl0s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