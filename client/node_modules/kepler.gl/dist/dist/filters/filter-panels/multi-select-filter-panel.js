"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _multiSelectFilter = _interopRequireDefault(require("../multi-select-filter"));
var _filterPanelWithFieldSelect = _interopRequireDefault(require("./filter-panel-with-field-select"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

MultiSelectFilterPanelFactory.deps = [_filterPanelWithFieldSelect["default"], _multiSelectFilter["default"]];
function MultiSelectFilterPanelFactory(FieldPanelWithFieldSelect, MultiSelectFilterComponent) {
  var MultiSelectFilterPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var idx = _ref.idx,
      datasets = _ref.datasets,
      allAvailableFields = _ref.allAvailableFields,
      filter = _ref.filter,
      setFilter = _ref.setFilter,
      removeFilter = _ref.removeFilter;
    var onSetFilter = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'value', value);
    }, [idx, setFilter]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "multi-select-filter-panel"
    }, /*#__PURE__*/_react["default"].createElement(FieldPanelWithFieldSelect, {
      allAvailableFields: allAvailableFields,
      datasets: datasets,
      filter: filter,
      idx: idx,
      removeFilter: removeFilter,
      setFilter: setFilter
    }, filter.type && /*#__PURE__*/_react["default"].createElement("div", {
      className: "filter-panel__filter"
    }, /*#__PURE__*/_react["default"].createElement(MultiSelectFilterComponent, {
      filter: filter,
      setFilter: onSetFilter
    }))));
  });
  MultiSelectFilterPanel.displayName = 'MultiSelectFilterPanel';
  return MultiSelectFilterPanel;
}
var _default = exports["default"] = MultiSelectFilterPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfbXVsdGlTZWxlY3RGaWx0ZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2ZpbHRlclBhbmVsV2l0aEZpZWxkU2VsZWN0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiTXVsdGlTZWxlY3RGaWx0ZXJQYW5lbEZhY3RvcnkiLCJkZXBzIiwiRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdCIsIk11bHRpU2VsZWN0RmlsdGVyQ29tcG9uZW50IiwiTXVsdGlTZWxlY3RGaWx0ZXJQYW5lbCIsIm1lbW8iLCJfcmVmIiwiaWR4IiwiZGF0YXNldHMiLCJhbGxBdmFpbGFibGVGaWVsZHMiLCJmaWx0ZXIiLCJzZXRGaWx0ZXIiLCJyZW1vdmVGaWx0ZXIiLCJvblNldEZpbHRlciIsInVzZUNhbGxiYWNrIiwidmFsdWUiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwidHlwZSIsImRpc3BsYXlOYW1lIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ZpbHRlcnMvZmlsdGVyLXBhbmVscy9tdWx0aS1zZWxlY3QtZmlsdGVyLXBhbmVsLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFja30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IE11bHRpU2VsZWN0RmlsdGVyRmFjdG9yeSBmcm9tICcuLi9tdWx0aS1zZWxlY3QtZmlsdGVyJztcbmltcG9ydCB7TXVsdGlTZWxlY3RGaWx0ZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IEZpZWxkUGFuZWxXaXRoRmllbGRTZWxlY3RGYWN0b3J5IGZyb20gJy4vZmlsdGVyLXBhbmVsLXdpdGgtZmllbGQtc2VsZWN0JztcbmltcG9ydCB7RmlsdGVyUGFuZWxDb21wb25lbnR9IGZyb20gJy4vdHlwZXMnO1xuXG5NdWx0aVNlbGVjdEZpbHRlclBhbmVsRmFjdG9yeS5kZXBzID0gW0ZpZWxkUGFuZWxXaXRoRmllbGRTZWxlY3RGYWN0b3J5LCBNdWx0aVNlbGVjdEZpbHRlckZhY3RvcnldO1xuXG5mdW5jdGlvbiBNdWx0aVNlbGVjdEZpbHRlclBhbmVsRmFjdG9yeShcbiAgRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdDogUmV0dXJuVHlwZTx0eXBlb2YgRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdEZhY3Rvcnk+LFxuICBNdWx0aVNlbGVjdEZpbHRlckNvbXBvbmVudDogUmV0dXJuVHlwZTx0eXBlb2YgTXVsdGlTZWxlY3RGaWx0ZXJGYWN0b3J5PlxuKSB7XG4gIGNvbnN0IE11bHRpU2VsZWN0RmlsdGVyUGFuZWw6IEZpbHRlclBhbmVsQ29tcG9uZW50PE11bHRpU2VsZWN0RmlsdGVyPiA9IFJlYWN0Lm1lbW8oXG4gICAgKHtpZHgsIGRhdGFzZXRzLCBhbGxBdmFpbGFibGVGaWVsZHMsIGZpbHRlciwgc2V0RmlsdGVyLCByZW1vdmVGaWx0ZXJ9KSA9PiB7XG4gICAgICBjb25zdCBvblNldEZpbHRlciA9IHVzZUNhbGxiYWNrKHZhbHVlID0+IHNldEZpbHRlcihpZHgsICd2YWx1ZScsIHZhbHVlKSwgW2lkeCwgc2V0RmlsdGVyXSk7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXVsdGktc2VsZWN0LWZpbHRlci1wYW5lbFwiPlxuICAgICAgICAgIDxGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0XG4gICAgICAgICAgICBhbGxBdmFpbGFibGVGaWVsZHM9e2FsbEF2YWlsYWJsZUZpZWxkc31cbiAgICAgICAgICAgIGRhdGFzZXRzPXtkYXRhc2V0c31cbiAgICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxuICAgICAgICAgICAgaWR4PXtpZHh9XG4gICAgICAgICAgICByZW1vdmVGaWx0ZXI9e3JlbW92ZUZpbHRlcn1cbiAgICAgICAgICAgIHNldEZpbHRlcj17c2V0RmlsdGVyfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtmaWx0ZXIudHlwZSAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlsdGVyLXBhbmVsX19maWx0ZXJcIj5cbiAgICAgICAgICAgICAgICA8TXVsdGlTZWxlY3RGaWx0ZXJDb21wb25lbnQgZmlsdGVyPXtmaWx0ZXJ9IHNldEZpbHRlcj17b25TZXRGaWx0ZXJ9IC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L0ZpZWxkUGFuZWxXaXRoRmllbGRTZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gICk7XG5cbiAgTXVsdGlTZWxlY3RGaWx0ZXJQYW5lbC5kaXNwbGF5TmFtZSA9ICdNdWx0aVNlbGVjdEZpbHRlclBhbmVsJztcblxuICByZXR1cm4gTXVsdGlTZWxlY3RGaWx0ZXJQYW5lbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTXVsdGlTZWxlY3RGaWx0ZXJQYW5lbEZhY3Rvcnk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsa0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUVBLElBQUFHLDJCQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFBZ0YsU0FBQUkseUJBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQTtFQUFBLElBQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQTtJQUFBLE9BQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBO0VBQUEsR0FBQUYsQ0FBQTtBQUFBO0FBQUEsU0FBQU4sd0JBQUFNLENBQUEsRUFBQUUsQ0FBQTtFQUFBLEtBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQTtFQUFBLGFBQUFBLENBQUEsZ0JBQUFLLE9BQUEsQ0FBQUwsQ0FBQSwwQkFBQUEsQ0FBQTtJQUFBLFdBQUFBO0VBQUE7RUFBQSxJQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUE7RUFBQSxJQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBO0VBQUEsSUFBQVEsQ0FBQTtNQUFBQyxTQUFBO0lBQUE7SUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQTtFQUFBLFNBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQTtJQUFBLElBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQTtJQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUE7RUFBQTtFQUFBLE9BQUFOLENBQUEsY0FBQVIsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFBQTtBQU5oRjtBQUNBOztBQVFBVyw2QkFBNkIsQ0FBQ0MsSUFBSSxHQUFHLENBQUN0QiwyQkFBQSxXQUFnQyxFQUFFRixrQkFBQSxXQUF3QixDQUFDO0FBRWpHLFNBQVN1Qiw2QkFBNkJBLENBQ3BDRSx5QkFBOEUsRUFDOUVDLDBCQUF1RSxFQUN2RTtFQUNBLElBQU1DLHNCQUErRCxnQkFBRzlCLE1BQUEsV0FBSyxDQUFDK0IsSUFBSSxDQUNoRixVQUFBQyxJQUFBLEVBQTBFO0lBQUEsSUFBeEVDLEdBQUcsR0FBQUQsSUFBQSxDQUFIQyxHQUFHO01BQUVDLFFBQVEsR0FBQUYsSUFBQSxDQUFSRSxRQUFRO01BQUVDLGtCQUFrQixHQUFBSCxJQUFBLENBQWxCRyxrQkFBa0I7TUFBRUMsTUFBTSxHQUFBSixJQUFBLENBQU5JLE1BQU07TUFBRUMsU0FBUyxHQUFBTCxJQUFBLENBQVRLLFNBQVM7TUFBRUMsWUFBWSxHQUFBTixJQUFBLENBQVpNLFlBQVk7SUFDbEUsSUFBTUMsV0FBVyxHQUFHLElBQUF2QyxNQUFBLENBQUF3QyxXQUFXLEVBQUMsVUFBQUMsS0FBSztNQUFBLE9BQUlKLFNBQVMsQ0FBQ0osR0FBRyxFQUFFLE9BQU8sRUFBRVEsS0FBSyxDQUFDO0lBQUEsR0FBRSxDQUFDUixHQUFHLEVBQUVJLFNBQVMsQ0FBQyxDQUFDO0lBRTFGLG9CQUNFckMsTUFBQSxZQUFBMEMsYUFBQTtNQUFLQyxTQUFTLEVBQUM7SUFBMkIsZ0JBQ3hDM0MsTUFBQSxZQUFBMEMsYUFBQSxDQUFDZCx5QkFBeUI7TUFDeEJPLGtCQUFrQixFQUFFQSxrQkFBbUI7TUFDdkNELFFBQVEsRUFBRUEsUUFBUztNQUNuQkUsTUFBTSxFQUFFQSxNQUFPO01BQ2ZILEdBQUcsRUFBRUEsR0FBSTtNQUNUSyxZQUFZLEVBQUVBLFlBQWE7TUFDM0JELFNBQVMsRUFBRUE7SUFBVSxHQUVwQkQsTUFBTSxDQUFDUSxJQUFJLGlCQUNWNUMsTUFBQSxZQUFBMEMsYUFBQTtNQUFLQyxTQUFTLEVBQUM7SUFBc0IsZ0JBQ25DM0MsTUFBQSxZQUFBMEMsYUFBQSxDQUFDYiwwQkFBMEI7TUFBQ08sTUFBTSxFQUFFQSxNQUFPO01BQUNDLFNBQVMsRUFBRUU7SUFBWSxDQUFFLENBQ2xFLENBRWtCLENBQ3hCLENBQUM7RUFFVixDQUNGLENBQUM7RUFFRFQsc0JBQXNCLENBQUNlLFdBQVcsR0FBRyx3QkFBd0I7RUFFN0QsT0FBT2Ysc0JBQXNCO0FBQy9CO0FBQUMsSUFBQWdCLFFBQUEsR0FBQUMsT0FBQSxjQUVjckIsNkJBQTZCIiwiaWdub3JlTGlzdCI6W119