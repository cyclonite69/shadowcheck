"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.getSupportedFilterFields = getSupportedFilterFields;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = require("../../common/styled-components");
var _filterPanelHeader = _interopRequireDefault(require("../../side-panel/filter-panel/filter-panel-header"));
var _sourceDataSelector = _interopRequireDefault(require("../../side-panel/common/source-data-selector"));
var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

NewFilterPanelFactory.deps = [_filterPanelHeader["default"], _sourceDataSelector["default"], _fieldSelector["default"]];
function getSupportedFilterFields(supportedFilterTypes, fields) {
  return supportedFilterTypes ? fields.filter(function (field) {
    return supportedFilterTypes.includes(field.type);
  }) : fields;
}
function NewFilterPanelFactory(FilterPanelHeader, SourceDataSelector, FieldSelector) {
  var NewFilterPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var idx = _ref.idx,
      filter = _ref.filter,
      datasets = _ref.datasets,
      allAvailableFields = _ref.allAvailableFields,
      setFilter = _ref.setFilter,
      removeFilter = _ref.removeFilter;
    var onFieldSelector = (0, _react.useCallback)(function (field) {
      return setFilter(idx, 'name', field.name);
    }, [idx, setFilter]);
    var onSourceDataSelector = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'dataId', value, 0);
    }, [idx, setFilter]);
    var dataset = datasets[filter.dataId[0]];
    var supportedFields = (0, _react.useMemo)(function () {
      return getSupportedFilterFields(dataset.supportedFilterTypes, allAvailableFields);
    }, [dataset.supportedFilterTypes, allAvailableFields]);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(FilterPanelHeader, {
      datasets: [dataset],
      filter: filter,
      removeFilter: removeFilter
    }, /*#__PURE__*/_react["default"].createElement(FieldSelector, {
      inputTheme: "secondary",
      fields: supportedFields,
      value: Array.isArray(filter.name) ? filter.name[0] : filter.name,
      erasable: false,
      onSelect: onFieldSelector
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents.StyledFilterContent, {
      className: "filter-panel__content"
    }, Object.keys(datasets).length > 1 && /*#__PURE__*/_react["default"].createElement(SourceDataSelector, {
      inputTheme: "secondary",
      datasets: datasets,
      dataId: filter.dataId,
      onSelect: onSourceDataSelector
    })));
  });
  NewFilterPanel.displayName = 'NewFilterPanel';
  return NewFilterPanel;
}
var _default = exports["default"] = NewFilterPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,