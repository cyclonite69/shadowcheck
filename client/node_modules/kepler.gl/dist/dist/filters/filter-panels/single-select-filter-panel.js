"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _singleSelectFilter = _interopRequireDefault(require("../single-select-filter"));
var _filterPanelWithFieldSelect = _interopRequireDefault(require("./filter-panel-with-field-select"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

SingleSelectFilterPanelFactory.deps = [_filterPanelWithFieldSelect["default"], _singleSelectFilter["default"]];
function SingleSelectFilterPanelFactory(FieldPanelWithFieldSelect, SingleSelectFilter) {
  var SingleSelectFilterPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var idx = _ref.idx,
      datasets = _ref.datasets,
      allAvailableFields = _ref.allAvailableFields,
      filter = _ref.filter,
      setFilter = _ref.setFilter,
      removeFilter = _ref.removeFilter;
    var onSetFilter = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'value', value);
    }, [idx, setFilter]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "single-select-filter-panel"
    }, /*#__PURE__*/_react["default"].createElement(FieldPanelWithFieldSelect, {
      allAvailableFields: allAvailableFields,
      datasets: datasets,
      filter: filter,
      idx: idx,
      removeFilter: removeFilter,
      setFilter: setFilter
    }, filter.type && /*#__PURE__*/_react["default"].createElement("div", {
      className: "filter-panel__filter"
    }, /*#__PURE__*/_react["default"].createElement(SingleSelectFilter, {
      filter: filter,
      setFilter: onSetFilter
    }))));
  });
  SingleSelectFilterPanel.displayName = 'SingleSelectFilterPanel';
  return SingleSelectFilterPanel;
}
var _default = exports["default"] = SingleSelectFilterPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfc2luZ2xlU2VsZWN0RmlsdGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9maWx0ZXJQYW5lbFdpdGhGaWVsZFNlbGVjdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIlNpbmdsZVNlbGVjdEZpbHRlclBhbmVsRmFjdG9yeSIsImRlcHMiLCJGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0IiwiU2luZ2xlU2VsZWN0RmlsdGVyIiwiU2luZ2xlU2VsZWN0RmlsdGVyUGFuZWwiLCJtZW1vIiwiX3JlZiIsImlkeCIsImRhdGFzZXRzIiwiYWxsQXZhaWxhYmxlRmllbGRzIiwiZmlsdGVyIiwic2V0RmlsdGVyIiwicmVtb3ZlRmlsdGVyIiwib25TZXRGaWx0ZXIiLCJ1c2VDYWxsYmFjayIsInZhbHVlIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInR5cGUiLCJkaXNwbGF5TmFtZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9maWx0ZXJzL2ZpbHRlci1wYW5lbHMvc2luZ2xlLXNlbGVjdC1maWx0ZXItcGFuZWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU2luZ2xlU2VsZWN0RmlsdGVyRmFjdG9yeSBmcm9tICcuLi9zaW5nbGUtc2VsZWN0LWZpbHRlcic7XG5pbXBvcnQge1NlbGVjdEZpbHRlcn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQgRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdEZhY3RvcnkgZnJvbSAnLi9maWx0ZXItcGFuZWwtd2l0aC1maWVsZC1zZWxlY3QnO1xuaW1wb3J0IHtGaWx0ZXJQYW5lbENvbXBvbmVudH0gZnJvbSAnLi90eXBlcyc7XG5cblNpbmdsZVNlbGVjdEZpbHRlclBhbmVsRmFjdG9yeS5kZXBzID0gW0ZpZWxkUGFuZWxXaXRoRmllbGRTZWxlY3RGYWN0b3J5LCBTaW5nbGVTZWxlY3RGaWx0ZXJGYWN0b3J5XTtcblxuZnVuY3Rpb24gU2luZ2xlU2VsZWN0RmlsdGVyUGFuZWxGYWN0b3J5KFxuICBGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0OiBSZXR1cm5UeXBlPHR5cGVvZiBGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0RmFjdG9yeT4sXG4gIFNpbmdsZVNlbGVjdEZpbHRlcjogUmV0dXJuVHlwZTx0eXBlb2YgU2luZ2xlU2VsZWN0RmlsdGVyRmFjdG9yeT5cbikge1xuICBjb25zdCBTaW5nbGVTZWxlY3RGaWx0ZXJQYW5lbDogRmlsdGVyUGFuZWxDb21wb25lbnQ8U2VsZWN0RmlsdGVyPiA9IFJlYWN0Lm1lbW8oXG4gICAgKHtpZHgsIGRhdGFzZXRzLCBhbGxBdmFpbGFibGVGaWVsZHMsIGZpbHRlciwgc2V0RmlsdGVyLCByZW1vdmVGaWx0ZXJ9KSA9PiB7XG4gICAgICBjb25zdCBvblNldEZpbHRlciA9IHVzZUNhbGxiYWNrKHZhbHVlID0+IHNldEZpbHRlcihpZHgsICd2YWx1ZScsIHZhbHVlKSwgW2lkeCwgc2V0RmlsdGVyXSk7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2luZ2xlLXNlbGVjdC1maWx0ZXItcGFuZWxcIj5cbiAgICAgICAgICA8RmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdFxuICAgICAgICAgICAgYWxsQXZhaWxhYmxlRmllbGRzPXthbGxBdmFpbGFibGVGaWVsZHN9XG4gICAgICAgICAgICBkYXRhc2V0cz17ZGF0YXNldHN9XG4gICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgIGlkeD17aWR4fVxuICAgICAgICAgICAgcmVtb3ZlRmlsdGVyPXtyZW1vdmVGaWx0ZXJ9XG4gICAgICAgICAgICBzZXRGaWx0ZXI9e3NldEZpbHRlcn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZmlsdGVyLnR5cGUgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpbHRlci1wYW5lbF9fZmlsdGVyXCI+XG4gICAgICAgICAgICAgICAgPFNpbmdsZVNlbGVjdEZpbHRlciBmaWx0ZXI9e2ZpbHRlcn0gc2V0RmlsdGVyPXtvblNldEZpbHRlcn0gLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cbiAgKTtcblxuICBTaW5nbGVTZWxlY3RGaWx0ZXJQYW5lbC5kaXNwbGF5TmFtZSA9ICdTaW5nbGVTZWxlY3RGaWx0ZXJQYW5lbCc7XG5cbiAgcmV0dXJuIFNpbmdsZVNlbGVjdEZpbHRlclBhbmVsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTaW5nbGVTZWxlY3RGaWx0ZXJQYW5lbEZhY3Rvcnk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsbUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUVBLElBQUFHLDJCQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFBZ0YsU0FBQUkseUJBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQTtFQUFBLElBQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQTtJQUFBLE9BQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBO0VBQUEsR0FBQUYsQ0FBQTtBQUFBO0FBQUEsU0FBQU4sd0JBQUFNLENBQUEsRUFBQUUsQ0FBQTtFQUFBLEtBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQTtFQUFBLGFBQUFBLENBQUEsZ0JBQUFLLE9BQUEsQ0FBQUwsQ0FBQSwwQkFBQUEsQ0FBQTtJQUFBLFdBQUFBO0VBQUE7RUFBQSxJQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUE7RUFBQSxJQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBO0VBQUEsSUFBQVEsQ0FBQTtNQUFBQyxTQUFBO0lBQUE7SUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQTtFQUFBLFNBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQTtJQUFBLElBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQTtJQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUE7RUFBQTtFQUFBLE9BQUFOLENBQUEsY0FBQVIsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFBQTtBQU5oRjtBQUNBOztBQVFBVyw4QkFBOEIsQ0FBQ0MsSUFBSSxHQUFHLENBQUN0QiwyQkFBQSxXQUFnQyxFQUFFRixtQkFBQSxXQUF5QixDQUFDO0FBRW5HLFNBQVN1Qiw4QkFBOEJBLENBQ3JDRSx5QkFBOEUsRUFDOUVDLGtCQUFnRSxFQUNoRTtFQUNBLElBQU1DLHVCQUEyRCxnQkFBRzlCLE1BQUEsV0FBSyxDQUFDK0IsSUFBSSxDQUM1RSxVQUFBQyxJQUFBLEVBQTBFO0lBQUEsSUFBeEVDLEdBQUcsR0FBQUQsSUFBQSxDQUFIQyxHQUFHO01BQUVDLFFBQVEsR0FBQUYsSUFBQSxDQUFSRSxRQUFRO01BQUVDLGtCQUFrQixHQUFBSCxJQUFBLENBQWxCRyxrQkFBa0I7TUFBRUMsTUFBTSxHQUFBSixJQUFBLENBQU5JLE1BQU07TUFBRUMsU0FBUyxHQUFBTCxJQUFBLENBQVRLLFNBQVM7TUFBRUMsWUFBWSxHQUFBTixJQUFBLENBQVpNLFlBQVk7SUFDbEUsSUFBTUMsV0FBVyxHQUFHLElBQUF2QyxNQUFBLENBQUF3QyxXQUFXLEVBQUMsVUFBQUMsS0FBSztNQUFBLE9BQUlKLFNBQVMsQ0FBQ0osR0FBRyxFQUFFLE9BQU8sRUFBRVEsS0FBSyxDQUFDO0lBQUEsR0FBRSxDQUFDUixHQUFHLEVBQUVJLFNBQVMsQ0FBQyxDQUFDO0lBRTFGLG9CQUNFckMsTUFBQSxZQUFBMEMsYUFBQTtNQUFLQyxTQUFTLEVBQUM7SUFBNEIsZ0JBQ3pDM0MsTUFBQSxZQUFBMEMsYUFBQSxDQUFDZCx5QkFBeUI7TUFDeEJPLGtCQUFrQixFQUFFQSxrQkFBbUI7TUFDdkNELFFBQVEsRUFBRUEsUUFBUztNQUNuQkUsTUFBTSxFQUFFQSxNQUFPO01BQ2ZILEdBQUcsRUFBRUEsR0FBSTtNQUNUSyxZQUFZLEVBQUVBLFlBQWE7TUFDM0JELFNBQVMsRUFBRUE7SUFBVSxHQUVwQkQsTUFBTSxDQUFDUSxJQUFJLGlCQUNWNUMsTUFBQSxZQUFBMEMsYUFBQTtNQUFLQyxTQUFTLEVBQUM7SUFBc0IsZ0JBQ25DM0MsTUFBQSxZQUFBMEMsYUFBQSxDQUFDYixrQkFBa0I7TUFBQ08sTUFBTSxFQUFFQSxNQUFPO01BQUNDLFNBQVMsRUFBRUU7SUFBWSxDQUFFLENBQzFELENBRWtCLENBQ3hCLENBQUM7RUFFVixDQUNGLENBQUM7RUFFRFQsdUJBQXVCLENBQUNlLFdBQVcsR0FBRyx5QkFBeUI7RUFFL0QsT0FBT2YsdUJBQXVCO0FBQ2hDO0FBQUMsSUFBQWdCLFFBQUEsR0FBQUMsT0FBQSxjQUVjckIsOEJBQThCIiwiaWdub3JlTGlzdCI6W119