"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _localization = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _styledComponents2 = require("../../common/styled-components");
var _icons = require("../../common/icons");
var _tippyTooltip = _interopRequireDefault(require("../../common/tippy-tooltip"));
var _filterPanelHeader = _interopRequireDefault(require("../../side-panel/filter-panel/filter-panel-header"));
var _sourceSelector = _interopRequireDefault(require("../../side-panel/common/source-selector"));
var _sourceDataSelector = _interopRequireDefault(require("../../side-panel/common/source-data-selector"));
var _layerTypeListItem = _interopRequireDefault(require("../../side-panel/layer-panel/layer-type-list-item"));
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
var TrashIcon = (0, _styledComponents["default"])(_icons.Trash)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  cursor: pointer;\n  color: ", ";\n  margin-left: 8px;\n"])), function (props) {
  return props.theme.fontWhiteColor;
});
var SyncedDatasetsArea = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  .side-panel-section {\n    margin-bottom: 0;\n  }\n"])));
var StyledContentTitle = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  margin-bottom: 8px;\n"])), function (props) {
  return props.theme.subtextColor;
});
var StyledSeparator = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  border-left: 1px dashed ", ";\n  height: 16px;\n  margin: 4px 0 4px 8px;\n"])), function (props) {
  return props.theme.subtextColor;
});
var StyledButton = (0, _styledComponents["default"])(_styledComponents2.Button)(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-top: 2px;\n  padding: 2px;\n"])));
function getDatasetsWithTimeField(datasets) {
  var rv = {};
  for (var _i = 0, _Object$keys = Object.keys(datasets); _i < _Object$keys.length; _i++) {
    var id = _Object$keys[_i];
    // TODO: change to
    if (datasets[id].fields.some(function (f) {
      return f.type === _constants.ALL_FIELD_TYPES.timestamp;
    })) {
      rv[id] = datasets[id];
    }
  }
  return rv;
}
function getTimeFields(dataset) {
  return dataset.fields.filter(function (f) {
    return f.type === _constants.ALL_FIELD_TYPES.timestamp;
  });
}
function DatasetItemFactory(SourceSelector, FilterPanelHeader) {
  var StyledFilterPanelHeader = (0, _styledComponents["default"])(FilterPanelHeader)(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n    display: flex;\n    border: none;\n    height: unset;\n    padding: 2px 0;\n    background: none;\n    align-items: baseline;\n  "])));
  var StyledSourceSelector = (0, _styledComponents["default"])(SourceSelector)(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n    flex: 1;\n    -webkit-border-radius: 8px;\n    -moz-border-radius: 8px;\n    border-radius: 8px;\n    background-color: transparent;\n  "])));

  // Check if this component already exists
  var DatasetItem = function DatasetItem(_ref) {
    var dataId = _ref.dataId,
      datasets = _ref.datasets,
      supportedFields = _ref.supportedFields,
      idx = _ref.idx,
      filter = _ref.filter,
      index = _ref.index,
      onRemoveSyncedFilter = _ref.onRemoveSyncedFilter,
      filterDatasetsNum = _ref.filterDatasetsNum,
      datasetsWithTimeNum = _ref.datasetsWithTimeNum,
      onSelectSyncedDataset = _ref.onSelectSyncedDataset,
      _onFieldSelector = _ref.onFieldSelector;
    return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(StyledSeparator, null), /*#__PURE__*/_react["default"].createElement(StyledFilterPanelHeader, {
      datasets: [datasets[dataId]],
      allAvailableFields: supportedFields,
      idx: idx,
      filter: filter,
      removeFilter: function removeFilter() {
        return onRemoveSyncedFilter(index);
      }
    }, /*#__PURE__*/_react["default"].createElement(StyledSourceSelector, {
      datasets: datasets,
      disabled: filterDatasetsNum >= datasetsWithTimeNum,
      dataId: dataId,
      onSelectDataset: function onSelectDataset(datasetId) {
        return onSelectSyncedDataset(datasetId, index);
      },
      fields: getTimeFields(datasets[dataId]),
      fieldValue: filter.name[index],
      onFieldSelector: function onFieldSelector(field) {
        return _onFieldSelector(field, index);
      }
    })));
  };
  return DatasetItem;
}
DatasetItemFactory.deps = [_sourceSelector["default"], _filterPanelHeader["default"]];
var StyledLayerTimeline = _styledComponents["default"].div(_templateObject8 || (_templateObject8 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n"])));
var StyledLayerList = _styledComponents["default"].div(_templateObject9 || (_templateObject9 = (0, _taggedTemplateLiteral2["default"])(["\n  flex: 1;\n"])));
function LayerTimelineFactory(LayerTypeListItem) {
  var StyledLayerTypeListItem = (0, _styledComponents["default"])(LayerTypeListItem)(_templateObject10 || (_templateObject10 = (0, _taggedTemplateLiteral2["default"])(["\n    background-color: ", ";\n    padding: 4px;\n  "])), function (props) {
    return props.theme.dropdownListHighlightBg;
  });
  var LayerTimeline = function LayerTimeline(_ref2) {
    var layers = _ref2.layers,
      theme = _ref2.theme,
      onDelete = _ref2.onDelete;
    return /*#__PURE__*/_react["default"].createElement(StyledLayerTimeline, null, /*#__PURE__*/_react["default"].createElement(StyledLayerList, null, layers.map(function (layer) {
      return /*#__PURE__*/_react["default"].createElement(StyledLayerTypeListItem, {
        key: layer.id,
        value: {
          icon: layer.layerIcon,
          label: layer.name
        },
        theme: _objectSpread(_objectSpread({}, theme), {}, {
          layerTypeIconSizeSM: 24
        })
      });
    })), /*#__PURE__*/_react["default"].createElement(TrashIcon, {
      height: "12px",
      width: "12px",
      onClick: onDelete
    }));
  };
  return (0, _styledComponents.withTheme)(LayerTimeline);
}
LayerTimelineFactory.deps = [_layerTypeListItem["default"]];
function SyncedDatasetButtonFactory() {
  var SyncedDatasetButton = function SyncedDatasetButton(_ref3) {
    var onAddSyncedFilter = _ref3.onAddSyncedFilter;
    return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(StyledSeparator, null), /*#__PURE__*/_react["default"].createElement(_tippyTooltip["default"], {
      delay: [500, 0],
      placement: "top",
      render: function render() {
        return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
          id: 'tooltip.timeFilterSync'
        }));
      }
    }, /*#__PURE__*/_react["default"].createElement(StyledButton, {
      className: "add-sync-dataset",
      secondary: true,
      onClick: onAddSyncedFilter
    }, /*#__PURE__*/_react["default"].createElement(_icons.Add, {
      height: "12px"
    }), /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'filterManager.timeFilterSync'
    }))));
  };
  return SyncedDatasetButton;
}
function SyncLayerTimelineButtonFactory() {
  var SyncLayerTimelineButton = function SyncLayerTimelineButton(_ref4) {
    var onSyncLayerTimeline = _ref4.onSyncLayerTimeline;
    return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(StyledSeparator, null), /*#__PURE__*/_react["default"].createElement(_tippyTooltip["default"], {
      delay: [500, 0],
      placement: "top",
      render: function render() {
        return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
          id: 'tooltip.timeLayerSync'
        }));
      }
    }, /*#__PURE__*/_react["default"].createElement(StyledButton, {
      className: "add-sync-dataset",
      secondary: true,
      onClick: onSyncLayerTimeline
    }, /*#__PURE__*/_react["default"].createElement(_icons.Add, {
      height: "12px"
    }), /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'filterManager.timeLayerSync'
    }))));
  };
  return SyncLayerTimelineButton;
}
function FilterSyncedDatasetPanelFactory(DatasetItem, LayerTimeline, SourceDataSelector, SyncedDatasetButton, SyncLayerTimelineButton) {
  var FilterSyncedDatasetPanel = function FilterSyncedDatasetPanel(_ref5) {
    var datasets = _ref5.datasets,
      layers = _ref5.layers,
      filter = _ref5.filter,
      setFilter = _ref5.setFilter,
      idx = _ref5.idx,
      supportedFields = _ref5.supportedFields,
      onFieldSelector = _ref5.onFieldSelector,
      onSourceDataSelector = _ref5.onSourceDataSelector,
      syncTimeFilterWithLayerTimeline = _ref5.syncTimeFilterWithLayerTimeline;
    var datasetsWithTime = (0, _react.useMemo)(function () {
      return getDatasetsWithTimeField(datasets);
    }, [datasets]);
    var filterDatasetsNum = (0, _react.useMemo)(function () {
      return filter.dataId.length;
    }, [filter.dataId]);
    var datasetsWithTimeNum = (0, _react.useMemo)(function () {
      return Object.keys(datasetsWithTime).length;
    }, [datasetsWithTime]);
    var onRemoveSyncedFilter = (0, _react.useCallback)(function (valueIndex) {
      setFilter(idx, 'dataId', null, valueIndex);
    }, [idx, setFilter]);
    var onSelectSyncedDataset = (0, _react.useCallback)(function (datasetId, valueIndex) {
      setFilter(idx, 'dataId', datasetId, valueIndex);
    }, [setFilter, idx]);
    var onAddSyncedFilter = (0, _react.useCallback)(function () {
      var _getTimeFields;
      var nextId = Object.keys(datasetsWithTime).find(function (id) {
        return !filter.dataId.includes(id);
      });
      if (!nextId) return;
      var timeFieldNames = (_getTimeFields = getTimeFields(datasets[nextId])) === null || _getTimeFields === void 0 ? void 0 : _getTimeFields.map(function (f) {
        return f.name;
      });
      if (!timeFieldNames || timeFieldNames.length < 1) return;
      var nextName = timeFieldNames.includes(filter.name[0]) ? filter.name[0] : timeFieldNames[0];
      setFilter(idx, ['dataId', 'name'], [nextId, nextName], filter.dataId.length);
    }, [setFilter, idx, datasetsWithTime, datasets, filter.dataId, filter.name]);
    var onSyncLayerTimeline = (0, _react.useCallback)(function () {
      return syncTimeFilterWithLayerTimeline(idx, true);
    }, [syncTimeFilterWithLayerTimeline, idx]);
    var onRemoveSyncWithLayerTimeline = (0, _react.useCallback)(function () {
      return syncTimeFilterWithLayerTimeline(idx, false);
    }, [syncTimeFilterWithLayerTimeline, idx]);
    var animatableLayers = (0, _react.useMemo)(function () {
      return (0, _utils.getAnimatableVisibleLayers)(layers);
    }, [layers]);
    var isLinkedWithLayerTimeline = (0, _react.useMemo)(function () {
      return filter.syncedWithLayerTimeline;
    }, [filter]);
    return /*#__PURE__*/_react["default"].createElement(SyncedDatasetsArea, null, filter.dataId.length > 1 ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(StyledContentTitle, null, "Datasets"), filter.dataId.map(function (dataId, index) {
      return /*#__PURE__*/_react["default"].createElement(DatasetItem, {
        key: dataId,
        dataId: dataId,
        index: index,
        datasets: datasets,
        supportedFields: supportedFields,
        idx: idx,
        filter: filter,
        onRemoveSyncedFilter: onRemoveSyncedFilter,
        filterDatasetsNum: filterDatasetsNum,
        datasetsWithTimeNum: datasetsWithTimeNum,
        onSelectSyncedDataset: onSelectSyncedDataset,
        onFieldSelector: onFieldSelector
      });
    })) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(SourceDataSelector, {
      inputTheme: "secondary",
      datasets: datasets,
      dataId: Array.isArray(filter.dataId) ? filter.dataId[0] : filter.dataId,
      onSelect: onSourceDataSelector
    })), isLinkedWithLayerTimeline ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(StyledSeparator, null), /*#__PURE__*/_react["default"].createElement(LayerTimeline, {
      layers: animatableLayers,
      onDelete: onRemoveSyncWithLayerTimeline
    })) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, animatableLayers.length ? /*#__PURE__*/_react["default"].createElement(SyncLayerTimelineButton, {
      onSyncLayerTimeline: onSyncLayerTimeline
    }) : null), filterDatasetsNum < datasetsWithTimeNum ? /*#__PURE__*/_react["default"].createElement(SyncedDatasetButton, {
      onAddSyncedFilter: onAddSyncedFilter
    }) : null);
  };
  FilterSyncedDatasetPanel.displayName = 'FilterSyncedDatasetPanel';
  return FilterSyncedDatasetPanel;
}
FilterSyncedDatasetPanelFactory.deps = [DatasetItemFactory, LayerTimelineFactory, _sourceDataSelector["default"], SyncedDatasetButtonFactory, SyncLayerTimelineButtonFactory];
var _default = exports["default"] = FilterSyncedDatasetPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,