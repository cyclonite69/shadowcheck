"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.timeRangeSliderFieldsSelector = timeRangeSliderFieldsSelector;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _timeRangeSlider = _interopRequireDefault(require("../common/time-range-slider"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/*
 * TimeRangeFilter -> TimeRangeSlider -> RangeSlider
 */
function timeRangeSliderFieldsSelector(filter, datasets, layers) {
  var hasUserFormat = typeof filter.timeFormat === 'string';
  var timeFormat = (hasUserFormat ? filter.timeFormat : filter.defaultTimeFormat) || _constants.DEFAULT_TIME_FORMAT;
  return {
    id: filter.id,
    domain: filter.domain,
    timeBins: filter.timeBins,
    value: filter.value,
    plotType: filter.plotType,
    lineChart: filter.lineChart,
    yAxis: filter.yAxis,
    step: filter.step,
    speed: filter.speed,
    animationWindow: filter.animationWindow,
    isAnimating: filter.isAnimating,
    timezone: filter.timezone,
    timeFormat: timeFormat,
    filter: filter,
    datasets: datasets,
    layers: layers,
    isMinified: filter.view === _constants.FILTER_VIEW_TYPES.minified,
    isEnlarged: filter.view === _constants.FILTER_VIEW_TYPES.enlarged
  };
}
TimeRangeFilterFactory.deps = [_timeRangeSlider["default"]];
function TimeRangeFilterFactory(TimeRangeSlider) {
  var TimeRangeFilterComponent = function TimeRangeFilterComponent(_ref) {
    var filter = _ref.filter,
      datasets = _ref.datasets,
      layers = _ref.layers,
      setFilter = _ref.setFilter,
      setFilterPlot = _ref.setFilterPlot,
      isAnimatable = _ref.isAnimatable,
      toggleAnimation = _ref.toggleAnimation,
      hideTimeTitle = _ref.hideTimeTitle,
      timeline = _ref.timeline;
    return /*#__PURE__*/_react["default"].createElement(TimeRangeSlider, (0, _extends2["default"])({}, timeRangeSliderFieldsSelector(filter, datasets, layers), {
      onChange: setFilter,
      setFilterPlot: setFilterPlot,
      toggleAnimation: toggleAnimation,
      isAnimatable: isAnimatable,
      hideTimeTitle: hideTimeTitle,
      timeline: timeline
    }));
  };
  return TimeRangeFilterComponent;
}
var _default = exports["default"] = TimeRangeFilterFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90aW1lUmFuZ2VTbGlkZXIiLCJfY29uc3RhbnRzIiwidGltZVJhbmdlU2xpZGVyRmllbGRzU2VsZWN0b3IiLCJmaWx0ZXIiLCJkYXRhc2V0cyIsImxheWVycyIsImhhc1VzZXJGb3JtYXQiLCJ0aW1lRm9ybWF0IiwiZGVmYXVsdFRpbWVGb3JtYXQiLCJERUZBVUxUX1RJTUVfRk9STUFUIiwiaWQiLCJkb21haW4iLCJ0aW1lQmlucyIsInZhbHVlIiwicGxvdFR5cGUiLCJsaW5lQ2hhcnQiLCJ5QXhpcyIsInN0ZXAiLCJzcGVlZCIsImFuaW1hdGlvbldpbmRvdyIsImlzQW5pbWF0aW5nIiwidGltZXpvbmUiLCJpc01pbmlmaWVkIiwidmlldyIsIkZJTFRFUl9WSUVXX1RZUEVTIiwibWluaWZpZWQiLCJpc0VubGFyZ2VkIiwiZW5sYXJnZWQiLCJUaW1lUmFuZ2VGaWx0ZXJGYWN0b3J5IiwiZGVwcyIsIlRpbWVSYW5nZVNsaWRlciIsIlRpbWVSYW5nZUZpbHRlckNvbXBvbmVudCIsIl9yZWYiLCJzZXRGaWx0ZXIiLCJzZXRGaWx0ZXJQbG90IiwiaXNBbmltYXRhYmxlIiwidG9nZ2xlQW5pbWF0aW9uIiwiaGlkZVRpbWVUaXRsZSIsInRpbWVsaW5lIiwiY3JlYXRlRWxlbWVudCIsIl9leHRlbmRzMiIsIm9uQ2hhbmdlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZpbHRlcnMvdGltZS1yYW5nZS1maWx0ZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGltZVJhbmdlU2xpZGVyRmFjdG9yeSBmcm9tICcuLi9jb21tb24vdGltZS1yYW5nZS1zbGlkZXInO1xuaW1wb3J0IHtERUZBVUxUX1RJTUVfRk9STUFULCBGSUxURVJfVklFV19UWVBFU30gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtUaW1lUmFuZ2VGaWx0ZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IHtEYXRhc2V0c30gZnJvbSAnQGtlcGxlci5nbC90YWJsZSc7XG5pbXBvcnQge0xheWVyfSBmcm9tICdAa2VwbGVyLmdsL2xheWVycyc7XG5pbXBvcnQge1RpbWVSYW5nZUZpbHRlclByb3BzfSBmcm9tICcuL3R5cGVzJztcbi8qXG4gKiBUaW1lUmFuZ2VGaWx0ZXIgLT4gVGltZVJhbmdlU2xpZGVyIC0+IFJhbmdlU2xpZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW1lUmFuZ2VTbGlkZXJGaWVsZHNTZWxlY3RvcihcbiAgZmlsdGVyOiBUaW1lUmFuZ2VGaWx0ZXIsXG4gIGRhdGFzZXRzOiBEYXRhc2V0cyxcbiAgbGF5ZXJzOiByZWFkb25seSBMYXllcltdXG4pIHtcbiAgY29uc3QgaGFzVXNlckZvcm1hdCA9IHR5cGVvZiBmaWx0ZXIudGltZUZvcm1hdCA9PT0gJ3N0cmluZyc7XG4gIGNvbnN0IHRpbWVGb3JtYXQgPVxuICAgIChoYXNVc2VyRm9ybWF0ID8gZmlsdGVyLnRpbWVGb3JtYXQgOiBmaWx0ZXIuZGVmYXVsdFRpbWVGb3JtYXQpIHx8IERFRkFVTFRfVElNRV9GT1JNQVQ7XG5cbiAgcmV0dXJuIHtcbiAgICBpZDogZmlsdGVyLmlkLFxuICAgIGRvbWFpbjogZmlsdGVyLmRvbWFpbixcbiAgICB0aW1lQmluczogZmlsdGVyLnRpbWVCaW5zLFxuICAgIHZhbHVlOiBmaWx0ZXIudmFsdWUsXG4gICAgcGxvdFR5cGU6IGZpbHRlci5wbG90VHlwZSxcbiAgICBsaW5lQ2hhcnQ6IGZpbHRlci5saW5lQ2hhcnQsXG4gICAgeUF4aXM6IGZpbHRlci55QXhpcyxcbiAgICBzdGVwOiBmaWx0ZXIuc3RlcCxcbiAgICBzcGVlZDogZmlsdGVyLnNwZWVkLFxuICAgIGFuaW1hdGlvbldpbmRvdzogZmlsdGVyLmFuaW1hdGlvbldpbmRvdyxcbiAgICBpc0FuaW1hdGluZzogZmlsdGVyLmlzQW5pbWF0aW5nLFxuICAgIHRpbWV6b25lOiBmaWx0ZXIudGltZXpvbmUsXG4gICAgdGltZUZvcm1hdCxcbiAgICBmaWx0ZXIsXG4gICAgZGF0YXNldHMsXG4gICAgbGF5ZXJzLFxuICAgIGlzTWluaWZpZWQ6IGZpbHRlci52aWV3ID09PSBGSUxURVJfVklFV19UWVBFUy5taW5pZmllZCxcbiAgICBpc0VubGFyZ2VkOiBmaWx0ZXIudmlldyA9PT0gRklMVEVSX1ZJRVdfVFlQRVMuZW5sYXJnZWRcbiAgfTtcbn1cblxuVGltZVJhbmdlRmlsdGVyRmFjdG9yeS5kZXBzID0gW1RpbWVSYW5nZVNsaWRlckZhY3RvcnldO1xuXG5mdW5jdGlvbiBUaW1lUmFuZ2VGaWx0ZXJGYWN0b3J5KFRpbWVSYW5nZVNsaWRlcjogUmV0dXJuVHlwZTx0eXBlb2YgVGltZVJhbmdlU2xpZGVyRmFjdG9yeT4pIHtcbiAgY29uc3QgVGltZVJhbmdlRmlsdGVyQ29tcG9uZW50OiBSZWFjdC5GQzxUaW1lUmFuZ2VGaWx0ZXJQcm9wcz4gPSAoe1xuICAgIGZpbHRlcixcbiAgICBkYXRhc2V0cyxcbiAgICBsYXllcnMsXG4gICAgc2V0RmlsdGVyLFxuICAgIHNldEZpbHRlclBsb3QsXG4gICAgaXNBbmltYXRhYmxlLFxuICAgIHRvZ2dsZUFuaW1hdGlvbixcbiAgICBoaWRlVGltZVRpdGxlLFxuICAgIHRpbWVsaW5lXG4gIH0pID0+IChcbiAgICA8VGltZVJhbmdlU2xpZGVyXG4gICAgICB7Li4udGltZVJhbmdlU2xpZGVyRmllbGRzU2VsZWN0b3IoZmlsdGVyLCBkYXRhc2V0cywgbGF5ZXJzKX1cbiAgICAgIG9uQ2hhbmdlPXtzZXRGaWx0ZXJ9XG4gICAgICBzZXRGaWx0ZXJQbG90PXtzZXRGaWx0ZXJQbG90fVxuICAgICAgdG9nZ2xlQW5pbWF0aW9uPXt0b2dnbGVBbmltYXRpb259XG4gICAgICBpc0FuaW1hdGFibGU9e2lzQW5pbWF0YWJsZX1cbiAgICAgIGhpZGVUaW1lVGl0bGU9e2hpZGVUaW1lVGl0bGV9XG4gICAgICB0aW1lbGluZT17dGltZWxpbmV9XG4gICAgLz5cbiAgKTtcblxuICByZXR1cm4gVGltZVJhbmdlRmlsdGVyQ29tcG9uZW50O1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaW1lUmFuZ2VGaWx0ZXJGYWN0b3J5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBRixPQUFBO0FBTEE7QUFDQTs7QUFTQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRyw2QkFBNkJBLENBQzNDQyxNQUF1QixFQUN2QkMsUUFBa0IsRUFDbEJDLE1BQXdCLEVBQ3hCO0VBQ0EsSUFBTUMsYUFBYSxHQUFHLE9BQU9ILE1BQU0sQ0FBQ0ksVUFBVSxLQUFLLFFBQVE7RUFDM0QsSUFBTUEsVUFBVSxHQUNkLENBQUNELGFBQWEsR0FBR0gsTUFBTSxDQUFDSSxVQUFVLEdBQUdKLE1BQU0sQ0FBQ0ssaUJBQWlCLEtBQUtQLFVBQUEsQ0FBQVEsbUJBQW1CO0VBRXZGLE9BQU87SUFDTEMsRUFBRSxFQUFFUCxNQUFNLENBQUNPLEVBQUU7SUFDYkMsTUFBTSxFQUFFUixNQUFNLENBQUNRLE1BQU07SUFDckJDLFFBQVEsRUFBRVQsTUFBTSxDQUFDUyxRQUFRO0lBQ3pCQyxLQUFLLEVBQUVWLE1BQU0sQ0FBQ1UsS0FBSztJQUNuQkMsUUFBUSxFQUFFWCxNQUFNLENBQUNXLFFBQVE7SUFDekJDLFNBQVMsRUFBRVosTUFBTSxDQUFDWSxTQUFTO0lBQzNCQyxLQUFLLEVBQUViLE1BQU0sQ0FBQ2EsS0FBSztJQUNuQkMsSUFBSSxFQUFFZCxNQUFNLENBQUNjLElBQUk7SUFDakJDLEtBQUssRUFBRWYsTUFBTSxDQUFDZSxLQUFLO0lBQ25CQyxlQUFlLEVBQUVoQixNQUFNLENBQUNnQixlQUFlO0lBQ3ZDQyxXQUFXLEVBQUVqQixNQUFNLENBQUNpQixXQUFXO0lBQy9CQyxRQUFRLEVBQUVsQixNQUFNLENBQUNrQixRQUFRO0lBQ3pCZCxVQUFVLEVBQVZBLFVBQVU7SUFDVkosTUFBTSxFQUFOQSxNQUFNO0lBQ05DLFFBQVEsRUFBUkEsUUFBUTtJQUNSQyxNQUFNLEVBQU5BLE1BQU07SUFDTmlCLFVBQVUsRUFBRW5CLE1BQU0sQ0FBQ29CLElBQUksS0FBS3RCLFVBQUEsQ0FBQXVCLGlCQUFpQixDQUFDQyxRQUFRO0lBQ3REQyxVQUFVLEVBQUV2QixNQUFNLENBQUNvQixJQUFJLEtBQUt0QixVQUFBLENBQUF1QixpQkFBaUIsQ0FBQ0c7RUFDaEQsQ0FBQztBQUNIO0FBRUFDLHNCQUFzQixDQUFDQyxJQUFJLEdBQUcsQ0FBQzdCLGdCQUFBLFdBQXNCLENBQUM7QUFFdEQsU0FBUzRCLHNCQUFzQkEsQ0FBQ0UsZUFBMEQsRUFBRTtFQUMxRixJQUFNQyx3QkFBd0QsR0FBRyxTQUEzREEsd0JBQXdEQSxDQUFBQyxJQUFBO0lBQUEsSUFDNUQ3QixNQUFNLEdBQUE2QixJQUFBLENBQU43QixNQUFNO01BQ05DLFFBQVEsR0FBQTRCLElBQUEsQ0FBUjVCLFFBQVE7TUFDUkMsTUFBTSxHQUFBMkIsSUFBQSxDQUFOM0IsTUFBTTtNQUNONEIsU0FBUyxHQUFBRCxJQUFBLENBQVRDLFNBQVM7TUFDVEMsYUFBYSxHQUFBRixJQUFBLENBQWJFLGFBQWE7TUFDYkMsWUFBWSxHQUFBSCxJQUFBLENBQVpHLFlBQVk7TUFDWkMsZUFBZSxHQUFBSixJQUFBLENBQWZJLGVBQWU7TUFDZkMsYUFBYSxHQUFBTCxJQUFBLENBQWJLLGFBQWE7TUFDYkMsUUFBUSxHQUFBTixJQUFBLENBQVJNLFFBQVE7SUFBQSxvQkFFUnpDLE1BQUEsWUFBQTBDLGFBQUEsQ0FBQ1QsZUFBZSxNQUFBVSxTQUFBLGlCQUNWdEMsNkJBQTZCLENBQUNDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxNQUFNLENBQUM7TUFDM0RvQyxRQUFRLEVBQUVSLFNBQVU7TUFDcEJDLGFBQWEsRUFBRUEsYUFBYztNQUM3QkUsZUFBZSxFQUFFQSxlQUFnQjtNQUNqQ0QsWUFBWSxFQUFFQSxZQUFhO01BQzNCRSxhQUFhLEVBQUVBLGFBQWM7TUFDN0JDLFFBQVEsRUFBRUE7SUFBUyxFQUNwQixDQUFDO0VBQUEsQ0FDSDtFQUVELE9BQU9QLHdCQUF3QjtBQUNqQztBQUFDLElBQUFXLFFBQUEsR0FBQUMsT0FBQSxjQUVjZixzQkFBc0IiLCJpZ25vcmVMaXN0IjpbXX0=