"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = BottomWidgetFactory;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _styles = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/styles/src");
var _timeWidget = _interopRequireDefault(require("./filters/time-widget"));
var _filterAnimationController = _interopRequireDefault(require("./filter-animation-controller"));
var _layerAnimationController = _interopRequireDefault(require("./layer-animation-controller"));
var _animationControl = _interopRequireDefault(require("./common/animation-control/animation-control"));
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
var maxWidth = 1080;
var BottomWidgetContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  padding-top: ", "px;\n  padding-right: ", "px;\n  padding-bottom: ", "px;\n  padding-left: ", "px;\n  pointer-events: none !important; /* prevent padding from blocking input */\n  & > * {\n    /* all children should allow input */\n    pointer-events: all;\n  }\n  width: ", "px;\n  z-index: 1;\n  ", "\n"])), function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingTop : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingRight : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingBottom : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingLeft : 0;
}, function (props) {
  return props.width;
}, _styles.media.portable(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["padding: 0;"]))));
BottomWidgetFactory.deps = [_timeWidget["default"], _animationControl["default"], _filterAnimationController["default"], _layerAnimationController["default"]];

/* eslint-disable complexity */
function BottomWidgetFactory(TimeWidget, AnimationControl, FilterAnimationController, LayerAnimationController) {
  var LayerAnimationControl = (0, _styledComponents["default"])(AnimationControl)(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n    background-color: ", ";\n  "])), function (props) {
    return props.theme.sidePanelBg;
  });
  var BottomWidget = function BottomWidget(props) {
    var _uiState$mapControls, _uiState$mapControls2, _theme$mapControl, _theme$mapControl2;
    var datasets = props.datasets,
      filters = props.filters,
      animationConfig = props.animationConfig,
      visStateActions = props.visStateActions,
      containerW = props.containerW,
      uiState = props.uiState,
      sidePanelWidth = props.sidePanelWidth,
      layers = props.layers,
      rootRef = props.rootRef,
      theme = props.theme;
    var activeSidePanel = uiState.activeSidePanel,
      readOnly = uiState.readOnly;
    var isOpen = Boolean(activeSidePanel);
    var enlargedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return !(0, _utils.isSideFilter)(f);
      });
    }, [filters]);
    var animatedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return f.isAnimating;
      });
    }, [filters]);
    var animatedFilter = animatedFilterIdx > -1 ? filters[animatedFilterIdx] : null;
    // we need to hide layer timeline when filter is synced and not enlarged
    var isTimelineLinkedWithFilter = (0, _react.useMemo)(function () {
      return filters.some(function (f) {
        return f.syncedWithLayerTimeline;
      });
    }, [filters]);
    var isMobile = (0, _react.useMemo)(function () {
      return (0, _utils.hasPortableWidth)(_styles.breakPointValues);
    }, []);
    var isLegendPinned = ((_uiState$mapControls = uiState.mapControls) === null || _uiState$mapControls === void 0 || (_uiState$mapControls = _uiState$mapControls.mapLegend) === null || _uiState$mapControls === void 0 ? void 0 : _uiState$mapControls.show) && ((_uiState$mapControls2 = uiState.mapControls) === null || _uiState$mapControls2 === void 0 || (_uiState$mapControls2 = _uiState$mapControls2.mapLegend) === null || _uiState$mapControls2 === void 0 ? void 0 : _uiState$mapControls2.active);
    var spaceForLegendWidth = isLegendPinned ? ((_theme$mapControl = theme.mapControl) === null || _theme$mapControl === void 0 ? void 0 : _theme$mapControl.width) + ((_theme$mapControl2 = theme.mapControl) === null || _theme$mapControl2 === void 0 || (_theme$mapControl2 = _theme$mapControl2.mapLegend) === null || _theme$mapControl2 === void 0 || (_theme$mapControl2 = _theme$mapControl2.pinned) === null || _theme$mapControl2 === void 0 ? void 0 : _theme$mapControl2.right) * 2 - theme.bottomWidgetPaddingRight : 0;
    var enlargedFilterWidth = (0, _react.useMemo)(function () {
      return (!isMobile && isOpen ? containerW - sidePanelWidth : containerW) - spaceForLegendWidth;
    }, [isMobile, isOpen, containerW, sidePanelWidth, spaceForLegendWidth]);

    // show playback control if layers contain trip layer & at least one trip layer is visible
    var animatableLayer = (0, _react.useMemo)(function () {
      return layers.filter(function (l) {
        return l.config.animation && l.config.animation.enabled && l.config.isVisible;
      });
    }, [layers]);
    var readyToAnimation = (0, _react.useMemo)(function () {
      return Array.isArray(animationConfig.domain) && Number.isFinite(animationConfig.currentTime);
    }, [animationConfig.domain, animationConfig.currentTime]);

    // if animation control is showing, hide time display in time slider
    var showFloatingTimeDisplay = !animatableLayer.length;
    var showAnimationControl = animatableLayer.length && readyToAnimation && !animationConfig.hideControl;
    var showTimeWidget = enlargedFilterIdx > -1 && Object.keys(datasets).length > 0;

    // if filter is not animating, pass in enlarged filter here because
    // animation controller needs to call reset on it
    var filter = (0, _react.useMemo)(function () {
      return animatedFilter || filters[enlargedFilterIdx];
    }, [animatedFilter, filters, enlargedFilterIdx]);

    // we merge filter and timeline if filter is synced
    var _useMemo = (0, _react.useMemo)(function () {
        return filter !== null && filter !== void 0 && filter.syncedWithLayerTimeline ? (0, _utils.mergeFilterWithTimeline)(filter, animationConfig) : {
          filter: filter,
          animationConfig: animationConfig
        };
      }, [filter, animationConfig]),
      enhancedFilter = _useMemo.filter,
      enhancedAnimationConfig = _useMemo.animationConfig;
    var onClose = (0, _react.useCallback)(function () {
      return visStateActions.setFilterView(enlargedFilterIdx, _constants.FILTER_VIEW_TYPES.side);
    }, [visStateActions, enlargedFilterIdx]);
    var onToggleMinify = (0, _react.useCallback)(function () {
      return visStateActions.setFilterView(enlargedFilterIdx, filter.view === _constants.FILTER_VIEW_TYPES.enlarged ? _constants.FILTER_VIEW_TYPES.minified : _constants.FILTER_VIEW_TYPES.enlarged);
    }, [enlargedFilterIdx, visStateActions, filter]);
    return /*#__PURE__*/_react["default"].createElement(BottomWidgetContainer, {
      width: Math.min(maxWidth, enlargedFilterWidth),
      style: {
        marginRight: spaceForLegendWidth
      },
      className: "bottom-widget--container",
      hasPadding: showAnimationControl || showTimeWidget,
      ref: rootRef
    }, !isTimelineLinkedWithFilter ? /*#__PURE__*/_react["default"].createElement(LayerAnimationController, {
      animationConfig: enhancedAnimationConfig,
      setLayerAnimationTime: visStateActions.setLayerAnimationTime
    }, function (isAnimating, start, pause, resetAnimation, timeline, setTimelineValue) {
      return showAnimationControl ? /*#__PURE__*/_react["default"].createElement(LayerAnimationControl, {
        updateAnimationSpeed: visStateActions.updateLayerAnimationSpeed,
        toggleAnimation: visStateActions.toggleLayerAnimation,
        isAnimatable: !animatedFilter,
        isAnimating: isAnimating,
        resetAnimation: resetAnimation,
        setTimelineValue: setTimelineValue,
        timeline: timeline
      }) : null;
    }) : null, enhancedFilter ? /*#__PURE__*/_react["default"].createElement(FilterAnimationController, {
      filter: enhancedFilter,
      filterIdx: animatedFilterIdx > -1 ? animatedFilterIdx : enlargedFilterIdx,
      setFilterAnimationTime: visStateActions.setFilterAnimationTime
    }, function (isAnimating, start, pause, resetAnimation, timeline, setTimelineValue) {
      return showTimeWidget && timeline ? /*#__PURE__*/_react["default"].createElement(TimeWidget
      // TimeWidget uses React.memo, here we pass width
      // even though it doesnt use it, to force rerender
      , {
        filter: enhancedFilter,
        index: enlargedFilterIdx,
        datasets: datasets,
        layers: layers,
        readOnly: readOnly,
        showTimeDisplay: showFloatingTimeDisplay,
        setFilterPlot: visStateActions.setFilterPlot,
        setFilterAnimationTime: setTimelineValue,
        setFilterAnimationWindow: visStateActions.setFilterAnimationWindow,
        setFilterSyncTimelineMode: visStateActions.setTimeFilterSyncTimelineMode,
        toggleAnimation: visStateActions.toggleFilterAnimation,
        updateAnimationSpeed: visStateActions.updateFilterAnimationSpeed,
        resetAnimation: resetAnimation,
        isAnimatable: !animationConfig || !animationConfig.isAnimating,
        animationConfig: animationConfig,
        onClose: onClose,
        timeline: timeline,
        onToggleMinify: onToggleMinify
      }) : null;
    }) : null);
  };
  return (0, _styledComponents.withTheme)( /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
    return /*#__PURE__*/_react["default"].createElement(BottomWidget, (0, _extends2["default"])({}, props, {
      rootRef: ref
    }));
  }));
}
/* eslint-enable complexity */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9jb25zdGFudHMiLCJfdXRpbHMiLCJfc3R5bGVzIiwiX3RpbWVXaWRnZXQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2ZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXIiLCJfbGF5ZXJBbmltYXRpb25Db250cm9sbGVyIiwiX2FuaW1hdGlvbkNvbnRyb2wiLCJfdGVtcGxhdGVPYmplY3QiLCJfdGVtcGxhdGVPYmplY3QyIiwiX3RlbXBsYXRlT2JqZWN0MyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIm1heFdpZHRoIiwiQm90dG9tV2lkZ2V0Q29udGFpbmVyIiwiZGl2IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbDIiLCJwcm9wcyIsImhhc1BhZGRpbmciLCJ0aGVtZSIsImJvdHRvbVdpZGdldFBhZGRpbmdUb3AiLCJib3R0b21XaWRnZXRQYWRkaW5nUmlnaHQiLCJib3R0b21XaWRnZXRQYWRkaW5nQm90dG9tIiwiYm90dG9tV2lkZ2V0UGFkZGluZ0xlZnQiLCJ3aWR0aCIsIm1lZGlhIiwicG9ydGFibGUiLCJCb3R0b21XaWRnZXRGYWN0b3J5IiwiZGVwcyIsIlRpbWVXaWRnZXQiLCJBbmltYXRpb25Db250cm9sIiwiRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlciIsIkxheWVyQW5pbWF0aW9uQ29udHJvbGxlciIsIkxheWVyQW5pbWF0aW9uQ29udHJvbCIsInNpZGVQYW5lbEJnIiwiQm90dG9tV2lkZ2V0IiwiX3VpU3RhdGUkbWFwQ29udHJvbHMiLCJfdWlTdGF0ZSRtYXBDb250cm9sczIiLCJfdGhlbWUkbWFwQ29udHJvbCIsIl90aGVtZSRtYXBDb250cm9sMiIsImRhdGFzZXRzIiwiZmlsdGVycyIsImFuaW1hdGlvbkNvbmZpZyIsInZpc1N0YXRlQWN0aW9ucyIsImNvbnRhaW5lclciLCJ1aVN0YXRlIiwic2lkZVBhbmVsV2lkdGgiLCJsYXllcnMiLCJyb290UmVmIiwiYWN0aXZlU2lkZVBhbmVsIiwicmVhZE9ubHkiLCJpc09wZW4iLCJCb29sZWFuIiwiZW5sYXJnZWRGaWx0ZXJJZHgiLCJ1c2VNZW1vIiwiZmluZEluZGV4IiwiZiIsImlzU2lkZUZpbHRlciIsImFuaW1hdGVkRmlsdGVySWR4IiwiaXNBbmltYXRpbmciLCJhbmltYXRlZEZpbHRlciIsImlzVGltZWxpbmVMaW5rZWRXaXRoRmlsdGVyIiwic29tZSIsInN5bmNlZFdpdGhMYXllclRpbWVsaW5lIiwiaXNNb2JpbGUiLCJoYXNQb3J0YWJsZVdpZHRoIiwiYnJlYWtQb2ludFZhbHVlcyIsImlzTGVnZW5kUGlubmVkIiwibWFwQ29udHJvbHMiLCJtYXBMZWdlbmQiLCJzaG93IiwiYWN0aXZlIiwic3BhY2VGb3JMZWdlbmRXaWR0aCIsIm1hcENvbnRyb2wiLCJwaW5uZWQiLCJyaWdodCIsImVubGFyZ2VkRmlsdGVyV2lkdGgiLCJhbmltYXRhYmxlTGF5ZXIiLCJmaWx0ZXIiLCJsIiwiY29uZmlnIiwiYW5pbWF0aW9uIiwiZW5hYmxlZCIsImlzVmlzaWJsZSIsInJlYWR5VG9BbmltYXRpb24iLCJBcnJheSIsImlzQXJyYXkiLCJkb21haW4iLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImN1cnJlbnRUaW1lIiwic2hvd0Zsb2F0aW5nVGltZURpc3BsYXkiLCJsZW5ndGgiLCJzaG93QW5pbWF0aW9uQ29udHJvbCIsImhpZGVDb250cm9sIiwic2hvd1RpbWVXaWRnZXQiLCJrZXlzIiwiX3VzZU1lbW8iLCJtZXJnZUZpbHRlcldpdGhUaW1lbGluZSIsImVuaGFuY2VkRmlsdGVyIiwiZW5oYW5jZWRBbmltYXRpb25Db25maWciLCJvbkNsb3NlIiwidXNlQ2FsbGJhY2siLCJzZXRGaWx0ZXJWaWV3IiwiRklMVEVSX1ZJRVdfVFlQRVMiLCJzaWRlIiwib25Ub2dnbGVNaW5pZnkiLCJ2aWV3IiwiZW5sYXJnZWQiLCJtaW5pZmllZCIsImNyZWF0ZUVsZW1lbnQiLCJNYXRoIiwibWluIiwic3R5bGUiLCJtYXJnaW5SaWdodCIsImNsYXNzTmFtZSIsInJlZiIsInNldExheWVyQW5pbWF0aW9uVGltZSIsInN0YXJ0IiwicGF1c2UiLCJyZXNldEFuaW1hdGlvbiIsInRpbWVsaW5lIiwic2V0VGltZWxpbmVWYWx1ZSIsInVwZGF0ZUFuaW1hdGlvblNwZWVkIiwidXBkYXRlTGF5ZXJBbmltYXRpb25TcGVlZCIsInRvZ2dsZUFuaW1hdGlvbiIsInRvZ2dsZUxheWVyQW5pbWF0aW9uIiwiaXNBbmltYXRhYmxlIiwiZmlsdGVySWR4Iiwic2V0RmlsdGVyQW5pbWF0aW9uVGltZSIsImluZGV4Iiwic2hvd1RpbWVEaXNwbGF5Iiwic2V0RmlsdGVyUGxvdCIsInNldEZpbHRlckFuaW1hdGlvbldpbmRvdyIsInNldEZpbHRlclN5bmNUaW1lbGluZU1vZGUiLCJzZXRUaW1lRmlsdGVyU3luY1RpbWVsaW5lTW9kZSIsInRvZ2dsZUZpbHRlckFuaW1hdGlvbiIsInVwZGF0ZUZpbHRlckFuaW1hdGlvblNwZWVkIiwid2l0aFRoZW1lIiwiZm9yd2FyZFJlZiIsIl9leHRlbmRzMiJdLCJzb3VyY2VzIjpbIi4uL3NyYy9ib3R0b20td2lkZ2V0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHtmb3J3YXJkUmVmLCB1c2VNZW1vLCB1c2VDYWxsYmFja30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCwge3dpdGhUaGVtZSwgSVN0eWxlZENvbXBvbmVudH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQge0ZJTFRFUl9WSUVXX1RZUEVTfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge2hhc1BvcnRhYmxlV2lkdGgsIGlzU2lkZUZpbHRlciwgbWVyZ2VGaWx0ZXJXaXRoVGltZWxpbmV9IGZyb20gJ0BrZXBsZXIuZ2wvdXRpbHMnO1xuaW1wb3J0IHttZWRpYSwgYnJlYWtQb2ludFZhbHVlc30gZnJvbSAnQGtlcGxlci5nbC9zdHlsZXMnO1xuaW1wb3J0IHtUaW1lUmFuZ2VGaWx0ZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuXG5pbXBvcnQgVGltZVdpZGdldEZhY3RvcnkgZnJvbSAnLi9maWx0ZXJzL3RpbWUtd2lkZ2V0JztcbmltcG9ydCB7Ym90dG9tV2lkZ2V0U2VsZWN0b3J9IGZyb20gJy4va2VwbGVyLWdsJztcbmltcG9ydCBGaWx0ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSBmcm9tICcuL2ZpbHRlci1hbmltYXRpb24tY29udHJvbGxlcic7XG5pbXBvcnQgTGF5ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSBmcm9tICcuL2xheWVyLWFuaW1hdGlvbi1jb250cm9sbGVyJztcbmltcG9ydCBBbmltYXRpb25Db250cm9sRmFjdG9yeSBmcm9tICcuL2NvbW1vbi9hbmltYXRpb24tY29udHJvbC9hbmltYXRpb24tY29udHJvbCc7XG5pbXBvcnQge0Jhc2VDb21wb25lbnRQcm9wc30gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IG1heFdpZHRoID0gMTA4MDtcblxuZXhwb3J0IHR5cGUgQm90dG9tV2lkZ2V0Q29udGFpbmVyUHJvcHMgPSBCYXNlQ29tcG9uZW50UHJvcHMgJiB7XG4gIGhhc1BhZGRpbmc/OiBib29sZWFuO1xuICB3aWR0aDogbnVtYmVyO1xuICByZWY6IFJlYWN0LkZvcndhcmRlZFJlZjxIVE1MRGl2RWxlbWVudD47XG59O1xuXG5jb25zdCBCb3R0b21XaWRnZXRDb250YWluZXI6IElTdHlsZWRDb21wb25lbnQ8XG4gICd3ZWInLFxuICBCb3R0b21XaWRnZXRDb250YWluZXJQcm9wc1xuPiA9IHN0eWxlZC5kaXY8Qm90dG9tV2lkZ2V0Q29udGFpbmVyUHJvcHM+YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwYWRkaW5nLXRvcDogJHtwcm9wcyA9PiAocHJvcHMuaGFzUGFkZGluZyA/IHByb3BzLnRoZW1lLmJvdHRvbVdpZGdldFBhZGRpbmdUb3AgOiAwKX1weDtcbiAgcGFkZGluZy1yaWdodDogJHtwcm9wcyA9PiAocHJvcHMuaGFzUGFkZGluZyA/IHByb3BzLnRoZW1lLmJvdHRvbVdpZGdldFBhZGRpbmdSaWdodCA6IDApfXB4O1xuICBwYWRkaW5nLWJvdHRvbTogJHtwcm9wcyA9PiAocHJvcHMuaGFzUGFkZGluZyA/IHByb3BzLnRoZW1lLmJvdHRvbVdpZGdldFBhZGRpbmdCb3R0b20gOiAwKX1weDtcbiAgcGFkZGluZy1sZWZ0OiAke3Byb3BzID0+IChwcm9wcy5oYXNQYWRkaW5nID8gcHJvcHMudGhlbWUuYm90dG9tV2lkZ2V0UGFkZGluZ0xlZnQgOiAwKX1weDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmUgIWltcG9ydGFudDsgLyogcHJldmVudCBwYWRkaW5nIGZyb20gYmxvY2tpbmcgaW5wdXQgKi9cbiAgJiA+ICoge1xuICAgIC8qIGFsbCBjaGlsZHJlbiBzaG91bGQgYWxsb3cgaW5wdXQgKi9cbiAgICBwb2ludGVyLWV2ZW50czogYWxsO1xuICB9XG4gIHdpZHRoOiAke3Byb3BzID0+IHByb3BzLndpZHRofXB4O1xuICB6LWluZGV4OiAxO1xuICAke21lZGlhLnBvcnRhYmxlYHBhZGRpbmc6IDA7YH1cbmA7XG5cbmV4cG9ydCB0eXBlIEJvdHRvbVdpZGdldFByb3BzID0ge1xuICByb290UmVmOiBSZWFjdC5Gb3J3YXJkZWRSZWY8SFRNTERpdkVsZW1lbnQ+O1xuICBjb250YWluZXJXOiBudW1iZXI7XG59ICYgUmV0dXJuVHlwZTx0eXBlb2YgYm90dG9tV2lkZ2V0U2VsZWN0b3I+O1xudHlwZSBUaGVtZVByb3AgPSB7XG4gIHRoZW1lOiBhbnk7XG59O1xudHlwZSBCb3R0b21XaWRnZXRUaGVtZWRQcm9wcyA9IEJvdHRvbVdpZGdldFByb3BzICYgVGhlbWVQcm9wO1xuXG5Cb3R0b21XaWRnZXRGYWN0b3J5LmRlcHMgPSBbXG4gIFRpbWVXaWRnZXRGYWN0b3J5LFxuICBBbmltYXRpb25Db250cm9sRmFjdG9yeSxcbiAgRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnksXG4gIExheWVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3Rvcnlcbl07XG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbXBsZXhpdHkgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJvdHRvbVdpZGdldEZhY3RvcnkoXG4gIFRpbWVXaWRnZXQ6IFJldHVyblR5cGU8dHlwZW9mIFRpbWVXaWRnZXRGYWN0b3J5PixcbiAgQW5pbWF0aW9uQ29udHJvbDogUmV0dXJuVHlwZTx0eXBlb2YgQW5pbWF0aW9uQ29udHJvbEZhY3Rvcnk+LFxuICBGaWx0ZXJBbmltYXRpb25Db250cm9sbGVyOiBSZXR1cm5UeXBlPHR5cGVvZiBGaWx0ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeT4sXG4gIExheWVyQW5pbWF0aW9uQ29udHJvbGxlcjogUmV0dXJuVHlwZTx0eXBlb2YgTGF5ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeT5cbik6IFJlYWN0LkZDPEJvdHRvbVdpZGdldFRoZW1lZFByb3BzPiB7XG4gIGNvbnN0IExheWVyQW5pbWF0aW9uQ29udHJvbCA9IHN0eWxlZChBbmltYXRpb25Db250cm9sKWBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLnNpZGVQYW5lbEJnfTtcbiAgYDtcblxuICBjb25zdCBCb3R0b21XaWRnZXQ6IFJlYWN0LkZDPEJvdHRvbVdpZGdldFRoZW1lZFByb3BzPiA9IChwcm9wczogQm90dG9tV2lkZ2V0VGhlbWVkUHJvcHMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhc2V0cyxcbiAgICAgIGZpbHRlcnMsXG4gICAgICBhbmltYXRpb25Db25maWcsXG4gICAgICB2aXNTdGF0ZUFjdGlvbnMsXG4gICAgICBjb250YWluZXJXLFxuICAgICAgdWlTdGF0ZSxcbiAgICAgIHNpZGVQYW5lbFdpZHRoLFxuICAgICAgbGF5ZXJzLFxuICAgICAgcm9vdFJlZixcbiAgICAgIHRoZW1lXG4gICAgfSA9IHByb3BzO1xuXG4gICAgY29uc3Qge2FjdGl2ZVNpZGVQYW5lbCwgcmVhZE9ubHl9ID0gdWlTdGF0ZTtcbiAgICBjb25zdCBpc09wZW4gPSBCb29sZWFuKGFjdGl2ZVNpZGVQYW5lbCk7XG5cbiAgICBjb25zdCBlbmxhcmdlZEZpbHRlcklkeCA9IHVzZU1lbW8oKCkgPT4gZmlsdGVycy5maW5kSW5kZXgoZiA9PiAhaXNTaWRlRmlsdGVyKGYpKSwgW2ZpbHRlcnNdKTtcbiAgICBjb25zdCBhbmltYXRlZEZpbHRlcklkeCA9IHVzZU1lbW8oKCkgPT4gZmlsdGVycy5maW5kSW5kZXgoZiA9PiBmLmlzQW5pbWF0aW5nKSwgW2ZpbHRlcnNdKTtcbiAgICBjb25zdCBhbmltYXRlZEZpbHRlciA9IGFuaW1hdGVkRmlsdGVySWR4ID4gLTEgPyBmaWx0ZXJzW2FuaW1hdGVkRmlsdGVySWR4XSA6IG51bGw7XG4gICAgLy8gd2UgbmVlZCB0byBoaWRlIGxheWVyIHRpbWVsaW5lIHdoZW4gZmlsdGVyIGlzIHN5bmNlZCBhbmQgbm90IGVubGFyZ2VkXG4gICAgY29uc3QgaXNUaW1lbGluZUxpbmtlZFdpdGhGaWx0ZXIgPSB1c2VNZW1vKFxuICAgICAgKCkgPT4gKGZpbHRlcnMgYXMgVGltZVJhbmdlRmlsdGVyW10pLnNvbWUoZiA9PiBmLnN5bmNlZFdpdGhMYXllclRpbWVsaW5lKSxcbiAgICAgIFtmaWx0ZXJzXVxuICAgICk7XG5cbiAgICBjb25zdCBpc01vYmlsZSA9IHVzZU1lbW8oKCkgPT4gaGFzUG9ydGFibGVXaWR0aChicmVha1BvaW50VmFsdWVzKSwgW10pO1xuICAgIGNvbnN0IGlzTGVnZW5kUGlubmVkID1cbiAgICAgIHVpU3RhdGUubWFwQ29udHJvbHM/Lm1hcExlZ2VuZD8uc2hvdyAmJiB1aVN0YXRlLm1hcENvbnRyb2xzPy5tYXBMZWdlbmQ/LmFjdGl2ZTtcbiAgICBjb25zdCBzcGFjZUZvckxlZ2VuZFdpZHRoID0gaXNMZWdlbmRQaW5uZWRcbiAgICAgID8gdGhlbWUubWFwQ29udHJvbD8ud2lkdGggK1xuICAgICAgICB0aGVtZS5tYXBDb250cm9sPy5tYXBMZWdlbmQ/LnBpbm5lZD8ucmlnaHQgKiAyIC1cbiAgICAgICAgdGhlbWUuYm90dG9tV2lkZ2V0UGFkZGluZ1JpZ2h0XG4gICAgICA6IDA7XG5cbiAgICBjb25zdCBlbmxhcmdlZEZpbHRlcldpZHRoID0gdXNlTWVtbyhcbiAgICAgICgpID0+ICghaXNNb2JpbGUgJiYgaXNPcGVuID8gY29udGFpbmVyVyAtIHNpZGVQYW5lbFdpZHRoIDogY29udGFpbmVyVykgLSBzcGFjZUZvckxlZ2VuZFdpZHRoLFxuICAgICAgW2lzTW9iaWxlLCBpc09wZW4sIGNvbnRhaW5lclcsIHNpZGVQYW5lbFdpZHRoLCBzcGFjZUZvckxlZ2VuZFdpZHRoXVxuICAgICk7XG5cbiAgICAvLyBzaG93IHBsYXliYWNrIGNvbnRyb2wgaWYgbGF5ZXJzIGNvbnRhaW4gdHJpcCBsYXllciAmIGF0IGxlYXN0IG9uZSB0cmlwIGxheWVyIGlzIHZpc2libGVcbiAgICBjb25zdCBhbmltYXRhYmxlTGF5ZXIgPSB1c2VNZW1vKFxuICAgICAgKCkgPT5cbiAgICAgICAgbGF5ZXJzLmZpbHRlcihsID0+IGwuY29uZmlnLmFuaW1hdGlvbiAmJiBsLmNvbmZpZy5hbmltYXRpb24uZW5hYmxlZCAmJiBsLmNvbmZpZy5pc1Zpc2libGUpLFxuICAgICAgW2xheWVyc11cbiAgICApO1xuXG4gICAgY29uc3QgcmVhZHlUb0FuaW1hdGlvbiA9IHVzZU1lbW8oXG4gICAgICAoKSA9PiBBcnJheS5pc0FycmF5KGFuaW1hdGlvbkNvbmZpZy5kb21haW4pICYmIE51bWJlci5pc0Zpbml0ZShhbmltYXRpb25Db25maWcuY3VycmVudFRpbWUpLFxuICAgICAgW2FuaW1hdGlvbkNvbmZpZy5kb21haW4sIGFuaW1hdGlvbkNvbmZpZy5jdXJyZW50VGltZV1cbiAgICApO1xuXG4gICAgLy8gaWYgYW5pbWF0aW9uIGNvbnRyb2wgaXMgc2hvd2luZywgaGlkZSB0aW1lIGRpc3BsYXkgaW4gdGltZSBzbGlkZXJcbiAgICBjb25zdCBzaG93RmxvYXRpbmdUaW1lRGlzcGxheSA9ICFhbmltYXRhYmxlTGF5ZXIubGVuZ3RoO1xuICAgIGNvbnN0IHNob3dBbmltYXRpb25Db250cm9sID1cbiAgICAgIGFuaW1hdGFibGVMYXllci5sZW5ndGggJiYgcmVhZHlUb0FuaW1hdGlvbiAmJiAhYW5pbWF0aW9uQ29uZmlnLmhpZGVDb250cm9sO1xuICAgIGNvbnN0IHNob3dUaW1lV2lkZ2V0ID0gZW5sYXJnZWRGaWx0ZXJJZHggPiAtMSAmJiBPYmplY3Qua2V5cyhkYXRhc2V0cykubGVuZ3RoID4gMDtcblxuICAgIC8vIGlmIGZpbHRlciBpcyBub3QgYW5pbWF0aW5nLCBwYXNzIGluIGVubGFyZ2VkIGZpbHRlciBoZXJlIGJlY2F1c2VcbiAgICAvLyBhbmltYXRpb24gY29udHJvbGxlciBuZWVkcyB0byBjYWxsIHJlc2V0IG9uIGl0XG4gICAgY29uc3QgZmlsdGVyID0gdXNlTWVtbyhcbiAgICAgICgpID0+IChhbmltYXRlZEZpbHRlciBhcyBUaW1lUmFuZ2VGaWx0ZXIpIHx8IGZpbHRlcnNbZW5sYXJnZWRGaWx0ZXJJZHhdLFxuICAgICAgW2FuaW1hdGVkRmlsdGVyLCBmaWx0ZXJzLCBlbmxhcmdlZEZpbHRlcklkeF1cbiAgICApO1xuXG4gICAgLy8gd2UgbWVyZ2UgZmlsdGVyIGFuZCB0aW1lbGluZSBpZiBmaWx0ZXIgaXMgc3luY2VkXG4gICAgY29uc3Qge2ZpbHRlcjogZW5oYW5jZWRGaWx0ZXIsIGFuaW1hdGlvbkNvbmZpZzogZW5oYW5jZWRBbmltYXRpb25Db25maWd9ID0gdXNlTWVtbyhcbiAgICAgICgpID0+XG4gICAgICAgIGZpbHRlcj8uc3luY2VkV2l0aExheWVyVGltZWxpbmVcbiAgICAgICAgICA/IG1lcmdlRmlsdGVyV2l0aFRpbWVsaW5lKGZpbHRlciwgYW5pbWF0aW9uQ29uZmlnKVxuICAgICAgICAgIDoge2ZpbHRlciwgYW5pbWF0aW9uQ29uZmlnfSxcbiAgICAgIFtmaWx0ZXIsIGFuaW1hdGlvbkNvbmZpZ11cbiAgICApO1xuXG4gICAgY29uc3Qgb25DbG9zZSA9IHVzZUNhbGxiYWNrKFxuICAgICAgKCkgPT4gdmlzU3RhdGVBY3Rpb25zLnNldEZpbHRlclZpZXcoZW5sYXJnZWRGaWx0ZXJJZHgsIEZJTFRFUl9WSUVXX1RZUEVTLnNpZGUpLFxuICAgICAgW3Zpc1N0YXRlQWN0aW9ucywgZW5sYXJnZWRGaWx0ZXJJZHhdXG4gICAgKTtcblxuICAgIGNvbnN0IG9uVG9nZ2xlTWluaWZ5ID0gdXNlQ2FsbGJhY2soXG4gICAgICAoKSA9PlxuICAgICAgICB2aXNTdGF0ZUFjdGlvbnMuc2V0RmlsdGVyVmlldyhcbiAgICAgICAgICBlbmxhcmdlZEZpbHRlcklkeCxcbiAgICAgICAgICBmaWx0ZXIudmlldyA9PT0gRklMVEVSX1ZJRVdfVFlQRVMuZW5sYXJnZWRcbiAgICAgICAgICAgID8gRklMVEVSX1ZJRVdfVFlQRVMubWluaWZpZWRcbiAgICAgICAgICAgIDogRklMVEVSX1ZJRVdfVFlQRVMuZW5sYXJnZWRcbiAgICAgICAgKSxcbiAgICAgIFtlbmxhcmdlZEZpbHRlcklkeCwgdmlzU3RhdGVBY3Rpb25zLCBmaWx0ZXJdXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Qm90dG9tV2lkZ2V0Q29udGFpbmVyXG4gICAgICAgIHdpZHRoPXtNYXRoLm1pbihtYXhXaWR0aCwgZW5sYXJnZWRGaWx0ZXJXaWR0aCl9XG4gICAgICAgIHN0eWxlPXt7bWFyZ2luUmlnaHQ6IHNwYWNlRm9yTGVnZW5kV2lkdGh9fVxuICAgICAgICBjbGFzc05hbWU9XCJib3R0b20td2lkZ2V0LS1jb250YWluZXJcIlxuICAgICAgICBoYXNQYWRkaW5nPXtzaG93QW5pbWF0aW9uQ29udHJvbCB8fCBzaG93VGltZVdpZGdldH1cbiAgICAgICAgcmVmPXtyb290UmVmfVxuICAgICAgPlxuICAgICAgICB7IWlzVGltZWxpbmVMaW5rZWRXaXRoRmlsdGVyID8gKFxuICAgICAgICAgIDxMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJcbiAgICAgICAgICAgIGFuaW1hdGlvbkNvbmZpZz17ZW5oYW5jZWRBbmltYXRpb25Db25maWd9XG4gICAgICAgICAgICBzZXRMYXllckFuaW1hdGlvblRpbWU9e3Zpc1N0YXRlQWN0aW9ucy5zZXRMYXllckFuaW1hdGlvblRpbWV9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgeyhpc0FuaW1hdGluZywgc3RhcnQsIHBhdXNlLCByZXNldEFuaW1hdGlvbiwgdGltZWxpbmUsIHNldFRpbWVsaW5lVmFsdWUpID0+XG4gICAgICAgICAgICAgIHNob3dBbmltYXRpb25Db250cm9sID8gKFxuICAgICAgICAgICAgICAgIDxMYXllckFuaW1hdGlvbkNvbnRyb2xcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZUFuaW1hdGlvblNwZWVkPXt2aXNTdGF0ZUFjdGlvbnMudXBkYXRlTGF5ZXJBbmltYXRpb25TcGVlZH1cbiAgICAgICAgICAgICAgICAgIHRvZ2dsZUFuaW1hdGlvbj17dmlzU3RhdGVBY3Rpb25zLnRvZ2dsZUxheWVyQW5pbWF0aW9ufVxuICAgICAgICAgICAgICAgICAgaXNBbmltYXRhYmxlPXshYW5pbWF0ZWRGaWx0ZXJ9XG4gICAgICAgICAgICAgICAgICBpc0FuaW1hdGluZz17aXNBbmltYXRpbmd9XG4gICAgICAgICAgICAgICAgICByZXNldEFuaW1hdGlvbj17cmVzZXRBbmltYXRpb259XG4gICAgICAgICAgICAgICAgICBzZXRUaW1lbGluZVZhbHVlPXtzZXRUaW1lbGluZVZhbHVlfVxuICAgICAgICAgICAgICAgICAgdGltZWxpbmU9e3RpbWVsaW5lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICkgOiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC9MYXllckFuaW1hdGlvbkNvbnRyb2xsZXI+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICB7ZW5oYW5jZWRGaWx0ZXIgPyAoXG4gICAgICAgICAgPEZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJcbiAgICAgICAgICAgIGZpbHRlcj17ZW5oYW5jZWRGaWx0ZXJ9XG4gICAgICAgICAgICBmaWx0ZXJJZHg9e2FuaW1hdGVkRmlsdGVySWR4ID4gLTEgPyBhbmltYXRlZEZpbHRlcklkeCA6IGVubGFyZ2VkRmlsdGVySWR4fVxuICAgICAgICAgICAgc2V0RmlsdGVyQW5pbWF0aW9uVGltZT17dmlzU3RhdGVBY3Rpb25zLnNldEZpbHRlckFuaW1hdGlvblRpbWV9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgeyhpc0FuaW1hdGluZywgc3RhcnQsIHBhdXNlLCByZXNldEFuaW1hdGlvbiwgdGltZWxpbmUsIHNldFRpbWVsaW5lVmFsdWUpID0+XG4gICAgICAgICAgICAgIHNob3dUaW1lV2lkZ2V0ICYmIHRpbWVsaW5lID8gKFxuICAgICAgICAgICAgICAgIDxUaW1lV2lkZ2V0XG4gICAgICAgICAgICAgICAgICAvLyBUaW1lV2lkZ2V0IHVzZXMgUmVhY3QubWVtbywgaGVyZSB3ZSBwYXNzIHdpZHRoXG4gICAgICAgICAgICAgICAgICAvLyBldmVuIHRob3VnaCBpdCBkb2VzbnQgdXNlIGl0LCB0byBmb3JjZSByZXJlbmRlclxuICAgICAgICAgICAgICAgICAgZmlsdGVyPXtlbmhhbmNlZEZpbHRlciBhcyBUaW1lUmFuZ2VGaWx0ZXJ9XG4gICAgICAgICAgICAgICAgICBpbmRleD17ZW5sYXJnZWRGaWx0ZXJJZHh9XG4gICAgICAgICAgICAgICAgICBkYXRhc2V0cz17ZGF0YXNldHN9XG4gICAgICAgICAgICAgICAgICBsYXllcnM9e2xheWVyc31cbiAgICAgICAgICAgICAgICAgIHJlYWRPbmx5PXtyZWFkT25seX1cbiAgICAgICAgICAgICAgICAgIHNob3dUaW1lRGlzcGxheT17c2hvd0Zsb2F0aW5nVGltZURpc3BsYXl9XG4gICAgICAgICAgICAgICAgICBzZXRGaWx0ZXJQbG90PXt2aXNTdGF0ZUFjdGlvbnMuc2V0RmlsdGVyUGxvdH1cbiAgICAgICAgICAgICAgICAgIHNldEZpbHRlckFuaW1hdGlvblRpbWU9e3NldFRpbWVsaW5lVmFsdWV9XG4gICAgICAgICAgICAgICAgICBzZXRGaWx0ZXJBbmltYXRpb25XaW5kb3c9e3Zpc1N0YXRlQWN0aW9ucy5zZXRGaWx0ZXJBbmltYXRpb25XaW5kb3d9XG4gICAgICAgICAgICAgICAgICBzZXRGaWx0ZXJTeW5jVGltZWxpbmVNb2RlPXt2aXNTdGF0ZUFjdGlvbnMuc2V0VGltZUZpbHRlclN5bmNUaW1lbGluZU1vZGV9XG4gICAgICAgICAgICAgICAgICB0b2dnbGVBbmltYXRpb249e3Zpc1N0YXRlQWN0aW9ucy50b2dnbGVGaWx0ZXJBbmltYXRpb259XG4gICAgICAgICAgICAgICAgICB1cGRhdGVBbmltYXRpb25TcGVlZD17dmlzU3RhdGVBY3Rpb25zLnVwZGF0ZUZpbHRlckFuaW1hdGlvblNwZWVkfVxuICAgICAgICAgICAgICAgICAgcmVzZXRBbmltYXRpb249e3Jlc2V0QW5pbWF0aW9ufVxuICAgICAgICAgICAgICAgICAgaXNBbmltYXRhYmxlPXshYW5pbWF0aW9uQ29uZmlnIHx8ICFhbmltYXRpb25Db25maWcuaXNBbmltYXRpbmd9XG4gICAgICAgICAgICAgICAgICBhbmltYXRpb25Db25maWc9e2FuaW1hdGlvbkNvbmZpZ31cbiAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9e29uQ2xvc2V9XG4gICAgICAgICAgICAgICAgICB0aW1lbGluZT17dGltZWxpbmV9XG4gICAgICAgICAgICAgICAgICBvblRvZ2dsZU1pbmlmeT17b25Ub2dnbGVNaW5pZnl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSA6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L0ZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXI+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9Cb3R0b21XaWRnZXRDb250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gd2l0aFRoZW1lKFxuICAgIGZvcndhcmRSZWYoKHByb3BzOiBCb3R0b21XaWRnZXRUaGVtZWRQcm9wcywgcmVmOiBSZWFjdC5Gb3J3YXJkZWRSZWY8SFRNTERpdkVsZW1lbnQ+KSA9PiAoXG4gICAgICA8Qm90dG9tV2lkZ2V0IHsuLi5wcm9wc30gcm9vdFJlZj17cmVmfSAvPlxuICAgICkpXG4gICk7XG59XG4vKiBlc2xpbnQtZW5hYmxlIGNvbXBsZXhpdHkgKi9cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGlCQUFBLEdBQUFGLHVCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRSxVQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFKLE9BQUE7QUFHQSxJQUFBSyxXQUFBLEdBQUFDLHNCQUFBLENBQUFOLE9BQUE7QUFFQSxJQUFBTywwQkFBQSxHQUFBRCxzQkFBQSxDQUFBTixPQUFBO0FBQ0EsSUFBQVEseUJBQUEsR0FBQUYsc0JBQUEsQ0FBQU4sT0FBQTtBQUNBLElBQUFTLGlCQUFBLEdBQUFILHNCQUFBLENBQUFOLE9BQUE7QUFBbUYsSUFBQVUsZUFBQSxFQUFBQyxnQkFBQSxFQUFBQyxnQkFBQSxFQWZuRjtBQUNBO0FBQUEsU0FBQUMseUJBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQTtFQUFBLElBQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQTtJ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