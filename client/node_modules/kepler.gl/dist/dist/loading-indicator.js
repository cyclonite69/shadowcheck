"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledContainer = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _layers = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/layers/src");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
var StyledContainer = exports.StyledContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  left: ", "px;\n  bottom: ", "px;\n  z-index: 1;\n  color: ", ";\n  opacity: ", ";\n  transition: opacity 0.5s ease-in-out;\n  background-color: ", ";\n  border-radius: 0px;\n  padding-left: 3px;\n  padding-right: 3px;\n  font-size: 12px;\n"])), function (props) {
  return props.$left;
}, function (props) {
  return props.theme.sidePanel.margin.left;
}, function (props) {
  return props.theme.textColorHl;
}, function (props) {
  return props.$isVisible ? 1 : 0;
}, function (props) {
  return props.theme.sidePanelBg;
});
/** Extra adjustment for the loading indicator when side panel is visible */
var LEFT_POSITION_ADJUSTMENT = 3;
var LoadingIndicator = function LoadingIndicator(_ref) {
  var isVisible = _ref.isVisible,
    activeSidePanel = _ref.activeSidePanel,
    sidePanelWidth = _ref.sidePanelWidth,
    theme = _ref.theme;
  var left = (activeSidePanel ? (sidePanelWidth || 0) + LEFT_POSITION_ADJUSTMENT : 0) + theme.sidePanel.margin.left;

  // Helper message to track number of raster tiles that are being loaded
  var numRasterTilesInProgress = (0, _layers.getNumRasterTilesBeingLoaded)();
  var extraMessage = numRasterTilesInProgress < 1 ? '' : "".concat(numRasterTilesInProgress, " raster tile").concat(numRasterTilesInProgress === 1 ? ' is' : 's are', " being loaded");
  return /*#__PURE__*/_react["default"].createElement(StyledContainer, {
    $isVisible: isVisible,
    $left: left
  }, "Loading... ".concat(extraMessage));
};
var _default = exports["default"] = (0, _styledComponents.withTheme)(LoadingIndicator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zdHlsZWRDb21wb25lbnRzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfbGF5ZXJzIiwiX3RlbXBsYXRlT2JqZWN0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiU3R5bGVkQ29udGFpbmVyIiwiZXhwb3J0cyIsImRpdiIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwyIiwicHJvcHMiLCIkbGVmdCIsInRoZW1lIiwic2lkZVBhbmVsIiwibWFyZ2luIiwibGVmdCIsInRleHRDb2xvckhsIiwiJGlzVmlzaWJsZSIsInNpZGVQYW5lbEJnIiwiTEVGVF9QT1NJVElPTl9BREpVU1RNRU5UIiwiTG9hZGluZ0luZGljYXRvciIsIl9yZWYiLCJpc1Zpc2libGUiLCJhY3RpdmVTaWRlUGFuZWwiLCJzaWRlUGFuZWxXaWR0aCIsIm51bVJhc3RlclRpbGVzSW5Qcm9ncmVzcyIsImdldE51bVJhc3RlclRpbGVzQmVpbmdMb2FkZWQiLCJleHRyYU1lc3NhZ2UiLCJjb25jYXQiLCJjcmVhdGVFbGVtZW50IiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyIuLi9zcmMvbG9hZGluZy1pbmRpY2F0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge1Byb3BzV2l0aENoaWxkcmVufSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkLCB7d2l0aFRoZW1lfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCB7Z2V0TnVtUmFzdGVyVGlsZXNCZWluZ0xvYWRlZH0gZnJvbSAnQGtlcGxlci5nbC9sYXllcnMnO1xuXG50eXBlIFN0eWxlZENvbnRhaW5lclByb3BzID0ge1xuICAkaXNWaXNpYmxlPzogYm9vbGVhbjtcbiAgJGxlZnQ6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRDb250YWluZXIgPSBzdHlsZWQuZGl2PFN0eWxlZENvbnRhaW5lclByb3BzPmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAke3Byb3BzID0+IHByb3BzLiRsZWZ0fXB4O1xuICBib3R0b206ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuc2lkZVBhbmVsLm1hcmdpbi5sZWZ0fXB4O1xuICB6LWluZGV4OiAxO1xuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS50ZXh0Q29sb3JIbH07XG4gIG9wYWNpdHk6ICR7cHJvcHMgPT4gKHByb3BzLiRpc1Zpc2libGUgPyAxIDogMCl9O1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNXMgZWFzZS1pbi1vdXQ7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUuc2lkZVBhbmVsQmd9O1xuICBib3JkZXItcmFkaXVzOiAwcHg7XG4gIHBhZGRpbmctbGVmdDogM3B4O1xuICBwYWRkaW5nLXJpZ2h0OiAzcHg7XG4gIGZvbnQtc2l6ZTogMTJweDtcbmA7XG5cbnR5cGUgTG9hZGluZ0luZGljYXRvclByb3BzID0ge1xuICBpc1Zpc2libGU/OiBib29sZWFuO1xuICBhY3RpdmVTaWRlUGFuZWw/OiBib29sZWFuO1xuICBzaWRlUGFuZWxXaWR0aD86IG51bWJlcjtcbn07XG5cbi8qKiBFeHRyYSBhZGp1c3RtZW50IGZvciB0aGUgbG9hZGluZyBpbmRpY2F0b3Igd2hlbiBzaWRlIHBhbmVsIGlzIHZpc2libGUgKi9cbmNvbnN0IExFRlRfUE9TSVRJT05fQURKVVNUTUVOVCA9IDM7XG5cbmNvbnN0IExvYWRpbmdJbmRpY2F0b3I6IFJlYWN0LkZDPExvYWRpbmdJbmRpY2F0b3JQcm9wcyAmIHt0aGVtZTogYW55fT4gPSAoe1xuICBpc1Zpc2libGUsXG4gIGFjdGl2ZVNpZGVQYW5lbCxcbiAgc2lkZVBhbmVsV2lkdGgsXG4gIHRoZW1lXG59KSA9PiB7XG4gIGNvbnN0IGxlZnQgPVxuICAgIChhY3RpdmVTaWRlUGFuZWwgPyAoc2lkZVBhbmVsV2lkdGggfHwgMCkgKyBMRUZUX1BPU0lUSU9OX0FESlVTVE1FTlQgOiAwKSArXG4gICAgdGhlbWUuc2lkZVBhbmVsLm1hcmdpbi5sZWZ0O1xuXG4gIC8vIEhlbHBlciBtZXNzYWdlIHRvIHRyYWNrIG51bWJlciBvZiByYXN0ZXIgdGlsZXMgdGhhdCBhcmUgYmVpbmcgbG9hZGVkXG4gIGNvbnN0IG51bVJhc3RlclRpbGVzSW5Qcm9ncmVzcyA9IGdldE51bVJhc3RlclRpbGVzQmVpbmdMb2FkZWQoKTtcbiAgY29uc3QgZXh0cmFNZXNzYWdlID1cbiAgICBudW1SYXN0ZXJUaWxlc0luUHJvZ3Jlc3MgPCAxXG4gICAgICA/ICcnXG4gICAgICA6IGAke251bVJhc3RlclRpbGVzSW5Qcm9ncmVzc30gcmFzdGVyIHRpbGUke1xuICAgICAgICAgIG51bVJhc3RlclRpbGVzSW5Qcm9ncmVzcyA9PT0gMSA/ICcgaXMnIDogJ3MgYXJlJ1xuICAgICAgICB9IGJlaW5nIGxvYWRlZGA7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkQ29udGFpbmVyICRpc1Zpc2libGU9e2lzVmlzaWJsZX0gJGxlZnQ9e2xlZnR9PlxuICAgICAge2BMb2FkaW5nLi4uICR7ZXh0cmFNZXNzYWdlfWB9XG4gICAgPC9TdHlsZWRDb250YWluZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoTG9hZGluZ0luZGljYXRvcikgYXMgUmVhY3QuRkM8UHJvcHNXaXRoQ2hpbGRyZW48TG9hZGluZ0lu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