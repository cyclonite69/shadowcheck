"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _sliderHandle = _interopRequireDefault(require("./slider-handle"));
var _sliderBarHandle = _interopRequireDefault(require("./slider-bar-handle"));
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _callSuper(t, o, e) {
  return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
}
function noop() {
  return;
}
var StyledRangeSlider = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  background-color: ", ";\n  ", ";\n  ", ";\n"])), function (props) {
  return props.theme.sliderBarBgd;
}, function (props) {
  return "".concat(props.$vertical ? 'width' : 'height', ": ").concat(props.theme.sliderBarHeight, "px");
}, function (props) {
  return "".concat(props.$vertical ? 'height' : 'width', ": 100%");
});
var SliderWrapper = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  flex-grow: 1;\n"])));
var Slider = exports["default"] = /*#__PURE__*/function (_Component) {
  function Slider(props) {
    var _this;
    (0, _classCallCheck2["default"])(this, Slider);
    _this = _callSuper(this, Slider, [props]);
    (0, _defineProperty2["default"])(_this, "anchor", 0);
    (0, _defineProperty2["default"])(_this, "ref", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2["default"])(_this, "track", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2["default"])(_this, "setAnchor", function (x) {
      // used to calculate delta
      _this.anchor = x;
    });
    (0, _defineProperty2["default"])(_this, "slide0Listener", function (x) {
      var _this$props = _this.props,
        value1 = _this$props.value1,
        minValue = _this$props.minValue;
      var val = _this.getValue(minValue, x);
      _this.props.onSlider0Change((0, _utils.clamp)([minValue, value1], val));
    });
    (0, _defineProperty2["default"])(_this, "slide1Listener", function (x) {
      var _this$props2 = _this.props,
        minValue = _this$props2.minValue,
        maxValue = _this$props2.maxValue,
        value0 = _this$props2.value0;
      var val = _this.getValue(minValue, x);
      _this.props.onSlider1Change((0, _utils.clamp)([value0, maxValue], val));
    });
    (0, _defineProperty2["default"])(_this, "sliderBarListener", function (x) {
      var _this$props3 = _this.props,
        value0 = _this$props3.value0,
        value1 = _this$props3.value1,
        minValue = _this$props3.minValue,
        maxValue = _this$props3.maxValue;
      // for slider bar, we use distance delta
      var anchor = _this.anchor;
      var length = value1 - value0; // the length of the selected range shouldn't change when clamping
      var val0 = (0, _utils.clamp)([minValue, maxValue - length], _this.getValue(value0, x - anchor));
      var val1 = (0, _utils.clamp)([val0 + length, maxValue], _this.getValue(value1, x - anchor));
      var deltaX = _this.getDeltaX(val0 - _this.props.value0);
      _this.props.onSliderBarChange(val0, val1);
      // update anchor
      _this.anchor = _this.anchor + deltaX;
    });
    (0, _defineProperty2["default"])(_this, "calcHandleLeft0", function (w, l) {
      return w === 0 ? "calc(".concat(l, "% - ").concat(_this.props.sliderHandleWidth / 2, "px)") : "calc(".concat(l, "% - ").concat(_this.props.sliderHandleWidth / 2, "px)");
    });
    (0, _defineProperty2["default"])(_this, "calcHandleLeft1", function (w, l) {
      return _this.props.isRanged && w === 0 ? "".concat(l, "%") : "calc(".concat(l + w, "% - ").concat(_this.props.sliderHandleWidth / 2, "px)");
    });
    _this.props = props;
    return _this;
  }
  (0, _inherits2["default"])(Slider, _Component);
  return (0, _createClass2["default"])(Slider, [{
    key: "getBaseDistance",
    value: function getBaseDistance() {
      if (!this.ref.current) {
        return 0;
      }
      return this.props.vertical ? this.ref.current.offsetHeight : this.ref.current.offsetWidth;
    }
  }, {
    key: "getDeltaVal",
    value: function getDeltaVal(x) {
      var percent = x / this.getBaseDistance();
      var maxDelta = this.props.maxValue - this.props.minValue;
      return percent * maxDelta;
    }
  }, {
    key: "getDeltaX",
    value: function getDeltaX(v) {
      var percent = v / (this.props.maxValue - this.props.minValue);
      var maxDelta = this.getBaseDistance();
      return percent * maxDelta;
    }
  }, {
    key: "getValue",
    value: function getValue(baseV, offset) {
      // offset is the distance between slider handle and track left
      var rawValue = baseV + this.getDeltaVal(offset);
      return this.normalizeValue(rawValue);
    }
  }, {
    key: "normalizeValue",
    value: function normalizeValue(val) {
      var _this$props4 = this.props,
        minValue = _this$props4.minValue,
        step = _this$props4.step,
        marks = _this$props4.marks;
      return (0, _utils.normalizeSliderValue)(val, minValue, step, marks);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
        className = _this$props5.className,
        classSet = _this$props5.classSet,
        disabled = _this$props5.disabled,
        isRanged = _this$props5.isRanged,
        maxValue = _this$props5.maxValue,
        minValue = _this$props5.minValue,
        value1 = _this$props5.value1,
        vertical = _this$props5.vertical,
        sliderHandleWidth = _this$props5.sliderHandleWidth,
        showTooltip = _this$props5.showTooltip,
        style = _this$props5.style;
      var value0 = !isRanged && minValue > 0 ? minValue : this.props.value0;
      var currValDelta = value1 - value0;
      var maxDelta = maxValue - minValue;
      var width = currValDelta / maxDelta * 100;
      var v0Left = (value0 - minValue) / maxDelta * 100;
      return /*#__PURE__*/_react["default"].createElement(SliderWrapper, {
        className: (0, _classnames["default"])('kg-slider', _objectSpread(_objectSpread({}, classSet), {}, {
          disabled: disabled
        }), className),
        ref: this.ref,
        $isRanged: isRanged,
        $vertical: vertical,
        style: style
      }, /*#__PURE__*/_react["default"].createElement(StyledRangeSlider, {
        className: "kg-range-slider",
        $vertical: vertical,
        ref: this.track
      }, /*#__PURE__*/_react["default"].createElement(_sliderHandle["default"], {
        left: this.calcHandleLeft0(width, v0Left),
        valueListener: this.slide0Listener,
        sliderHandleWidth: sliderHandleWidth,
        display: isRanged,
        vertical: vertical,
        showTooltip: showTooltip,
        track: this.track
      }), /*#__PURE__*/_react["default"].createElement(_sliderHandle["default"], {
        left: this.calcHandleLeft1(width, v0Left),
        valueListener: this.slide1Listener,
        sliderHandleWidth: sliderHandleWidth,
        vertical: vertical,
        value: value1,
        showTooltip: showTooltip,
        track: this.track
      }), /*#__PURE__*/_react["default"].createElement(_sliderBarHandle["default"], {
        width: width,
        v0Left: v0Left,
        enableBarDrag: this.props.enableBarDrag,
        sliderBarListener: this.sliderBarListener,
        vertical: vertical,
        track: this.track,
        setAnchor: this.setAnchor
      })));
    }
  }]);
}(_react.Component);
(0, _defineProperty2["default"])(Slider, "defaultProps", {
  title: '',
  isRanged: true,
  value0: 0,
  value1: 100,
  minValue: 0,
  maxValue: 100,
  step: 1,
  sliderHandleWidth: 12,
  enableBarDrag: false,
  onSlider0Change: noop,
  onSlider1Change: noop,
  onSliderBarChange: noop,
  disabled: false,
  vertical: false,
  showTooltip: false
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,