"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _rangeSliderTimeline = _interopRequireDefault(require("./range-slider-timeline"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function RangeSliderSubAnimationPanelFactory(RangeSliderTimeline) {
  var RangeSliderSubAnimationPanel = function RangeSliderSubAnimationPanel(_ref) {
    var subAnimations = _ref.subAnimations,
      scaledValue = _ref.scaledValue,
      style = _ref.style;
    var containerStyle = (0, _react.useMemo)(function () {
      return _objectSpread({
        display: 'flex',
        justifyContent: 'spaceBetween',
        flexWrap: 'wrap'
      }, style);
    }, [style]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      style: containerStyle
    }, subAnimations.map(function (subAnimation, index) {
      return /*#__PURE__*/_react["default"].createElement(RangeSliderTimeline, {
        key: index,
        subAnimation: subAnimation,
        scaledValue: scaledValue
      });
    }));
  };
  return RangeSliderSubAnimationPanel;
}
RangeSliderSubAnimationPanelFactory.deps = [_rangeSliderTimeline["default"]];
var _default = exports["default"] = RangeSliderSubAnimationPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmFuZ2VTbGlkZXJUaW1lbGluZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJSYW5nZVNsaWRlclN1YkFuaW1hdGlvblBhbmVsRmFjdG9yeSIsIlJhbmdlU2xpZGVyVGltZWxpbmUiLCJSYW5nZVNsaWRlclN1YkFuaW1hdGlvblBhbmVsIiwiX3JlZiIsInN1YkFuaW1hdGlvbnMiLCJzY2FsZWRWYWx1ZSIsInN0eWxlIiwiY29udGFpbmVyU3R5bGUiLCJ1c2VNZW1vIiwiZGlzcGxheSIsImp1c3RpZnlDb250ZW50IiwiZmxleFdyYXAiLCJjcmVhdGVFbGVtZW50IiwibWFwIiwic3ViQW5pbWF0aW9uIiwiaW5kZXgiLCJrZXkiLCJkZXBzIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi9yYW5nZS1zbGlkZXItdGltZWxpbmUtcGFuZWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZU1lbW99IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSYW5nZVNsaWRlclRpbWVsaW5lRmFjdG9yeSBmcm9tICcuL3JhbmdlLXNsaWRlci10aW1lbGluZSc7XG5cbmZ1bmN0aW9uIFJhbmdlU2xpZGVyU3ViQW5pbWF0aW9uUGFuZWxGYWN0b3J5KFJhbmdlU2xpZGVyVGltZWxpbmUpIHtcbiAgY29uc3QgUmFuZ2VTbGlkZXJTdWJBbmltYXRpb25QYW5lbCA9ICh7c3ViQW5pbWF0aW9ucywgc2NhbGVkVmFsdWUsIHN0eWxlfSkgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lclN0eWxlID0gdXNlTWVtbyhcbiAgICAgICgpID0+ICh7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZUJldHdlZW4nLFxuICAgICAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgICAgICAuLi5zdHlsZVxuICAgICAgfSksXG4gICAgICBbc3R5bGVdXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlPXtjb250YWluZXJTdHlsZX0+XG4gICAgICAgIHtzdWJBbmltYXRpb25zLm1hcCgoc3ViQW5pbWF0aW9uLCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxSYW5nZVNsaWRlclRpbWVsaW5lIGtleT17aW5kZXh9IHN1YkFuaW1hdGlvbj17c3ViQW5pbWF0aW9ufSBzY2FsZWRWYWx1ZT17c2NhbGVkVmFsdWV9IC8+XG4gICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gUmFuZ2VTbGlkZXJTdWJBbmltYXRpb25QYW5lbDtcbn1cblxuUmFuZ2VTbGlkZXJTdWJBbmltYXRpb25QYW5lbEZhY3RvcnkuZGVwcyA9IFtSYW5nZVNsaWRlclRpbWVsaW5lRmFjdG9yeV07XG5cbmV4cG9ydCBkZWZhdWx0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