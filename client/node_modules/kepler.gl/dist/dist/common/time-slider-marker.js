"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.getTickFormat = getTickFormat;
exports.getXAxis = getXAxis;
exports.updateAxis = updateAxis;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _momentTimezone = _interopRequireDefault(require("moment-timezone"));
var _d3Scale = require("d3-scale");
var _d3Selection = require("d3-selection");
var _d3Axis = require("d3-axis");
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
var MIN_TICK_WIDTH_LARGE = 80;
var MIN_TICK_WIDTH_SMALL = 50;
var HEIGHT = 30;
var TimeSliderContainer = _styledComponents["default"].svg(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  overflow: visible;\n  margin-top: 6px;\n\n  .axis text {\n    font-size: ", ";\n    fill: ", ";\n  }\n\n  .axis line {\n    stroke: ", ";\n    shape-rendering: crispEdges;\n    stroke-width: 1;\n  }\n\n  .axis path {\n    fill: none;\n    stroke: ", ";\n    shape-rendering: crispEdges;\n    stroke-width: 2;\n  }\n\n  .axis .domain {\n    display: none;\n  }\n\n  .value {\n    fill: ", ";\n    font-size: ", ";\n\n    &.start {\n      text-anchor: start;\n    }\n\n    &.end {\n      text-anchor: end;\n    }\n  }\n"])), function (props) {
  return props.theme.axisFontSize;
}, function (props) {
  return props.theme.axisFontColor;
}, function (props) {
  return props.theme.axisFontColor;
}, function (props) {
  return props.theme.sliderBarBgd;
}, function (props) {
  return props.theme.axisFontColor;
}, function (props) {
  return props.theme.axisFontSize;
});
var TICK_FORMATS = {
  millisecond: '.SSS',
  second: ':ss',
  minute: 'HH:mm',
  hour: 'HH A',
  day: 'ddd DD',
  week: 'MMM DD',
  month: 'MMM',
  year: 'YYYY'
};

// timezone sensitive tick formatter based on moment
// adapted based on d3 time scale tick format https://github.com/d3/d3-scale/blob/master/src/time.js#L59
function getTickFormat(timezone) {
  // date is js date object
  var toMoment = timezone ? function (date) {
    return (0, _momentTimezone["default"])(date).tz(timezone);
  } : _momentTimezone["default"];
  var formatter = (0, _utils.datetimeFormatter)(timezone);
  return function (date) {
    return (toMoment(date).startOf('second') < date ? formatter(TICK_FORMATS.millisecond) : toMoment(date).startOf('minute') < date ? formatter(TICK_FORMATS.second) : toMoment(date).startOf('hour') < date ? formatter(TICK_FORMATS.minute) : toMoment(date).startOf('day') < date ? formatter(TICK_FORMATS.hour) : toMoment(date).startOf('month') < date ? toMoment(date).startOf('isoWeek') < date ? formatter(TICK_FORMATS.day) : formatter(TICK_FORMATS.week) : toMoment(date).startOf('year') < date ? formatter(TICK_FORMATS.month) : formatter(TICK_FORMATS.year))(date);
  };
}

// create a helper function so we can test it
function getXAxis(domain, width, isEnlarged, timezone) {
  if (!Array.isArray(domain) || !domain.every(Number.isFinite)) {
    return null;
  }
  var scale = (0, _d3Scale.scaleUtc)().domain(domain).range([0, width]);
  if (!scale) {
    return null;
  }
  var ticks = Math.floor(width / (isEnlarged ? MIN_TICK_WIDTH_LARGE : MIN_TICK_WIDTH_SMALL));
  var tickFormat = timezone ? getTickFormat(timezone) : null;
  var xAxis = (0, _d3Axis.axisBottom)(scale).ticks(ticks).tickSize(4).tickPadding(4);
  if (tickFormat) {
    xAxis.tickFormat(tickFormat);
  }
  return xAxis;
}
function updateAxis(xAxisRef, xAxis) {
  if (!xAxis) {
    return;
  }
  (0, _d3Selection.select)(xAxisRef.current).call(xAxis);
}
function TimeSliderMarkerFactory() {
  var TimeSliderMarker = function TimeSliderMarker(_ref) {
    var width = _ref.width,
      domain = _ref.domain,
      _ref$isEnlarged = _ref.isEnlarged,
      isEnlarged = _ref$isEnlarged === void 0 ? true : _ref$isEnlarged,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? HEIGHT : _ref$height,
      timezone = _ref.timezone;
    var xAxisRef = (0, _react.useRef)(null);
    var xAxis = (0, _react.useMemo)(function () {
      return getXAxis(domain, width, isEnlarged, timezone);
    }, [domain, width, isEnlarged, timezone]);
    (0, _react.useEffect)(function () {
      updateAxis(xAxisRef, xAxis);
    }, [xAxisRef, xAxis]);
    return /*#__PURE__*/_react["default"].createElement(TimeSliderContainer, {
      className: "time-slider-marker",
      width: width,
      height: height
    }, /*#__PURE__*/_react["default"].createElement("g", {
      className: "x axis",
      ref: xAxisRef,
      transform: "translate(0, 0)"
    }));
  };
  return /*#__PURE__*/_react["default"].memo(TimeSliderMarker);
}
var _default = exports["default"] = TimeSliderMarkerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,