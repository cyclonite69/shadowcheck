"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _reactVirtualized = require("react-virtualized");
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _excluded = ["setGridRef"];
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function _callSuper(t, o, e) {
  return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var GridHack = exports["default"] = /*#__PURE__*/function (_PureComponent) {
  function GridHack() {
    var _this;
    (0, _classCallCheck2["default"])(this, GridHack);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, GridHack, [].concat(args));
    (0, _defineProperty2["default"])(_this, "grid", null);
    (0, _defineProperty2["default"])(_this, "_preventScrollBack", function (e) {
      var scrollLeft = _this.props.scrollLeft;
      if (scrollLeft !== undefined && scrollLeft <= 0 && e.deltaX < 0) {
        // Prevent Scroll On Scrollable Elements, avoid browser backward navigation
        // https://alvarotrigo.com/blog/prevent-scroll-on-scrollable-element-js/
        e.preventDefault();
        e.stopPropagation();
        return false;
      }
      return;
    });
    (0, _defineProperty2["default"])(_this, "_updateRef", function (x) {
      if (!_this.grid && x) {
        var _this$grid;
        _this.grid = x;
        /*
         * This hack exists because we need to add wheel event listener to the div rendered by Grid
         *
         */
        // @ts-expect-error _scrollingContainer not typed in Grid
        (_this$grid = _this.grid) === null || _this$grid === void 0 || (_this$grid = _this$grid._scrollingContainer) === null || _this$grid === void 0 || _this$grid.addEventListener('wheel', _this._preventScrollBack, {
          passive: false
        });
      }
    });
    return _this;
  }
  (0, _inherits2["default"])(GridHack, _PureComponent);
  return (0, _createClass2["default"])(GridHack, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(preProps) {
      /*
       * This hack exists because in react-virtualized the
       * _columnWidthGetter is only called in the constructor
       * even though it is reassigned with new props resulting in
       * a new width for cells not being calculated so we must
       * force trigger a resize.
       *
       * https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/Grid.js#L322
       *
       */
      if (!(0, _isEqual["default"])(preProps.cellSizeCache, this.props.cellSizeCache)) {
        var _this$grid2;
        (_this$grid2 = this.grid) === null || _this$grid2 === void 0 || _this$grid2.recomputeGridSize();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$grid3;
      // @ts-expect-error _scrollingContainer not typed in Grid
      (_this$grid3 = this.grid) === null || _this$grid3 === void 0 || (_this$grid3 = _this$grid3._scrollingContainer) === null || _this$grid3 === void 0 || _this$grid3.removeEventListener('wheel', this._preventScrollBack, {
        passive: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props,
        setGridRef = _this$props.setGridRef,
        rest = (0, _objectWithoutProperties2["default"])(_this$props, _excluded);
      return /*#__PURE__*/_react["default"].createElement(_reactVirtualized.Grid, (0, _extends2["default"])({
        ref: function ref(x) {
          if (setGridRef) setGridRef(x);
          _this2._updateRef(x);
        },
        key: "grid-hack"
      }, rest));
    }
  }]);
}(_react.PureComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,