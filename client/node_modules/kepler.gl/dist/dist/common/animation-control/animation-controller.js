"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react");
var _d3Array = require("d3-array");
var _window = require("global/window");
var _console = _interopRequireDefault(require("global/console"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
function _callSuper(t, o, e) {
  return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var AnimationControllerType = /*#__PURE__*/function (_Component) {
  function AnimationControllerType() {
    (0, _classCallCheck2["default"])(this, AnimationControllerType);
    return _callSuper(this, AnimationControllerType, arguments);
  }
  (0, _inherits2["default"])(AnimationControllerType, _Component);
  return (0, _createClass2["default"])(AnimationControllerType);
}(_react.Component);
function AnimationControllerFactory() {
  /**
   * 4 Animation Window Types
   * 1. free
   *  |->  |->
   * Current time is a fixed range, animate a moving window that calls next animation frames continuously
   * The increment id based on domain / BASE_SPEED * SPEED
   *
   * 2. incremental
   * |    |->
   * Same as free, current time is a growing range, only the max value of range increment during animation.
   * The increment is also based on domain / BASE_SPEED * SPEED
   *
   * 3. point
   * o -> o
   * Current time is a point, animate a moving point calls next animation frame continuously
   * The increment is based on domain / BASE_SPEED * SPEED
   *
   * 4. interval
   * o ~> o
   * Current time is a point. An array of sorted time steps are provided,
   * animate a moving point jumps to the next step
   */
  var AnimationController = /*#__PURE__*/function (_Component2) {
    function AnimationController() {
      var _this;
      (0, _classCallCheck2["default"])(this, AnimationController);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, AnimationController, [].concat(args));
      (0, _defineProperty2["default"])(_this, "state", {
        isAnimating: false
      });
      (0, _defineProperty2["default"])(_this, "_timer", null);
      (0, _defineProperty2["default"])(_this, "_startTime", 0);
      (0, _defineProperty2["default"])(_this, "_animate", function (delay) {
        _this._startTime = new Date().getTime();
        var _loop = function loop() {
          var current = new Date().getTime();
          var delta = current - _this._startTime;
          if (delta >= delay) {
            _this._nextFrame();
            _this._startTime = new Date().getTime();
          } else {
            _this._timer = (0, _window.requestAnimationFrame)(_loop);
          }
        };
        _this._timer = (0, _window.requestAnimationFrame)(_loop);
      });
      (0, _defineProperty2["default"])(_this, "_resetAnimationByDomain", function () {
        var _this$props = _this.props,
          domain = _this$props.domain,
          value = _this$props.value,
          animationWindow = _this$props.animationWindow,
          updateAnimation = _this$props.updateAnimation;
        if (!domain) {
          return;
        }
        // interim solution while we fully migrate filter and layer controllers
        var setTimelineValue = updateAnimation || _this.props.setTimelineValue;
        if (Array.isArray(value)) {
          if (animationWindow === _constants.ANIMATION_WINDOW.incremental) {
            setTimelineValue([value[0], value[0] + 1]);
          } else {
            setTimelineValue([domain[0], domain[0] + value[1] - value[0]]);
          }
        } else {
          setTimelineValue(domain[0]);
        }
      });
      (0, _defineProperty2["default"])(_this, "_resetAnimationByTimeStep", function () {
        var _this$props2 = _this.props,
          _this$props2$steps = _this$props2.steps,
          steps = _this$props2$steps === void 0 ? null : _this$props2$steps,
          updateAnimation = _this$props2.updateAnimation;
        if (!steps) return;
        // interim solution while we fully migrate filter and layer controllers
        var setTimelineValue = updateAnimation || _this.props.setTimelineValue;

        // go to the first steps
        setTimelineValue([steps[0], 0]);
      });
      (0, _defineProperty2["default"])(_this, "_resetAnimation", function () {
        if (_this.props.animationWindow === _constants.ANIMATION_WINDOW.interval) {
          _this._resetAnimationByTimeStep();
        } else {
          _this._resetAnimationByDomain();
        }
      });
      (0, _defineProperty2["default"])(_this, "_startAnimation", function () {
        var _this$props$speed = _this.props.speed,
          speed = _this$props$speed === void 0 ? 1 : _this$props$speed;
        _this._clearTimer();
        if (speed > 0) {
          if (_this.props.animationWindow === _constants.ANIMATION_WINDOW.interval) {
            // animate by interval
            // 30*600
            var steps = _this.props.steps;
            if (!Array.isArray(steps) || !steps.length) {
              _console["default"].warn('animation steps should be an array');
              return;
            }
            // when speed = 1, animation should loop through 600 frames at 60 FPS
            // calculate delay based on # steps
            var delay = _constants.BASE_SPEED * (1000 / _constants.FPS) / steps.length / (speed || 1);
            _this._animate(delay);
          } else {
            _this._timer = (0, _window.requestAnimationFrame)(_this._nextFrame);
          }
        }
        _this.setState({
          isAnimating: true
        });
      });
      (0, _defineProperty2["default"])(_this, "_clearTimer", function () {
        if (_this._timer) {
          (0, _window.cancelAnimationFrame)(_this._timer);
          _this._timer = null;
        }
      });
      (0, _defineProperty2["default"])(_this, "_pauseAnimation", function () {
        _this._clearTimer();
        _this.setState({
          isAnimating: false
        });
      });
      (0, _defineProperty2["default"])(_this, "_nextFrame", function () {
        _this._timer = null;
        var nextValue = _this.props.animationWindow === _constants.ANIMATION_WINDOW.interval ? _this._nextFrameByTimeStep() : _this._nextFrameByDomain();

        // interim solution while we fully migrate filter and layer controllers
        var setTimelineValue = _this.props.updateAnimation || _this.props.setTimelineValue;
        setTimelineValue(nextValue);
      });
      return _this;
    }
    (0, _inherits2["default"])(AnimationController, _Component2);
    return (0, _createClass2["default"])(AnimationController, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._startOrPauseAnimation();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this._startOrPauseAnimation();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this._timer) {
          (0, _window.cancelAnimationFrame)(this._timer);
        }
      }
    }, {
      key: "_startOrPauseAnimation",
      value: function _startOrPauseAnimation() {
        var _this$props3 = this.props,
          isAnimating = _this$props3.isAnimating,
          _this$props3$speed = _this$props3.speed,
          speed = _this$props3$speed === void 0 ? 1 : _this$props3$speed;
        if (!this._timer && isAnimating && speed > 0) {
          this._startAnimation();
        } else if (this._timer && !isAnimating) {
          this._pauseAnimation();
        }
      }
    }, {
      key: "_nextFrameByDomain",
      value: function _nextFrameByDomain() {
        var _this$props4 = this.props,
          domain = _this$props4.domain,
          value = _this$props4.value,
          _this$props4$speed = _this$props4.speed,
          speed = _this$props4$speed === void 0 ? 1 : _this$props4$speed,
          _this$props4$baseSpee = _this$props4.baseSpeed,
          baseSpeed = _this$props4$baseSpee === void 0 ? 600 : _this$props4$baseSpee,
          animationWindow = _this$props4.animationWindow;
        if (!domain) {
          return;
        }
        var delta = (domain[1] - domain[0]) / baseSpeed * speed;

        // loop when reaches the end
        // current time is a range
        if (Array.isArray(value)) {
          var value0;
          var value1;
          if (animationWindow === _constants.ANIMATION_WINDOW.incremental) {
            var lastFrame = value[1] + delta > domain[1];
            value0 = value[0];
            value1 = lastFrame ? value[0] + 1 : value[1] + delta;
          } else {
            // use value[0] to display the last item  duration as the first item
            var _lastFrame = value[0] + delta > domain[1];
            value0 = _lastFrame ? domain[0] : value[0] + delta;
            value1 = value0 + value[1] - value[0];
          }
          return [value0, value1];
        }

        // current time is a point
        return Number(value) + delta > domain[1] ? domain[0] : Number(value) + delta;
      }
    }, {
      key: "_nextFrameByTimeStep",
      value: function _nextFrameByTimeStep() {
        var _this$props5 = this.props,
          _this$props5$steps = _this$props5.steps,
          steps = _this$props5$steps === void 0 ? null : _this$props5$steps,
          value = _this$props5.value;
        if (!steps) return;
        var val = Array.isArray(value) ? value[0] : Number(value);
        var index = (0, _d3Array.bisectLeft)(steps, val);
        var nextIdx = index >= steps.length - 1 ? 0 : index + 1;

        // why do we need to pass an array of two objects? are we reading nextIdx at some point?
        // _nextFrameByDomain only returns one value
        return [steps[nextIdx], nextIdx];
      }
    }, {
      key: "render",
      value: function render() {
        var isAnimating = this.state.isAnimating;
        var children = this.props.children;
        return typeof children === 'function' ? children(isAnimating, this._startAnimation, this._pauseAnimation, this._resetAnimation, this.props.timeline, this.props.setTimelineValue) : null;
      }
    }]);
  }(_react.Component);
  (0, _defineProperty2["default"])(AnimationController, "defaultProps", {
    baseSpeed: _constants.BASE_SPEED,
    speed: 1,
    steps: null,
    animationWindow: _constants.ANIMATION_WINDOW.free
  });
  return AnimationController;
}
var _default = exports["default"] = AnimationControllerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2QzQXJyYXkiLCJfd2luZG93IiwiX2NvbnNvbGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NvbnN0YW50cyIsIl9jYWxsU3VwZXIiLCJ0IiwibyIsImUiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiQW5pbWF0aW9uQ29udHJvbGxlclR5cGUiLCJfQ29tcG9uZW50IiwiX2NsYXNzQ2FsbENoZWNrMiIsImFyZ3VtZW50cyIsIl9pbmhlcml0czIiLCJfY3JlYXRlQ2xhc3MyIiwiQ29tcG9uZW50IiwiQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkiLCJBbmltYXRpb25Db250cm9sbGVyIiwiX0NvbXBvbmVudDIiLCJfdGhpcyIsIl9sZW4iLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwiX2RlZmluZVByb3BlcnR5MiIsImlzQW5pbWF0aW5nIiwiZGVsYXkiLCJfc3RhcnRUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJfbG9vcCIsImxvb3AiLCJjdXJyZW50IiwiZGVsdGEiLCJfbmV4dEZyYW1lIiwiX3RpbWVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX3RoaXMkcHJvcHMiLCJwcm9wcyIsImRvbWFpbiIsInZhbHVlIiwiYW5pbWF0aW9uV2luZG93IiwidXBkYXRlQW5pbWF0aW9uIiwic2V0VGltZWxpbmVWYWx1ZSIsImlzQXJyYXkiLCJBTklNQVRJT05fV0lORE9XIiwiaW5jcmVtZW50YWwiLCJfdGhpcyRwcm9wczIiLCJfdGhpcyRwcm9wczIkc3RlcHMiLCJzdGVwcyIsImludGVydmFsIiwiX3Jlc2V0QW5pbWF0aW9uQnlUaW1lU3RlcCIsIl9yZXNldEFuaW1hdGlvbkJ5RG9tYWluIiwiX3RoaXMkcHJvcHMkc3BlZWQiLCJzcGVlZCIsIl9jbGVhclRpbWVyIiwid2FybiIsIkJBU0VfU1BFRUQiLCJGUFMiLCJfYW5pbWF0ZSIsInNldFN0YXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJuZXh0VmFsdWUiLCJfbmV4dEZyYW1lQnlUaW1lU3RlcCIsIl9uZXh0RnJhbWVCeURvbWFpbiIsImtleSIsImNvbXBvbmVudERpZE1vdW50IiwiX3N0YXJ0T3JQYXVzZUFuaW1hdGlvbiIsImNvbXBvbmVudERpZFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiX3RoaXMkcHJvcHMzIiwiX3RoaXMkcHJvcHMzJHNwZWVkIiwiX3N0YXJ0QW5pbWF0aW9uIiwiX3BhdXNlQW5pbWF0aW9uIiwiX3RoaXMkcHJvcHM0IiwiX3RoaXMkcHJvcHM0JHNwZWVkIiwiX3RoaXMkcHJvcHM0JGJhc2VTcGVlIiwiYmFzZVNwZWVkIiwidmFsdWUwIiwidmFsdWUxIiwibGFzdEZyYW1lIiwiX2xhc3RGcmFtZSIsIk51bWJlciIsIl90aGlzJHByb3BzNSIsIl90aGlzJHByb3BzNSRzdGVwcyIsInZhbCIsImluZGV4IiwiYmlzZWN0TGVmdCIsIm5leHRJZHgiLCJyZW5kZXIiLCJzdGF0ZSIsImNoaWxkcmVuIiwiX3Jlc2V0QW5pbWF0aW9uIiwidGltZWxpbmUiLCJmcmVlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9hbmltYXRpb24tY29udHJvbC9hbmltYXRpb24tY29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7YmlzZWN0TGVmdH0gZnJvbSAnZDMtYXJyYXknO1xuaW1wb3J0IHtyZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIGNhbmNlbEFuaW1hdGlvbkZyYW1lfSBmcm9tICdnbG9iYWwvd2luZG93JztcbmltcG9ydCBDb25zb2xlIGZyb20gJ2dsb2JhbC9jb25zb2xlJztcbmltcG9ydCB7QkFTRV9TUEVFRCwgRlBTLCBBTklNQVRJT05fV0lORE9XfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge1RpbWVsaW5lfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcblxuaW50ZXJmYWNlIEFuaW1hdGlvbkNvbnRyb2xsZXJQcm9wczxUIGV4dGVuZHMgbnVtYmVyIHwgbnVtYmVyW10+IHtcbiAgaXNBbmltYXRpbmc/OiBib29sZWFuO1xuICBzcGVlZD86IG51bWJlcjtcbiAgdXBkYXRlQW5pbWF0aW9uPzogKHg6IFQpID0+IHZvaWQ7XG4gIHNldFRpbWVsaW5lVmFsdWU6ICh4OiBUKSA9PiB2b2lkO1xuICB0aW1lbGluZT86IFRpbWVsaW5lO1xuICBhbmltYXRpb25XaW5kb3c/OiBzdHJpbmc7XG4gIHN0ZXBzPzogbnVtYmVyW10gfCBudWxsO1xuICBkb21haW46IG51bWJlcltdIHwgbnVsbDtcbiAgdmFsdWU6IFQ7XG4gIGJhc2VTcGVlZD86IG51bWJlcjtcbiAgY2hpbGRyZW4/OiAoXG4gICAgaXNBbmltYXRpbmc6IGJvb2xlYW4gfCB1bmRlZmluZWQsXG4gICAgc3RhcnRBbmltYXRpb246ICgpID0+IHZvaWQsXG4gICAgcGF1c2VBbmltYXRpb246ICgpID0+IHZvaWQsXG4gICAgcmVzZXRBbmltYXRpb246ICgpID0+IHZvaWQsXG4gICAgdGltZWxpbmU6IFRpbWVsaW5lIHwgdW5kZWZpbmVkLFxuICAgIHNldFRpbWVsaW5lVmFsdWU6ICh4OiBUKSA9PiB2b2lkXG4gICkgPT4gUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbDtcbn1cblxuY2xhc3MgQW5pbWF0aW9uQ29udHJvbGxlclR5cGU8VCBleHRlbmRzIG51bWJlciB8IG51bWJlcltdPiBleHRlbmRzIENvbXBvbmVudDxcbiAgQW5pbWF0aW9uQ29udHJvbGxlclByb3BzPFQ+XG4+IHt9XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5KCk6IHR5cGVvZiBBbmltYXRpb25Db250cm9sbGVyVHlwZSB7XG4gIC8qKlxuICAgKiA0IEFuaW1hdGlvbiBXaW5kb3cgVHlwZXNcbiAgICogMS4gZnJlZVxuICAgKiAgfC0+ICB8LT5cbiAgICogQ3VycmVudCB0aW1lIGlzIGEgZml4ZWQgcmFuZ2UsIGFuaW1hdGUgYSBtb3Zpbmcgd2luZG93IHRoYXQgY2FsbHMgbmV4dCBhbmltYXRpb24gZnJhbWVzIGNvbnRpbnVvdXNseVxuICAgKiBUaGUgaW5jcmVtZW50IGlkIGJhc2VkIG9uIGRvbWFpbiAvIEJBU0VfU1BFRUQgKiBTUEVFRFxuICAgKlxuICAgKiAyLiBpbmNyZW1lbnRhbFxuICAgKiB8ICAgIHwtPlxuICAgKiBTYW1lIGFzIGZyZWUsIGN1cnJlbnQgdGltZSBpcyBhIGdyb3dpbmcgcmFuZ2UsIG9ubHkgdGhlIG1heCB2YWx1ZSBvZiByYW5nZSBpbmNyZW1lbnQgZHVyaW5nIGFuaW1hdGlvbi5cbiAgICogVGhlIGluY3JlbWVudCBpcyBhbHNvIGJhc2VkIG9uIGRvbWFpbiAvIEJBU0VfU1BFRUQgKiBTUEVFRFxuICAgKlxuICAgKiAzLiBwb2ludFxuICAgKiBvIC0+IG9cbiAgICogQ3VycmVudCB0aW1lIGlzIGEgcG9pbnQsIGFuaW1hdGUgYSBtb3ZpbmcgcG9pbnQgY2FsbHMgbmV4dCBhbmltYXRpb24gZnJhbWUgY29udGludW91c2x5XG4gICAqIFRoZSBpbmNyZW1lbnQgaXMgYmFzZWQgb24gZG9tYWluIC8gQkFTRV9TUEVFRCAqIFNQRUVEXG4gICAqXG4gICAqIDQuIGludGVydmFsXG4gICAqIG8gfj4gb1xuICAgKiBDdXJyZW50IHRpbWUgaXMgYSBwb2ludC4gQW4gYXJyYXkgb2Ygc29ydGVkIHRpbWUgc3RlcHMgYXJlIHByb3ZpZGVkLFxuICAgKiBhbmltYXRlIGEgbW92aW5nIHBvaW50IGp1bXBzIHRvIHRoZSBuZXh0IHN0ZXBcbiAgICovXG4gIGNsYXNzIEFuaW1hdGlvbkNvbnRyb2xsZXI8VCBleHRlbmRzIG51bWJlciB8IG51bWJlcltdPiBleHRlbmRzIENvbXBvbmVudDxcbiAgICBBbmltYXRpb25Db250cm9sbGVyUHJvcHM8VD5cbiAgPiB7XG4gICAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICAgIGJhc2VTcGVlZDogQkFTRV9TUEVFRCxcbiAgICAgIHNwZWVkOiAxLFxuICAgICAgc3RlcHM6IG51bGwsXG4gICAgICBhbmltYXRpb25XaW5kb3c6IEFOSU1BVElPTl9XSU5ET1cuZnJlZVxuICAgIH07XG5cbiAgICBzdGF0ZSA9IHtcbiAgICAgIGlzQW5pbWF0aW5nOiBmYWxzZVxuICAgIH07XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuX3N0YXJ0T3JQYXVzZUFuaW1hdGlvbigpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX3N0YXJ0T3JQYXVzZUFuaW1hdGlvbigpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuX3RpbWVyKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3RpbWVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGltZXIgPSBudWxsO1xuICAgIF9zdGFydFRpbWUgPSAwO1xuXG4gICAgX3N0YXJ0T3JQYXVzZUFuaW1hdGlvbigpIHtcbiAgICAgIGNvbnN0IHtpc0FuaW1hdGluZywgc3BlZWQgPSAxfSA9IHRoaXMucHJvcHM7XG4gICAgICBpZiAoIXRoaXMuX3RpbWVyICYmIGlzQW5pbWF0aW5nICYmIHNwZWVkID4gMCkge1xuICAgICAgICB0aGlzLl9zdGFydEFuaW1hdGlvbigpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl90aW1lciAmJiAhaXNBbmltYXRpbmcpIHtcbiAgICAgICAgdGhpcy5fcGF1c2VBbmltYXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfYW5pbWF0ZSA9IGRlbGF5ID0+IHtcbiAgICAgIHRoaXMuX3N0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgICBjb25zdCBsb29wID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gY3VycmVudCAtIHRoaXMuX3N0YXJ0VGltZTtcblxuICAgICAgICBpZiAoZGVsdGEgPj0gZGVsYXkpIHtcbiAgICAgICAgICB0aGlzLl9uZXh0RnJhbWUoKTtcbiAgICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl90aW1lciA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5fdGltZXIgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgfTtcblxuICAgIF9yZXNldEFuaW1hdGlvbkJ5RG9tYWluID0gKCkgPT4ge1xuICAgICAgY29uc3Qge2RvbWFpbiwgdmFsdWUsIGFuaW1hdGlvbldpbmRvdywgdXBkYXRlQW5pbWF0aW9ufSA9IHRoaXMucHJvcHM7XG4gICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBpbnRlcmltIHNvbHV0aW9uIHdoaWxlIHdlIGZ1bGx5IG1pZ3JhdGUgZmlsdGVyIGFuZCBsYXllciBjb250cm9sbGVyc1xuICAgICAgY29uc3Qgc2V0VGltZWxpbmVWYWx1ZSA9IHVwZGF0ZUFuaW1hdGlvbiB8fCB0aGlzLnByb3BzLnNldFRpbWVsaW5lVmFsdWU7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uV2luZG93ID09PSBBTklNQVRJT05fV0lORE9XLmluY3JlbWVudGFsKSB7XG4gICAgICAgICAgc2V0VGltZWxpbmVWYWx1ZShbdmFsdWVbMF0sIHZhbHVlWzBdICsgMV0gYXMgVCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0VGltZWxpbmVWYWx1ZShbZG9tYWluWzBdLCBkb21haW5bMF0gKyB2YWx1ZVsxXSAtIHZhbHVlWzBdXSBhcyBUKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VGltZWxpbmVWYWx1ZShkb21haW5bMF0gYXMgVCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9yZXNldEFuaW1hdGlvbkJ5VGltZVN0ZXAgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7c3RlcHMgPSBudWxsLCB1cGRhdGVBbmltYXRpb259ID0gdGhpcy5wcm9wcztcbiAgICAgIGlmICghc3RlcHMpIHJldHVybjtcbiAgICAgIC8vIGludGVyaW0gc29sdXRpb24gd2hpbGUgd2UgZnVsbHkgbWlncmF0ZSBmaWx0ZXIgYW5kIGxheWVyIGNvbnRyb2xsZXJzXG4gICAgICBjb25zdCBzZXRUaW1lbGluZVZhbHVlID0gdXBkYXRlQW5pbWF0aW9uIHx8IHRoaXMucHJvcHMuc2V0VGltZWxpbmVWYWx1ZTtcblxuICAgICAgLy8gZ28gdG8gdGhlIGZpcnN0IHN0ZXBzXG4gICAgICBzZXRUaW1lbGluZVZhbHVlKFtzdGVwc1swXSwgMF0gYXMgVCk7XG4gICAgfTtcblxuICAgIF9yZXNldEFuaW1hdGlvbiA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmFuaW1hdGlvbldpbmRvdyA9PT0gQU5JTUFUSU9OX1dJTkRPVy5pbnRlcnZhbCkge1xuICAgICAgICB0aGlzLl9yZXNldEFuaW1hdGlvbkJ5VGltZVN0ZXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3Jlc2V0QW5pbWF0aW9uQnlEb21haW4oKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3N0YXJ0QW5pbWF0aW9uID0gKCkgPT4ge1xuICAgICAgY29uc3Qge3NwZWVkID0gMX0gPSB0aGlzLnByb3BzO1xuICAgICAgdGhpcy5fY2xlYXJUaW1lcigpO1xuICAgICAgaWYgKHNwZWVkID4gMCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5hbmltYXRpb25XaW5kb3cgPT09IEFOSU1BVElPTl9XSU5ET1cuaW50ZXJ2YWwpIHtcbiAgICAgICAgICAvLyBhbmltYXRlIGJ5IGludGVydmFsXG4gICAgICAgICAgLy8gMzAqNjAwXG4gICAgICAgICAgY29uc3Qge3N0ZXBzfSA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHN0ZXBzKSB8fCAhc3RlcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBDb25zb2xlLndhcm4oJ2FuaW1hdGlvbiBzdGVwcyBzaG91bGQgYmUgYW4gYXJyYXknKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2hlbiBzcGVlZCA9IDEsIGFuaW1hdGlvbiBzaG91bGQgbG9vcCB0aHJvdWdoIDYwMCBmcmFtZXMgYXQgNjAgRlBTXG4gICAgICAgICAgLy8gY2FsY3VsYXRlIGRlbGF5IGJhc2VkIG9uICMgc3RlcHNcbiAgICAgICAgICBjb25zdCBkZWxheSA9IChCQVNFX1NQRUVEICogKDEwMDAgLyBGUFMpKSAvIHN0ZXBzLmxlbmd0aCAvIChzcGVlZCB8fCAxKTtcbiAgICAgICAgICB0aGlzLl9hbmltYXRlKGRlbGF5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl90aW1lciA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLl9uZXh0RnJhbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnNldFN0YXRlKHtpc0FuaW1hdGluZzogdHJ1ZX0pO1xuICAgIH07XG5cbiAgICBfY2xlYXJUaW1lciA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl90aW1lcikge1xuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl90aW1lcik7XG4gICAgICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3BhdXNlQW5pbWF0aW9uID0gKCkgPT4ge1xuICAgICAgdGhpcy5fY2xlYXJUaW1lcigpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7aXNBbmltYXRpbmc6IGZhbHNlfSk7XG4gICAgfTtcblxuICAgIF9uZXh0RnJhbWUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl90aW1lciA9IG51bGw7XG4gICAgICBjb25zdCBuZXh0VmFsdWUgPVxuICAgICAgICB0aGlzLnByb3BzLmFuaW1hdGlvbldpbmRvdyA9PT0gQU5JTUFUSU9OX1dJTkRPVy5pbnRlcnZhbFxuICAgICAgICAgID8gdGhpcy5fbmV4dEZyYW1lQnlUaW1lU3RlcCgpXG4gICAgICAgICAgOiB0aGlzLl9uZXh0RnJhbWVCeURvbWFpbigpO1xuXG4gICAgICAvLyBpbnRlcmltIHNvbHV0aW9uIHdoaWxlIHdlIGZ1bGx5IG1pZ3JhdGUgZmlsdGVyIGFuZCBsYXllciBjb250cm9sbGVyc1xuICAgICAgY29uc3Qgc2V0VGltZWxpbmVWYWx1ZSA9IHRoaXMucHJvcHMudXBkYXRlQW5pbWF0aW9uIHx8IHRoaXMucHJvcHMuc2V0VGltZWxpbmVWYWx1ZTtcbiAgICAgIHNldFRpbWVsaW5lVmFsdWUobmV4dFZhbHVlIGFzIFQpO1xuICAgIH07XG5cbiAgICBfbmV4dEZyYW1lQnlEb21haW4oKSB7XG4gICAgICBjb25zdCB7ZG9tYWluLCB2YWx1ZSwgc3BlZWQgPSAxLCBiYXNlU3BlZWQgPSA2MDAsIGFuaW1hdGlvbldpbmRvd30gPSB0aGlzLnByb3BzO1xuICAgICAgaWYgKCFkb21haW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgZGVsdGEgPSAoKGRvbWFpblsxXSAtIGRvbWFpblswXSkgLyBiYXNlU3BlZWQpICogc3BlZWQ7XG5cbiAgICAgIC8vIGxvb3Agd2hlbiByZWFjaGVzIHRoZSBlbmRcbiAgICAgIC8vIGN1cnJlbnQgdGltZSBpcyBhIHJhbmdlXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgbGV0IHZhbHVlMDogbnVtYmVyO1xuICAgICAgICBsZXQgdmFsdWUxOiBudW1iZXI7XG4gICAgICAgIGlmIChhbmltYXRpb25XaW5kb3cgPT09IEFOSU1BVElPTl9XSU5ET1cuaW5jcmVtZW50YWwpIHtcbiAgICAgICAgICBjb25zdCBsYXN0RnJhbWUgPSB2YWx1ZVsxXSArIGRlbHRhID4gZG9tYWluWzFdO1xuICAgICAgICAgIHZhbHVlMCA9IHZhbHVlWzBdO1xuICAgICAgICAgIHZhbHVlMSA9IGxhc3RGcmFtZSA/IHZhbHVlWzBdICsgMSA6IHZhbHVlWzFdICsgZGVsdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdXNlIHZhbHVlWzBdIHRvIGRpc3BsYXkgdGhlIGxhc3QgaXRlbSAgZHVyYXRpb24gYXMgdGhlIGZpcnN0IGl0ZW1cbiAgICAgICAgICBjb25zdCBsYXN0RnJhbWUgPSB2YWx1ZVswXSArIGRlbHRhID4gZG9tYWluWzFdO1xuICAgICAgICAgIHZhbHVlMCA9IGxhc3RGcmFtZSA/IGRvbWFpblswXSA6IHZhbHVlWzBdICsgZGVsdGE7XG4gICAgICAgICAgdmFsdWUxID0gdmFsdWUwICsgdmFsdWVbMV0gLSB2YWx1ZVswXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3ZhbHVlMCwgdmFsdWUxXTtcbiAgICAgIH1cblxuICAgICAgLy8gY3VycmVudCB0aW1lIGlzIGEgcG9pbnRcbiAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpICsgZGVsdGEgPiBkb21haW5bMV0gPyBkb21haW5bMF0gOiBOdW1iZXIodmFsdWUpICsgZGVsdGE7XG4gICAgfVxuXG4gICAgX25leHRGcmFtZUJ5VGltZVN0ZXAoKSB7XG4gICAgICBjb25zdCB7c3RlcHMgPSBudWxsLCB2YWx1ZX0gPSB0aGlzLnByb3BzO1xuICAgICAgaWYgKCFzdGVwcykgcmV0dXJuO1xuICAgICAgY29uc3QgdmFsID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZVswXSA6IE51bWJlcih2YWx1ZSk7XG4gICAgICBjb25zdCBpbmRleCA9IGJpc2VjdExlZnQoc3RlcHMsIHZhbCk7XG4gICAgICBjb25zdCBuZXh0SWR4ID0gaW5kZXggPj0gc3RlcHMubGVuZ3RoIC0gMSA/IDAgOiBpbmRleCArIDE7XG5cbiAgICAgIC8vIHdoeSBkbyB3ZSBuZWVkIHRvIHBhc3MgYW4gYXJyYXkgb2YgdHdvIG9iamVjdHM/IGFyZSB3ZSByZWFkaW5nIG5leHRJZHggYXQgc29tZSBwb2ludD9cbiAgICAgIC8vIF9uZXh0RnJhbWVCeURvbWFpbiBvbmx5IHJldHVybnMgb25lIHZhbHVlXG4gICAgICByZXR1cm4gW3N0ZXBzW25leHRJZHhdLCBuZXh0SWR4XTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCB7aXNBbmltYXRpbmd9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIGNvbnN0IHtjaGlsZHJlbn0gPSB0aGlzLnByb3BzO1xuXG4gICAgICByZXR1cm4gdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRyZW4oXG4gICAgICAgICAgICBpc0FuaW1hdGluZyxcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0QW5pbWF0aW9uLFxuICAgICAgICAgICAgdGhpcy5fcGF1c2VBbmltYXRpb24sXG4gICAgICAgICAgICB0aGlzLl9yZXNldEFuaW1hdGlvbixcbiAgICAgICAgICAgIHRoaXMucHJvcHMudGltZWxpbmUsXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNldFRpbWVsaW5lVmFsdWVcbiAgICAgICAgICApXG4gICAgICAgIDogbnVsbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gQW5pbWF0aW9uQ29udHJvbGxlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQW5pbWF0aW9uQ29udHJvbGxlckZhY3Rvcnk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7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