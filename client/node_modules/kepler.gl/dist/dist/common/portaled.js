"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChildPos = exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _debounce = _interopRequireDefault(require("lodash/debounce"));
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _exenv = require("exenv");
var _styledComponents = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components");
var _context = require("../context");
var _reactModal = _interopRequireDefault(require("react-modal"));
var _window = _interopRequireDefault(require("global/window"));
var _styles = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/styles/src");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function _callSuper(t, o, e) {
  return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var listeners = {};
var startListening = function startListening() {
  return Object.keys(listeners).forEach(function (key) {
    return listeners[key]();
  });
};
var getPageOffset = function getPageOffset() {
  return {
    x: _window["default"].pageXOffset !== undefined ? _window["default"].pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft,
    y: _window["default"].pageYOffset !== undefined ? _window["default"].pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop
  };
};
var addEventListeners = function addEventListeners() {
  if (document && document.body) document.body.addEventListener('mousewheel', (0, _debounce["default"])(startListening, 100, {
    leading: true
  }));
  _window["default"].addEventListener('resize', (0, _debounce["default"])(startListening, 50, {
    leading: true
  }));
};
var getChildPos = exports.getChildPos = function getChildPos(_ref) {
  var offsets = _ref.offsets,
    rect = _ref.rect,
    childRect = _ref.childRect,
    pageOffset = _ref.pageOffset,
    padding = _ref.padding;
  var topOffset = offsets.topOffset,
    leftOffset = offsets.leftOffset,
    rightOffset = offsets.rightOffset;
  var anchorLeft = leftOffset !== undefined;
  var pos = _objectSpread({
    top: pageOffset.y + rect.top + (topOffset || 0)
  }, anchorLeft ? {
    left: pageOffset.x + rect.left + (leftOffset || 0)
  } : {
    right: _window["default"].innerWidth - rect.right - pageOffset.x + (rightOffset || 0)
  });
  var leftOrRight = anchorLeft ? 'left' : 'right';
  if (pos[leftOrRight] && pos[leftOrRight] < 0) {
    pos[leftOrRight] = padding;
  } else if (pos[leftOrRight] && pos[leftOrRight] + childRect.width > _window["default"].innerWidth) {
    pos[leftOrRight] = _window["default"].innerWidth - childRect.width - padding;
  }
  if (pos.top < 0) {
    pos.top = padding;
  } else if (pos.top + childRect.height > _window["default"].innerHeight) {
    pos.top = _window["default"].innerHeight - childRect.height - padding;
  }
  return pos;
};
if (_exenv.canUseDOM) {
  if (document.body) {
    addEventListeners();
  } else {
    document.addEventListener('DOMContentLoaded', addEventListeners);
  }
}
var listenerIdCounter = 0;
function subscribe(fn) {
  listenerIdCounter += 1;
  var id = listenerIdCounter;
  listeners[id] = fn;
  return function () {
    return delete listeners[id];
  };
}
var defaultModalStyle = {
  content: {
    top: 0,
    left: 0,
    border: 0,
    right: 'auto',
    bottom: 'auto',
    padding: '0px 0px 0px 0px'
  },
  overlay: {
    right: 'auto',
    bottom: 'auto',
    width: '100vw',
    height: '100vh',
    backgroundColor: 'rgba(0, 0, 0, 0)'
  }
};
var WINDOW_PAD = 40;
var noop = function noop() {
  return;
};
var DefaultComponent = 'div';
var Portaled = /*#__PURE__*/function (_Component) {
  function Portaled() {
    var _this;
    (0, _classCallCheck2["default"])(this, Portaled);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, Portaled, [].concat(args));
    (0, _defineProperty2["default"])(_this, "state", {
      pos: null,
      isVisible: false
    });
    (0, _defineProperty2["default"])(_this, "unsubscribe", undefined);
    (0, _defineProperty2["default"])(_this, "_unmounted", false);
    (0, _defineProperty2["default"])(_this, "element", /*#__PURE__*/(0, _react.createRef)());
    (0, _defineProperty2["default"])(_this, "child", /*#__PURE__*/(0, _react.createRef)());
    // eslint-disable-next-line complexity
    (0, _defineProperty2["default"])(_this, "handleScroll", function () {
      if (_this.child.current && _this.element.current) {
        var rect = _this.element.current.getBoundingClientRect();
        var childRect = _this.child.current.getBoundingClientRect();
        var pageOffset = getPageOffset();
        var _this$props = _this.props,
          topOffset = _this$props.top,
          _this$props$left = _this$props.left,
          leftOffset = _this$props$left === void 0 ? 0 : _this$props$left,
          rightOffset = _this$props.right;
        var pos = getChildPos({
          offsets: {
            topOffset: topOffset,
            leftOffset: leftOffset,
            rightOffset: rightOffset
          },
          rect: rect,
          childRect: childRect,
          pageOffset: pageOffset,
          padding: WINDOW_PAD
        });
        if (!(0, _isEqual["default"])(pos, _this.state.pos)) {
          _this.setState({
            pos: pos
          });
        }
      }
    });
    return _this;
  }
  (0, _inherits2["default"])(Portaled, _Component);
  return (0, _createClass2["default"])(Portaled, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._unmounted = false;
      // relative
      this.unsubscribe = subscribe(this.handleScroll);
      this.handleScroll();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;
      var didOpen = this.props.isOpened && !prevProps.isOpened;
      var didClose = !this.props.isOpened && prevProps.isOpened;
      if (didOpen || didClose) {
        _window["default"].requestAnimationFrame(function () {
          if (_this2._unmounted) return;
          _this2.setState({
            isVisible: Boolean(didOpen)
          });
        });
      }
      this.handleScroll();
    }

    // ColorPicker will throw a cross-origin error when it is closed
    // when the app is within an iframe.
    // This is a known issue of react-color component:
    // see: https://github.com/casesandberg/react-color/issues/806
  }, {
    key: "componentDidCatch",
    value: function componentDidCatch() {
      // Do nothing here, since React will try to recreate this component
      // tree from scratch using the error boundary, which is this component
      // itself. This is a temporal fix for a crash.
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._unmounted = true;
      // @ts-ignore
      this.unsubscribe();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var _this$props2 = this.props,
        _this$props2$componen = _this$props2.component,
        component = _this$props2$componen === void 0 ? DefaultComponent : _this$props2$componen,
        overlayZIndex = _this$props2.overlayZIndex,
        isOpened = _this$props2.isOpened,
        onClose = _this$props2.onClose,
        children = _this$props2.children,
        modalProps = _this$props2.modalProps,
        _this$props2$modalSty = _this$props2.modalStyle,
        modalStyle = _this$props2$modalSty === void 0 ? {} : _this$props2$modalSty;
      var _this$state = this.state,
        isVisible = _this$state.isVisible,
        pos = _this$state.pos;
      var newModalStyle = _objectSpread(_objectSpread({}, defaultModalStyle), {}, {
        content: _objectSpread({}, modalStyle.content || {}),
        overlay: _objectSpread(_objectSpread(_objectSpread({}, defaultModalStyle.overlay), modalStyle.overlay || {}), {}, {
          // needs to be on top of existing modal
          zIndex: overlayZIndex || 9999
        })
      });
      var Comp = component;
      return /*#__PURE__*/_react["default"].createElement(_context.RootContext.Consumer, null, function (context) {
        return /*#__PURE__*/_react["default"].createElement(Comp, {
          ref: _this3.element
        }, isOpened ? /*#__PURE__*/_react["default"].createElement(_reactModal["default"], (0, _extends2["default"])({
          className: "modal-portal"
        }, modalProps, {
          ariaHideApp: false,
          isOpen: true,
          style: newModalStyle,
          parentSelector: function parentSelector() {
            // React modal issue: https://github.com/reactjs/react-modal/issues/769
            // failed to execute removeChild on parent node when it is already unmounted
            return context && context.current || document.body;
          },
          onRequestClose: onClose
        }), /*#__PURE__*/_react["default"].createElement("div", {
          className: "portaled-content",
          key: "item",
          style: _objectSpread({
            position: 'fixed',
            opacity: isVisible ? 1 : 0,
            transition: _this3.props.theme.transitionFast,
            marginTop: isVisible ? '0px' : '14px'
          }, pos)
        }, /*#__PURE__*/_react["default"].createElement("div", {
          ref: _this3.child,
          style: {
            position: 'absolute',
            zIndex: overlayZIndex ? overlayZIndex + 1 : 10000
          }
        }, children))) : null);
      });
    }
  }], [{
    key: "getDerivedStateFromError",
    value:
    // Make Portaled a component with Error Boundary, so React can recreate
    // this component if the child 'ColorPicker' throws cross-origin error.
    // see function componentDidCatch()
    function getDerivedStateFromError() {
      return {
        hasError: true
      };
    }
  }]);
}(_react.Component);
(0, _defineProperty2["default"])(Portaled, "defaultProps", {
  component: DefaultComponent,
  onClose: noop,
  theme: _styles.theme
});
var _default = exports["default"] = (0, _styledComponents.withTheme)(Portaled);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,