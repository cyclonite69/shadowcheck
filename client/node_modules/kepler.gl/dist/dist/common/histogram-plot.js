"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.HISTOGRAM_MASK_MODE = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _d3Scale = require("d3-scale");
var _d3Color = require("d3-color");
var _d3Array = require("d3-array");
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// clipping mask constants
var HISTOGRAM_MASK_MODE = exports.HISTOGRAM_MASK_MODE = {
  NoMask: 0,
  Mask: 1,
  MaskWithOverlay: 2
};
var HISTOGRAM_MASK_BGCOLOR = '#FFFFFF';
var HISTOGRAM_MASK_FGCOLOR = '#000000';
var histogramStyle = {
  highlightW: 0.7,
  unHighlightedW: 0.4
};
var HistogramWrapper = _styledComponents["default"].svg(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  overflow: visible;\n"])));
var HistogramMaskRect = _styledComponents["default"].rect(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  fill: ", ";\n"])), function (props) {
  return props.theme.panelBackground;
});
var HistogramBreakLine = _styledComponents["default"].g(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  stroke: ", ";\n  stroke-width: 1px;\n  transform: translate(0, 0);\n"])), function (props) {
  return props.theme.histogramBreakLineColor;
});
var BarUnmemoized = _styledComponents["default"].rect(function (_ref) {
  var theme = _ref.theme,
    $inRange = _ref.$inRange,
    $isOverlay = _ref.$isOverlay,
    $color = _ref.$color;
  return "\n  ".concat($isOverlay ? "fill: ".concat($color !== null && $color !== void 0 ? $color : theme.histogramOverlayColor, ";") : $inRange ? "fill: ".concat($color !== null && $color !== void 0 ? $color : theme.histogramFillInRange, ";") : "fill: ".concat($color ? (0, _d3Color.hcl)($color).darker() : theme.histogramFillOutRange, ";"), "\n");
});
var Bar = /*#__PURE__*/_react["default"].memo(BarUnmemoized);
Bar.displayName = 'Bar';
var isBarInRange = function isBarInRange(bar, index, list, filterDomain, filterValue) {
  // first
  // if x0 <= domain[0] and current value[0] wasn't changed from the original domain
  var x0Condition = index === 0 ? bar.x0 <= filterDomain[0] && filterDomain[0] === filterValue[0] : false;
  // Last
  // if x1 >= domain[1] and current value[1] wasn't changed from the original domain
  var x1Condition = index === list.length - 1 ? bar.x1 >= filterDomain[1] && filterDomain[1] === filterValue[1] : false;
  return (x0Condition || bar.x0 >= filterValue[0]) && (x1Condition || bar.x1 <= filterValue[1]);
};
function HistogramPlotFactory() {
  var HistogramPlot = function HistogramPlot(_ref2) {
    var width = _ref2.width,
      height = _ref2.height,
      histogramsByGroup = _ref2.histogramsByGroup,
      colorsByGroup = _ref2.colorsByGroup,
      _ref2$isMasked = _ref2.isMasked,
      isMasked = _ref2$isMasked === void 0 ? HISTOGRAM_MASK_MODE.NoMask : _ref2$isMasked,
      _ref2$countProp = _ref2.countProp,
      countProp = _ref2$countProp === void 0 ? 'count' : _ref2$countProp,
      margin = _ref2.margin,
      isRanged = _ref2.isRanged,
      range = _ref2.range,
      value = _ref2.value,
      brushComponent = _ref2.brushComponent,
      breakLines = _ref2.breakLines;
    var undefinedToZero = function undefinedToZero(x) {
      return x ? x : 0;
    };
    var groupKeys = (0, _react.useMemo)(function () {
      return Object.keys(histogramsByGroup)
      // only keep non-empty groups
      .filter(function (key) {
        var _histogramsByGroup$ke;
        return ((_histogramsByGroup$ke = histogramsByGroup[key]) === null || _histogramsByGroup$ke === void 0 ? void 0 : _histogramsByGroup$ke.length) > 0;
      });
    }, [histogramsByGroup]);
    var domain = (0, _react.useMemo)(function () {
      var _min, _max;
      return range !== null && range !== void 0 ? range : [(_min = (0, _d3Array.min)(groupKeys, function (key) {
        return histogramsByGroup[key][0].x0;
      })) !== null && _min !== void 0 ? _min : 0, (_max = (0, _d3Array.max)(groupKeys, function (key) {
        return histogramsByGroup[key][histogramsByGroup[key].length - 1].x1;
      })) !== null && _max !== void 0 ? _max : 0];
    }, [range, histogramsByGroup, groupKeys]);
    var barWidth = (0, _react.useMemo)(function () {
      if (groupKeys.length === 0) return 0;
      // find histogramsByGroup with max number of bins
      var maxGroup = groupKeys.reduce(function (accu, key, _idx) {
        if (histogramsByGroup[key].length > accu.length) {
          return histogramsByGroup[key];
        }
        return accu;
      }, histogramsByGroup[groupKeys[0]]);

      // find the bin for measuring step
      var stdBinIdx = maxGroup.length > 1 ? 1 : 0;
      var xStep = maxGroup[stdBinIdx].x1 - maxGroup[stdBinIdx].x0;
      var maxBins = (domain[1] - domain[0]) / xStep;
      if (!maxBins) return 0;
      return width / maxBins / (isMasked ? 1 : groupKeys.length);
    }, [histogramsByGroup, domain, groupKeys, width, isMasked]);
    var x = (0, _react.useMemo)(function () {
      return (0, _d3Scale.scaleLinear)().domain(domain).range([barWidth, width]);
    }, [domain, width, barWidth]);
    var y = (0, _react.useMemo)(function () {
      return (0, _d3Scale.scaleLinear)().domain([0, Math.max(Number((0, _d3Array.max)(groupKeys, function (key) {
        return (0, _d3Array.max)(histogramsByGroup[key], function (d) {
          return d[countProp];
        });
      })), 1)]).range([0, height]);
    }, [histogramsByGroup, groupKeys, height, countProp]);
    if (groupKeys.length === 0) {
      return null;
    }
    var maskedHistogram = function maskedHistogram() {
      return /*#__PURE__*/_react["default"].createElement(HistogramWrapper, {
        width: width,
        height: height,
        style: {
          margin: "".concat(margin.top, "px ").concat(margin.right, "px ").concat(margin.bottom, "px ").concat(margin.left, "px")
        }
      }, /*#__PURE__*/_react["default"].createElement("defs", null, /*#__PURE__*/_react["default"].createElement("mask", {
        id: "histogram-mask"
      }, /*#__PURE__*/_react["default"].createElement("rect", {
        x: "0",
        y: "0",
        width: width,
        height: height + margin.bottom,
        fill: HISTOGRAM_MASK_BGCOLOR
      }), /*#__PURE__*/_react["default"].createElement("g", {
        key: "filtered-bins",
        className: "histogram-bars"
      }, histogramsByGroup.filteredBins.map(function (bar, idx, list) {
        var inRange = isBarInRange(bar, idx, list, domain, value);
        var wRatio = inRange ? histogramStyle.highlightW : histogramStyle.unHighlightedW;
        return /*#__PURE__*/_react["default"].createElement(Bar, {
          $isOverlay: false,
          $inRange: inRange,
          $color: HISTOGRAM_MASK_FGCOLOR,
          key: "mask-".concat(idx),
          height: y(bar[countProp]),
          width: barWidth * wRatio,
          x: x(bar.x0) + barWidth * (1 - wRatio) / 2,
          y: height - y(bar[countProp])
        });
      })))), /*#__PURE__*/_react["default"].createElement("g", {
        transform: "translate(0,0)"
      }, /*#__PURE__*/_react["default"].createElement(HistogramMaskRect, {
        x: "0",
        y: "0",
        width: "100%",
        height: height + margin.bottom,
        mask: "url(#histogram-mask)"
      })), isMasked === HISTOGRAM_MASK_MODE.MaskWithOverlay && /*#__PURE__*/_react["default"].createElement("g", {
        key: "bins",
        transform: "translate(0,0)",
        className: "overlay-histogram-bars"
      }, histogramsByGroup.bins.map(function (bar, idx, list) {
        var filterBar = histogramsByGroup.filteredBins[idx];
        var maskHeight = filterBar ? y(bar[countProp]) - y(filterBar[countProp]) : y(bar[countProp]);
        var inRange = isBarInRange(bar, idx, list, domain, value);
        var wRatio = inRange ? histogramStyle.highlightW : histogramStyle.unHighlightedW;
        return /*#__PURE__*/_react["default"].createElement(Bar, {
          $inRange: inRange,
          $isOverlay: true,
          key: "bar-".concat(idx),
          height: maskHeight,
          width: barWidth * wRatio,
          x: x(bar.x0) + barWidth * (1 - wRatio) / 2,
          y: height - y(bar[countProp])
        });
      })), /*#__PURE__*/_react["default"].createElement(HistogramBreakLine, null, (breakLines !== null && breakLines !== void 0 ? breakLines : []).map(function (pos, idx) {
        return /*#__PURE__*/_react["default"].createElement("path", {
          key: "mask-line-".concat(idx),
          strokeDasharray: "4,4",
          d: "M".concat(pos, ", 0 l0 100")
        });
      })), /*#__PURE__*/_react["default"].createElement("g", {
        transform: "translate(".concat(isRanged ? 0 : barWidth / 2, ", 0)")
      }, brushComponent));
    };
    return isMasked ? maskedHistogram() : /*#__PURE__*/_react["default"].createElement(HistogramWrapper, {
      width: width,
      height: height,
      style: {
        margin: "".concat(margin.top, "px ").concat(margin.right, "px ").concat(margin.bottom, "px ").concat(margin.left, "px")
      }
    }, /*#__PURE__*/_react["default"].createElement("g", null, groupKeys.map(function (key, i) {
      return /*#__PURE__*/_react["default"].createElement("g", {
        key: key,
        className: "histogram-bars"
      }, histogramsByGroup[key].map(function (bar, idx, list) {
        var inRange = isBarInRange(bar, idx, list, domain, value);
        var wRatio = inRange ? histogramStyle.highlightW : histogramStyle.unHighlightedW;
        var startX = x(undefinedToZero(bar.x0)) + barWidth * i + barWidth * (1 - wRatio) / 2;
        if (startX > 0 && startX + barWidth * histogramStyle.unHighlightedW <= width) {
          return /*#__PURE__*/_react["default"].createElement(Bar, {
            $isOverlay: false,
            $inRange: inRange,
            $color: colorsByGroup === null || colorsByGroup === void 0 ? void 0 : colorsByGroup[key],
            key: "bar-".concat(idx),
            height: y(bar[countProp]),
            width: barWidth * wRatio,
            x: startX,
            rx: 1,
            ry: 1,
            y: height - y(bar[countProp])
          });
        }
        return null;
      }));
    })), /*#__PURE__*/_react["default"].createElement("g", {
      transform: "translate(".concat(isRanged ? 0 : barWidth / 2, ", 0)")
    }, brushComponent));
  };
  var HistogramPlotWithGroups = function HistogramPlotWithGroups(props) {
    var groups = (0, _react.useMemo)(function () {
      return props.histogramsByGroup ? Object.keys(props.histogramsByGroup) : null;
    }, [props.histogramsByGroup]);
    if (!(groups !== null && groups !== void 0 && groups.length)) {
      return null;
    }
    return /*#__PURE__*/_react["default"].createElement(HistogramPlot, props);
  };
  return HistogramPlotWithGroups;
}
var _default = exports["default"] = HistogramPlotFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZDNTY2FsZSIsIl9kM0NvbG9yIiwiX2QzQXJyYXkiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfdGVtcGxhdGVPYmplY3QiLCJfdGVtcGxhdGVPYmplY3QyIiwiX3RlbXBsYXRlT2JqZWN0MyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIkhJU1RPR1JBTV9NQVNLX01PREUiLCJleHBvcnRzIiwiTm9NYXNrIiwiTWFzayIsIk1hc2tXaXRoT3ZlcmxheSIsIkhJU1RPR1JBTV9NQVNLX0JHQ09MT1IiLCJISVNUT0dSQU1fTUFTS19GR0NPTE9SIiwiaGlzdG9ncmFtU3R5bGUiLCJoaWdobGlnaHRXIiwidW5IaWdobGlnaHRlZFciLCJIaXN0b2dyYW1XcmFwcGVyIiwic3ZnIiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbDIiLCJIaXN0b2dyYW1NYXNrUmVjdCIsInJlY3QiLCJwcm9wcyIsInRoZW1lIiwicGFuZWxCYWNrZ3JvdW5kIiwiSGlzdG9ncmFtQnJlYWtMaW5lIiwiZyIsImhpc3RvZ3JhbUJyZWFrTGluZUNvbG9yIiwiQmFyVW5tZW1vaXplZCIsIl9yZWYiLCIkaW5SYW5nZSIsIiRpc092ZXJsYXkiLCIkY29sb3IiLCJjb25jYXQiLCJoaXN0b2dyYW1PdmVybGF5Q29sb3IiLCJoaXN0b2dyYW1GaWxsSW5SYW5nZSIsImhjbCIsImRhcmtlciIsImhpc3RvZ3JhbUZpbGxPdXRSYW5nZSIsIkJhciIsIm1lbW8iLCJkaXNwbGF5TmFtZSIsImlzQmFySW5SYW5nZSIsImJhciIsImluZGV4IiwibGlzdCIsImZpbHRlckRvbWFpbiIsImZpbHRlclZhbHVlIiwieDBDb25kaXRpb24iLCJ4MCIsIngxQ29uZGl0aW9uIiwibGVuZ3RoIiwieDEiLCJIaXN0b2dyYW1QbG90RmFjdG9yeSIsIkhpc3RvZ3JhbVBsb3QiLCJfcmVmMiIsIndpZHRoIiwiaGVpZ2h0IiwiaGlzdG9ncmFtc0J5R3JvdXAiLCJjb2xvcnNCeUdyb3VwIiwiX3JlZjIkaXNNYXNrZWQiLCJpc01hc2tlZCIsIl9yZWYyJGNvdW50UHJvcCIsImNvdW50UHJvcCIsIm1hcmdpbiIsImlzUmFuZ2VkIiwicmFuZ2UiLCJ2YWx1ZSIsImJydXNoQ29tcG9uZW50IiwiYnJlYWtMaW5lcyIsInVuZGVmaW5lZFRvWmVybyIsIngiLCJncm91cEtleXMiLCJ1c2VNZW1vIiwia2V5cyIsImZpbHRlciIsImtleSIsIl9oaXN0b2dyYW1zQnlHcm91cCRrZSIsImRvbWFpbiIsIl9taW4iLCJfbWF4IiwibWluIiwibWF4IiwiYmFyV2lkdGgiLCJtYXhHcm91cCIsInJlZHVjZSIsImFjY3UiLCJfaWR4Iiwic3RkQmluSWR4IiwieFN0ZXAiLCJtYXhCaW5zIiwic2NhbGVMaW5lYXIiLCJ5IiwiTWF0aCIsIk51bWJlciIsImQiLCJtYXNrZWRIaXN0b2dyYW0iLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJpZCIsImZpbGwiLCJjbGFzc05hbWUiLCJmaWx0ZXJlZEJpbnMiLCJtYXAiLCJpZHgiLCJpblJhbmdlIiwid1JhdGlvIiwidHJhbnNmb3JtIiwibWFzayIsImJpbnMiLCJmaWx0ZXJCYXIiLCJtYXNrSGVpZ2h0IiwicG9zIiwic3Ryb2tlRGFzaGFycmF5Iiwic3RhcnRYIiwicngiLCJyeSIsIkhpc3RvZ3JhbVBsb3RXaXRoR3JvdXBzIiwiZ3JvdXBzIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbW9uL2hpc3RvZ3JhbS1wbG90LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHtSZWFjdEVsZW1lbnQsIHVzZU1lbW99IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7c2NhbGVMaW5lYXJ9IGZyb20gJ2QzLXNjYWxlJztcbmltcG9ydCB7aGNsfSBmcm9tICdkMy1jb2xvcic7XG5pbXBvcnQge21pbiwgbWF4fSBmcm9tICdkMy1hcnJheSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IHtCaW5zfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcblxuLy8gY2xpcHBpbmcgbWFzayBjb25zdGFudHNcbmV4cG9ydCBjb25zdCBISVNUT0dSQU1fTUFTS19NT0RFID0ge1xuICBOb01hc2s6IDAsXG4gIE1hc2s6IDEsXG4gIE1hc2tXaXRoT3ZlcmxheTogMlxufTtcbmNvbnN0IEhJU1RPR1JBTV9NQVNLX0JHQ09MT1IgPSAnI0ZGRkZGRic7XG5jb25zdCBISVNUT0dSQU1fTUFTS19GR0NPTE9SID0gJyMwMDAwMDAnO1xuXG5jb25zdCBoaXN0b2dyYW1TdHlsZSA9IHtcbiAgaGlnaGxpZ2h0VzogMC43LFxuICB1bkhpZ2hsaWdodGVkVzogMC40XG59O1xuXG5jb25zdCBIaXN0b2dyYW1XcmFwcGVyID0gc3R5bGVkLnN2Z2BcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG5gO1xuXG5jb25zdCBIaXN0b2dyYW1NYXNrUmVjdCA9IHN0eWxlZC5yZWN0YFxuICBmaWxsOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLnBhbmVsQmFja2dyb3VuZH07XG5gO1xuXG5jb25zdCBIaXN0b2dyYW1CcmVha0xpbmUgPSBzdHlsZWQuZ2BcbiAgc3Ryb2tlOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmhpc3RvZ3JhbUJyZWFrTGluZUNvbG9yfTtcbiAgc3Ryb2tlLXdpZHRoOiAxcHg7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDApO1xuYDtcblxudHlwZSBCYXJUeXBlID0ge1xuICAkaW5SYW5nZTogYm9vbGVhbjtcbiAgJGlzT3ZlcmxheTogYm9vbGVhbjtcbiAgJGNvbG9yPzogc3RyaW5nO1xufTtcbmNvbnN0IEJhclVubWVtb2l6ZWQgPSBzdHlsZWQucmVjdDxCYXJUeXBlPihcbiAgKHt0aGVtZSwgJGluUmFuZ2UsICRpc092ZXJsYXksICRjb2xvcn0pID0+IGBcbiAgJHtcbiAgICAkaXNPdmVybGF5XG4gICAgICA/IGBmaWxsOiAkeyRjb2xvciA/PyB0aGVtZS5oaXN0b2dyYW1PdmVybGF5Q29sb3J9O2BcbiAgICAgIDogJGluUmFuZ2VcbiAgICAgID8gYGZpbGw6ICR7JGNvbG9yID8/IHRoZW1lLmhpc3RvZ3JhbUZpbGxJblJhbmdlfTtgXG4gICAgICA6IGBmaWxsOiAkeyRjb2xvciA/IGhjbCgkY29sb3IpLmRhcmtlcigpIDogdGhlbWUuaGlzdG9ncmFtRmlsbE91dFJhbmdlfTtgXG4gIH1cbmBcbik7XG5jb25zdCBCYXIgPSBSZWFjdC5tZW1vKEJhclVubWVtb2l6ZWQpO1xuQmFyLmRpc3BsYXlOYW1lID0gJ0Jhcic7XG5cbmNvbnN0IGlzQmFySW5SYW5nZSA9IChcbiAgYmFyOiB7eDA6IG51bWJlcjsgeDE6IG51bWJlcn0sXG4gIGluZGV4OiBudW1iZXIsXG4gIGxpc3Q6IGFueVtdLFxuICBmaWx0ZXJEb21haW46IGFueVtdLFxuICBmaWx0ZXJWYWx1ZTogYW55W11cbikgPT4ge1xuICAvLyBmaXJzdFxuICAvLyBpZiB4MCA8PSBkb21haW5bMF0gYW5kIGN1cnJlbnQgdmFsdWVbMF0gd2Fzbid0IGNoYW5nZWQgZnJvbSB0aGUgb3JpZ2luYWwgZG9tYWluXG4gIGNvbnN0IHgwQ29uZGl0aW9uID1cbiAgICBpbmRleCA9PT0gMCA/IGJhci54MCA8PSBmaWx0ZXJEb21haW5bMF0gJiYgZmlsdGVyRG9tYWluWzBdID09PSBmaWx0ZXJWYWx1ZVswXSA6IGZhbHNlO1xuICAvLyBMYXN0XG4gIC8vIGlmIHgxID49IGRvbWFpblsxXSBhbmQgY3VycmVudCB2YWx1ZVsxXSB3YXNuJ3QgY2hhbmdlZCBmcm9tIHRoZSBvcmlnaW5hbCBkb21haW5cbiAgY29uc3QgeDFDb25kaXRpb24gPVxuICAgIGluZGV4ID09PSBsaXN0Lmxlbmd0aCAtIDFcbiAgICAgID8gYmFyLngxID49IGZpbHRlckRvbWFpblsxXSAmJiBmaWx0ZXJEb21haW5bMV0gPT09IGZpbHRlclZhbHVlWzFdXG4gICAgICA6IGZhbHNlO1xuICByZXR1cm4gKHgwQ29uZGl0aW9uIHx8IGJhci54MCA+PSBmaWx0ZXJWYWx1ZVswXSkgJiYgKHgxQ29uZGl0aW9uIHx8IGJhci54MSA8PSBmaWx0ZXJWYWx1ZVsxXSk7XG59O1xuXG5leHBvcnQgdHlwZSBIaXN0b2dyYW1NYXNrTW9kZVR5cGUgPSB7XG4gIE5vTWFzazogbnVtYmVyO1xuICBNYXNrOiBudW1iZXI7XG4gIE1hc2tXaXRoT3ZlcmxheTogbnVtYmVyO1xufTtcblxuaW50ZXJmYWNlIEhpc3RvZ3JhbVBsb3RQcm9wcyB7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICBtYXJnaW46IHt0b3A6IG51bWJlcjsgYm90dG9tOiBudW1iZXI7IGxlZnQ6IG51bWJlcjsgcmlnaHQ6IG51bWJlcn07XG4gIGlzUmFuZ2VkPzogYm9vbGVhbjtcbiAgdmFsdWU6IG51bWJlcltdO1xuICBpc01hc2tlZD86IG51bWJlcjtcbiAgYnJ1c2hDb21wb25lbnQ/OiBSZWFjdEVsZW1lbnQ7XG4gIGhpc3RvZ3JhbXNCeUdyb3VwOiBCaW5zO1xuICBjb2xvcnNCeUdyb3VwPzogbnVsbCB8IHtbZGF0YUlkOiBzdHJpbmddOiBzdHJpbmd9O1xuICBjb3VudFByb3A/OiBzdHJpbmc7XG4gIHJhbmdlPzogbnVtYmVyW107XG4gIGJyZWFrTGluZXM/OiBudW1iZXJbXTtcbn1cblxuZnVuY3Rpb24gSGlzdG9ncmFtUGxvdEZhY3RvcnkoKSB7XG4gIGNvbnN0IEhpc3RvZ3JhbVBsb3QgPSAoe1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBoaXN0b2dyYW1zQnlHcm91cCxcbiAgICBjb2xvcnNCeUdyb3VwLFxuICAgIGlzTWFza2VkID0gSElTVE9HUkFNX01BU0tfTU9ERS5Ob01hc2ssXG4gICAgY291bnRQcm9wID0gJ2NvdW50JyxcbiAgICBtYXJnaW4sXG4gICAgaXNSYW5nZWQsXG4gICAgcmFuZ2UsXG4gICAgdmFsdWUsXG4gICAgYnJ1c2hDb21wb25lbnQsXG4gICAgYnJlYWtMaW5lc1xuICB9OiBIaXN0b2dyYW1QbG90UHJvcHMpID0+IHtcbiAgICBjb25zdCB1bmRlZmluZWRUb1plcm8gPSAoeDogbnVtYmVyIHwgdW5kZWZpbmVkKSA9PiAoeCA/IHggOiAwKTtcbiAgICBjb25zdCBncm91cEtleXMgPSB1c2VNZW1vKFxuICAgICAgKCkgPT5cbiAgICAgICAgT2JqZWN0LmtleXMoaGlzdG9ncmFtc0J5R3JvdXApXG4gICAgICAgICAgLy8gb25seSBrZWVwIG5vbi1lbXB0eSBncm91cHNcbiAgICAgICAgICAuZmlsdGVyKGtleSA9PiBoaXN0b2dyYW1zQnlHcm91cFtrZXldPy5sZW5ndGggPiAwKSxcbiAgICAgIFtoaXN0b2dyYW1zQnlHcm91cF1cbiAgICApO1xuXG4gICAgY29uc3QgZG9tYWluID0gdXNlTWVtbyhcbiAgICAgICgpID0+XG4gICAgICAgIHJhbmdlID8/IFtcbiAgICAgICAgICBtaW4oZ3JvdXBLZXlzLCBrZXkgPT4gaGlzdG9ncmFtc0J5R3JvdXBba2V5XVswXS54MCkgPz8gMCxcbiAgICAgICAgICBtYXgoZ3JvdXBLZXlzLCBrZXkgPT4gaGlzdG9ncmFtc0J5R3JvdXBba2V5XVtoaXN0b2dyYW1zQnlHcm91cFtrZXldLmxlbmd0aCAtIDFdLngxKSA/PyAwXG4gICAgICAgIF0sXG4gICAgICBbcmFuZ2UsIGhpc3RvZ3JhbXNCeUdyb3VwLCBncm91cEtleXNdXG4gICAgKTtcblxuICAgIGNvbnN0IGJhcldpZHRoID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICBpZiAoZ3JvdXBLZXlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XG4gICAgICAvLyBmaW5kIGhpc3RvZ3JhbXNCeUdyb3VwIHdpdGggbWF4IG51bWJlciBvZiBiaW5zXG4gICAgICBjb25zdCBtYXhHcm91cCA9IGdyb3VwS2V5cy5yZWR1Y2UoKGFjY3UsIGtleSwgX2lkeCkgPT4ge1xuICAgICAgICBpZiAoaGlzdG9ncmFtc0J5R3JvdXBba2V5XS5sZW5ndGggPiBhY2N1Lmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBoaXN0b2dyYW1zQnlHcm91cFtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2N1O1xuICAgICAgfSwgaGlzdG9ncmFtc0J5R3JvdXBbZ3JvdXBLZXlzWzBdXSk7XG5cbiAgICAgIC8vIGZpbmQgdGhlIGJpbiBmb3IgbWVhc3VyaW5nIHN0ZXBcbiAgICAgIGNvbnN0IHN0ZEJpbklkeCA9IG1heEdyb3VwLmxlbmd0aCA+IDEgPyAxIDogMDtcbiAgICAgIGNvbnN0IHhTdGVwID0gbWF4R3JvdXBbc3RkQmluSWR4XS54MSAtIG1heEdyb3VwW3N0ZEJpbklkeF0ueDA7XG4gICAgICBjb25zdCBtYXhCaW5zID0gKGRvbWFpblsxXSAtIGRvbWFpblswXSkgLyB4U3RlcDtcbiAgICAgIGlmICghbWF4QmlucykgcmV0dXJuIDA7XG4gICAgICByZXR1cm4gd2lkdGggLyBtYXhCaW5zIC8gKGlzTWFza2VkID8gMSA6IGdyb3VwS2V5cy5sZW5ndGgpO1xuICAgIH0sIFtoaXN0b2dyYW1zQnlHcm91cCwgZG9tYWluLCBncm91cEtleXMsIHdpZHRoLCBpc01hc2tlZF0pO1xuXG4gICAgY29uc3QgeCA9IHVzZU1lbW8oXG4gICAgICAoKSA9PiBzY2FsZUxpbmVhcigpLmRvbWFpbihkb21haW4pLnJhbmdlKFtiYXJXaWR0aCwgd2lkdGhdKSxcbiAgICAgIFtkb21haW4sIHdpZHRoLCBiYXJXaWR0aF1cbiAgICApO1xuXG4gICAgY29uc3QgeSA9IHVzZU1lbW8oXG4gICAgICAoKSA9PlxuICAgICAgICBzY2FsZUxpbmVhcigpXG4gICAgICAgICAgLmRvbWFpbihbXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgTWF0aC5tYXgoXG4gICAgICAgICAgICAgIE51bWJlcihtYXgoZ3JvdXBLZXlzLCBrZXkgPT4gbWF4KGhpc3RvZ3JhbXNCeUdyb3VwW2tleV0sIGQgPT4gZFtjb3VudFByb3BdKSkpLFxuICAgICAgICAgICAgICAxXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSlcbiAgICAgICAgICAucmFuZ2UoWzAsIGhlaWdodF0pLFxuICAgICAgW2hpc3RvZ3JhbXNCeUdyb3VwLCBncm91cEtleXMsIGhlaWdodCwgY291bnRQcm9wXVxuICAgICk7XG5cbiAgICBpZiAoZ3JvdXBLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgbWFza2VkSGlzdG9ncmFtID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEhpc3RvZ3JhbVdyYXBwZXJcbiAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgICAgc3R5bGU9e3ttYXJnaW46IGAke21hcmdpbi50b3B9cHggJHttYXJnaW4ucmlnaHR9cHggJHttYXJnaW4uYm90dG9tfXB4ICR7bWFyZ2luLmxlZnR9cHhgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkZWZzPlxuICAgICAgICAgICAgPG1hc2sgaWQ9XCJoaXN0b2dyYW0tbWFza1wiPlxuICAgICAgICAgICAgICA8cmVjdFxuICAgICAgICAgICAgICAgIHg9XCIwXCJcbiAgICAgICAgICAgICAgICB5PVwiMFwiXG4gICAgICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgICAgICAgIGhlaWdodD17aGVpZ2h0ICsgbWFyZ2luLmJvdHRvbX1cbiAgICAgICAgICAgICAgICBmaWxsPXtISVNUT0dSQU1fTUFTS19CR0NPTE9SfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8ZyBrZXk9XCJmaWx0ZXJlZC1iaW5zXCIgY2xhc3NOYW1lPVwiaGlzdG9ncmFtLWJhcnNcIj5cbiAgICAgICAgICAgICAgICB7aGlzdG9ncmFtc0J5R3JvdXAuZmlsdGVyZWRCaW5zLm1hcCgoYmFyLCBpZHgsIGxpc3QpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGluUmFuZ2UgPSBpc0JhckluUmFuZ2UoYmFyLCBpZHgsIGxpc3QsIGRvbWFpbiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgY29uc3Qgd1JhdGlvID0gaW5SYW5nZVxuICAgICAgICAgICAgICAgICAgICA/IGhpc3RvZ3JhbVN0eWxlLmhpZ2hsaWdodFdcbiAgICAgICAgICAgICAgICAgICAgOiBoaXN0b2dyYW1TdHlsZS51bkhpZ2hsaWdodGVkVztcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxCYXJcbiAgICAgICAgICAgICAgICAgICAgICAkaXNPdmVybGF5PXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAkaW5SYW5nZT17aW5SYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAkY29sb3I9e0hJU1RPR1JBTV9NQVNLX0ZHQ09MT1J9XG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtgbWFzay0ke2lkeH1gfVxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD17eShiYXJbY291bnRQcm9wXSl9XG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg9e2JhcldpZHRoICogd1JhdGlvfVxuICAgICAgICAgICAgICAgICAgICAgIHg9e3goYmFyLngwKSArIChiYXJXaWR0aCAqICgxIC0gd1JhdGlvKSkgLyAyfVxuICAgICAgICAgICAgICAgICAgICAgIHk9e2hlaWdodCAtIHkoYmFyW2NvdW50UHJvcF0pfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgPC9tYXNrPlxuICAgICAgICAgIDwvZGVmcz5cbiAgICAgICAgICA8ZyB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKVwiPlxuICAgICAgICAgICAgPEhpc3RvZ3JhbU1hc2tSZWN0XG4gICAgICAgICAgICAgIHg9XCIwXCJcbiAgICAgICAgICAgICAgeT1cIjBcIlxuICAgICAgICAgICAgICB3aWR0aD1cIjEwMCVcIlxuICAgICAgICAgICAgICBoZWlnaHQ9e2hlaWdodCArIG1hcmdpbi5ib3R0b219XG4gICAgICAgICAgICAgIG1hc2s9XCJ1cmwoI2hpc3RvZ3JhbS1tYXNrKVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZz5cbiAgICAgICAgICB7aXNNYXNrZWQgPT09IEhJU1RPR1JBTV9NQVNLX01PREUuTWFza1dpdGhPdmVybGF5ICYmIChcbiAgICAgICAgICAgIDxnIGtleT1cImJpbnNcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKVwiIGNsYXNzTmFtZT1cIm92ZXJsYXktaGlzdG9ncmFtLWJhcnNcIj5cbiAgICAgICAgICAgICAge2hpc3RvZ3JhbXNCeUdyb3VwLmJpbnMubWFwKChiYXIsIGlkeCwgbGlzdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlckJhciA9IGhpc3RvZ3JhbXNCeUdyb3VwLmZpbHRlcmVkQmluc1tpZHhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hc2tIZWlnaHQgPSBmaWx0ZXJCYXJcbiAgICAgICAgICAgICAgICAgID8geShiYXJbY291bnRQcm9wXSkgLSB5KGZpbHRlckJhcltjb3VudFByb3BdKVxuICAgICAgICAgICAgICAgICAgOiB5KGJhcltjb3VudFByb3BdKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpblJhbmdlID0gaXNCYXJJblJhbmdlKGJhciwgaWR4LCBsaXN0LCBkb21haW4sIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB3UmF0aW8gPSBpblJhbmdlID8gaGlzdG9ncmFtU3R5bGUuaGlnaGxpZ2h0VyA6IGhpc3RvZ3JhbVN0eWxlLnVuSGlnaGxpZ2h0ZWRXO1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8QmFyXG4gICAgICAgICAgICAgICAgICAgICRpblJhbmdlPXtpblJhbmdlfVxuICAgICAgICAgICAgICAgICAgICAkaXNPdmVybGF5PXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICBrZXk9e2BiYXItJHtpZHh9YH1cbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXttYXNrSGVpZ2h0fVxuICAgICAgICAgICAgICAgICAgICB3aWR0aD17YmFyV2lkdGggKiB3UmF0aW99XG4gICAgICAgICAgICAgICAgICAgIHg9e3goYmFyLngwKSArIChiYXJXaWR0aCAqICgxIC0gd1JhdGlvKSkgLyAyfVxuICAgICAgICAgICAgICAgICAgICB5PXtoZWlnaHQgLSB5KGJhcltjb3VudFByb3BdKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L2c+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8SGlzdG9ncmFtQnJlYWtMaW5lPlxuICAgICAgICAgICAgeyhicmVha0xpbmVzID8/IFtdKS5tYXAoKHBvcywgaWR4KSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHBhdGgga2V5PXtgbWFzay1saW5lLSR7aWR4fWB9IHN0cm9rZURhc2hhcnJheT1cIjQsNFwiIGQ9e2BNJHtwb3N9LCAwIGwwIDEwMGB9IC8+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L0hpc3RvZ3JhbUJyZWFrTGluZT5cbiAgICAgICAgICA8ZyB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoJHtpc1JhbmdlZCA/IDAgOiBiYXJXaWR0aCAvIDJ9LCAwKWB9PnticnVzaENvbXBvbmVudH08L2c+XG4gICAgICAgIDwvSGlzdG9ncmFtV3JhcHBlcj5cbiAgICAgICk7XG4gICAgfTtcblxuICAgIHJldHVybiBpc01hc2tlZCA/IChcbiAgICAgIG1hc2tlZEhpc3RvZ3JhbSgpXG4gICAgKSA6IChcbiAgICAgIDxIaXN0b2dyYW1XcmFwcGVyXG4gICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgIHN0eWxlPXt7bWFyZ2luOiBgJHttYXJnaW4udG9wfXB4ICR7bWFyZ2luLnJpZ2h0fXB4ICR7bWFyZ2luLmJvdHRvbX1weCAke21hcmdpbi5sZWZ0fXB4YH19XG4gICAgICA+XG4gICAgICAgIDxnPlxuICAgICAgICAgIHtncm91cEtleXMubWFwKChrZXksIGkpID0+IChcbiAgICAgICAgICAgIDxnIGtleT17a2V5fSBjbGFzc05hbWU9XCJoaXN0b2dyYW0tYmFyc1wiPlxuICAgICAgICAgICAgICB7aGlzdG9ncmFtc0J5R3JvdXBba2V5XS5tYXAoKGJhciwgaWR4LCBsaXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5SYW5nZSA9IGlzQmFySW5SYW5nZShiYXIsIGlkeCwgbGlzdCwgZG9tYWluLCB2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB3UmF0aW8gPSBpblJhbmdlID8gaGlzdG9ncmFtU3R5bGUuaGlnaGxpZ2h0VyA6IGhpc3RvZ3JhbVN0eWxlLnVuSGlnaGxpZ2h0ZWRXO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0WCA9XG4gICAgICAgICAgICAgICAgICB4KHVuZGVmaW5lZFRvWmVybyhiYXIueDApKSArIGJhcldpZHRoICogaSArIChiYXJXaWR0aCAqICgxIC0gd1JhdGlvKSkgLyAyO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydFggPiAwICYmIHN0YXJ0WCArIGJhcldpZHRoICogaGlzdG9ncmFtU3R5bGUudW5IaWdobGlnaHRlZFcgPD0gd2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxCYXJcbiAgICAgICAgICAgICAgICAgICAgICAkaXNPdmVybGF5PXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAkaW5SYW5nZT17aW5SYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAkY29sb3I9e2NvbG9yc0J5R3JvdXA/LltrZXldfVxuICAgICAgICAgICAgICAgICAgICAgIGtleT17YGJhci0ke2lkeH1gfVxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD17eShiYXJbY291bnRQcm9wXSl9XG4gICAgICAgICAgICAgICAgICAgICAgd2lkdGg9e2JhcldpZHRoICogd1JhdGlvfVxuICAgICAgICAgICAgICAgICAgICAgIHg9e3N0YXJ0WH1cbiAgICAgICAgICAgICAgICAgICAgICByeD17MX1cbiAgICAgICAgICAgICAgICAgICAgICByeT17MX1cbiAgICAgICAgICAgICAgICAgICAgICB5PXtoZWlnaHQgLSB5KGJhcltjb3VudFByb3BdKX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9nPlxuICAgICAgICA8ZyB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoJHtpc1JhbmdlZCA/IDAgOiBiYXJXaWR0aCAvIDJ9LCAwKWB9PnticnVzaENvbXBvbmVudH08L2c+XG4gICAgICA8L0hpc3RvZ3JhbVdyYXBwZXI+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBIaXN0b2dyYW1QbG90V2l0aEdyb3VwcyA9IHByb3BzID0+IHtcbiAgICBjb25zdCBncm91cHMgPSB1c2VNZW1vKFxuICAgICAgKCkgPT4gKHByb3BzLmhpc3RvZ3JhbXNCeUdyb3VwID8gT2JqZWN0LmtleXMocHJvcHMuaGlzdG9ncmFtc0J5R3JvdXApIDogbnVsbCksXG4gICAgICBbcHJvcHMuaGlzdG9ncmFtc0J5R3JvdXBdXG4gICAgKTtcblxuICAgIGlmICghZ3JvdXBzPy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiA8SGlzdG9ncmFtUGxvdCB7Li4ucHJvcHN9IC8+O1xuICB9O1xuXG4gIHJldHVybiBIaXN0b2dyYW1QbG90V2l0aEdyb3Vwcztcbn1cbmV4cG9ydCBkZWZhdWx0IEhpc3RvZ3JhbVBsb3RGYWN0b3J5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxRQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxRQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxpQkFBQSxHQUFBQyxzQkFBQSxDQUFBTCxPQUFBO0FBQXVDLElBQUFNLGVBQUEsRUFBQUMsZ0JBQUEsRUFBQUMsZ0JBQUEsRUFQdkM7QUFDQTtBQUFBLFNBQUFDLHlCQUFBQyxDQUFBO0VBQUEseUJBQUFDLE9BQUE7RUFBQSxJQUFBQyxDQUFBLE9BQUFELE9BQUE7SUFBQUUsQ0FBQSxPQUFBRixPQUFBO0VBQUEsUUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLENBQUE7SUFBQSxPQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQTtFQUFBLEdBQUFGLENBQUE7QUFBQTtBQUFBLFNBQUFYLHdCQUFBVyxDQUFBLEVBQUFFLENBQUE7RUFBQSxLQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUE7RUFBQSxhQUFBQSxDQUFBLGdCQUFBSyxPQUFBLENBQUFMLENBQUEsMEJBQUFBLENBQUE7SUFBQSxXQUFBQTtFQUFBO0VBQUEsSUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBO0VBQUEsSUFBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQTtFQUFBLElBQUFRLENBQUE7TUFBQUMsU0FBQTtJQUFBO0lBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUE7RUFBQSxTQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLENBQUE7SUFBQSxJQUFBRyxDQUFBLEdBQUFQLENBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBYixDQUFBLEVBQUFjLENBQUE7SUFBQUcsQ0FBQSxLQUFBQSxDQUFBLENBQUFWLEdBQUEsSUFBQVUsQ0FBQSxDQUFBQyxHQUFBLElBQUFQLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSixDQUFBLEVBQUFNLENBQUEsRUFBQUcsQ0FBQSxJQUFBVCxDQUFBLENBQUFNLENBQUEsSUFBQWQsQ0FBQSxDQUFBYyxDQUFBO0VBQUE7RUFBQSxPQUFBTixDQUFBLGNBQUFSLENBQUEsRUFBQUcsQ0FBQSxJQUFBQSxDQUFBLENBQUFlLEdBQUEsQ0FBQWxCLENBQUEsRUFBQVEsQ0FBQSxHQUFBQSxDQUFBO0FBQUE7QUFVQTtBQUNPLElBQU1XLG1CQUFtQixHQUFBQyxPQUFBLENBQUFELG1CQUFBLEdBQUc7RUFDakNFLE1BQU0sRUFBRSxDQUFDO0VBQ1RDLElBQUksRUFBRSxDQUFDO0VBQ1BDLGVBQWUsRUFBRTtBQUNuQixDQUFDO0FBQ0QsSUFBTUMsc0JBQXNCLEdBQUcsU0FBUztBQUN4QyxJQUFNQyxzQkFBc0IsR0FBRyxTQUFTO0FBRXhDLElBQU1DLGNBQWMsR0FBRztFQUNyQkMsVUFBVSxFQUFFLEdBQUc7RUFDZkMsY0FBYyxFQUFFO0FBQ2xCLENBQUM7QUFFRCxJQUFNQyxnQkFBZ0IsR0FBR25DLGlCQUFBLFdBQU0sQ0FBQ29DLEdBQUcsQ0FBQWxDLGVBQUEsS0FBQUEsZUFBQSxPQUFBbUMsdUJBQUEsNENBRWxDO0FBRUQsSUFBTUMsaUJBQWlCLEdBQUd0QyxpQkFBQSxXQUFNLENBQUN1QyxJQUFJLENBQUFwQyxnQkFBQSxLQUFBQSxnQkFBQSxPQUFBa0MsdUJBQUEsc0NBQzNCLFVBQUFHLEtBQUs7RUFBQSxPQUFJQSxLQUFLLENBQUNDLEtBQUssQ0FBQ0MsZUFBZTtBQUFBLEVBQzdDO0FBRUQsSUFBTUMsa0JBQWtCLEdBQUczQyxpQkFBQSxXQUFNLENBQUM0QyxDQUFDLENBQUF4QyxnQkFBQSxLQUFBQSxnQkFBQSxPQUFBaUMsdUJBQUEsNkZBQ3ZCLFVBQUFHLEtBQUs7RUFBQSxPQUFJQSxLQUFLLENBQUNDLEtBQUssQ0FBQ0ksdUJBQXVCO0FBQUEsRUFHdkQ7QUFPRCxJQUFNQyxhQUFhLEdBQUc5QyxpQkFBQSxXQUFNLENBQUN1QyxJQUFJLENBQy9CLFVBQUFRLElBQUE7RUFBQSxJQUFFTixLQUFLLEdBQUFNLElBQUEsQ0FBTE4sS0FBSztJQUFFTyxRQUFRLEdBQUFELElBQUEsQ0FBUkMsUUFBUTtJQUFFQyxVQUFVLEdBQUFGLElBQUEsQ0FBVkUsVUFBVTtJQUFFQyxNQUFNLEdBQUFILElBQUEsQ0FBTkcsTUFBTTtFQUFBLGNBQUFDLE1BQUEsQ0FFbkNGLFVBQVUsWUFBQUUsTUFBQSxDQUNHRCxNQUFNLGFBQU5BLE1BQU0sY0FBTkEsTUFBTSxHQUFJVCxLQUFLLENBQUNXLHFCQUFxQixTQUM5Q0osUUFBUSxZQUFBRyxNQUFBLENBQ0NELE1BQU0sYUFBTkEsTUFBTSxjQUFOQSxNQUFNLEdBQUlULEtBQUssQ0FBQ1ksb0JBQW9CLGtCQUFBRixNQUFBLENBQ3BDRCxNQUFNLEdBQUcsSUFBQXBELFFBQUEsQ0FBQXdELEdBQUcsRUFBQ0osTUFBTSxDQUFDLENBQUNLLE1BQU0sQ0FBQyxDQUFDLEdBQUdkLEtBQUssQ0FBQ2UscUJBQXFCLE1BQUc7QUFBQSxDQUcvRSxDQUFDO0FBQ0QsSUFBTUMsR0FBRyxnQkFBRy9ELE1BQUEsV0FBSyxDQUFDZ0UsSUFBSSxDQUFDWixhQUFhLENBQUM7QUFDckNXLEdBQUcsQ0FBQ0UsV0FBVyxHQUFHLEtBQUs7QUFFdkIsSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQ2hCQyxHQUE2QixFQUM3QkMsS0FBYSxFQUNiQyxJQUFXLEVBQ1hDLFlBQW1CLEVBQ25CQyxXQUFrQixFQUNmO0VBQ0g7RUFDQTtFQUNBLElBQU1DLFdBQVcsR0FDZkosS0FBSyxLQUFLLENBQUMsR0FBR0QsR0FBRyxDQUFDTSxFQUFFLElBQUlILFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSUEsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSztFQUN2RjtFQUNBO0VBQ0EsSUFBTUcsV0FBVyxHQUNmTixLQUFLLEtBQUtDLElBQUksQ0FBQ00sTUFBTSxHQUFHLENBQUMsR0FDckJSLEdBQUcsQ0FBQ1MsRUFBRSxJQUFJTixZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUlBLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBS0MsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUMvRCxLQUFLO0VBQ1gsT0FBTyxDQUFDQyxXQUFXLElBQUlMLEdBQUcsQ0FBQ00sRUFBRSxJQUFJRixXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU1HLFdBQVcsSUFBSVAsR0FBRyxDQUFDUyxFQUFFLElBQUlMLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRixDQUFDO0FBdUJELFNBQVNNLG9CQUFvQkEsQ0FBQSxFQUFHO0VBQzlCLElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBQUMsS0FBQSxFQWFPO0lBQUEsSUFaeEJDLEtBQUssR0FBQUQsS0FBQSxDQUFMQyxLQUFLO01BQ0xDLE1BQU0sR0FBQUYsS0FBQSxDQUFORSxNQUFNO01BQ05DLGlCQUFpQixHQUFBSCxLQUFBLENBQWpCRyxpQkFBaUI7TUFDakJDLGFBQWEsR0FBQUosS0FBQSxDQUFiSSxhQUFhO01BQUFDLGNBQUEsR0FBQUwsS0FBQSxDQUNiTSxRQUFRO01BQVJBLFFBQVEsR0FBQUQsY0FBQSxjQUFHckQsbUJBQW1CLENBQUNFLE1BQU0sR0FBQW1ELGNBQUE7TUFBQUUsZUFBQSxHQUFBUCxLQUFBLENBQ3JDUSxTQUFTO01BQVRBLFNBQVMsR0FBQUQsZUFBQSxjQUFHLE9BQU8sR0FBQUEsZUFBQTtNQUNuQkUsTUFBTSxHQUFBVCxLQUFBLENBQU5TLE1BQU07TUFDTkMsUUFBUSxHQUFBVixLQUFBLENBQVJVLFFBQVE7TUFDUkMsS0FBSyxHQUFBWCxLQUFBLENBQUxXLEtBQUs7TUFDTEMsS0FBSyxHQUFBWixLQUFBLENBQUxZLEtBQUs7TUFDTEMsY0FBYyxHQUFBYixLQUFBLENBQWRhLGNBQWM7TUFDZEMsVUFBVSxHQUFBZCxLQUFBLENBQVZjLFVBQVU7SUFFVixJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQUlDLENBQXFCO01BQUEsT0FBTUEsQ0FBQyxHQUFHQSxDQUFDLEdBQUcsQ0FBQztJQUFBLENBQUM7SUFDOUQsSUFBTUMsU0FBUyxHQUFHLElBQUFoRyxNQUFBLENBQUFpRyxPQUFPLEVBQ3ZCO01BQUEsT0FDRTFFLE1BQU0sQ0FBQzJFLElBQUksQ0FBQ2hCLGlCQUFpQjtNQUMzQjtNQUFBLENBQ0NpQixNQUFNLENBQUMsVUFBQUMsR0FBRztRQUFBLElBQUFDLHFCQUFBO1FBQUEsT0FBSSxFQUFBQSxxQkFBQSxHQUFBbkIsaUJBQWlCLENBQUNrQixHQUFHLENBQUMsY0FBQUMscUJBQUEsdUJBQXRCQSxxQkFBQSxDQUF3QjFCLE1BQU0sSUFBRyxDQUFDO01BQUEsRUFBQztJQUFBLEdBQ3RELENBQUNPLGlCQUFpQixDQUNwQixDQUFDO0lBRUQsSUFBTW9CLE1BQU0sR0FBRyxJQUFBdEcsTUFBQSxDQUFBaUcsT0FBTyxFQUNwQjtNQUFBLElBQUFNLElBQUEsRUFBQUMsSUFBQTtNQUFBLE9BQ0VkLEtBQUssYUFBTEEsS0FBSyxjQUFMQSxLQUFLLEdBQUksRUFBQWEsSUFBQSxHQUNQLElBQUFsRyxRQUFBLENBQUFvRyxHQUFHLEVBQUNULFNBQVMsRUFBRSxVQUFBSSxHQUFHO1FBQUEsT0FBSWxCLGlCQUFpQixDQUFDa0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMzQixFQUFFO01BQUEsRUFBQyxjQUFBOEIsSUFBQSxjQUFBQSxJQUFBLEdBQUksQ0FBQyxHQUFBQyxJQUFBLEdBQ3hELElBQUFuRyxRQUFBLENBQUFxRyxHQUFHLEVBQUNWLFNBQVMsRUFBRSxVQUFBSSxHQUFHO1FBQUEsT0FBSWxCLGlCQUFpQixDQUFDa0IsR0FBRyxDQUFDLENBQUNsQixpQkFBaUIsQ0FBQ2tCLEdBQUcsQ0FBQyxDQUFDekIsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDQyxFQUFFO01BQUEsRUFBQyxjQUFBNEIsSUFBQSxjQUFBQSxJQUFBLEdBQUksQ0FBQyxDQUN6RjtJQUFBLEdBQ0gsQ0FBQ2QsS0FBSyxFQUFFUixpQkFBaUIsRUFBRWMsU0FBUyxDQUN0QyxDQUFDO0lBRUQsSUFBTVcsUUFBUSxHQUFHLElBQUEzRyxNQUFBLENBQUFpRyxPQUFPLEVBQUMsWUFBTTtNQUM3QixJQUFJRCxTQUFTLENBQUNyQixNQUFNLEtBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQztNQUNwQztNQUNBLElBQU1pQyxRQUFRLEdBQUdaLFNBQVMsQ0FBQ2EsTUFBTSxDQUFDLFVBQUNDLElBQUksRUFBRVYsR0FBRyxFQUFFVyxJQUFJLEVBQUs7UUFDckQsSUFBSTdCLGlCQUFpQixDQUFDa0IsR0FBRyxDQUFDLENBQUN6QixNQUFNLEdBQUdtQyxJQUFJLENBQUNuQyxNQUFNLEVBQUU7VUFDL0MsT0FBT08saUJBQWlCLENBQUNrQixHQUFHLENBQUM7UUFDL0I7UUFDQSxPQUFPVSxJQUFJO01BQ2IsQ0FBQyxFQUFFNUIsaUJBQWlCLENBQUNjLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztNQUVuQztNQUNBLElBQU1nQixTQUFTLEdBQUdKLFFBQVEsQ0FBQ2pDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7TUFDN0MsSUFBTXNDLEtBQUssR0FBR0wsUUFBUSxDQUFDSSxTQUFTLENBQUMsQ0FBQ3BDLEVBQUUsR0FBR2dDLFFBQVEsQ0FBQ0ksU0FBUyxDQUFDLENBQUN2QyxFQUFFO01BQzdELElBQU15QyxPQUFPLEdBQUcsQ0FBQ1osTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHQSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUlXLEtBQUs7TUFDL0MsSUFBSSxDQUFDQyxPQUFPLEVBQUUsT0FBTyxDQUFDO01BQ3RCLE9BQU9sQyxLQUFLLEdBQUdrQyxPQUFPLElBQUk3QixRQUFRLEdBQUcsQ0FBQyxHQUFHVyxTQUFTLENBQUNyQixNQUFNLENBQUM7SUFDNUQsQ0FBQyxFQUFFLENBQUNPLGlCQUFpQixFQUFFb0IsTUFBTSxFQUFFTixTQUFTLEVBQUVoQixLQUFLLEVBQUVLLFFBQVEsQ0FBQyxDQUFDO0lBRTNELElBQU1VLENBQUMsR0FBRyxJQUFBL0YsTUFBQSxDQUFBaUcsT0FBTyxFQUNmO01BQUEsT0FBTSxJQUFBOUYsUUFBQSxDQUFBZ0gsV0FBVyxFQUFDLENBQUMsQ0FBQ2IsTUFBTSxDQUFDQSxNQUFNLENBQUMsQ0FBQ1osS0FBSyxDQUFDLENBQUNpQixRQUFRLEVBQUUzQixLQUFLLENBQUMsQ0FBQztJQUFBLEdBQzNELENBQUNzQixNQUFNLEVBQUV0QixLQUFLLEVBQUUyQixRQUFRLENBQzFCLENBQUM7SUFFRCxJQUFNUyxDQUFDLEdBQUcsSUFBQXBILE1BQUEsQ0FBQWlHLE9BQU8sRUFDZjtNQUFBLE9BQ0UsSUFBQTlGLFFBQUEsQ0FBQWdILFdBQVcsRUFBQyxDQUFDLENBQ1ZiLE1BQU0sQ0FBQyxDQUNOLENBQUMsRUFDRGUsSUFBSSxDQUFDWCxHQUFHLENBQ05ZLE1BQU0sQ0FBQyxJQUFBakgsUUFBQSxDQUFBcUcsR0FBRyxFQUFDVixTQUFTLEVBQUUsVUFBQUksR0FBRztRQUFBLE9BQUksSUFBQS9GLFFBQUEsQ0FBQXFHLEdBQUcsRUFBQ3hCLGlCQUFpQixDQUFDa0IsR0FBRyxDQUFDLEVBQUUsVUFBQW1CLENBQUM7VUFBQSxPQUFJQSxDQUFDLENBQUNoQyxTQUFTLENBQUM7UUFBQSxFQUFDO01BQUEsRUFBQyxDQUFDLEVBQzdFLENBQ0YsQ0FBQyxDQUNGLENBQUMsQ0FDREcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFVCxNQUFNLENBQUMsQ0FBQztJQUFBLEdBQ3ZCLENBQUNDLGlCQUFpQixFQUFFYyxTQUFTLEVBQUVmLE1BQU0sRUFBRU0sU0FBUyxDQUNsRCxDQUFDO0lBRUQsSUFBSVMsU0FBUyxDQUFDckIsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUMxQixPQUFPLElBQUk7SUFDYjtJQUVBLElBQU02QyxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQUEsRUFBUztNQUM1QixvQkFDRXhILE1BQUEsWUFBQXlILGFBQUEsQ0FBQ2hGLGdCQUFnQjtRQUNmdUMsS0FBSyxFQUFFQSxLQUFNO1FBQ2JDLE1BQU0sRUFBRUEsTUFBTztRQUNmeUMsS0FBSyxFQUFFO1VBQUNsQyxNQUFNLEtBQUEvQixNQUFBLENBQUsrQixNQUFNLENBQUNtQyxHQUFHLFNBQUFsRSxNQUFBLENBQU0rQixNQUFNLENBQUNvQyxLQUFLLFNBQUFuRSxNQUFBLENBQU0rQixNQUFNLENBQUNxQyxNQUFNLFNBQUFwRSxNQUFBLENBQU0rQixNQUFNLENBQUNzQyxJQUFJO1FBQUk7TUFBRSxnQkFFekY5SCxNQUFBLFlBQUF5SCxhQUFBLDRCQUNFekgsTUFBQSxZQUFBeUgsYUFBQTtRQUFNTSxFQUFFLEVBQUM7TUFBZ0IsZ0JBQ3ZCL0gsTUFBQSxZQUFBeUgsYUFBQTtRQUNFMUIsQ0FBQyxFQUFDLEdBQUc7UUFDTHFCLENBQUMsRUFBQyxHQUFHO1FBQ0xwQyxLQUFLLEVBQUVBLEtBQU07UUFDYkMsTUFBTSxFQUFFQSxNQUFNLEdBQUdPLE1BQU0sQ0FBQ3FDLE1BQU87UUFDL0JHLElBQUksRUFBRTVGO01BQXVCLENBQzlCLENBQUMsZUFDRnBDLE1BQUEsWUFBQXlILGFBQUE7UUFBR3JCLEdBQUcsRUFBQyxlQUFlO1FBQUM2QixTQUFTLEVBQUM7TUFBZ0IsR0FDOUMvQyxpQkFBaUIsQ0FBQ2dELFlBQVksQ0FBQ0MsR0FBRyxDQUFDLFVBQUNoRSxHQUFHLEVBQUVpRSxHQUFHLEVBQUUvRCxJQUFJLEVBQUs7UUFDdEQsSUFBTWdFLE9BQU8sR0FBR25FLFlBQVksQ0FBQ0MsR0FBRyxFQUFFaUUsR0FBRyxFQUFFL0QsSUFBSSxFQUFFaUMsTUFBTSxFQUFFWCxLQUFLLENBQUM7UUFDM0QsSUFBTTJDLE1BQU0sR0FBR0QsT0FBTyxHQUNsQi9GLGNBQWMsQ0FBQ0MsVUFBVSxHQUN6QkQsY0FBYyxDQUFDRSxjQUFjO1FBQ2pDLG9CQUNFeEMsTUFBQSxZQUFBeUgsYUFBQSxDQUFDMUQsR0FBRztVQUNGUixVQUFVLEVBQUUsS0FBTTtVQUNsQkQsUUFBUSxFQUFFK0UsT0FBUTtVQUNsQjdFLE1BQU0sRUFBRW5CLHNCQUF1QjtVQUMvQitELEdBQUcsVUFBQTNDLE1BQUEsQ0FBVTJFLEdBQUcsQ0FBRztVQUNuQm5ELE1BQU0sRUFBRW1DLENBQUMsQ0FBQ2pELEdBQUcsQ0FBQ29CLFNBQVMsQ0FBQyxDQUFFO1VBQzFCUCxLQUFLLEVBQUUyQixRQUFRLEdBQUcyQixNQUFPO1VBQ3pCdkMsQ0FBQyxFQUFFQSxDQUFDLENBQUM1QixHQUFHLENBQUNNLEVBQUUsQ0FBQyxHQUFJa0MsUUFBUSxJQUFJLENBQUMsR0FBRzJCLE1BQU0sQ0FBQyxHQUFJLENBQUU7VUFDN0NsQixDQUFDLEVBQUVuQyxNQUFNLEdBQUdtQyxDQUFDLENBQUNqRCxHQUFHLENBQUNvQixTQUFTLENBQUM7UUFBRSxDQUMvQixDQUFDO01BRU4sQ0FBQyxDQUNBLENBQ0MsQ0FDRixDQUFDLGVBQ1B2RixNQUFBLFlBQUF5SCxhQUFBO1FBQUdjLFNBQVMsRUFBQztNQUFnQixnQkFDM0J2SSxNQUFBLFlBQUF5SCxhQUFBLENBQUM3RSxpQkFBaUI7UUFDaEJtRCxDQUFDLEVBQUMsR0FBRztRQUNMcUIsQ0FBQyxFQUFDLEdBQUc7UUFDTHBDLEtBQUssRUFBQyxNQUFNO1FBQ1pDLE1BQU0sRUFBRUEsTUFBTSxHQUFHTyxNQUFNLENBQUNxQyxNQUFPO1FBQy9CVyxJQUFJLEVBQUM7TUFBc0IsQ0FDNUIsQ0FDQSxDQUFDLEVBQ0huRCxRQUFRLEtBQUt0RCxtQkFBbUIsQ0FBQ0ksZUFBZSxpQkFDL0NuQyxNQUFBLFlBQUF5SCxhQUFBO1FBQUdyQixHQUFHLEVBQUMsTUFBTTtRQUFDbUMsU0FBUyxFQUFDLGdCQUFnQjtRQUFDTixTQUFTLEVBQUM7TUFBd0IsR0FDeEUvQyxpQkFBaUIsQ0FBQ3VELElBQUksQ0FBQ04sR0FBRyxDQUFDLFVBQUNoRSxHQUFHLEVBQUVpRSxHQUFHLEVBQUUvRCxJQUFJLEVBQUs7UUFDOUMsSUFBTXFFLFNBQVMsR0FBR3hELGlCQUFpQixDQUFDZ0QsWUFBWSxDQUFDRSxHQUFHLENBQUM7UUFDckQsSUFBTU8sVUFBVSxHQUFHRCxTQUFTLEdBQ3hCdEIsQ0FBQyxDQUFDakQsR0FBRyxDQUFDb0IsU0FBUyxDQUFDLENBQUMsR0FBRzZCLENBQUMsQ0FBQ3NCLFNBQVMsQ0FBQ25ELFNBQVMsQ0FBQyxDQUFDLEdBQzNDNkIsQ0FBQyxDQUFDakQsR0FBRyxDQUFDb0IsU0FBUyxDQUFDLENBQUM7UUFDckIsSUFBTThDLE9BQU8sR0FBR25FLFlBQVksQ0FBQ0MsR0FBRyxFQUFFaUUsR0FBRyxFQUFFL0QsSUFBSSxFQUFFaUMsTUFBTSxFQUFFWCxLQUFLLENBQUM7UUFDM0QsSUFBTTJDLE1BQU0sR0FBR0QsT0FBTyxHQUFHL0YsY0FBYyxDQUFDQyxVQUFVLEdBQUdELGNBQWMsQ0FBQ0UsY0FBYztRQUNsRixvQkFDRXhDLE1BQUEsWUFBQXlILGFBQUEsQ0FBQzFELEdBQUc7VUFDRlQsUUFBUSxFQUFFK0UsT0FBUTtVQUNsQjlFLFVBQVUsRUFBRSxJQUFLO1VBQ2pCNkMsR0FBRyxTQUFBM0MsTUFBQSxDQUFTMkUsR0FBRyxDQUFHO1VBQ2xCbkQsTUFBTSxFQUFFMEQsVUFBVztVQUNuQjNELEtBQUssRUFBRTJCLFFBQVEsR0FBRzJCLE1BQU87VUFDekJ2QyxDQUFDLEVBQUVBLENBQUMsQ0FBQzVCLEdBQUcsQ0FBQ00sRUFBRSxDQUFDLEdBQUlrQyxRQUFRLElBQUksQ0FBQyxHQUFHMkIsTUFBTSxDQUFDLEdBQUksQ0FBRTtVQUM3Q2xCLENBQUMsRUFBRW5DLE1BQU0sR0FBR21DLENBQUMsQ0FBQ2pELEdBQUcsQ0FBQ29CLFNBQVMsQ0FBQztRQUFFLENBQy9CLENBQUM7TUFFTixDQUFDLENBQ0EsQ0FDSixlQUNEdkYsTUFBQSxZQUFBeUgsYUFBQSxDQUFDeEUsa0JBQWtCLFFBQ2hCLENBQUM0QyxVQUFVLGFBQVZBLFVBQVUsY0FBVkEsVUFBVSxHQUFJLEVBQUUsRUFBRXNDLEdBQUcsQ0FBQyxVQUFDUyxHQUFHLEVBQUVSLEdBQUcsRUFBSztRQUNwQyxvQkFDRXBJLE1BQUEsWUFBQXlILGFBQUE7VUFBTXJCLEdBQUcsZUFBQTNDLE1BQUEsQ0FBZTJFLEdBQUcsQ0FBRztVQUFDUyxlQUFlLEVBQUMsS0FBSztVQUFDdEIsQ0FBQyxNQUFBOUQsTUFBQSxDQUFNbUYsR0FBRztRQUFhLENBQUUsQ0FBQztNQUVuRixDQUFDLENBQ2lCLENBQUMsZUFDckI1SSxNQUFBLFlBQUF5SCxhQUFBO1FBQUdjLFNBQVMsZUFBQTlFLE1BQUEsQ0FBZWdDLFFBQVEsR0FBRyxDQUFDLEdBQUdrQixRQUFRLEdBQUcsQ0FBQztNQUFPLEdBQUVmLGNBQWtCLENBQ2pFLENBQUM7SUFFdkIsQ0FBQztJQUVELE9BQU9QLFFBQVEsR0FDYm1DLGVBQWUsQ0FBQyxDQUFDLGdCQUVqQnhILE1BQUEsWUFBQXlILGFBQUEsQ0FBQ2hGLGdCQUFnQjtNQUNmdUMsS0FBSyxFQUFFQSxLQUFNO01BQ2JDLE1BQU0sRUFBRUEsTUFBTztNQUNmeUMsS0FBSyxFQUFFO1FBQUNsQyxNQUFNLEtBQUEvQixNQUFBLENBQUsrQixNQUFNLENBQUNtQyxHQUFHLFNBQUFsRSxNQUFBLENBQU0rQixNQUFNLENBQUNvQyxLQUFLLFNBQUFuRSxNQUFBLENBQU0rQixNQUFNLENBQUNxQyxNQUFNLFNBQUFwRSxNQUFBLENBQU0rQixNQUFNLENBQUNzQyxJQUFJO01BQUk7SUFBRSxnQkFFekY5SCxNQUFBLFlBQUF5SCxhQUFBLFlBQ0d6QixTQUFTLENBQUNtQyxHQUFHLENBQUMsVUFBQy9CLEdBQUcsRUFBRXZFLENBQUM7TUFBQSxvQkFDcEI3QixNQUFBLFlBQUF5SCxhQUFBO1FBQUdyQixHQUFHLEVBQUVBLEdBQUk7UUFBQzZCLFNBQVMsRUFBQztNQUFnQixHQUNwQy9DLGlCQUFpQixDQUFDa0IsR0FBRyxDQUFDLENBQUMrQixHQUFHLENBQUMsVUFBQ2hFLEdBQUcsRUFBRWlFLEdBQUcsRUFBRS9ELElBQUksRUFBSztRQUM5QyxJQUFNZ0UsT0FBTyxHQUFHbkUsWUFBWSxDQUFDQyxHQUFHLEVBQUVpRSxHQUFHLEVBQUUvRCxJQUFJLEVBQUVpQyxNQUFNLEVBQUVYLEtBQUssQ0FBQztRQUUzRCxJQUFNMkMsTUFBTSxHQUFHRCxPQUFPLEdBQUcvRixjQUFjLENBQUNDLFVBQVUsR0FBR0QsY0FBYyxDQUFDRSxjQUFjO1FBQ2xGLElBQU1zRyxNQUFNLEdBQ1YvQyxDQUFDLENBQUNELGVBQWUsQ0FBQzNCLEdBQUcsQ0FBQ00sRUFBRSxDQUFDLENBQUMsR0FBR2tDLFFBQVEsR0FBRzlFLENBQUMsR0FBSThFLFFBQVEsSUFBSSxDQUFDLEdBQUcyQixNQUFNLENBQUMsR0FBSSxDQUFDO1FBQzNFLElBQUlRLE1BQU0sR0FBRyxDQUFDLElBQUlBLE1BQU0sR0FBR25DLFFBQVEsR0FBR3JFLGNBQWMsQ0FBQ0UsY0FBYyxJQUFJd0MsS0FBSyxFQUFFO1VBQzVFLG9CQUNFaEYsTUFBQSxZQUFBeUgsYUFBQSxDQUFDMUQsR0FBRztZQUNGUixVQUFVLEVBQUUsS0FBTTtZQUNsQkQsUUFBUSxFQUFFK0UsT0FBUTtZQUNsQjdFLE1BQU0sRUFBRTJCLGFBQWEsYUFBYkEsYUFBYSx1QkFBYkEsYUFBYSxDQUFHaUIsR0FBRyxDQUFFO1lBQzdCQSxHQUFHLFNBQUEzQyxNQUFBLENBQVMyRSxHQUFHLENBQUc7WUFDbEJuRCxNQUFNLEVBQUVtQyxDQUFDLENBQUNqRCxHQUFHLENBQUNvQixTQUFTLENBQUMsQ0FBRTtZQUMxQlAsS0FBSyxFQUFFMkIsUUFBUSxHQUFHMkIsTUFBTztZQUN6QnZDLENBQUMsRUFBRStDLE1BQU87WUFDVkMsRUFBRSxFQUFFLENBQUU7WUFDTkMsRUFBRSxFQUFFLENBQUU7WUFDTjVCLENBQUMsRUFBRW5DLE1BQU0sR0FBR21DLENBQUMsQ0FBQ2pELEdBQUcsQ0FBQ29CLFNBQVMsQ0FBQztVQUFFLENBQy9CLENBQUM7UUFFTjtRQUNBLE9BQU8sSUFBSTtNQUNiLENBQUMsQ0FDQSxDQUFDO0lBQUEsQ0FDTCxDQUNBLENBQUMsZUFDSnZGLE1BQUEsWUFBQXlILGFBQUE7TUFBR2MsU0FBUyxlQUFBOUUsTUFBQSxDQUFlZ0MsUUFBUSxHQUFHLENBQUMsR0FBR2tCLFFBQVEsR0FBRyxDQUFDO0lBQU8sR0FBRWYsY0FBa0IsQ0FDakUsQ0FDbkI7RUFDSCxDQUFDO0VBRUQsSUFBTXFELHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBdUJBLENBQUduRyxLQUFLLEVBQUk7SUFDdkMsSUFBTW9HLE1BQU0sR0FBRyxJQUFBbEosTUFBQSxDQUFBaUcsT0FBTyxFQUNwQjtNQUFBLE9BQU9uRCxLQUFLLENBQUNvQyxpQkFBaUIsR0FBRzNELE1BQU0sQ0FBQzJFLElBQUksQ0FBQ3BELEtBQUssQ0FBQ29DLGlCQUFpQixDQUFDLEdBQUcsSUFBSTtJQUFBLENBQUMsRUFDN0UsQ0FBQ3BDLEtBQUssQ0FBQ29DLGlCQUFpQixDQUMxQixDQUFDO0lBRUQsSUFBSSxFQUFDZ0UsTUFBTSxhQUFOQSxNQUFNLGVBQU5BLE1BQU0sQ0FBRXZFLE1BQU0sR0FBRTtNQUNuQixPQUFPLElBQUk7SUFDYjtJQUVBLG9CQUFPM0UsTUFBQSxZQUFBeUgsYUFBQSxDQUFDM0MsYUFBYSxFQUFLaEMsS0FBUSxDQUFDO0VBQ3JDLENBQUM7RUFFRCxPQUFPbUcsdUJBQXVCO0FBQ2hDO0FBQUMsSUFBQUUsUUFBQSxHQUFBbkgsT0FBQSxjQUNjNkMsb0JBQW9CIiwiaWdub3JlTGlzdCI6W119