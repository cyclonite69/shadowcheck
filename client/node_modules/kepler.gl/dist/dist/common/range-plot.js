"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = RangePlotFactory;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _rangeBrush = _interopRequireDefault(require("./range-brush"));
var _histogramPlot = _interopRequireDefault(require("./histogram-plot"));
var _lineChart = _interopRequireDefault(require("./line-chart"));
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _loadingSpinner = _interopRequireDefault(require("./loading-spinner"));
var _styles = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/styles/src");
var _excluded = ["bins", "onBrush", "range", "value", "width", "plotType", "lineChart", "isEnlarged", "isRanged", "theme"],
  _excluded2 = ["lineChart", "plotType", "bins", "setFilterPlot", "isEnlarged", "theme"];
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
var StyledRangePlot = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: ", "px;\n  display: flex;\n  position: relative;\n"])), function (props) {
  return props.theme.sliderBarHeight;
});
RangePlotFactory.deps = [_rangeBrush["default"], _histogramPlot["default"], _lineChart["default"]];
var isHistogramPlot = function isHistogramPlot(plotType) {
  return (plotType === null || plotType === void 0 ? void 0 : plotType.type) === _constants.PLOT_TYPES.histogram;
};
var isLineChart = function isLineChart(plotType) {
  return (plotType === null || plotType === void 0 ? void 0 : plotType.type) === _constants.PLOT_TYPES.lineChart;
};
var hasHistogram = function hasHistogram(plotType, bins) {
  return isHistogramPlot(plotType) && bins;
};
var hasLineChart = function hasLineChart(plotType, lineChart) {
  return isLineChart(plotType) && lineChart;
};
var LOADING_SPINNER_CONTAINER_STYLE = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  width: '100%'
};
function RangePlotFactory(RangeBrush, HistogramPlot, LineChartPlot) {
  var RangePlot = function RangePlot(_ref) {
    var bins = _ref.bins,
      onBrush = _ref.onBrush,
      range = _ref.range,
      value = _ref.value,
      width = _ref.width,
      plotType = _ref.plotType,
      lineChart = _ref.lineChart,
      isEnlarged = _ref.isEnlarged,
      isRanged = _ref.isRanged,
      theme = _ref.theme,
      chartProps = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
    var groupColors = (0, _react.useMemo)(function () {
      var dataIds = bins ? Object.keys(bins) : [];
      return plotType.colorsByDataId ? dataIds.reduce(function (acc, dataId) {
        acc[dataId] = plotType.colorsByDataId[dataId];
        return acc;
      }, {}) : null;
    }, [bins, plotType.colorsByDataId]);
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      brushing = _useState2[0],
      setBrushing = _useState2[1];
    var _useState3 = (0, _react.useState)(null),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      hoveredDP = _useState4[0],
      onMouseMove = _useState4[1];
    var _useState5 = (0, _react.useState)(false),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      enableChartHover = _useState6[0],
      setEnableChartHover = _useState6[1];
    var height = isEnlarged ? (0, _utils.hasMobileWidth)(_styles.breakPointValues) ? theme.rangePlotHLargePalm : theme.rangePlotHLarge : theme.rangePlotH;
    var onBrushStart = (0, _react.useCallback)(function () {
      setBrushing(true);
      onMouseMove(null);
      setEnableChartHover(false);
    }, [setBrushing, onMouseMove, setEnableChartHover]);
    var onBrushEnd = (0, _react.useCallback)(function () {
      setBrushing(false);
      setEnableChartHover(true);
    }, [setBrushing, setEnableChartHover]);
    var onMouseoverHandle = (0, _react.useCallback)(function () {
      onMouseMove(null);
      setEnableChartHover(false);
    }, [onMouseMove, setEnableChartHover]);
    var onMouseoutHandle = (0, _react.useCallback)(function () {
      setEnableChartHover(true);
    }, [setEnableChartHover]);

    // JsDom have limited support for SVG, d3 will fail
    var brushComponent = (0, _utils.isTest)() ? null : /*#__PURE__*/_react["default"].createElement(RangeBrush, (0, _extends2["default"])({
      onBrush: onBrush,
      onBrushStart: onBrushStart,
      onBrushEnd: onBrushEnd,
      range: range,
      value: value,
      width: width,
      height: height,
      isRanged: isRanged,
      onMouseoverHandle: onMouseoverHandle,
      onMouseoutHandle: onMouseoutHandle
    }, chartProps));
    var commonProps = _objectSpread({
      width: width,
      value: value,
      height: height,
      margin: isEnlarged ? theme.rangePlotMarginLarge : theme.rangePlotMargin,
      brushComponent: brushComponent,
      brushing: brushing,
      isEnlarged: isEnlarged,
      enableChartHover: enableChartHover,
      onMouseMove: onMouseMove,
      hoveredDP: hoveredDP,
      isRanged: isRanged,
      onBrush: onBrush
    }, chartProps);
    return isLineChart(plotType) && lineChart ? /*#__PURE__*/_react["default"].createElement(LineChartPlot, (0, _extends2["default"])({
      lineChart: lineChart
    }, commonProps)) : /*#__PURE__*/_react["default"].createElement(HistogramPlot, (0, _extends2["default"])({
      histogramsByGroup: bins,
      colorsByGroup: groupColors,
      range: range
    }, commonProps));
  };
  var RangePlotWithTheme = (0, _styledComponents.withTheme)(RangePlot);

  // a container to render spinner or message when the data is too big
  // to generate a plot
  var WithPlotLoading = function WithPlotLoading(_ref2) {
    var lineChart = _ref2.lineChart,
      plotType = _ref2.plotType,
      bins = _ref2.bins,
      setFilterPlot = _ref2.setFilterPlot,
      isEnlarged = _ref2.isEnlarged,
      theme = _ref2.theme,
      otherProps = (0, _objectWithoutProperties2["default"])(_ref2, _excluded2);
    var _useState7 = (0, _react.useState)(false),
      _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
      isLoading = _useState8[0],
      setIsLoading = _useState8[1];
    var isChangingRef = (0, _react.useRef)(false);
    (0, _react.useEffect)(function () {
      if (isChangingRef.current) {
        if (hasHistogram(plotType, bins)) {
          // Bins are loaded
          isChangingRef.current = false;
        }
      } else {
        if (!plotType || isHistogramPlot(plotType) && !bins) {
          // load histogram
          setIsLoading(true);
          setFilterPlot({
            plotType: {
              type: _constants.PLOT_TYPES.histogram
            }
          });
          isChangingRef.current = true;
        }
      }
    }, [bins, plotType, setFilterPlot]);
    (0, _react.useEffect)(function () {
      if (isChangingRef.current) {
        if (hasLineChart(plotType, lineChart)) {
          // Line chart is loaded
          isChangingRef.current = false;
        }
      } else {
        if (isLineChart(plotType) && !lineChart) {
          // load line chart
          setIsLoading(true);
          setFilterPlot({
            plotType: {
              type: _constants.PLOT_TYPES.lineChart
            }
          });
          isChangingRef.current = true;
        }
      }
    }, [lineChart, plotType, setFilterPlot]);
    var rangePlotStyle = (0, _react.useMemo)(function () {
      return {
        height: "".concat(isEnlarged ? (0, _utils.hasMobileWidth)(_styles.breakPointValues) ? theme.rangePlotContainerHLargePalm : theme.rangePlotContainerHLarge : theme.rangePlotContainerH, "px")
      };
    }, [isEnlarged, theme]);
    return /*#__PURE__*/_react["default"].createElement(StyledRangePlot, {
      style: rangePlotStyle,
      className: "kg-range-slider__plot"
    }, isLoading ? /*#__PURE__*/_react["default"].createElement("div", {
      style: LOADING_SPINNER_CONTAINER_STYLE
    }, /*#__PURE__*/_react["default"].createElement(_loadingSpinner["default"], {
      borderColor: "transparent",
      size: 40
    })) : /*#__PURE__*/_react["default"].createElement(RangePlotWithTheme, (0, _extends2["default"])({
      lineChart: lineChart,
      bins: bins,
      plotType: plotType,
      isEnlarged: isEnlarged,
      theme: theme
    }, otherProps)));
  };
  return (0, _styledComponents.withTheme)(WithPlotLoading);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,