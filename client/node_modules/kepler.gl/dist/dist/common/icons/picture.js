"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _base = _interopRequireDefault(require("./base"));
function _callSuper(t, o, e) {
  return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var Picture = exports["default"] = /*#__PURE__*/function (_React$Component) {
  function Picture() {
    (0, _classCallCheck2["default"])(this, Picture);
    return _callSuper(this, Picture, arguments);
  }
  (0, _inherits2["default"])(Picture, _React$Component);
  return (0, _createClass2["default"])(Picture, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement(_base["default"], (0, _extends2["default"])({}, this.props, {
        style: {
          fill: 'none',
          stroke: 'currentcolor'
        },
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }), /*#__PURE__*/_react["default"].createElement("rect", {
        width: "18",
        height: "18",
        x: "3",
        y: "3",
        rx: "2",
        ry: "2"
      }), /*#__PURE__*/_react["default"].createElement("circle", {
        cx: "9",
        cy: "9",
        r: "2"
      }), /*#__PURE__*/_react["default"].createElement("path", {
        d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"
      }), ' ');
    }
  }]);
}(_react["default"].Component);
(0, _defineProperty2["default"])(Picture, "defaultProps", {
  height: '16px',
  viewBox: '0 0 24 24',
  predefinedClassName: 'data-ex-icons-minus'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9iYXNlIiwiX2NhbGxTdXBlciIsInQiLCJvIiwiZSIsIl9nZXRQcm90b3R5cGVPZjIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiYXBwbHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJQaWN0dXJlIiwiZXhwb3J0cyIsIl9SZWFjdCRDb21wb25lbnQiLCJfY2xhc3NDYWxsQ2hlY2syIiwiYXJndW1lbnRzIiwiX2luaGVyaXRzMiIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJfZXh0ZW5kczIiLCJwcm9wcyIsInN0eWxlIiwiZmlsbCIsInN0cm9rZSIsInN0cm9rZVdpZHRoIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwid2lkdGgiLCJoZWlnaHQiLCJ4IiwieSIsInJ4IiwicnkiLCJjeCIsImN5IiwiciIsImQiLCJDb21wb25lbnQiLCJfZGVmaW5lUHJvcGVydHkyIiwidmlld0JveCIsInByZWRlZmluZWRDbGFzc05hbWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2ljb25zL3BpY3R1cmUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQmFzZSwge0Jhc2VQcm9wc30gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGljdHVyZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQYXJ0aWFsPEJhc2VQcm9wcz4+IHtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBoZWlnaHQ6ICcxNnB4JyxcbiAgICB2aWV3Qm94OiAnMCAwIDI0IDI0JyxcblxuICAgIHByZWRlZmluZWRDbGFzc05hbWU6ICdkYXRhLWV4LWljb25zLW1pbnVzJ1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJhc2VcbiAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgIHN0eWxlPXt7ZmlsbDogJ25vbmUnLCBzdHJva2U6ICdjdXJyZW50Y29sb3InfX1cbiAgICAgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgICA+XG4gICAgICAgIDxyZWN0IHdpZHRoPVwiMThcIiBoZWlnaHQ9XCIxOFwiIHg9XCIzXCIgeT1cIjNcIiByeD1cIjJcIiByeT1cIjJcIiAvPlxuICAgICAgICA8Y2lyY2xlIGN4PVwiOVwiIGN5PVwiOVwiIHI9XCIyXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIm0yMSAxNS0zLjA4Ni0zLjA4NmEyIDIgMCAwIDAtMi44MjggMEw2IDIxXCIgLz57JyAnfVxuICAgICAgPC9CYXNlPlxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBdUMsU0FBQUUsV0FBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUE7RUFBQSxPQUFBRCxDQUFBLE9BQUFFLGdCQUFBLGFBQUFGLENBQUEsT0FBQUcsMkJBQUEsYUFBQUosQ0FBQSxFQUFBSyx5QkFBQSxLQUFBQyxPQUFBLENBQUFDLFNBQUEsQ0FBQU4sQ0FBQSxFQUFBQyxDQUFBLFlBQUFDLGdCQUFBLGFBQUFILENBQUEsRUFBQVEsV0FBQSxJQUFBUCxDQUFBLENBQUFRLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBRSxDQUFBO0FBQUE7QUFBQSxTQUFBRywwQkFBQTtFQUFBO0lBQUEsSUFBQUwsQ0FBQSxJQUFBVSxPQUFBLENBQUFDLFNBQUEsQ0FBQUMsT0FBQSxDQUFBQyxJQUFBLENBQUFQLE9BQUEsQ0FBQUMsU0FBQSxDQUFBRyxPQUFBO0VBQUEsU0FBQVYsQ0FBQTtFQUFBLFFBQUFLLHlCQUFBLFlBQUFBLDBCQUFBO0lBQUEsU0FBQUwsQ0FBQTtFQUFBO0FBQUEsRUFKdkM7QUFDQTtBQUFBLElBS3FCYyxPQUFPLEdBQUFDLE9BQUEscUNBQUFDLGdCQUFBO0VBQUEsU0FBQUYsUUFBQTtJQUFBLElBQUFHLGdCQUFBLG1CQUFBSCxPQUFBO0lBQUEsT0FBQWYsVUFBQSxPQUFBZSxPQUFBLEVBQUFJLFNBQUE7RUFBQTtFQUFBLElBQUFDLFVBQUEsYUFBQUwsT0FBQSxFQUFBRSxnQkFBQTtFQUFBLFdBQUFJLGFBQUEsYUFBQU4sT0FBQTtJQUFBTyxHQUFBO0lBQUFDLEtBQUEsRUFRMUIsU0FBQUMsTUFBTUEsQ0FBQSxFQUFHO01BQ1Asb0JBQ0U1QixNQUFBLFlBQUE2QixhQUFBLENBQUMxQixLQUFBLFdBQUksTUFBQTJCLFNBQUEsaUJBQ0MsSUFBSSxDQUFDQyxLQUFLO1FBQ2RDLEtBQUssRUFBRTtVQUFDQyxJQUFJLEVBQUUsTUFBTTtVQUFFQyxNQUFNLEVBQUU7UUFBYyxDQUFFO1FBQzlDQyxXQUFXLEVBQUMsR0FBRztRQUNmQyxhQUFhLEVBQUMsT0FBTztRQUNyQkMsY0FBYyxFQUFDO01BQU8saUJBRXRCckMsTUFBQSxZQUFBNkIsYUFBQTtRQUFNUyxLQUFLLEVBQUMsSUFBSTtRQUFDQyxNQUFNLEVBQUMsSUFBSTtRQUFDQyxDQUFDLEVBQUMsR0FBRztRQUFDQyxDQUFDLEVBQUMsR0FBRztRQUFDQyxFQUFFLEVBQUMsR0FBRztRQUFDQyxFQUFFLEVBQUM7TUFBRyxDQUFFLENBQUMsZUFDekQzQyxNQUFBLFlBQUE2QixhQUFBO1FBQVFlLEVBQUUsRUFBQyxHQUFHO1FBQUNDLEVBQUUsRUFBQyxHQUFHO1FBQUNDLENBQUMsRUFBQztNQUFHLENBQUUsQ0FBQyxlQUM5QjlDLE1BQUEsWUFBQTZCLGFBQUE7UUFBTWtCLENBQUMsRUFBQztNQUEyQyxDQUFFLENBQUMsRUFBQyxHQUNuRCxDQUFDO0lBRVg7RUFBQztBQUFBLEVBdEJrQy9DLE1BQUEsV0FBSyxDQUFDZ0QsU0FBUztBQUFBLElBQUFDLGdCQUFBLGFBQS9COUIsT0FBTyxrQkFDSjtFQUNwQm9CLE1BQU0sRUFBRSxNQUFNO0VBQ2RXLE9BQU8sRUFBRSxXQUFXO0VBRXBCQyxtQkFBbUIsRUFBRTtBQUN2QixDQUFDIiwiaWdub3JlTGlzdCI6W119