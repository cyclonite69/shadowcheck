"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _d3Selection = require("d3-selection");
var _d3Brush = require("d3-brush");
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function _callSuper(t, o, e) {
  return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
}
var StyledG = _styledComponents["default"].g(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .selection {\n    stroke: none;\n    fill: ", ";\n    fill-opacity: ", ";\n  }\n  .handle {\n    fill: ", ";\n    fill-opacity: 0.3;\n  }\n"])), function (props) {
  return props.$isRanged ? props.theme.rangeBrushBgd : props.theme.BLUE2;
}, function (props) {
  return props.$isRanged ? 0.3 : 1;
}, function (props) {
  return props.theme.BLUE2;
});
function moveRight(startSel, selection) {
  var _startSel = (0, _slicedToArray2["default"])(startSel, 1),
    startSel0 = _startSel[0];
  var _selection = (0, _slicedToArray2["default"])(selection, 1),
    sel0 = _selection[0];
  return Boolean(startSel0 === sel0);
}
// style brush resize handle
// https://github.com/crossfilter/crossfilter/blob/gh-pages/index.html#L466
var getHandlePath = function getHandlePath(props) {
  return function brushResizePath(d) {
    var e = Number(d.type === 'e');
    var x = e ? 1 : -1;
    var h = 39;
    var w = 4.5;
    var y = (props.height - h) / 2;
    return "M".concat(0.5 * x, ",").concat(y, "c").concat(2.5 * x, ",0,").concat(w * x, ",2,").concat(w * x, ",").concat(w, "v").concat(h - w * 2, "c0,2.5,").concat(-2 * x, ",").concat(w, ",").concat(-w * x, ",").concat(w, "V").concat(y, "z");
  };
};
function RangeBrushFactory() {
  var RangeBrush = /*#__PURE__*/function (_Component) {
    function RangeBrush() {
      var _this;
      (0, _classCallCheck2["default"])(this, RangeBrush);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, RangeBrush, [].concat(args));
      (0, _defineProperty2["default"])(_this, "rootContainer", /*#__PURE__*/(0, _react.createRef)());
      (0, _defineProperty2["default"])(_this, "brushing", false);
      (0, _defineProperty2["default"])(_this, "moving", false);
      (0, _defineProperty2["default"])(_this, "root", _this.rootContainer.current ? (0, _d3Selection.select)(_this.rootContainer.current) : undefined);
      (0, _defineProperty2["default"])(_this, "brush", void 0);
      (0, _defineProperty2["default"])(_this, "_startSel", void 0);
      (0, _defineProperty2["default"])(_this, "_lastSel", void 0);
      (0, _defineProperty2["default"])(_this, "handle", void 0);
      (0, _defineProperty2["default"])(_this, "_brushed", function (evt) {
        var _this2;
        // Ignore brush events which don't have an underlying sourceEvent
        if (!evt.sourceEvent) return;
        var _evt$selection = (0, _slicedToArray2["default"])(evt.selection, 2),
          sel0 = _evt$selection[0],
          sel1 = _evt$selection[1];
        var right = moveRight(_this._startSel, evt.selection);
        var _this$props = _this.props,
          _this$props$range = (0, _slicedToArray2["default"])(_this$props.range, 2),
          min = _this$props$range[0],
          max = _this$props$range[1],
          _this$props$step = _this$props.step,
          step = _this$props$step === void 0 ? 0 : _this$props$step,
          width = _this$props.width,
          marks = _this$props.marks,
          isRanged = _this$props.isRanged;
        var invert = function invert(x) {
          return x * (max - min) / width + min;
        };
        var d0 = invert(sel0);
        var d1 = invert(sel1);
        // this makes sure if points are right at the beginning of the domains are displayed correctly
        // the problem here is bisectLeftx
        d0 = d0 === min ? d0 : (0, _utils.normalizeSliderValue)(d0, min, step, marks);
        d1 = (0, _utils.normalizeSliderValue)(d1, min, step, marks);
        if (isRanged) _this._move(d0, d1);else (_this2 = _this)._move.apply(_this2, (0, _toConsumableArray2["default"])(right ? [d1, d1] : [d0, d0]));
        if (isRanged) _this._onBrush(d0, d1);else _this._onBrush(right ? d1 : d0);
      });
      return _this;
    }
    (0, _inherits2["default"])(RangeBrush, _Component);
    return (0, _createClass2["default"])(RangeBrush, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this3 = this,
          _this$root,
          _this$root2;
        // We want the React app to respond to brush state and vice-versa
        // but d3-brush fires the same events for both user-initiated brushing
        // and programmatic brushing (brush.move). We need these flags to
        // distinguish between the uses.
        //
        // We don't use state because that would trigger another `componentDidUpdate`
        var _this$props2 = this.props,
          theme = _this$props2.theme,
          isRanged = _this$props2.isRanged,
          onMouseoverHandle = _this$props2.onMouseoverHandle,
          onMouseoutHandle = _this$props2.onMouseoutHandle;
        this.root = this.rootContainer.current ? (0, _d3Selection.select)(this.rootContainer.current) : undefined;
        this.brush = (0, _d3Brush.brushX)().handleSize(3).on('start', function (event) {
          if (typeof _this3.props.onBrushStart === 'function') _this3.props.onBrushStart();
          _this3._startSel = event.selection;
        }).on('brush', function (event) {
          if (_this3.moving) {
            return;
          }
          if (event.selection) {
            _this3._lastSel = event.selection;
            _this3.brushing = true;
            _this3._brushed(event);
          }
        }).on('end', function (event) {
          if (!event.selection) {
            if (_this3.brushing) {
              // handle null selection
              _this3._click(_this3._lastSel);
            } else if (_this3._startSel) {
              // handle click
              _this3._click(_this3._startSel);
            }
          }
          if (typeof _this3.props.onBrushEnd === 'function') _this3.props.onBrushEnd();
          _this3.brushing = false;
          _this3.moving = false;
        });
        (_this$root = this.root) === null || _this$root === void 0 || _this$root.call(this.brush);
        var brushResizePath = getHandlePath(this.props);
        this.handle = (_this$root2 = this.root) === null || _this$root2 === void 0 ? void 0 : _this$root2.selectAll('.handle--custom').data([{
          type: 'w'
        }, {
          type: 'e'
        }]).enter().append('path').attr('class', 'handle--custom').attr('display', isRanged ? null : 'none').attr('fill', theme ? theme.sliderHandleColor : '#D3D8E0').attr('cursor', 'ew-resize').attr('d', brushResizePath).on('mouseover', function () {
          if (onMouseoverHandle) onMouseoverHandle();
        }).on('mouseout', function () {
          if (onMouseoutHandle) onMouseoutHandle();
        });
        var _this$props$value = (0, _slicedToArray2["default"])(this.props.value, 2),
          val0 = _this$props$value[0],
          val1 = _this$props$value[1];
        this.moving = true;
        this._move(val0, val1);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props3 = this.props,
          _this$props3$value = (0, _slicedToArray2["default"])(_this$props3.value, 2),
          val0 = _this$props3$value[0],
          val1 = _this$props3$value[1],
          width = _this$props3.width;
        var _prevProps$value = (0, _slicedToArray2["default"])(prevProps.value, 2),
          prevVal0 = _prevProps$value[0],
          prevVal1 = _prevProps$value[1];
        if (prevProps.width !== width || prevProps.range[0] !== this.props.range[0] || prevProps.range[1] !== this.props.range[1]) {
          var _this$root3;
          // dimension change should not trigger this._brushed
          this.moving = true;
          if (this.brush) (_this$root3 = this.root) === null || _this$root3 === void 0 || _this$root3.call(this.brush);
          this._move(val0, val1);
        }
        if (!this.brushing && !this.moving) {
          if (prevVal0 !== val0 || prevVal1 !== val1) {
            this.moving = true;
            this._move(val0, val1);
          }
        }
        if (!this.props.isRanged && this.handle) {
          this.handle.attr('display', 'none');
        }
      }
    }, {
      key: "_click",
      value: function _click(selection) {
        // fake brush
        this.brushing = true;
        this._brushed({
          sourceEvent: {},
          selection: selection
        });
      }
    }, {
      key: "_move",
      value: function _move() {
        var val0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var val1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var _this$props4 = this.props,
          _this$props4$range = (0, _slicedToArray2["default"])(_this$props4.range, 2),
          min = _this$props4$range[0],
          max = _this$props4$range[1],
          width = _this$props4.width,
          isRanged = _this$props4.isRanged;
        if (width && max - min && this.brush && this.handle) {
          var scale = function scale(x) {
            return (x - min) * width / (max - min);
          };
          if (!isRanged) {
            // only draw a 1 pixel line
            if (this.root) this.brush.move(this.root, [scale(val0), scale(val0) + 1]);
          } else {
            if (this.root) this.brush.move(this.root, [scale(val0), scale(val1)]);
            this.handle.attr('display', null).attr('transform', function (d, i) {
              return "translate(".concat([i === 0 ? scale(val0) : scale(val1), 0], ")");
            });
          }
        }
      }
    }, {
      key: "_onBrush",
      value: function _onBrush() {
        var val0 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var val1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var _this$props5 = this.props,
          isRanged = _this$props5.isRanged,
          _this$props5$value = (0, _slicedToArray2["default"])(_this$props5.value, 2),
          currentVal0 = _this$props5$value[0],
          currentVal1 = _this$props5$value[1];
        if (currentVal0 === val0 && currentVal1 === val1) {
          return;
        }
        if (isRanged) {
          this.props.onBrush(val0, val1);
        } else {
          this.props.onBrush(val0, val0);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var isRanged = this.props.isRanged;
        return /*#__PURE__*/_react["default"].createElement(StyledG, {
          className: "kg-range-slider__brush",
          $isRanged: isRanged,
          ref: this.rootContainer
        });
      }
    }]);
  }(_react.Component);
  (0, _defineProperty2["default"])(RangeBrush, "defaultProps", {
    isRanged: true
  });
  return (0, _styledComponents.withTheme)(RangeBrush);
}
var _default = exports["default"] = RangeBrushFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,