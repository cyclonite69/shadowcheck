"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _checkbox = _interopRequireDefault(require("./checkbox"));
var _commonUtils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/common-utils/src");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var MapLayerSelect = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 12px;\n\n  .map-layer-selector__item {\n    margin: 12px 0;\n  }\n"])));
/** @type {typeof import('./map-layer-selector').default} */
var MapLayerSelector = function MapLayerSelector(_ref) {
  var layers = _ref.layers,
    onMapToggleLayer = _ref.onMapToggleLayer;
  return /*#__PURE__*/_react["default"].createElement(MapLayerSelect, {
    className: "map-layer-selector"
  }, layers.map(function (layer) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      key: layer.id,
      className: "map-layer-selector__item"
    }, /*#__PURE__*/_react["default"].createElement(_checkbox["default"], {
      type: "radio",
      checked: layer.isVisible,
      id: "".concat(layer.id, "-toggle-").concat((0, _commonUtils.generateHashId)(4)),
      label: layer.name,
      onChange: function onChange() {
        onMapToggleLayer(layer.id);
      }
    }));
  }));
};
var _default = exports["default"] = MapLayerSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zdHlsZWRDb21wb25lbnRzIiwiX2NoZWNrYm94IiwiX2NvbW1vblV0aWxzIiwiX3RlbXBsYXRlT2JqZWN0IiwiTWFwTGF5ZXJTZWxlY3QiLCJkaXYiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsMiIsIk1hcExheWVyU2VsZWN0b3IiLCJfcmVmIiwibGF5ZXJzIiwib25NYXBUb2dnbGVMYXllciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJtYXAiLCJsYXllciIsImtleSIsImlkIiwidHlwZSIsImNoZWNrZWQiLCJpc1Zpc2libGUiLCJjb25jYXQiLCJnZW5lcmF0ZUhhc2hJZCIsImxhYmVsIiwibmFtZSIsIm9uQ2hhbmdlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi9tYXAtbGF5ZXItc2VsZWN0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBDaGVja2JveCBmcm9tICcuL2NoZWNrYm94JztcbmltcG9ydCB7Z2VuZXJhdGVIYXNoSWR9IGZyb20gJ0BrZXBsZXIuZ2wvY29tbW9uLXV0aWxzJztcblxuY29uc3QgTWFwTGF5ZXJTZWxlY3QgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxMnB4O1xuXG4gIC5tYXAtbGF5ZXItc2VsZWN0b3JfX2l0ZW0ge1xuICAgIG1hcmdpbjogMTJweCAwO1xuICB9XG5gO1xuaW50ZXJmYWNlIExheWVyIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBpc1Zpc2libGU6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBNYXBMYXllclNlbGVjdG9yUHJvcHMge1xuICBsYXllcnM6IExheWVyW107XG4gIG9uTWFwVG9nZ2xlTGF5ZXI6IChsYXllcklkOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbi8qKiBAdHlwZSB7dHlwZW9mIGltcG9ydCgnLi9tYXAtbGF5ZXItc2VsZWN0b3InKS5kZWZhdWx0fSAqL1xuY29uc3QgTWFwTGF5ZXJTZWxlY3RvciA9ICh7bGF5ZXJzLCBvbk1hcFRvZ2dsZUxheWVyfTogTWFwTGF5ZXJTZWxlY3RvclByb3BzKSA9PiAoXG4gIDxNYXBMYXllclNlbGVjdCBjbGFzc05hbWU9XCJtYXAtbGF5ZXItc2VsZWN0b3JcIj5cbiAgICB7bGF5ZXJzLm1hcChsYXllciA9PiAoXG4gICAgICA8ZGl2IGtleT17bGF5ZXIuaWR9IGNsYXNzTmFtZT1cIm1hcC1sYXllci1zZWxlY3Rvcl9faXRlbVwiPlxuICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgIGNoZWNrZWQ9e2xheWVyLmlzVmlzaWJsZX1cbiAgICAgICAgICBpZD17YCR7bGF5ZXIuaWR9LXRvZ2dsZS0ke2dlbmVyYXRlSGFzaElkKDQpfWB9XG4gICAgICAgICAgbGFiZWw9e2xheWVyLm5hbWV9XG4gICAgICAgICAgb25DaGFuZ2U9eygpID0+IHtcbiAgICAgICAgICAgIG9uTWFwVG9nZ2xlTGF5ZXIobGF5ZXIuaWQpO1xuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApKX1cbiAgPC9NYXBMYXllclNlbGVjdD5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcExheWVyU2VsZWN0b3I7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsaUJBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFNBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUF1RCxJQUFBSSxlQUFBLEVBTnZEO0FBQ0E7QUFPQSxJQUFNQyxjQUFjLEdBQUdKLGlCQUFBLFdBQU0sQ0FBQ0ssR0FBRyxDQUFBRixlQUFBLEtBQUFBLGVBQUEsT0FBQUcsdUJBQUEsbUdBTWhDO0FBWUQ7QUFDQSxJQUFNQyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCQSxDQUFBQyxJQUFBO0VBQUEsSUFBS0MsTUFBTSxHQUFBRCxJQUFBLENBQU5DLE1BQU07SUFBRUMsZ0JBQWdCLEdBQUFGLElBQUEsQ0FBaEJFLGdCQUFnQjtFQUFBLG9CQUNqRGIsTUFBQSxZQUFBYyxhQUFBLENBQUNQLGNBQWM7SUFBQ1EsU0FBUyxFQUFDO0VBQW9CLEdBQzNDSCxNQUFNLENBQUNJLEdBQUcsQ0FBQyxVQUFBQyxLQUFLO0lBQUEsb0JBQ2ZqQixNQUFBLFlBQUFjLGFBQUE7TUFBS0ksR0FBRyxFQUFFRCxLQUFLLENBQUNFLEVBQUc7TUFBQ0osU0FBUyxFQUFDO0lBQTBCLGdCQUN0RGYsTUFBQSxZQUFBYyxhQUFBLENBQUNWLFNBQUEsV0FBUTtNQUNQZ0IsSUFBSSxFQUFDLE9BQU87TUFDWkMsT0FBTyxFQUFFSixLQUFLLENBQUNLLFNBQVU7TUFDekJILEVBQUUsS0FBQUksTUFBQSxDQUFLTixLQUFLLENBQUNFLEVBQUUsY0FBQUksTUFBQSxDQUFXLElBQUFsQixZQUFBLENBQUFtQixjQUFjLEVBQUMsQ0FBQyxDQUFDLENBQUc7TUFDOUNDLEtBQUssRUFBRVIsS0FBSyxDQUFDUyxJQUFLO01BQ2xCQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQSxFQUFRO1FBQ2RkLGdCQUFnQixDQUFDSSxLQUFLLENBQUNFLEVBQUUsQ0FBQztNQUM1QjtJQUFFLENBQ0gsQ0FDRSxDQUFDO0VBQUEsQ0FDUCxDQUNhLENBQUM7QUFBQSxDQUNsQjtBQUFDLElBQUFTLFFBQUEsR0FBQUMsT0FBQSxjQUVhbkIsZ0JBQWdCIiwiaWdub3JlTGlzdCI6W119