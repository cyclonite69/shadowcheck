"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = TimeRangeSliderFactory;
exports.getTimeBinsForInterval = getTimeBinsForInterval;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _throttle = _interopRequireDefault(require("lodash/throttle"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _rangeSlider = _interopRequireDefault(require("./range-slider"));
var _timeSliderMarker = _interopRequireDefault(require("./time-slider-marker"));
var _playbackControls = _interopRequireDefault(require("./animation-control/playback-controls"));
var _timeRangeSliderTimeTitle = _interopRequireDefault(require("./time-range-slider-time-title"));
var _animationControl = _interopRequireDefault(require("./animation-control/animation-control"));
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
var animationControlWidth = 176;
var StyledSliderContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  align-items: flex-end;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding-left: ", "px;\n\n  .timeline-container .kg-slider {\n    display: none;\n  }\n\n  .playback-controls {\n    margin-left: 22px;\n  }\n"])), function (props) {
  return props.isEnlarged ? 24 : 0;
});
var ANIMATION_CONTROL_STYLE = {
  flex: 1
};
TimeRangeSliderFactory.deps = [_playbackControls["default"], _rangeSlider["default"], _timeSliderMarker["default"], _timeRangeSliderTimeTitle["default"], _animationControl["default"]];
function getTimeBinsForInterval(timeBins, interval) {
  if (!timeBins) return {};
  return Object.keys(timeBins).reduce(function (acc, dataId) {
    acc[dataId] = timeBins[dataId][interval];
    return acc;
  }, {});
}
function TimeRangeSliderFactory(PlaybackControls, RangeSlider, TimeSliderMarker, TimeRangeSliderTimeTitle, AnimationControl) {
  var TimeRangeSlider = function TimeRangeSlider(props) {
    var domain = props.domain,
      value = props.value,
      isEnlarged = props.isEnlarged,
      isMinified = props.isMinified,
      hideTimeTitle = props.hideTimeTitle,
      isAnimating = props.isAnimating,
      resetAnimation = props.resetAnimation,
      timeFormat = props.timeFormat,
      timezone = props.timezone,
      timeBins = props.timeBins,
      plotType = props.plotType,
      lineChart = props.lineChart,
      invertTrendColor = props.invertTrendColor,
      step = props.step,
      isAnimatable = props.isAnimatable,
      speed = props.speed,
      animationWindow = props.animationWindow,
      updateAnimationSpeed = props.updateAnimationSpeed,
      setFilterAnimationWindow = props.setFilterAnimationWindow,
      toggleAnimation = props.toggleAnimation,
      onChange = props.onChange,
      setFilterPlot = props.setFilterPlot,
      timeline = props.timeline;
    var throttledOnchange = (0, _react.useMemo)(function () {
      return (0, _throttle["default"])(onChange, 20);
    }, [onChange]);
    var binsForInterval = (0, _react.useMemo)(function () {
      return getTimeBinsForInterval(timeBins, plotType === null || plotType === void 0 ? void 0 : plotType.interval);
    }, [timeBins, plotType === null || plotType === void 0 ? void 0 : plotType.interval]);
    var style = (0, _react.useMemo)(function () {
      return {
        width: isEnlarged ? "calc(100% - ".concat(animationControlWidth, "px)") : '100%'
      };
    }, [isEnlarged]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "time-range-slider"
    }, !hideTimeTitle && isEnlarged ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "time-range-slider__title",
      style: style
    }, /*#__PURE__*/_react["default"].createElement(TimeRangeSliderTimeTitle, {
      timeFormat: timeFormat,
      timezone: timezone,
      value: value,
      isEnlarged: isEnlarged
    })) : null, /*#__PURE__*/_react["default"].createElement(StyledSliderContainer, {
      className: "time-range-slider__container",
      isEnlarged: isEnlarged
    }, !isMinified ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "timeline-container",
      style: style
    }, /*#__PURE__*/_react["default"].createElement(RangeSlider, {
      range: domain,
      value0: value[0],
      value1: value[1],
      bins: binsForInterval,
      lineChart: lineChart,
      invertTrendColor: invertTrendColor,
      plotType: plotType,
      isEnlarged: isEnlarged,
      showInput: false,
      step: step,
      onChange: throttledOnchange,
      xAxis: TimeSliderMarker,
      timezone: timezone,
      timeFormat: timeFormat,
      setFilterPlot: setFilterPlot
    })) : /*#__PURE__*/_react["default"].createElement(AnimationControl, {
      style: ANIMATION_CONTROL_STYLE,
      isAnimatable: isAnimatable,
      isAnimating: isAnimating,
      resetAnimation: resetAnimation,
      toggleAnimation: toggleAnimation,
      updateAnimationSpeed: updateAnimationSpeed,
      setTimelineValue: throttledOnchange,
      setAnimationWindow: setFilterAnimationWindow,
      showTimeDisplay: false,
      timeline: timeline
    }), isEnlarged && !isMinified ? /*#__PURE__*/_react["default"].createElement(PlaybackControls, {
      isAnimatable: isAnimatable,
      width: animationControlWidth,
      speed: speed,
      animationWindow: animationWindow,
      updateAnimationSpeed: updateAnimationSpeed,
      setFilterAnimationWindow: setFilterAnimationWindow,
      pauseAnimation: toggleAnimation,
      resetAnimation: resetAnimation,
      isAnimating: isAnimating,
      startAnimation: toggleAnimation
    }) : null));
  };
  return /*#__PURE__*/_react["default"].memo(TimeRangeSlider);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,