"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apply_ = apply_;
exports.compose_ = compose_;
exports.filterOutById = filterOutById;
exports.if_ = if_;
exports.log = log;
exports.map_ = map_;
exports.merge_ = merge_;
exports.payload_ = payload_;
exports.pick_ = pick_;
exports.removeElementAtIndex = removeElementAtIndex;
exports.swap_ = swap_;
exports.with_ = with_;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _console = _interopRequireDefault(require("global/console"));
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var identity = function identity(state) {
  return state;
};

/** Returns a function that logs a value with a given message */
function log(text) {
  return function (value) {
    return _console["default"].log(text, value);
  };
}
/** Wraps a value in an object and stores it the `payload` field */
function payload_(payload) {
  return {
    payload: payload
  };
}
/** Wraps a value in an object and stores it the `payload` field */
function apply_(updater, payload) {
  return function (state) {
    return updater(state, payload);
  };
}
function with_(fn) {
  return function (state) {
    return fn(state)(state);
  };
}
function if_(pred, fn) {
  return pred ? fn : identity;
}
function compose_(fns) {
  return function (state) {
    return fns.reduce(function (state2, fn) {
      return fn(state2);
    }, state);
  };
}
/** Returns a reducer function that merges props with state */
function merge_(obj) {
  return function (state) {
    return _objectSpread(_objectSpread({}, state), obj);
  };
}
function pick_(prop) {
  return function (fn) {
    return function (state) {
      return _objectSpread(_objectSpread({}, state), {}, (0, _defineProperty2["default"])({}, prop, fn(state[prop])));
    };
  };
}
function swap_(item) {
  return function (arr) {
    return arr.map(function (a) {
      return a.id === item.id ? item : a;
    });
  };
}
function map_(fn) {
  return function (arr) {
    return arr.map(function (e) {
      return fn(e);
    });
  };
}
function filterOutById(id) {
  return function (arr) {
    return arr.filter(function (e) {
      return e.id !== id;
    });
  };
}
function removeElementAtIndex(index) {
  return function (arr) {
    return [].concat((0, _toConsumableArray2["default"])(arr.slice(0, index)), (0, _toConsumableArray2["default"])(arr.slice(index + 1, arr.length)));
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uc29sZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJpZGVudGl0eSIsInN0YXRlIiwibG9nIiwidGV4dCIsInZhbHVlIiwicGF5bG9hZF8iLCJwYXlsb2FkIiwiYXBwbHlfIiwidXBkYXRlciIsIndpdGhfIiwiZm4iLCJpZl8iLCJwcmVkIiwiY29tcG9zZV8iLCJmbnMiLCJyZWR1Y2UiLCJzdGF0ZTIiLCJtZXJnZV8iLCJvYmoiLCJwaWNrXyIsInByb3AiLCJzd2FwXyIsIml0ZW0iLCJhcnIiLCJtYXAiLCJhIiwiaWQiLCJtYXBfIiwiZmlsdGVyT3V0QnlJZCIsInJlbW92ZUVsZW1lbnRBdEluZGV4IiwiaW5kZXgiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwic2xpY2UiXSwic291cmNlcyI6WyIuLi9zcmMvY29tcG9zZXItaGVscGVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgQ29uc29sZSBmcm9tICdnbG9iYWwvY29uc29sZSc7XG5cbmNvbnN0IGlkZW50aXR5ID0gc3RhdGUgPT4gc3RhdGU7XG5cbi8qKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBsb2dzIGEgdmFsdWUgd2l0aCBhIGdpdmVuIG1lc3NhZ2UgKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2codGV4dDogc3RyaW5nKTogKHZhbHVlOiBhbnkpID0+IHZvaWQge1xuICByZXR1cm4gdmFsdWUgPT4gQ29uc29sZS5sb2codGV4dCwgdmFsdWUpO1xufVxuLyoqIFdyYXBzIGEgdmFsdWUgaW4gYW4gb2JqZWN0IGFuZCBzdG9yZXMgaXQgdGhlIGBwYXlsb2FkYCBmaWVsZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBheWxvYWRfPFA+KHBheWxvYWQ6IFApIHtcbiAgcmV0dXJuIHtwYXlsb2FkfTtcbn1cbi8qKiBXcmFwcyBhIHZhbHVlIGluIGFuIG9iamVjdCBhbmQgc3RvcmVzIGl0IHRoZSBgcGF5bG9hZGAgZmllbGQgKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseV88U3RhdGUsIFA+KFxuICB1cGRhdGVyOiAoc3RhdGU6IFN0YXRlLCBuZXh0UGF5bG9hZDogUCkgPT4gU3RhdGUsXG4gIHBheWxvYWQ6IFBcbik6IChzdGF0ZTogU3RhdGUpID0+IFN0YXRlIHtcbiAgcmV0dXJuIHN0YXRlID0+IHVwZGF0ZXIoc3RhdGUsIHBheWxvYWQpO1xufVxuXG50eXBlIEFyZzxTdGF0ZT4gPSAoc3RhdGU6IFN0YXRlKSA9PiAobmV4dFN0YXRlOiBTdGF0ZSkgPT4gU3RhdGU7XG5leHBvcnQgZnVuY3Rpb24gd2l0aF88U3RhdGU+KGZuOiBBcmc8U3RhdGU+KTogKHN0YXRlOiBTdGF0ZSkgPT4gU3RhdGUge1xuICByZXR1cm4gc3RhdGUgPT4gZm4oc3RhdGUpKHN0YXRlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlmXzxTdGF0ZT4ocHJlZDogYm9vbGVhbiwgZm46IChzdGF0ZTogU3RhdGUpID0+IFN0YXRlKTogKHN0YXRlOiBTdGF0ZSkgPT4gU3RhdGUge1xuICByZXR1cm4gcHJlZCA/IGZuIDogaWRlbnRpdHk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wb3NlXzxTdGF0ZT4oZm5zOiBBcnJheTwoczogU3RhdGUpID0+IFN0YXRlPik6IChzOiBTdGF0ZSkgPT4gU3RhdGUge1xuICByZXR1cm4gc3RhdGUgPT4gZm5zLnJlZHVjZSgoc3RhdGUyLCBmbikgPT4gZm4oc3RhdGUyKSwgc3RhdGUpO1xufVxuLyoqIFJldHVybnMgYSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgbWVyZ2VzIHByb3BzIHdpdGggc3RhdGUgKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZV88UHJvcHM+KG9iajogUHJvcHMpOiA8U3RhdGU+KHN0YXRlOiBTdGF0ZSkgPT4gU3RhdGUge1xuICByZXR1cm4gc3RhdGUgPT4gKHsuLi5zdGF0ZSwgLi4ub2JqfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwaWNrXzxQcm9wIGV4dGVuZHMgc3RyaW5nPihcbiAgcHJvcDogUHJvcFxuKTogPFZhbHVlPihmbjogKHA6IFZhbHVlKSA9PiBWYWx1ZSkgPT4gPFN0YXRlIGV4dGVuZHMgUmVjb3JkPFByb3AsIFZhbHVlPj4oc3RhdGU6IFN0YXRlKSA9PiBTdGF0ZSB7XG4gIHJldHVybiBmbiA9PiBzdGF0ZSA9PiAoey4uLnN0YXRlLCBbcHJvcF06IGZuKHN0YXRlW3Byb3BdKX0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3dhcF88WCBleHRlbmRzIHtpZDogc3RyaW5nfT4oaXRlbTogWCk6IChhcnI6IFhbXSkgPT4gWFtdIHtcbiAgcmV0dXJuIGFyciA9PiBhcnIubWFwKGEgPT4gKGEuaWQgPT09IGl0ZW0uaWQgPyBpdGVtIDogYSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwXzxYLCBUPihmbjogKHN0YXRlOiBYKSA9PiBUKTogKGFycjogWFtdKSA9PiBUW10ge1xuICByZXR1cm4gYXJyID0+IGFyci5tYXAoZSA9PiBmbihlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJPdXRCeUlkPFggZXh0ZW5kcyB7aWQ6IHN0cmluZ30+KGlkOiBzdHJpbmcpOiAoYXJyOiBYW10pID0+IFhbXSB7XG4gIHJldHVybiBhcnIgPT4gYXJyLmZpbHRlcihlID0+IGUuaWQgIT09IGlkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnRBdEluZGV4PFg+KGluZGV4OiBudW1iZXIpOiAoYXJyOiBYW10pID0+IFhbXSB7XG4gIHJldHVybiBhcnIgPT4gWy4uLmFyci5zbGljZSgwLCBpbmRleCksIC4uLmFyci5zbGljZShpbmRleCArIDEsIGFyci5sZW5ndGgpXTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSxRQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBcUMsU0FBQUMsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBO0VBQUEsSUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUosQ0FBQTtFQUFBLElBQUFHLE1BQUEsQ0FBQUUscUJBQUE7SUFBQSxJQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQTtJQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUE7TUFBQSxPQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFSLENBQUEsRUFBQUMsQ0FBQSxFQUFBUSxVQUFBO0lBQUEsS0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBO0VBQUE7RUFBQSxPQUFBSixDQUFBO0FBQUE7QUFBQSxTQUFBVSxjQUFBWixDQUFBO0VBQUEsU0FBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBO0lBQUEsSUFBQUMsQ0FBQSxXQUFBVyxTQUFBLENBQUFaLENBQUEsSUFBQVksU0FBQSxDQUFBWixDQUFBO0lBQUFBLENBQUEsT0FBQUYsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsT0FBQWEsT0FBQSxXQUFBZCxDQUFBO01BQUEsSUFBQWUsZ0JBQUEsYUFBQWhCLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLENBQUFELENBQUE7SUFBQSxLQUFBRSxNQUFBLENBQUFjLHlCQUFBLEdBQUFk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