"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UPDATE_AI_ASSISTANT_MESSAGES = exports.UPDATE_AI_ASSISTANT_CONFIG = exports.SET_START_SCREEN_CAPTURE = exports.SET_SCREEN_CAPTURED = exports.SET_MAP_BOUNDARY = void 0;
exports.setMapBoundary = setMapBoundary;
exports.setScreenCaptured = setScreenCaptured;
exports.setStartScreenCapture = setStartScreenCapture;
exports.updateAiAssistantConfig = updateAiAssistantConfig;
exports.updateAiAssistantMessages = updateAiAssistantMessages;
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var ACTION_PREFIX = '@@openassistant/';
var UPDATE_AI_ASSISTANT_CONFIG = exports.UPDATE_AI_ASSISTANT_CONFIG = "".concat(ACTION_PREFIX, "UPDATE_AI_ASSISTANT_CONFIG");
var UPDATE_AI_ASSISTANT_MESSAGES = exports.UPDATE_AI_ASSISTANT_MESSAGES = "".concat(ACTION_PREFIX, "UPDATE_AI_ASSISTANT_MESSAGES");
var SET_START_SCREEN_CAPTURE = exports.SET_START_SCREEN_CAPTURE = "".concat(ACTION_PREFIX, "SET_START_SCREEN_CAPTURE");
var SET_SCREEN_CAPTURED = exports.SET_SCREEN_CAPTURED = "".concat(ACTION_PREFIX, "SET_SCREEN_CAPTURED");
var SET_MAP_BOUNDARY = exports.SET_MAP_BOUNDARY = "".concat(ACTION_PREFIX, "SET_MAP_BOUNDARY");
// Action creators
function updateAiAssistantConfig(config) {
  return {
    type: UPDATE_AI_ASSISTANT_CONFIG,
    payload: config
  };
}
function updateAiAssistantMessages(messages) {
  return {
    type: UPDATE_AI_ASSISTANT_MESSAGES,
    payload: messages
  };
}
function setStartScreenCapture(flag) {
  return {
    type: SET_START_SCREEN_CAPTURE,
    payload: flag
  };
}
function setScreenCaptured(screenshot) {
  return {
    type: SET_SCREEN_CAPTURED,
    payload: screenshot
  };
}
function setMapBoundary(nw, se) {
  return {
    type: SET_MAP_BOUNDARY,
    payload: {
      nw: nw,
      se: se
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBQ1RJT05fUFJFRklYIiwiVVBEQVRFX0FJX0FTU0lTVEFOVF9DT05GSUciLCJleHBvcnRzIiwiY29uY2F0IiwiVVBEQVRFX0FJX0FTU0lTVEFOVF9NRVNTQUdFUyIsIlNFVF9TVEFSVF9TQ1JFRU5fQ0FQVFVSRSIsIlNFVF9TQ1JFRU5fQ0FQVFVSRUQiLCJTRVRfTUFQX0JPVU5EQVJZIiwidXBkYXRlQWlBc3Npc3RhbnRDb25maWciLCJjb25maWciLCJ0eXBlIiwicGF5bG9hZCIsInVwZGF0ZUFpQXNzaXN0YW50TWVzc2FnZXMiLCJtZXNzYWdlcyIsInNldFN0YXJ0U2NyZWVuQ2FwdHVyZSIsImZsYWciLCJzZXRTY3JlZW5DYXB0dXJlZCIsInNjcmVlbnNob3QiLCJzZXRNYXBCb3VuZGFyeSIsIm53Iiwic2UiXSwic291cmNlcyI6WyIuLi9zcmMvYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge01lc3NhZ2VNb2RlbH0gZnJvbSAnQG9wZW5hc3Npc3RhbnQvY29yZSc7XG5pbXBvcnQge0FpQXNzaXN0YW50Q29uZmlnfSBmcm9tICcuL3JlZHVjZXJzJztcblxuY29uc3QgQUNUSU9OX1BSRUZJWCA9ICdAQG9wZW5hc3Npc3RhbnQvJztcblxuZXhwb3J0IGNvbnN0IFVQREFURV9BSV9BU1NJU1RBTlRfQ09ORklHID0gYCR7QUNUSU9OX1BSRUZJWH1VUERBVEVfQUlfQVNTSVNUQU5UX0NPTkZJR2A7XG5leHBvcnQgY29uc3QgVVBEQVRFX0FJX0FTU0lTVEFOVF9NRVNTQUdFUyA9IGAke0FDVElPTl9QUkVGSVh9VVBEQVRFX0FJX0FTU0lTVEFOVF9NRVNTQUdFU2A7XG5leHBvcnQgY29uc3QgU0VUX1NUQVJUX1NDUkVFTl9DQVBUVVJFID0gYCR7QUNUSU9OX1BSRUZJWH1TRVRfU1RBUlRfU0NSRUVOX0NBUFRVUkVgO1xuZXhwb3J0IGNvbnN0IFNFVF9TQ1JFRU5fQ0FQVFVSRUQgPSBgJHtBQ1RJT05fUFJFRklYfVNFVF9TQ1JFRU5fQ0FQVFVSRURgO1xuZXhwb3J0IGNvbnN0IFNFVF9NQVBfQk9VTkRBUlkgPSBgJHtBQ1RJT05fUFJFRklYfVNFVF9NQVBfQk9VTkRBUllgO1xuLy8gQWN0aW9uIGNyZWF0b3JzXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQWlBc3Npc3RhbnRDb25maWcoY29uZmlnOiBBaUFzc2lzdGFudENvbmZpZykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFVQREFURV9BSV9BU1NJU1RBTlRfQ09ORklHLFxuICAgIHBheWxvYWQ6IGNvbmZpZ1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQWlBc3Npc3RhbnRNZXNzYWdlcyhtZXNzYWdlczogTWVzc2FnZU1vZGVsW10pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBVUERBVEVfQUlfQVNTSVNUQU5UX01FU1NBR0VTLFxuICAgIHBheWxvYWQ6IG1lc3NhZ2VzXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRTdGFydFNjcmVlbkNhcHR1cmUoZmxhZzogYm9vbGVhbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFNFVF9TVEFSVF9TQ1JFRU5fQ0FQVFVSRSxcbiAgICBwYXlsb2FkOiBmbGFnXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRTY3JlZW5DYXB0dXJlZChzY3JlZW5zaG90OiBzdHJpbmcpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRfU0NSRUVOX0NBUFRVUkVELFxuICAgIHBheWxvYWQ6IHNjcmVlbnNob3RcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldE1hcEJvdW5kYXJ5KG53OiBbbnVtYmVyLCBudW1iZXJdLCBzZTogW251bWJlciwgbnVtYmVyXSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFNFVF9NQVBfQk9VTkRBUlksXG4gICAgcGF5bG9hZDoge253LCBzZX1cbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBOztBQUtBLElBQU1BLGFBQWEsR0FBRyxrQkFBa0I7QUFFakMsSUFBTUMsMEJBQTBCLEdBQUFDLE9BQUEsQ0FBQUQsMEJBQUEsTUFBQUUsTUFBQSxDQUFNSCxhQUFhLCtCQUE0QjtBQUMvRSxJQUFNSSw0QkFBNEIsR0FBQUYsT0FBQSxDQUFBRSw0QkFBQSxNQUFBRCxNQUFBLENBQU1ILGFBQWEsaUNBQThCO0FBQ25GLElBQU1LLHdCQUF3QixHQUFBSCxPQUFBLENBQUFHLHdCQUFBLE1BQUFGLE1BQUEsQ0FBTUgsYUFBYSw2QkFBMEI7QUFDM0UsSUFBTU0sbUJBQW1CLEdBQUFKLE9BQUEsQ0FBQUksbUJBQUEsTUFBQUgsTUFBQSxDQUFNSCxhQUFhLHdCQUFxQjtBQUNqRSxJQUFNTyxnQkFBZ0IsR0FBQUwsT0FBQSxDQUFBSyxnQkFBQSxNQUFBSixNQUFBLENBQU1ILGFBQWEscUJBQWtCO0FBQ2xFO0FBQ08sU0FBU1EsdUJBQXVCQSxDQUFDQyxNQUF5QixFQUFFO0VBQ2pFLE9BQU87SUFDTEMsSUFBSSxFQUFFVCwwQkFBMEI7SUFDaENVLE9BQU8sRUFBRUY7RUFDWCxDQUFDO0FBQ0g7QUFFTyxTQUFTRyx5QkFBeUJBLENBQUNDLFFBQXdCLEVBQUU7RUFDbEUsT0FBTztJQUNMSCxJQUFJLEVBQUVOLDRCQUE0QjtJQUNsQ08sT0FBTyxFQUFFRTtFQUNYLENBQUM7QUFDSDtBQUVPLFNBQVNDLHFCQUFxQkEsQ0FBQ0MsSUFBYSxFQUFFO0VBQ25ELE9BQU87SUFDTEwsSUFBSSxFQUFFTCx3QkFBd0I7SUFDOUJNLE9BQU8sRUFBRUk7RUFDWCxDQUFDO0FBQ0g7QUFFTyxTQUFTQyxpQkFBaUJBLENBQUNDLFVBQWtCLEVBQUU7RUFDcEQsT0FBTztJQUNMUCxJQUFJLEVBQUVKLG1CQUFtQjtJQUN6QkssT0FBTyxFQUFFTTtFQUNYLENBQUM7QUFDSDtBQUVPLFNBQVNDLGNBQWNBLENBQUNDLEVBQW9CLEVBQUVDLEVBQW9CLEVBQUU7RUFDekUsT0FBTztJQUNMVixJQUFJLEVBQUVILGdCQUFnQjtJQUN0QkksT0FBTyxFQUFFO01BQUNRLEVBQUUsRUFBRkEsRUFBRTtNQUFFQyxFQUFFLEVBQUZBO0lBQUU7RUFDbEIsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119