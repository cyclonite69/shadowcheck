"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.flattenMessages = exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _en = _interopRequireDefault(require("./translations/en"));
var _fi = _interopRequireDefault(require("./translations/fi"));
var _pt = _interopRequireDefault(require("./translations/pt"));
var _es = _interopRequireDefault(require("./translations/es"));
var _ca = _interopRequireDefault(require("./translations/ca"));
var _cn = _interopRequireDefault(require("./translations/cn"));
var _ja = _interopRequireDefault(require("./translations/ja"));
var _ru = _interopRequireDefault(require("./translations/ru"));
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// Flat messages since react-intl does not seem to support nested structures
// Adapted from https://medium.com/siren-apparel-press/internationalization-and-localization-of-sirenapparel-eu-sirenapparel-us-and-sirenapparel-asia-ddee266066a2
var _flattenMessages = exports.flattenMessages = function flattenMessages(nestedMessages) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return Object.keys(nestedMessages).reduce(function (messages, key) {
    var value = nestedMessages[key];
    var prefixedKey = prefix ? "".concat(prefix, ".").concat(key) : key;
    if (typeof value === 'string') {
      messages[prefixedKey] = value;
    } else {
      Object.assign(messages, _flattenMessages(value, prefixedKey));
    }
    return messages;
  }, {});
};
var enFlat = _flattenMessages(_en["default"]);
var messages = exports.messages = {};
messages.en = enFlat;
messages.fi = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_fi["default"]));
messages.pt = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_pt["default"]));
messages.es = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_es["default"]));
messages.ca = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_ca["default"]));
messages.cn = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_cn["default"]));
messages.ja = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_ja["default"]));
messages.ru = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_ru["default"]));
var _default = exports["default"] = messages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZW4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9maSIsIl9wdCIsIl9lcyIsIl9jYSIsIl9jbiIsIl9qYSIsIl9ydSIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiX2ZsYXR0ZW5NZXNzYWdlcyIsImV4cG9ydHMiLCJmbGF0dGVuTWVzc2FnZXMiLCJuZXN0ZWRNZXNzYWdlcyIsInByZWZpeCIsInVuZGVmaW5lZCIsInJlZHVjZSIsIm1lc3NhZ2VzIiwia2V5IiwidmFsdWUiLCJwcmVmaXhlZEtleSIsImNvbmNhdCIsImFzc2lnbiIsImVuRmxhdCIsImVuIiwiZmkiLCJwdCIsImVzIiwiY2EiLCJjbiIsImphIiwicnUiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9tZXNzYWdlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgZW4gZnJvbSAnLi90cmFuc2xhdGlvbnMvZW4nO1xuaW1wb3J0IGZpIGZyb20gJy4vdHJhbnNsYXRpb25zL2ZpJztcbmltcG9ydCBwdCBmcm9tICcuL3RyYW5zbGF0aW9ucy9wdCc7XG5pbXBvcnQgZXMgZnJvbSAnLi90cmFuc2xhdGlvbnMvZXMnO1xuaW1wb3J0IGNhIGZyb20gJy4vdHJhbnNsYXRpb25zL2NhJztcbmltcG9ydCBjbiBmcm9tICcuL3RyYW5zbGF0aW9ucy9jbic7XG5pbXBvcnQgamEgZnJvbSAnLi90cmFuc2xhdGlvbnMvamEnO1xuaW1wb3J0IHJ1IGZyb20gJy4vdHJhbnNsYXRpb25zL3J1JztcblxuLy8gRmxhdCBtZXNzYWdlcyBzaW5jZSByZWFjdC1pbnRsIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCBuZXN0ZWQgc3RydWN0dXJlc1xuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vbWVkaXVtLmNvbS9zaXJlbi1hcHBhcmVsLXByZXNzL2ludGVybmF0aW9uYWxpemF0aW9uLWFuZC1sb2NhbGl6YXRpb24tb2Ytc2lyZW5hcHBhcmVsLWV1LXNpcmVuYXBwYXJlbC11cy1hbmQtc2lyZW5hcHBhcmVsLWFzaWEtZGRlZTI2NjA2NmEyXG5leHBvcnQgY29uc3QgZmxhdHRlbk1lc3NhZ2VzID0gKFxuICBuZXN0ZWRNZXNzYWdlcyxcbiAgcHJlZml4ID0gJydcbik6IHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xufSA9PiB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhuZXN0ZWRNZXNzYWdlcykucmVkdWNlKChtZXNzYWdlcywga2V5KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBuZXN0ZWRNZXNzYWdlc1trZXldO1xuICAgIGNvbnN0IHByZWZpeGVkS2V5ID0gcHJlZml4ID8gYCR7cHJlZml4fS4ke2tleX1gIDoga2V5O1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtZXNzYWdlc1twcmVmaXhlZEtleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmFzc2lnbihtZXNzYWdlcywgZmxhdHRlbk1lc3NhZ2VzKHZhbHVlLCBwcmVmaXhlZEtleSkpO1xuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZXM7XG4gIH0sIHt9KTtcbn07XG5cbmNvbnN0IGVuRmxhdCA9IGZsYXR0ZW5NZXNzYWdlcyhlbik7XG5cbmV4cG9ydCBjb25zdCBtZXNzYWdlczoge1xuICBba2V5OiBzdHJpbmddOiB7XG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICB9O1xufSA9IHt9O1xuXG5tZXNzYWdlcy5lbiA9IGVuRmxhdDtcbm1lc3NhZ2VzLmZpID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKGZpKX07XG5tZXNzYWdlcy5wdCA9IHsuLi5lbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyhwdCl9O1xubWVzc2FnZXMuZXMgPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMoZXMpfTtcbm1lc3NhZ2VzLmNhID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKGNhKX07XG5tZXNzYWdlcy5jbiA9IHsuLi5lbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyhjbil9O1xubWVzc2FnZXMuamEgPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMoamEpfTtcbm1lc3NhZ2VzLnJ1ID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKHJ1KX07XG5cbmV4cG9ydCBkZWZhdWx0IG1lc3NhZ2VzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBLElBQUFBLEdBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEdBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLEdBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLEdBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLEdBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFNLEdBQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFPLEdBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUFtQyxTQUFBUSxRQUFBQyxDQUFBLEVBQUFDLENBQUE7RUFBQSxJQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBO0VB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