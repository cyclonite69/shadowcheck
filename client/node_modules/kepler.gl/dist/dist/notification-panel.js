"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = NotificationPanelFactory;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _notificationItem = _interopRequireDefault(require("./notification-panel/notification-item"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function _callSuper(t, o, e) {
  return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
}
var NotificationPanelContent = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  background: transparent;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  padding: 4px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  position: absolute;\n  top: 1em;\n  right: 1em;\n  z-index: 10000;\n  box-sizing: border-box;\n"])));
NotificationPanelFactory.deps = [_notificationItem["default"]];
function NotificationPanelFactory(NotificationItem) {
  var NotificationPanelUnmemoized = /*#__PURE__*/function (_Component) {
    function NotificationPanelUnmemoized() {
      (0, _classCallCheck2["default"])(this, NotificationPanelUnmemoized);
      return _callSuper(this, NotificationPanelUnmemoized, arguments);
    }
    (0, _inherits2["default"])(NotificationPanelUnmemoized, _Component);
    return (0, _createClass2["default"])(NotificationPanelUnmemoized, [{
      key: "render",
      value: function render() {
        var _this = this;
        var globalNotifications = this.props.notifications.filter(function (n) {
          return n.topic === _constants.DEFAULT_NOTIFICATION_TOPICS.global;
        });
        return /*#__PURE__*/_react["default"].createElement(NotificationPanelContent, {
          className: "notification-panel",
          style: {
            display: globalNotifications.length ? 'block' : 'none'
          }
        }, globalNotifications.map(function (n) {
          return /*#__PURE__*/_react["default"].createElement(NotificationItem, {
            key: n.id,
            notification: n,
            removeNotification: _this.props.removeNotification
          });
        }));
      }
    }]);
  }(_react.Component);
  (0, _defineProperty2["default"])(NotificationPanelUnmemoized, "displayName", 'NotificationPanel');
  var NotificationPanel = /*#__PURE__*/_react["default"].memo(NotificationPanelUnmemoized);
  return NotificationPanel;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbm90aWZpY2F0aW9uSXRlbSIsIl9jb25zdGFudHMiLCJfdGVtcGxhdGVPYmplY3QiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJfY2FsbFN1cGVyIiwibyIsIl9nZXRQcm90b3R5cGVPZjIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiYXBwbHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsIk5vdGlmaWNhdGlvblBhbmVsQ29udGVudCIsImRpdiIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwyIiwiTm90aWZpY2F0aW9uUGFuZWxGYWN0b3J5IiwiZGVwcyIsIk5vdGlmaWNhdGlvbkl0ZW0iLCJOb3RpZmljYXRpb25QYW5lbFVubWVtb2l6ZWQiLCJfQ29tcG9uZW50IiwiX2NsYXNzQ2FsbENoZWNrMiIsImFyZ3VtZW50cyIsIl9pbmhlcml0czIiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJyZW5kZXIiLCJfdGhpcyIsImdsb2JhbE5vdGlmaWNhdGlvbnMiLCJwcm9wcyIsIm5vdGlmaWNhdGlvbnMiLCJmaWx0ZXIiLCJ0b3BpYyIsIkRFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDUyIsImdsb2JhbCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJsZW5ndGgiLCJtYXAiLCJpZCIsIm5vdGlmaWNhdGlvbiIsInJlbW92ZU5vdGlmaWNhdGlvbiIsIkNvbXBvbmVudCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJOb3RpZmljYXRpb25QYW5lbCIsIm1lbW8iXSwic291cmNlcyI6WyIuLi9zcmMvbm90aWZpY2F0aW9uLXBhbmVsLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgTm90aWZpY2F0aW9uSXRlbUZhY3RvcnkgZnJvbSAnLi9ub3RpZmljYXRpb24tcGFuZWwvbm90aWZpY2F0aW9uLWl0ZW0nO1xuaW1wb3J0IHtERUZBVUxUX05PVElGSUNBVElPTl9UT1BJQ1N9IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7Tm90aWZpY2F0aW9uc30gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge3JlbW92ZU5vdGlmaWNhdGlvbn0gZnJvbSAnQGtlcGxlci5nbC9hY3Rpb25zJztcblxuY29uc3QgTm90aWZpY2F0aW9uUGFuZWxDb250ZW50ID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbiAgcGFkZGluZzogNHB4O1xuICBvdmVyZmxvdy15OiBhdXRvO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxZW07XG4gIHJpZ2h0OiAxZW07XG4gIHotaW5kZXg6IDEwMDAwO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuYDtcblxuTm90aWZpY2F0aW9uUGFuZWxGYWN0b3J5LmRlcHMgPSBbTm90aWZpY2F0aW9uSXRlbUZhY3RvcnldO1xuXG5pbnRlcmZhY2UgTm90aWZpY2F0aW9uUGFuZWxQcm9wcyB7XG4gIHJlbW92ZU5vdGlmaWNhdGlvbj86IHR5cGVvZiByZW1vdmVOb3RpZmljYXRpb247XG4gIG5vdGlmaWNhdGlvbnM6IE5vdGlmaWNhdGlvbnNbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm90aWZpY2F0aW9uUGFuZWxGYWN0b3J5KFxuICBOb3RpZmljYXRpb25JdGVtOiBSZXR1cm5UeXBlPHR5cGVvZiBOb3RpZmljYXRpb25JdGVtRmFjdG9yeT5cbik6IFJlYWN0LkNvbXBvbmVudENsYXNzPE5vdGlmaWNhdGlvblBhbmVsUHJvcHM+IHtcbiAgY2xhc3MgTm90aWZpY2F0aW9uUGFuZWxVbm1lbW9pemVkIGV4dGVuZHMgQ29tcG9uZW50PE5vdGlmaWNhdGlvblBhbmVsUHJvcHM+IHtcbiAgICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnTm90aWZpY2F0aW9uUGFuZWwnO1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3QgZ2xvYmFsTm90aWZpY2F0aW9ucyA9IHRoaXMucHJvcHMubm90aWZpY2F0aW9ucy5maWx0ZXIoXG4gICAgICAgIG4gPT4gbi50b3BpYyA9PT0gREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTLmdsb2JhbFxuICAgICAgKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxOb3RpZmljYXRpb25QYW5lbENvbnRlbnRcbiAgICAgICAgICBjbGFzc05hbWU9XCJub3RpZmljYXRpb24tcGFuZWxcIlxuICAgICAgICAgIHN0eWxlPXt7ZGlzcGxheTogZ2xvYmFsTm90aWZpY2F0aW9ucy5sZW5ndGggPyAnYmxvY2snIDogJ25vbmUnfX1cbiAgICAgICAgPlxuICAgICAgICAgIHtnbG9iYWxOb3RpZmljYXRpb25zLm1hcChuID0+IChcbiAgICAgICAgICAgIDxOb3RpZmljYXRpb25JdGVtXG4gICAgICAgICAgICAgIGtleT17bi5pZH1cbiAgICAgICAgICAgICAgbm90aWZpY2F0aW9uPXtufVxuICAgICAgICAgICAgICByZW1vdmVOb3RpZmljYXRpb249e3RoaXMucHJvcHMucmVtb3ZlTm90aWZpY2F0aW9ufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9Ob3RpZmljYXRpb25QYW5lbENvbnRlbnQ+XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IE5vdGlmaWNhdGlvblBhbmVsID0gUmVhY3QubWVtbyhcbiAgICBOb3RpZmljYXRpb25QYW5lbFVubWVtb2l6ZWRcbiAgKSBhcyB1bmtub3duIGFzIHR5cGVvZiBOb3RpZmljYXRpb25QYW5lbFVubWVtb2l6ZWQ7XG4gIHJldHVybiBOb3RpZmljYXRpb25QYW5lbDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsaUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUVBLElBQUFHLGlCQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSSxVQUFBLEdBQUFKLE9BQUE7QUFBaUUsSUFBQUssZUFBQSxFQVBqRTtBQUNBO0FBQUEsU0FBQUMseUJBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQTtFQUFBLElBQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQTtJQUFBLE9BQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBO0VBQUEsR0FBQUYsQ0FBQTtBQUFBO0FBQUEsU0FBQVIsd0JBQUFRLENBQUEsRUFBQUUsQ0FBQTtFQUFBLEtBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQTtFQUFBLGFBQUFBLENBQUEsZ0JBQUFLLE9BQUEsQ0FBQUwsQ0FBQSwwQkFBQUEsQ0FBQTtJQUFBLFdBQUFBO0VBQUE7RUFBQSxJQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUE7RUFBQSxJQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBO0VBQUEsSUFBQVEsQ0FBQTtNQUFBQyxTQUFBO0lBQUE7SUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQTtFQUFBLFNBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQTtJQUFBLElBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQTtJQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUE7RUFBQTtFQUFBLE9BQUFOLENBQUEsY0FBQVIsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFBQTtBQUFBLFNBQUFXLFdBQUFoQixDQUFBLEVBQUFpQixDQUFBLEVBQUFwQixDQUFBO0VBQUEsT0FBQW9CLENBQUEsT0FBQUMsZ0JBQUEsYUFBQUQsQ0FBQSxPQUFBRSwyQkFBQSxhQUFBbkIsQ0FBQSxFQUFBb0IseUJBQUEsS0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFMLENBQUEsRUFBQXBCLENBQUEsWUFBQXFCLGdCQUFBLGFBQUFsQixDQUFBLEVBQUF1QixXQUFBLElBQUFOLENBQUEsQ0FBQU8sS0FBQSxDQUFBeEIsQ0FBQSxFQUFBSCxDQUFBO0FBQUE7QUFBQSxTQUFBdUIsMEJBQUE7RUFBQTtJQUFBLElBQUFwQixDQUFBLElBQUF5QixPQUFBLENBQUFDLFNBQUEsQ0FBQUMsT0FBQSxDQUFBZCxJQUFBLENBQUFRLE9BQUEsQ0FBQUMsU0FBQSxDQUFBRyxPQUFBO0VBQUEsU0FBQXpCLENBQUE7RUFBQSxRQUFBb0IseUJBQUEsWUFBQUEsMEJBQUE7SUFBQSxTQUFBcEIsQ0FBQTtFQUFBO0FBQUE7QUFVQSxJQUFNNEIsd0JBQXdCLEdBQUdyQyxpQkFBQSxXQUFNLENBQUNzQyxHQUFHLENBQUFsQyxlQUFBLEtBQUFBLGVBQUEsT0FBQW1DLHVCQUFBLHVSQWExQztBQUVEQyx3QkFBd0IsQ0FBQ0MsSUFBSSxHQUFHLENBQUN2QyxpQkFBQSxXQUF1QixDQUFDO0FBTzFDLFNBQVNzQyx3QkFBd0JBLENBQzlDRSxnQkFBNEQsRUFDZDtFQUFBLElBQ3hDQywyQkFBMkIsMEJBQUFDLFVBQUE7SUFBQSxTQUFBRCw0QkFBQTtNQUFBLElBQUFFLGdCQUFBLG1CQUFBRiwyQkFBQTtNQUFBLE9BQUFsQixVQUFBLE9BQUFrQiwyQkFBQSxFQUFBRyxTQUFBO0lBQUE7SUFBQSxJQUFBQyxVQUFBLGFBQUFKLDJCQUFBLEVBQUFDLFVBQUE7SUFBQSxXQUFBSSxhQUFBLGFBQUFMLDJCQUFBO01BQUFNLEdBQUE7TUFBQUMsS0FBQSxFQUcvQixTQUFBQyxNQUFNQSxDQUFBLEVBQUc7UUFBQSxJQUFBQyxLQUFBO1FBQ1AsSUFBTUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDQyxLQUFLLENBQUNDLGFBQWEsQ0FBQ0MsTUFBTSxDQUN6RCxVQUFBMUMsQ0FBQztVQUFBLE9BQUlBLENBQUMsQ0FBQzJDLEtBQUssS0FBS3RELFVBQUEsQ0FBQXVELDJCQUEyQixDQUFDQyxNQUFNO1FBQUEsQ0FDckQsQ0FBQztRQUNELG9CQUNFOUQsTUFBQSxZQUFBK0QsYUFBQSxDQUFDdkIsd0JBQXdCO1VBQ3ZCd0IsU0FBUyxFQUFDLG9CQUFvQjtVQUM5QkMsS0FBSyxFQUFFO1lBQUNDLE9BQU8sRUFBRVYsbUJBQW1CLENBQUNXLE1BQU0sR0FBRyxPQUFPLEdBQUc7VUFBTTtRQUFFLEdBRS9EWCxtQkFBbUIsQ0FBQ1ksR0FBRyxDQUFDLFVBQUFuRCxDQUFDO1VBQUEsb0JBQ3hCakIsTUFBQSxZQUFBK0QsYUFBQSxDQUFDbEIsZ0JBQWdCO1lBQ2ZPLEdBQUcsRUFBRW5DLENBQUMsQ0FBQ29ELEVBQUc7WUFDVkMsWUFBWSxFQUFFckQsQ0FBRTtZQUNoQnNELGtCQUFrQixFQUFFaEIsS0FBSSxDQUFDRSxLQUFLLENBQUNjO1VBQW1CLENBQ25ELENBQUM7UUFBQSxDQUNILENBQ3VCLENBQUM7TUFFL0I7SUFBQztFQUFBLEVBckJ1Q3ZFLE1BQUEsQ0FBQXdFLFNBQVM7RUFBQSxJQUFBQyxnQkFBQSxhQUE3QzNCLDJCQUEyQixpQkFDVixtQkFBbUI7RUF1QjFDLElBQU00QixpQkFBaUIsZ0JBQUcxRSxNQUFBLFdBQUssQ0FBQzJFLElBQUksQ0FDbEM3QiwyQkFDRixDQUFrRDtFQUNsRCxPQUFPNEIsaUJBQWlCO0FBQzFCIiwiaWdub3JlTGlzdCI6W119