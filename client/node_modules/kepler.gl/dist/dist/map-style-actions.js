"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setBackgroundColor = exports.set3dBuildingColor = exports.requestMapStyles = exports.removeCustomMapStyle = exports.mapStyleChange = exports.mapConfigChange = exports.loadMapStyles = exports.loadMapStyleErr = exports.loadCustomMapStyle = exports.inputMapStyle = exports.editCustomMapStyle = exports.addCustomMapStyle = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _actionTypes = _interopRequireDefault(require("./action-types"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 * Add map style from user input to reducer and set it to current style
 * This action is called when user click confirm after putting in a valid style url in the custom map style dialog.
 * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.
 * param {void}
 * @memberof mapStyleActions
 * @public
 */
var addCustomMapStyle = exports.addCustomMapStyle = (0, _toolkit.createAction)(_actionTypes["default"].ADD_CUSTOM_MAP_STYLE);
/**
 * Edit map style from user input to reducer.
 * This action is called when user clicks confirm after editing an existing custom style in the custom map style dialog.
 * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.
 * param {void}
 * @memberof mapStyleActions
 * @public
 */
var editCustomMapStyle = exports.editCustomMapStyle = (0, _toolkit.createAction)(_actionTypes["default"].EDIT_CUSTOM_MAP_STYLE);

/**
 * Remove a custom map style from `state.mapStyle.mapStyles`.
 * @param id
 * @memberof mapStyleActions
 * @public
 */
var removeCustomMapStyle = exports.removeCustomMapStyle = (0, _toolkit.createAction)(_actionTypes["default"].REMOVE_CUSTOM_MAP_STYLE, function (_ref) {
  var id = _ref.id;
  return {
    payload: {
      id: id
    }
  };
});

/** INPUT_MAP_STYLE */

/**
 * Input a custom map style object
 * @memberof mapStyleActions
 * @param inputStyle
 * @param inputStyle.url - style url e.g. `'mapbox://styles/heshan/xxxxxyyyyzzz'`
 * @param inputStyle.id - style id e.g. `'custom_style_1'`
 * @param inputStyle.style - actual mapbox style json
 * @param inputStyle.label - style name
 * @param inputStyle.accessToken - mapbox access token
 * @param inputStyle.icon - icon image data url
 * @param [mapState] - mapState is optional
 * @public
 */
var inputMapStyle = exports.inputMapStyle = (0, _toolkit.createAction)(_actionTypes["default"].INPUT_MAP_STYLE, function (inputStyle, mapState) {
  return {
    payload: {
      inputStyle: inputStyle,
      mapState: mapState
    }
  };
});

/** MAP_CONFIG_CHANGE */

/**
 * Update `visibleLayerGroups`to change layer group visibility
 * @memberof mapStyleActions
 * @param mapStyle new config `{visibleLayerGroups: {label: false, road: true, background: true}}`
 * @public
 */
var mapConfigChange = exports.mapConfigChange = (0, _toolkit.createAction)(_actionTypes["default"].MAP_CONFIG_CHANGE, function (mapStyle) {
  return {
    payload: mapStyle
  };
});

/** REQUEST_MAP_STYLES */

/**
 * Request map style style object based on style.url.
 * @memberof mapStyleActions
 * @public
 */
var requestMapStyles = exports.requestMapStyles = (0, _toolkit.createAction)(_actionTypes["default"].REQUEST_MAP_STYLES, function (mapStyles, onSuccess) {
  return {
    payload: {
      mapStyles: mapStyles,
      onSuccess: onSuccess
    }
  };
});

/** LOAD_MAP_STYLES */

/**
 * Callback when load map style success
 * @memberof mapStyleActions
 * @param newStyles a `{[id]: style}` mapping
 * @public
 */
var loadMapStyles = exports.loadMapStyles = (0, _toolkit.createAction)(_actionTypes["default"].LOAD_MAP_STYLES, function (newStyles, onSuccess) {
  return {
    payload: {
      newStyles: newStyles,
      onSuccess: onSuccess
    }
  };
});

/** LOAD_MAP_STYLE_ERR */

/**
 * Callback when load map style error
 * @memberof mapStyleActions
 * @param ids
 * @param error
 * @public
 */
var loadMapStyleErr = exports.loadMapStyleErr = (0, _toolkit.createAction)(_actionTypes["default"].LOAD_MAP_STYLE_ERR, function (ids, error) {
  return {
    payload: {
      ids: ids,
      error: error
    }
  };
});

/** MAP_STYLE_CHANGE */

/**
 * Change to another map style. The selected style should already been loaded into `mapStyle.mapStyles`
 * @memberof mapStyleActions
 * @param styleType the style to change to
 * @param onSuccess optional success callback function when an asynchronous basemap syle has loaded
 * @public
 */
var mapStyleChange = exports.mapStyleChange = (0, _toolkit.createAction)(_actionTypes["default"].MAP_STYLE_CHANGE, function (styleType, onSuccess) {
  return {
    payload: {
      styleType: styleType,
      onSuccess: onSuccess
    }
  };
});

/** LOAD_CUSTOM_MAP_STYLE */

/**
 * Callback when a custom map style object is received
 * @memberof mapStyleActions
 * @param customMapStyle
 * @param customMapStyle.icon
 * @param customMapStyle.style
 * @param customMapStyle.error
 * @public
 */
var loadCustomMapStyle = exports.loadCustomMapStyle = (0, _toolkit.createAction)(_actionTypes["default"].LOAD_CUSTOM_MAP_STYLE, function (customMapStyle) {
  return {
    payload: customMapStyle
  };
});

/** SET_3D_BUILDING_COLOR */

// SET_3D_BUILDING_COLOR
/**
 * Set 3d building layer group color
 * @memberof mapStyleActions
 * @param color - [r, g, b]
 * @public
 */
var set3dBuildingColor = exports.set3dBuildingColor = (0, _toolkit.createAction)(_actionTypes["default"].SET_3D_BUILDING_COLOR, function (color) {
  return {
    payload: color
  };
});

/** SET_BACKGROUND_COLOR */

/**
 * Set background color
 * @memberof mapStyleActions
 * @param color - [r, g, b]
 * @public
 */
var setBackgroundColor = exports.setBackgroundColor = (0, _toolkit.createAction)(_actionTypes["default"].SET_BACKGROUND_COLOR, function (color) {
  return {
    payload: color
  };
});

/**
 * Actions handled mostly by  `mapStyle` reducer.
 * They manage the display of base map, such as loading and receiving base map styles,
 * hiding and showing map layers, user input of custom map style url.
 *
 * @public
 */
/* eslint-disable @typescript-eslint/no-unused-vars */
// @ts-ignore
var mapStyleActions = null;
/* eslint-enable @typescript-eslint/no-unused-vars */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9vbGtpdCIsInJlcXVpcmUiLCJfYWN0aW9uVHlwZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiYWRkQ3VzdG9tTWFwU3R5bGUiLCJleHBvcnRzIiwiY3JlYXRlQWN0aW9uIiwiQUREX0NVU1RPTV9NQVBfU1RZTEUiLCJlZGl0Q3VzdG9tTWFwU3R5bGUiLCJFRElUX0NVU1RPTV9NQVBfU1RZTEUiLCJyZW1vdmVDdXN0b21NYXBTdHlsZSIsIlJFTU9WRV9DVVNUT01fTUFQX1NUWUxFIiwiX3JlZiIsImlkIiwicGF5bG9hZCIsImlucHV0TWFwU3R5bGUiLCJJTlBVVF9NQVBfU1RZTEUiLCJpbnB1dFN0eWxlIiwibWFwU3RhdGUiLCJtYXBDb25maWdDaGFuZ2UiLCJNQVBfQ09ORklHX0NIQU5HRSIsIm1hcFN0eWxlIiwicmVxdWVzdE1hcFN0eWxlcyIsIlJFUVVFU1RfTUFQX1NUWUxFUyIsIm1hcFN0eWxlcyIsIm9uU3VjY2VzcyIsImxvYWRNYXBTdHlsZXMiLCJMT0FEX01BUF9TVFlMRVMiLCJuZXdTdHlsZXMiLCJsb2FkTWFwU3R5bGVFcnIiLCJMT0FEX01BUF9TVFlMRV9FUlIiLCJpZHMiLCJlcnJvciIsIm1hcFN0eWxlQ2hhbmdlIiwiTUFQX1NUWUxFX0NIQU5HRSIsInN0eWxlVHlwZSIsImxvYWRDdXN0b21NYXBTdHlsZSIsIkxPQURfQ1VTVE9NX01BUF9TVFlMRSIsImN1c3RvbU1hcFN0eWxlIiwic2V0M2RCdWlsZGluZ0NvbG9yIiwiU0VUXzNEX0JVSUxESU5HX0NPTE9SIiwiY29sb3IiLCJzZXRCYWNrZ3JvdW5kQ29sb3IiLCJTRVRfQkFDS0dST1VORF9DT0xPUiIsIm1hcFN0eWxlQWN0aW9ucyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9tYXAtc3R5bGUtYWN0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge2NyZWF0ZUFjdGlvbn0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XG5pbXBvcnQge2RlZmF1bHQgYXMgQWN0aW9uVHlwZXN9IGZyb20gJy4vYWN0aW9uLXR5cGVzJztcbmltcG9ydCB7XG4gIElucHV0U3R5bGUsXG4gIE1hcFN0eWxlcyxcbiAgTWVyZ2UsXG4gIFJHQkNvbG9yLFxuICBNYXBTdGF0ZSxcbiAgVmlzaWJsZUxheWVyR3JvdXBzLFxuICBMYXllckdyb3VwXG59IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuXG4vKipcbiAqIEFkZCBtYXAgc3R5bGUgZnJvbSB1c2VyIGlucHV0IHRvIHJlZHVjZXIgYW5kIHNldCBpdCB0byBjdXJyZW50IHN0eWxlXG4gKiBUaGlzIGFjdGlvbiBpcyBjYWxsZWQgd2hlbiB1c2VyIGNsaWNrIGNvbmZpcm0gYWZ0ZXIgcHV0dGluZyBpbiBhIHZhbGlkIHN0eWxlIHVybCBpbiB0aGUgY3VzdG9tIG1hcCBzdHlsZSBkaWFsb2cuXG4gKiBJdCBzaG91bGQgbm90IGJlIGNhbGxlZCBmcm9tIG91dHNpZGUga2VwbGVyLmdsIHdpdGhvdXQgYSB2YWxpZCBgaW5wdXRTdHlsZWAgaW4gdGhlIGBtYXBTdHlsZWAgcmVkdWNlci5cbiAqIHBhcmFtIHt2b2lkfVxuICogQG1lbWJlcm9mIG1hcFN0eWxlQWN0aW9uc1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgYWRkQ3VzdG9tTWFwU3R5bGU6ICgpID0+IHtcbiAgdHlwZTogdHlwZW9mIEFjdGlvblR5cGVzLkFERF9DVVNUT01fTUFQX1NUWUxFO1xufSA9IGNyZWF0ZUFjdGlvbihBY3Rpb25UeXBlcy5BRERfQ1VTVE9NX01BUF9TVFlMRSk7XG5cbmV4cG9ydCB0eXBlIFJlbW92ZUN1c3RvbU1hcFN0eWxlVXBkYXRlckFjdGlvbiA9IHtcbiAgcGF5bG9hZDoge1xuICAgIGlkOiBzdHJpbmc7XG4gIH07XG59O1xuXG4vKipcbiAqIEVkaXQgbWFwIHN0eWxlIGZyb20gdXNlciBpbnB1dCB0byByZWR1Y2VyLlxuICogVGhpcyBhY3Rpb24gaXMgY2FsbGVkIHdoZW4gdXNlciBjbGlja3MgY29uZmlybSBhZnRlciBlZGl0aW5nIGFuIGV4aXN0aW5nIGN1c3RvbSBzdHlsZSBpbiB0aGUgY3VzdG9tIG1hcCBzdHlsZSBkaWFsb2cuXG4gKiBJdCBzaG91bGQgbm90IGJlIGNhbGxlZCBmcm9tIG91dHNpZGUga2VwbGVyLmdsIHdpdGhvdXQgYSB2YWxpZCBgaW5wdXRTdHlsZWAgaW4gdGhlIGBtYXBTdHlsZWAgcmVkdWNlci5cbiAqIHBhcmFtIHt2b2lkfVxuICogQG1lbWJlcm9mIG1hcFN0eWxlQWN0aW9uc1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgZWRpdEN1c3RvbU1hcFN0eWxlOiAoKSA9PiB7XG4gIHR5cGU6IHR5cGVvZiBBY3Rpb25UeXBlcy5FRElUX0NVU1RPTV9NQVBfU1RZTEU7XG59ID0gY3JlYXRlQWN0aW9uKEFjdGlvblR5cGVzLkVESVRfQ1VTVE9NX01BUF9TVFlMRSk7XG5cbi8qKlxuICogUmVtb3ZlIGEgY3VzdG9tIG1hcCBzdHlsZSBmcm9tIGBzdGF0ZS5tYXBTdHlsZS5tYXBTdHlsZXNgLlxuICogQHBhcmFtIGlkXG4gKiBAbWVtYmVyb2YgbWFwU3R5bGVBY3Rpb25zXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVDdXN0b21NYXBTdHlsZTogKHtcbiAgaWRcbn06IFJlbW92ZUN1c3RvbU1hcFN0eWxlVXBkYXRlckFjdGlvblsncGF5bG9hZCddKSA9PiBNZXJnZTxcbiAgUmVtb3ZlQ3VzdG9tTWFwU3R5bGVVcGRhdGVyQWN0aW9uLFxuICB7dHlwZTogdHlwZW9mIEFjdGlvblR5cGVzLlJFTU9WRV9DVVNUT01fTUFQX1NUWUxFfVxuPiA9IGNyZWF0ZUFjdGlvbihBY3Rpb25UeXBlcy5SRU1PVkVfQ1VTVE9NX01BUF9TVFlMRSwgKHtpZH0pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBwYXlsb2FkOiB7XG4gICAgICBpZFxuICAgIH1cbiAgfTtcbn0pO1xuXG4vKiogSU5QVVRfTUFQX1NUWUxFICovXG5leHBvcnQgdHlwZSBJbnB1dE1hcFN0eWxlVXBkYXRlckFjdGlvbiA9IHtcbiAgcGF5bG9hZDoge1xuICAgIGlucHV0U3R5bGU6IFBhcnRpYWw8SW5wdXRTdHlsZT47XG4gICAgbWFwU3RhdGU/OiBNYXBTdGF0ZTtcbiAgfTtcbn07XG4vKipcbiAqIElucHV0IGEgY3VzdG9tIG1hcCBzdHlsZSBvYmplY3RcbiAqIEBtZW1iZXJvZiBtYXBTdHlsZUFjdGlvbnNcbiAqIEBwYXJhbSBpbnB1dFN0eWxlXG4gKiBAcGFyYW0gaW5wdXRTdHlsZS51cmwgLSBzdHlsZSB1cmwgZS5nLiBgJ21hcGJveDovL3N0eWxlcy9oZXNoYW4veHh4eHh5eXl5enp6J2BcbiAqIEBwYXJhbSBpbnB1dFN0eWxlLmlkIC0gc3R5bGUgaWQgZS5nLiBgJ2N1c3RvbV9zdHlsZV8xJ2BcbiAqIEBwYXJhbSBpbnB1dFN0eWxlLnN0eWxlIC0gYWN0dWFsIG1hcGJveCBzdHlsZSBqc29uXG4gKiBAcGFyYW0gaW5wdXRTdHlsZS5sYWJlbCAtIHN0eWxlIG5hbWVcbiAqIEBwYXJhbSBpbnB1dFN0eWxlLmFjY2Vzc1Rva2VuIC0gbWFwYm94IGFjY2VzcyB0b2tlblxuICogQHBhcmFtIGlucHV0U3R5bGUuaWNvbiAtIGljb24gaW1hZ2UgZGF0YSB1cmxcbiAqIEBwYXJhbSBbbWFwU3RhdGVdIC0gbWFwU3RhdGUgaXMgb3B0aW9uYWxcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGlucHV0TWFwU3R5bGU6IChcbiAgaW5wdXRTdHlsZTogSW5wdXRNYXBTdHlsZVVwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXVsnaW5wdXRTdHlsZSddLFxuICBtYXBTdGF0ZT86IElucHV0TWFwU3R5bGVVcGRhdGVyQWN0aW9uWydwYXlsb2FkJ11bJ21hcFN0YXRlJ11cbikgPT4gTWVyZ2U8SW5wdXRNYXBTdHlsZVVwZGF0ZXJBY3Rpb24sIHt0eXBlOiB0eXBlb2YgQWN0aW9uVHlwZXMuSU5QVVRfTUFQX1NUWUxFfT4gPSBjcmVhdGVBY3Rpb24oXG4gIEFjdGlvblR5cGVzLklOUFVUX01BUF9TVFlMRSxcbiAgKFxuICAgIGlucHV0U3R5bGU6IElucHV0TWFwU3R5bGVVcGRhdGVyQWN0aW9uWydwYXlsb2FkJ11bJ2lucHV0U3R5bGUnXSxcbiAgICBtYXBTdGF0ZTogSW5wdXRNYXBTdHlsZVVwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXVsnbWFwU3RhdGUnXVxuICApID0+ICh7XG4gICAgcGF5bG9hZDoge1xuICAgICAgaW5wdXRTdHlsZSxcbiAgICAgIG1hcFN0YXRlXG4gICAgfVxuICB9KVxuKTtcblxuLyoqIE1BUF9DT05GSUdfQ0hBTkdFICovXG5leHBvcnQgdHlwZSBNYXBDb25maWdDaGFuZ2VVcGRhdGVyQWN0aW9uID0ge1xuICBwYXlsb2FkOiB7XG4gICAgdmlzaWJsZUxheWVyR3JvdXBzPzogVmlzaWJsZUxheWVyR3JvdXBzO1xuICAgIHRvcExheWVyR3JvdXBzPzogVmlzaWJsZUxheWVyR3JvdXBzO1xuICB9O1xufTtcbi8qKlxuICogVXBkYXRlIGB2aXNpYmxlTGF5ZXJHcm91cHNgdG8gY2hhbmdlIGxheWVyIGdyb3VwIHZpc2liaWxpdHlcbiAqIEBtZW1iZXJvZiBtYXBTdHlsZUFjdGlvbnNcbiAqIEBwYXJhbSBtYXBTdHlsZSBuZXcgY29uZmlnIGB7dmlzaWJsZUxheWVyR3JvdXBzOiB7bGFiZWw6IGZhbHNlLCByb2FkOiB0cnVlLCBiYWNrZ3JvdW5kOiB0cnVlfX1gXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBtYXBDb25maWdDaGFuZ2U6IChcbiAgbWFwU3R5bGU6IE1hcENvbmZpZ0NoYW5nZVVwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXVxuKSA9PiBNZXJnZTxNYXBDb25maWdDaGFuZ2VVcGRhdGVyQWN0aW9uLCB7dHlwZTogdHlwZW9mIEFjdGlvblR5cGVzLk1BUF9DT05GSUdfQ0hBTkdFfT4gPVxuICBjcmVhdGVBY3Rpb24oXG4gICAgQWN0aW9uVHlwZXMuTUFQX0NPTkZJR19DSEFOR0UsXG4gICAgKG1hcFN0eWxlOiBNYXBDb25maWdDaGFuZ2VVcGRhdGVyQWN0aW9uWydwYXlsb2FkJ10pID0+ICh7cGF5bG9hZDogbWFwU3R5bGV9KVxuICApO1xuXG50eXBlIE9uTG9hZE1hcFN0eWxlU3VjY2Vzc0NhbGxiYWNrID0gKHBheWxvYWQ6IHtzdHlsZVR5cGU6IHN0cmluZ30pID0+IGFueTtcblxuLyoqIFJFUVVFU1RfTUFQX1NUWUxFUyAqL1xuZXhwb3J0IHR5cGUgUmVxdWVzdE1hcFN0eWxlc1VwZGF0ZXJBY3Rpb24gPSB7XG4gIHBheWxvYWQ6IHtcbiAgICBtYXBTdHlsZXM6IHtcbiAgICAgIFtrZXk6IHN0cmluZ106IHtcbiAgICAgICAgaWQ6IHN0cmluZztcbiAgICAgICAgbGFiZWw/OiBzdHJpbmc7XG4gICAgICAgIHVybDogc3RyaW5nO1xuICAgICAgICBpY29uPzogc3RyaW5nO1xuICAgICAgICBsYXllckdyb3Vwcz86IExheWVyR3JvdXBbXTtcbiAgICAgIH07XG4gICAgfTtcbiAgICBvblN1Y2Nlc3M/OiBPbkxvYWRNYXBTdHlsZVN1Y2Nlc3NDYWxsYmFjaztcbiAgfTtcbn07XG4vKipcbiAqIFJlcXVlc3QgbWFwIHN0eWxlIHN0eWxlIG9iamVjdCBiYXNlZCBvbiBzdHlsZS51cmwuXG4gKiBAbWVtYmVyb2YgbWFwU3R5bGVBY3Rpb25zXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCByZXF1ZXN0TWFwU3R5bGVzOiAoXG4gIG1hcFN0eWxlczogUmVxdWVzdE1hcFN0eWxlc1VwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXVsnbWFwU3R5bGVzJ10sXG4gIG9uU3VjY2Vzcz86IFJlcXVlc3RNYXBTdHlsZXNVcGRhdGVyQWN0aW9uWydwYXlsb2FkJ11bJ29uU3VjY2VzcyddXG4pID0+IE1lcmdlPFJlcXVlc3RNYXBTdHlsZXNVcGRhdGVyQWN0aW9uLCB7dHlwZTogdHlwZW9mIEFjdGlvblR5cGVzLlJFUVVFU1RfTUFQX1NUWUxFU30+ID1cbiAgY3JlYXRlQWN0aW9uKFxuICAgIEFjdGlvblR5cGVzLlJFUVVFU1RfTUFQX1NUWUxFUyxcbiAgICAoXG4gICAgICBtYXBTdHlsZXM6IFJlcXVlc3RNYXBTdHlsZXNVcGRhdGVyQWN0aW9uWydwYXlsb2FkJ11bJ21hcFN0eWxlcyddLFxuICAgICAgb25TdWNjZXNzPzogUmVxdWVzdE1hcFN0eWxlc1VwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXVsnb25TdWNjZXNzJ11cbiAgICApID0+ICh7cGF5bG9hZDoge21hcFN0eWxlcywgb25TdWNjZXNzfX0pXG4gICk7XG5cbi8qKiBMT0FEX01BUF9TVFlMRVMgKi9cbmV4cG9ydCB0eXBlIExvYWRNYXBTdHlsZXNVcGRhdGVyQWN0aW9uID0ge1xuICBwYXlsb2FkOiB7XG4gICAgbmV3U3R5bGVzOiBNYXBTdHlsZXM7XG4gICAgb25TdWNjZXNzPzogT25Mb2FkTWFwU3R5bGVTdWNjZXNzQ2FsbGJhY2s7XG4gIH07XG59O1xuLyoqXG4gKiBDYWxsYmFjayB3aGVuIGxvYWQgbWFwIHN0eWxlIHN1Y2Nlc3NcbiAqIEBtZW1iZXJvZiBtYXBTdHlsZUFjdGlvbnNcbiAqIEBwYXJhbSBuZXdTdHlsZXMgYSBge1tpZF06IHN0eWxlfWAgbWFwcGluZ1xuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgbG9hZE1hcFN0eWxlczogKFxuICBuZXdTdHlsZXM6IExvYWRNYXBTdHlsZXNVcGRhdGVyQWN0aW9uWydwYXlsb2FkJ11bJ25ld1N0eWxlcyddLFxuICBvblN1Y2Nlc3M/OiBMb2FkTWFwU3R5bGVzVXBkYXRlckFjdGlvblsncGF5bG9hZCddWydvblN1Y2Nlc3MnXVxuKSA9PiBNZXJnZTxMb2FkTWFwU3R5bGVzVXBkYXRlckFjdGlvbiwge3R5cGU6IHR5cGVvZiBBY3Rpb25UeXBlcy5MT0FEX01BUF9TVFlMRVN9PiA9IGNyZWF0ZUFjdGlvbihcbiAgQWN0aW9uVHlwZXMuTE9BRF9NQVBfU1RZTEVTLFxuICAoXG4gICAgbmV3U3R5bGVzOiBMb2FkTWFwU3R5bGVzVXBkYXRlckFjdGlvblsncGF5bG9hZCddWyduZXdTdHlsZXMnXSxcbiAgICBvblN1Y2Nlc3M/OiBMb2FkTWFwU3R5bGVzVXBkYXRlckFjdGlvblsncGF5bG9hZCddWydvblN1Y2Nlc3MnXVxuICApID0+ICh7cGF5bG9hZDoge25ld1N0eWxlcywgb25TdWNjZXNzfX0pXG4pO1xuXG4vKiogTE9BRF9NQVBfU1RZTEVfRVJSICovXG5leHBvcnQgdHlwZSBMb2FkTWFwU3R5bGVFcnJVcGRhdGVyQWN0aW9uID0ge1xuICBwYXlsb2FkOiB7XG4gICAgaWRzOiBzdHJpbmdbXTtcbiAgICBlcnJvcjogRXJyb3I7XG4gIH07XG59O1xuLyoqXG4gKiBDYWxsYmFjayB3aGVuIGxvYWQgbWFwIHN0eWxlIGVycm9yXG4gKiBAbWVtYmVyb2YgbWFwU3R5bGVBY3Rpb25zXG4gKiBAcGFyYW0gaWRzXG4gKiBAcGFyYW0gZXJyb3JcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGxvYWRNYXBTdHlsZUVycjogKFxuICBpZHM6IExvYWRNYXBTdHlsZUVyclVwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXVsnaWRzJ10sXG4gIGVycm9yOiBMb2FkTWFwU3R5bGVFcnJVcGRhdGVyQWN0aW9uWydwYXlsb2FkJ11bJ2Vycm9yJ11cbikgPT4gTWVyZ2U8TG9hZE1hcFN0eWxlRXJyVXBkYXRlckFjdGlvbiwge3R5cGU6IHR5cGVvZiBBY3Rpb25UeXBlcy5MT0FEX01BUF9TVFlMRV9FUlJ9PiA9XG4gIGNyZWF0ZUFjdGlvbihcbiAgICBBY3Rpb25UeXBlcy5MT0FEX01BUF9TVFlMRV9FUlIsXG4gICAgKFxuICAgICAgaWRzOiBMb2FkTWFwU3R5bGVFcnJVcGRhdGVyQWN0aW9uWydwYXlsb2FkJ11bJ2lkcyddLFxuICAgICAgZXJyb3I6IExvYWRNYXBTdHlsZUVyclVwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXVsnZXJyb3InXVxuICAgICkgPT4gKHtwYXlsb2FkOiB7aWRzLCBlcnJvcn19KVxuICApO1xuXG4vKiogTUFQX1NUWUxFX0NIQU5HRSAqL1xuZXhwb3J0IHR5cGUgTWFwU3R5bGVDaGFuZ2VVcGRhdGVyQWN0aW9uID0ge1xuICBwYXlsb2FkOiB7XG4gICAgc3R5bGVUeXBlOiBzdHJpbmc7XG4gICAgb25TdWNjZXNzPzogT25Mb2FkTWFwU3R5bGVTdWNjZXNzQ2FsbGJhY2s7XG4gIH07XG59O1xuLyoqXG4gKiBDaGFuZ2UgdG8gYW5vdGhlciBtYXAgc3R5bGUuIFRoZSBzZWxlY3RlZCBzdHlsZSBzaG91bGQgYWxyZWFkeSBiZWVuIGxvYWRlZCBpbnRvIGBtYXBTdHlsZS5tYXBTdHlsZXNgXG4gKiBAbWVtYmVyb2YgbWFwU3R5bGVBY3Rpb25zXG4gKiBAcGFyYW0gc3R5bGVUeXBlIHRoZSBzdHlsZSB0byBjaGFuZ2UgdG9cbiAqIEBwYXJhbSBvblN1Y2Nlc3Mgb3B0aW9uYWwgc3VjY2VzcyBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGFuIGFzeW5jaHJvbm91cyBiYXNlbWFwIHN5bGUgaGFzIGxvYWRlZFxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgbWFwU3R5bGVDaGFuZ2U6IChcbiAgc3R5bGVUeXBlOiBNYXBTdHlsZUNoYW5nZVVwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXVsnc3R5bGVUeXBlJ10sXG4gIG9uU3VjY2Vzcz86IE1hcFN0eWxlQ2hhbmdlVXBkYXRlckFjdGlvblsncGF5bG9hZCddWydvblN1Y2Nlc3MnXVxuKSA9PiBNZXJnZTxNYXBTdHlsZUNoYW5nZVVwZGF0ZXJBY3Rpb24sIHt0eXBlOiB0eXBlb2YgQWN0aW9uVHlwZXMuTUFQX1NUWUxFX0NIQU5HRX0+ID0gY3JlYXRlQWN0aW9uKFxuICBBY3Rpb25UeXBlcy5NQVBfU1RZTEVfQ0hBTkdFLFxuICAoXG4gICAgc3R5bGVUeXBlOiBNYXBTdHlsZUNoYW5nZVVwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXVsnc3R5bGVUeXBlJ10sXG4gICAgb25TdWNjZXNzPzogTWFwU3R5bGVDaGFuZ2VVcGRhdGVyQWN0aW9uWydwYXlsb2FkJ11bJ29uU3VjY2VzcyddXG4gICkgPT4gKHtwYXlsb2FkOiB7c3R5bGVUeXBlLCBvblN1Y2Nlc3N9fSlcbik7XG5cbi8qKiBMT0FEX0NVU1RPTV9NQVBfU1RZTEUgKi9cbmV4cG9ydCB0eXBlIExvYWRDdXN0b21NYXBTdHlsZVVwZGF0ZXJBY3Rpb24gPSB7XG4gIHBheWxvYWQ6IHtcbiAgICBpY29uPzogc3RyaW5nO1xuICAgIHN0eWxlPzogb2JqZWN0O1xuICAgIGVycm9yPzogb2JqZWN0IHwgYm9vbGVhbjtcbiAgfTtcbn07XG4vKipcbiAqIENhbGxiYWNrIHdoZW4gYSBjdXN0b20gbWFwIHN0eWxlIG9iamVjdCBpcyByZWNlaXZlZFxuICogQG1lbWJlcm9mIG1hcFN0eWxlQWN0aW9uc1xuICogQHBhcmFtIGN1c3RvbU1hcFN0eWxlXG4gKiBAcGFyYW0gY3VzdG9tTWFwU3R5bGUuaWNvblxuICogQHBhcmFtIGN1c3RvbU1hcFN0eWxlLnN0eWxlXG4gKiBAcGFyYW0gY3VzdG9tTWFwU3R5bGUuZXJyb3JcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGxvYWRDdXN0b21NYXBTdHlsZTogKFxuICBjdXN0b21NYXBTdHlsZTogTG9hZEN1c3RvbU1hcFN0eWxlVXBkYXRlckFjdGlvblsncGF5bG9hZCddXG4pID0+IE1lcmdlPExvYWRDdXN0b21NYXBTdHlsZVVwZGF0ZXJBY3Rpb24sIHt0eXBlOiB0eXBlb2YgQWN0aW9uVHlwZXMuTE9BRF9DVVNUT01fTUFQX1NUWUxFfT4gPVxuICBjcmVhdGVBY3Rpb24oXG4gICAgQWN0aW9uVHlwZXMuTE9BRF9DVVNUT01fTUFQX1NUWUxFLFxuICAgIChjdXN0b21NYXBTdHlsZTogTG9hZEN1c3RvbU1hcFN0eWxlVXBkYXRlckFjdGlvblsncGF5bG9hZCddKSA9PiAoe3BheWxvYWQ6IGN1c3RvbU1hcFN0eWxlfSlcbiAgKTtcblxuLyoqIFNFVF8zRF9CVUlMRElOR19DT0xPUiAqL1xuZXhwb3J0IHR5cGUgU2V0M2RCdWlsZGluZ0NvbG9yVXBkYXRlckFjdGlvbiA9IHtcbiAgcGF5bG9hZDogUkdCQ29sb3I7XG59O1xuLy8gU0VUXzNEX0JVSUxESU5HX0NPTE9SXG4vKipcbiAqIFNldCAzZCBidWlsZGluZyBsYXllciBncm91cCBjb2xvclxuICogQG1lbWJlcm9mIG1hcFN0eWxlQWN0aW9uc1xuICogQHBhcmFtIGNvbG9yIC0gW3IsIGcsIGJdXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBzZXQzZEJ1aWxkaW5nQ29sb3I6IChcbiAgY29sb3I6IFNldDNkQnVpbGRpbmdDb2xvclVwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXVxuKSA9PiBNZXJnZTxTZXQzZEJ1aWxkaW5nQ29sb3JVcGRhdGVyQWN0aW9uLCB7dHlwZTogdHlwZW9mIEFjdGlvblR5cGVzLlNFVF8zRF9CVUlMRElOR19DT0xPUn0+ID1cbiAgY3JlYXRlQWN0aW9uKFxuICAgIEFjdGlvblR5cGVzLlNFVF8zRF9CVUlMRElOR19DT0xPUixcbiAgICAoY29sb3I6IFNldDNkQnVpbGRpbmdDb2xvclVwZGF0ZXJBY3Rpb25bJ3BheWxvYWQnXSkgPT4gKHtwYXlsb2FkOiBjb2xvcn0pXG4gICk7XG5cbi8qKiBTRVRfQkFDS0dST1VORF9DT0xPUiAqL1xuZXhwb3J0IHR5cGUgU2V0QmFja2dyb3VuZENvbG9yVXBkYXRlckFjdGlvbiA9IHtcbiAgcGF5bG9hZDogUkdCQ29sb3I7XG59O1xuXG4vKipcbiAqIFNldCBiYWNrZ3JvdW5kIGNvbG9yXG4gKiBAbWVtYmVyb2YgbWFwU3R5bGVBY3Rpb25zXG4gKiBAcGFyYW0gY29sb3IgLSBbciwgZywgYl1cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHNldEJhY2tncm91bmRDb2xvcjogKFxuICBjb2xvcjogU2V0QmFja2dyb3VuZENvbG9yVXBkYXRlckFjdGlvblsncGF5bG9hZCddXG4pID0+IE1lcmdlPFNldEJhY2tncm91bmRDb2xvclVwZGF0ZXJBY3Rpb24sIHt0eXBlOiB0eXBlb2YgQWN0aW9uVHlwZXMuU0VUX0JBQ0tHUk9VTkRfQ09MT1J9PiA9XG4gIGNyZWF0ZUFjdGlvbihBY3Rpb25UeXBlcy5TRVRfQkFDS0dST1VORF9DT0xPUiwgKGNvbG9yOiBSR0JDb2xvcikgPT4gKHtwYXlsb2FkOiBjb2xvcn0pKTtcblxuLyoqXG4gKiBBY3Rpb25zIGhhbmRsZWQgbW9zdGx5IGJ5ICBgbWFwU3R5bGVgIHJlZHVjZXIuXG4gKiBUaGV5IG1hbmFnZSB0aGUgZGlzcGxheSBvZiBiYXNlIG1hcCwgc3VjaCBhcyBsb2FkaW5nIGFuZCByZWNlaXZpbmcgYmFzZSBtYXAgc3R5bGVzLFxuICogaGlkaW5nIGFuZCBzaG93aW5nIG1hcCBsYXllcnMsIHVzZXIgaW5wdXQgb2YgY3VzdG9tIG1hcCBzdHlsZSB1cmwuXG4gKlxuICogQHB1YmxpY1xuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IG1hcFN0eWxlQWN0aW9ucyA9IG51bGw7XG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBSkE7QUFDQTs7QUFjQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUcsaUJBRVosR0FBQUMsT0FBQSxDQUFBRCxpQkFBQSxHQUFHLElBQUFKLFFBQUEsQ0FBQU0sWUFBWSxFQUFDSixZQUFBLFdBQVcsQ0FBQ0ssb0JBQW9CLENBQUM7QUFRbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQU1DLGtCQUVaLEdBQUFILE9BQUEsQ0FBQUcsa0JBQUEsR0FBRyxJQUFBUixRQUFBLENBQUFNLFlBQVksRUFBQ0osWUFBQSxXQUFXLENBQUNPLHFCQUFxQixDQUFDOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFNQyxvQkFLWixHQUFBTCxPQUFBLENBQUFLLG9C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