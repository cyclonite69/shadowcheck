"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = ModalContainerFactory;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components");
var _get = _interopRequireDefault(require("lodash/get"));
var _document = _interopRequireDefault(require("global/document"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _reducers = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/reducers/src");
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _modalDialog = _interopRequireDefault(require("./modals/modal-dialog"));
var _deleteDataModal = _interopRequireDefault(require("./modals/delete-data-modal"));
var _overwriteMapModal = _interopRequireDefault(require("./modals/overwrite-map-modal"));
var _dataTableModal = _interopRequireDefault(require("./modals/data-table-modal"));
var _loadDataModal = _interopRequireDefault(require("./modals/load-data-modal"));
var _exportImageModal = _interopRequireDefault(require("./modals/export-image-modal"));
var _exportDataModal = _interopRequireDefault(require("./modals/export-data-modal"));
var _exportMapModal = _interopRequireDefault(require("./modals/export-map-modal/export-map-modal"));
var _addMapStyleModal = _interopRequireDefault(require("./modals/add-map-style-modal"));
var _saveMapModal = _interopRequireDefault(require("./modals/save-map-modal"));
var _shareMapModal = _interopRequireDefault(require("./modals/share-map-modal"));
var _styles = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/styles/src");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// modals
// Breakpoints
// Template
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _callSuper(t, o, e) {
  return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
}
var DataTableModalStyle = (0, _styledComponents.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  top: 70px;\n  padding: 0;\n  width: 90vw;\n  max-width: 90vw;\n\n  ", " ", ";\n"])), _styles.media.portable(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n    padding: 0;\n  "]))), _styles.media.palm(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n    padding: 0;\n    margin: 0 auto;\n  "]))));
var smallModalCss = (0, _styledComponents.css)(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 40%;\n  padding: 40px 40px 32px 40px;\n"])));
var LoadDataModalStyle = (0, _styledComponents.css)(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  top: 60px;\n"])));
var DefaultStyle = (0, _styledComponents.css)(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  max-width: 960px;\n"])));
ModalContainerFactory.deps = [_deleteDataModal["default"], _overwriteMapModal["default"], _dataTableModal["default"], _loadDataModal["default"], _exportImageModal["default"], _exportDataModal["default"], _exportMapModal["default"], _addMapStyleModal["default"], _modalDialog["default"], _saveMapModal["default"], _shareMapModal["default"]];
function ModalContainerFactory(DeleteDatasetModal, OverWriteMapModal, DataTableModal, LoadDataModal, ExportImageModal, ExportDataModal, ExportMapModal, AddMapStyleModal, ModalDialog, SaveMapModal, ShareMapModal) {
  /** @augments React.Component<ModalContainerProps> */
  var ModalContainer = /*#__PURE__*/function (_Component) {
    function ModalContainer() {
      var _this;
      (0, _classCallCheck2["default"])(this, ModalContainer);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, ModalContainer, [].concat(args));
      // TODO - remove when prop types are fully exported
      (0, _defineProperty2["default"])(_this, "componentDidMount", function () {
        _document["default"].addEventListener('keyup', _this._onKeyUp);
      });
      (0, _defineProperty2["default"])(_this, "_onKeyUp", function (event) {
        var keyCode = event.keyCode;
        if (keyCode === _constants.KeyEvent.DOM_VK_ESCAPE) {
          _this._closeModal();
        }
      });
      (0, _defineProperty2["default"])(_this, "_closeModal", function () {
        _this.props.uiStateActions.toggleModal(null);
      });
      (0, _defineProperty2["default"])(_this, "_deleteDataset", function (key) {
        _this.props.visStateActions.removeDataset(key);
        _this._closeModal();
      });
      (0, _defineProperty2["default"])(_this, "_onAddCustomMapStyle", function () {
        _this.props.mapStyleActions.addCustomMapStyle();
        _this._closeModal();
      });
      (0, _defineProperty2["default"])(_this, "_onFileUpload", function (fileList) {
        _this.props.visStateActions.loadFiles(fileList);
      });
      (0, _defineProperty2["default"])(_this, "_onTilesetAdded", function (tileset, processedMetadata) {
        _this.props.visStateActions.updateVisData({
          info: {
            label: tileset.name,
            type: tileset.type,
            format: 'rows'
          },
          data: {
            fields: (processedMetadata === null || processedMetadata === void 0 ? void 0 : processedMetadata.fields) || [],
            rows: []
          },
          metadata: _objectSpread(_objectSpread({}, processedMetadata), tileset.metadata),
          // vector tile layer only supports gpu filtering for now
          supportedFilterTypes: [_constants.ALL_FIELD_TYPES.real, _constants.ALL_FIELD_TYPES.integer],
          disableDataOperation: true
        }, {
          autoCreateLayers: true,
          centerMap: true
        });
        _this._closeModal();
      });
      (0, _defineProperty2["default"])(_this, "_onExportImage", function () {
        if (!_this.props.uiState.exportImage.processing) {
          (0, _utils.exportImage)(_this.props.uiState.exportImage, "".concat(_this.props.appName, ".png"));
          _this.props.uiStateActions.cleanupExportImage();
          _this._closeModal();
        }
      });
      (0, _defineProperty2["default"])(_this, "_onExportData", function () {
        (0, _reducers.exportData)(_this.props, _this.props.uiState.exportData);
        _this._closeModal();
      });
      (0, _defineProperty2["default"])(_this, "_onExportMap", function () {
        var uiState = _this.props.uiState;
        var format = uiState.exportMap.format;
        (format === _constants.EXPORT_MAP_FORMATS.HTML ? _utils.exportHtml : _utils.exportJson)(_this.props, _this.props.uiState.exportMap[format] || {});
        _this._closeModal();
      });
      (0, _defineProperty2["default"])(_this, "_exportFileToCloud", function (_ref) {
        var provider = _ref.provider,
          isPublic = _ref.isPublic,
          overwrite = _ref.overwrite,
          closeModal = _ref.closeModal;
        var toSave = (0, _utils.exportMap)(_this.props);
        _this.props.providerActions.exportFileToCloud({
          mapData: toSave,
          provider: provider,
          options: {
            isPublic: isPublic,
            overwrite: overwrite,
            mapIdToOverwrite: _this.props.providerState.savedMapId
          },
          closeModal: closeModal,
          onSuccess: _this.props.onExportToCloudSuccess,
          onError: _this.props.onExportToCloudError
        });
      });
      (0, _defineProperty2["default"])(_this, "_onSaveMap", function (provider) {
        var overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        _this._exportFileToCloud({
          provider: provider,
          isPublic: false,
          overwrite: overwrite,
          closeModal: true
        });
      });
      (0, _defineProperty2["default"])(_this, "_onOverwriteMap", function (provider) {
        _this._onSaveMap(provider, true);
      });
      (0, _defineProperty2["default"])(_this, "_onShareMapUrl", function (provider) {
        _this._exportFileToCloud({
          provider: provider,
          isPublic: true,
          overwrite: false,
          closeModal: false
        });
      });
      (0, _defineProperty2["default"])(_this, "_onCloseSaveMap", function () {
        _this.props.providerActions.resetProviderStatus();
        _this._closeModal();
      });
      (0, _defineProperty2["default"])(_this, "_onLoadCloudMap", function (payload) {
        _this.props.providerActions.loadCloudMap(_objectSpread(_objectSpread({}, payload), {}, {
          onSuccess: _this.props.onLoadCloudMapSuccess,
          onError: _this.props.onLoadCloudMapError
        }));
      });
      return _this;
    }
    (0, _inherits2["default"])(ModalContainer, _Component);
    return (0, _createClass2["default"])(ModalContainer, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _document["default"].removeEventListener('keyup', this._onKeyUp);
      }
    }, {
      key: "render",
      value: /* eslint-disable complexity */
      function render() {
        var _this2 = this;
        var _this$props = this.props,
          containerW = _this$props.containerW,
          containerH = _this$props.containerH,
          mapStyle = _this$props.mapStyle,
          mapState = _this$props.mapState,
          uiState = _this$props.uiState,
          visState = _this$props.visState,
          rootNode = _this$props.rootNode,
          visStateActions = _this$props.visStateActions,
          uiStateActions = _this$props.uiStateActions,
          providerState = _this$props.providerState;
        var currentModal = uiState.currentModal,
          datasetKeyToRemove = uiState.datasetKeyToRemove;
        var datasets = visState.datasets,
          layers = visState.layers,
          editingDataset = visState.editingDataset;
        var template = null;
        var modalProps = {};

        // TODO - currentModal is a string
        // @ts-ignore
        if (currentModal && currentModal.id && currentModal.template) {
          // if currentMdoal template is already provided
          // TODO: need to check whether template is valid
          // @ts-ignore
          template = /*#__PURE__*/_react["default"].createElement(currentModal.template, null);
          // @ts-ignore
          modalProps = currentModal.modalProps;
        } else {
          switch (currentModal) {
            case _constants.DATA_TABLE_ID:
              {
                var width = containerW * 0.9;
                template = /*#__PURE__*/_react["default"].createElement(DataTableModal, {
                  datasets: datasets,
                  dataId: editingDataset,
                  showDatasetTable: visStateActions.showDatasetTable,
                  sortTableColumn: visStateActions.sortTableColumn,
                  pinTableColumn: visStateActions.pinTableColumn,
                  copyTableColumn: visStateActions.copyTableColumn,
                  setColumnDisplayFormat: visStateActions.setColumnDisplayFormat,
                  uiStateActions: uiStateActions,
                  uiState: uiState
                });

                // TODO: we need to make this width consistent with the css rule defined modal.js:32 max-width: 70vw
                // @ts-ignore // TODO fix this after add types to Theme
                modalProps.cssStyle = (0, _styledComponents.css)(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n              ", ";\n              ", ";\n            "])), DataTableModalStyle, _styles.media.palm(_templateObject8 || (_templateObject8 = (0, _taggedTemplateLiteral2["default"])(["\n                width: ", "px;\n              "])), width));
                break;
              }
            case _constants.DELETE_DATA_ID:
              {
                // validate options
                if (datasetKeyToRemove && datasets && datasets[datasetKeyToRemove]) {
                  template = /*#__PURE__*/_react["default"].createElement(DeleteDatasetModal, {
                    dataset: datasets[datasetKeyToRemove],
                    layers: layers
                  });
                  modalProps = {
                    title: 'modal.title.deleteDataset',
                    cssStyle: smallModalCss,
                    footer: true,
                    onConfirm: function onConfirm() {
                      return _this2._deleteDataset(datasetKeyToRemove);
                    },
                    onCancel: this._closeModal,
                    confirmButton: {
                      negative: true,
                      large: true,
                      children: 'modal.button.delete'
                    }
                  };
                }
                break; // in case we add a new case after this one
              }
            case _constants.ADD_DATA_ID:
              template = /*#__PURE__*/_react["default"].createElement(LoadDataModal, (0, _extends2["default"])({}, providerState, {
                onClose: this._closeModal,
                onFileUpload: this._onFileUpload,
                onTilesetAdded: this._onTilesetAdded,
                onLoadCloudMap: this._onLoadCloudMap,
                loadFiles: uiState.loadFiles,
                fileLoading: visState.fileLoading,
                fileLoadingProgress: visState.fileLoadingProgress,
                fileFormatNames: (0, _reducers.getFileFormatNames)(this.props.visState),
                fileExtensions: (0, _reducers.getFileExtensions)(this.props.visState)
              }));
              modalProps = {
                title: 'modal.title.addDataToMap',
                cssStyle: LoadDataModalStyle,
                footer: false,
                onConfirm: this._closeModal
              };
              break;
            case _constants.EXPORT_IMAGE_ID:
              template = /*#__PURE__*/_react["default"].createElement(ExportImageModal, {
                exportImage: uiState.exportImage,
                mapW: containerW,
                mapH: containerH,
                onUpdateImageSetting: uiStateActions.setExportImageSetting,
                cleanupExportImage: uiStateActions.cleanupExportImage
              });
              modalProps = {
                title: 'modal.title.exportImage',
                cssStyle: '',
                footer: true,
                onCancel: this._closeModal,
                onConfirm: this._onExportImage,
                confirmButton: {
                  large: true,
                  disabled: uiState.exportImage.processing,
                  children: 'modal.button.download'
                }
              };
              break;
            case _constants.EXPORT_DATA_ID:
              template = /*#__PURE__*/_react["default"].createElement(ExportDataModal, (0, _extends2["default"])({}, uiState.exportData, {
                supportedDataTypes: _constants.EXPORT_DATA_TYPE_OPTIONS,
                datasets: datasets,
                applyCPUFilter: this.props.visStateActions.applyCPUFilter,
                onChangeExportDataType: uiStateActions.setExportDataType,
                onChangeExportSelectedDataset: uiStateActions.setExportSelectedDataset,
                onChangeExportFiltered: uiStateActions.setExportFiltered
              }));
              modalProps = {
                title: 'modal.title.exportData',
                cssStyle: '',
                footer: true,
                onCancel: this._closeModal,
                onConfirm: this._onExportData,
                confirmButton: {
                  large: true,
                  children: 'modal.button.export'
                }
              };
              break;
            case _constants.EXPORT_MAP_ID:
              {
                var keplerGlConfig = visState.schema.getConfigToSave({
                  mapStyle: mapStyle,
                  visState: visState,
                  mapState: mapState,
                  uiState: uiState
                });
                template = /*#__PURE__*/_react["default"].createElement(ExportMapModal, {
                  config: keplerGlConfig,
                  options: uiState.exportMap,
                  onChangeExportMapFormat: uiStateActions.setExportMapFormat,
                  onEditUserMapboxAccessToken: uiStateActions.setUserMapboxAccessToken,
                  onChangeExportMapHTMLMode: uiStateActions.setExportHTMLMapMode
                });
                modalProps = {
                  title: 'modal.title.exportMap',
                  cssStyle: '',
                  footer: true,
                  onCancel: this._closeModal,
                  onConfirm: this._onExportMap,
                  confirmButton: {
                    large: true,
                    children: 'modal.button.export'
                  }
                };
                break;
              }
            case _constants.ADD_MAP_STYLE_ID:
              template = /*#__PURE__*/_react["default"].createElement(AddMapStyleModal, {
                mapboxApiAccessToken: this.props.mapboxApiAccessToken,
                mapboxApiUrl: this.props.mapboxApiUrl,
                mapState: this.props.mapState,
                inputStyle: mapStyle.inputStyle,
                inputMapStyle: this.props.mapStyleActions.inputMapStyle,
                loadCustomMapStyle: this.props.mapStyleActions.loadCustomMapStyle
              });
              modalProps = {
                title: 'modal.title.addCustomMapboxStyle',
                cssStyle: '',
                footer: true,
                onCancel: this._closeModal,
                onConfirm: this._onAddCustomMapStyle,
                confirmButton: {
                  large: true,
                  disabled: mapStyle.inputStyle.error || !mapStyle.inputStyle.url || !mapStyle.inputStyle.label,
                  children: 'modal.button.addStyle'
                }
              };
              break;
            case _constants.SAVE_MAP_ID:
              template = /*#__PURE__*/_react["default"].createElement(SaveMapModal, (0, _extends2["default"])({}, providerState, {
                exportImage: uiState.exportImage,
                mapInfo: visState.mapInfo,
                onSetMapInfo: visStateActions.setMapInfo,
                cleanupExportImage: uiStateActions.cleanupExportImage,
                onUpdateImageSetting: uiStateActions.setExportImageSetting,
                onCancel: this._closeModal,
                onConfirm: function onConfirm(provider) {
                  return _this2._onSaveMap(provider, false);
                }
              }));
              modalProps = {
                title: 'modal.title.saveMap',
                cssStyle: '',
                footer: false
              };
              break;
            case _constants.OVERWRITE_MAP_ID:
              template = /*#__PURE__*/_react["default"].createElement(OverWriteMapModal, (0, _extends2["default"])({}, providerState, {
                title: (0, _get["default"])(visState, ['mapInfo', 'title']),
                onUpdateImageSetting: uiStateActions.setExportImageSetting,
                cleanupExportImage: uiStateActions.cleanupExportImage,
                onConfirm: this._onOverwriteMap,
                onCancel: this._closeModal
              }));
              modalProps = {
                title: 'Overwrite Existing File?',
                cssStyle: smallModalCss,
                footer: false
              };
              break;
            case _constants.SHARE_MAP_ID:
              template = /*#__PURE__*/_react["default"].createElement(ShareMapModal, (0, _extends2["default"])({}, providerState, {
                onExport: this._onShareMapUrl,
                cleanupExportImage: uiStateActions.cleanupExportImage,
                onUpdateImageSetting: uiStateActions.setExportImageSetting
              }));
              modalProps = {
                title: 'modal.title.shareURL',
                cssStyle: '',
                onCancel: this._onCloseSaveMap
              };
              break;
            default:
              break;
          }
        }
        return rootNode ? /*#__PURE__*/_react["default"].createElement(ModalDialog, (0, _extends2["default"])({
          parentSelector: function parentSelector() {
            return rootNode;
          },
          isOpen: Boolean(currentModal),
          onCancel: this._closeModal
        }, modalProps, {
          cssStyle: DefaultStyle.concat(modalProps.cssStyle)
        }), template) : null;
      }
      /* eslint-enable complexity */
    }]);
  }(_react.Component);
  return ModalContainer;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,