"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactDom = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-dom");
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _core = require("@dnd-kit/core");
var _utilities = require("@dnd-kit/utilities");
var _react2 = require("@floating-ui/react");
var _styles = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/styles/src");
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _icons = require("../common/icons");
var _styledComponents2 = require("../common/styled-components");
var _context = require("../context");
var _useLegendPosition3 = _interopRequireDefault(require("../hooks/use-legend-position"));
var _mapControlPanel = _interopRequireDefault(require("./map-control-panel"));
var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));
var _mapLegend = _interopRequireDefault(require("./map-legend"));
var _modifiers = require("@dnd-kit/modifiers");
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
var DRAG_RESIZE_ID = 'map-legend-resize';
var DRAG_MOVE_ID = 'map-legend-move';
var StyledDraggableLegendContent = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  outline: none;\n  transition: border-color 0.2s ease-in-out;\n  border: 1px solid transparent;\n  .legend-input-block {\n    display: none;\n  }\n  &.is-dragging .legend-input-block {\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: transparent;\n  }\n  &:hover,\n  &.is-dragging {\n    .legend-move-handle {\n      opacity: 1;\n      pointer-events: auto;\n    }\n    .legend-resize-handle {\n      opacity: 1;\n      pointer-events: auto;\n    }\n    border-color: ", ";\n  }\n  .map-control__panel-content {\n    max-height: calc(100vh - 100px);\n    ", ";\n  }\n  border-radius: 4px;\n  z-index: 2;\n  .map-control-panel {\n    margin-bottom: 0 !important;\n  }\n"])), function (props) {
  return props.theme.activeColor;
}, function (props) {
  return props.contentHeight ? "height: ".concat(props.contentHeight, "px;") : '';
});
var StyledMoveHandle = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  pointer-events: none;\n  opacity: 0;\n  transition: opacity 0.2s ease-in-out;\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  color: white;\n  z-index: 2;\n  top: 0;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 48px;\n  height: 16px;\n  border-radius: 4px;\n  cursor: move;\n  background-color: ", ";\n"])), function (props) {
  return props.theme.activeColor;
});
var StyledResizeHandle = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  pointer-events: none;\n  opacity: 0;\n  transition: opacity 0.2s ease-in-out;\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  color: #f7f8fa;\n  z-index: 2;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 48px;\n  height: 16px;\n  border-radius: 4px;\n  cursor: ns-resize;\n"])));
var DraggableLegendContent = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var positionStyles = props.positionStyles,
    children = props.children;
  var draggableMove = (0, _core.useDraggable)({
    id: DRAG_MOVE_ID
  });
  var draggableResize = (0, _core.useDraggable)({
    id: DRAG_RESIZE_ID
  });
  var refs = (0, _react2.useMergeRefs)([draggableMove.setNodeRef, ref]);
  var isDragging = draggableMove.isDragging || draggableResize.isDragging;
  return /*#__PURE__*/_react["default"].createElement(StyledDraggableLegendContent, (0, _extends2["default"])({
    ref: refs,
    className: (0, _classnames["default"])('draggable-legend', {
      'is-dragging': isDragging
    }),
    style: _objectSpread(_objectSpread({}, positionStyles), {}, {
      transform: _utilities.CSS.Translate.toString(draggableMove.transform)
    }),
    contentHeight: props.contentHeight
  }, draggableMove.attributes), children, isDragging ? /*#__PURE__*/_react["default"].createElement("div", {
    className: "legend-input-block"
  }) : null, /*#__PURE__*/_react["default"].createElement(StyledMoveHandle, (0, _extends2["default"])({
    className: "legend-move-handle"
  }, draggableMove.listeners), /*#__PURE__*/_react["default"].createElement(_icons.DraggableDots, {
    height: "16px"
  })), /*#__PURE__*/_react["default"].createElement(StyledResizeHandle, (0, _extends2["default"])({
    className: "legend-resize-handle",
    ref: draggableResize.setNodeRef
  }, draggableResize.listeners), /*#__PURE__*/_react["default"].createElement(_icons.HorizontalResizeHandle, {
    height: "16px"
  })));
});
var DraggableLegend = (0, _styledComponents.withTheme)(function (_ref) {
  var _mapControls$mapLegen;
  var isSidePanelShown = _ref.isSidePanelShown,
    children = _ref.children,
    mapControls = _ref.mapControls,
    setMapControlSettings = _ref.setMapControlSettings,
    theme = _ref.theme;
  var settings = mapControls === null || mapControls === void 0 || (_mapControls$mapLegen = mapControls.mapLegend) === null || _mapControls$mapLegen === void 0 ? void 0 : _mapControls$mapLegen.settings;
  var legendContentRef = (0, _react.useRef)(null);
  var onChangeSettings = (0, _react.useCallback)(function (newSettings) {
    return setMapControlSettings('mapLegend', newSettings);
  }, [setMapControlSettings]);
  var _useLegendPosition = (0, _useLegendPosition3["default"])({
      legendContentRef: legendContentRef,
      isSidePanelShown: isSidePanelShown,
      theme: theme,
      settings: settings,
      onChangeSettings: onChangeSettings
    }),
    positionStyles = _useLegendPosition.positionStyles,
    updatePosition = _useLegendPosition.updatePosition,
    startResize = _useLegendPosition.startResize,
    resize = _useLegendPosition.resize,
    contentHeight = _useLegendPosition.contentHeight;
  var handleDragStart = (0, _react.useCallback)(function (event) {
    switch (event.active.id) {
      case DRAG_RESIZE_ID:
        startResize();
        break;
      default:
        updatePosition();
    }
  }, [updatePosition, startResize]);
  var handleDragEnd = (0, _react.useCallback)(updatePosition, [updatePosition]);
  var handleDragMove = (0, _react.useCallback)(function (event) {
    switch (event.active.id) {
      case DRAG_RESIZE_ID:
        resize(event.delta.y);
        break;
    }
  }, [resize]);
  return /*#__PURE__*/_react["default"].createElement(_core.DndContext, {
    onDragStart: handleDragStart,
    onDragMove: handleDragMove,
    onDragEnd: handleDragEnd,
    modifiers: [_modifiers.restrictToWindowEdges]
  }, /*#__PURE__*/_react["default"].createElement(DraggableLegendContent, {
    ref: legendContentRef,
    positionStyles: positionStyles,
    contentHeight: contentHeight
  }, children));
});
var ImageExportLegend = (0, _styledComponents.withTheme)(function (_ref2) {
  var _containerRef$current;
  var settings = _ref2.settings,
    isSidePanelShown = _ref2.isSidePanelShown,
    theme = _ref2.theme,
    children = _ref2.children;
  var containerRef = (0, _react.useRef)(null);
  var legendContentRef = (0, _react.useRef)(null);
  var _useLegendPosition2 = (0, _useLegendPosition3["default"])({
      legendContentRef: legendContentRef,
      isSidePanelShown: isSidePanelShown,
      theme: theme,
      settings: settings,
      onChangeSettings: function onChangeSettings() {
        // do nothing by default
      }
    }),
    positionStyles = _useLegendPosition2.positionStyles;
  var portalRoot = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 || (_containerRef$current = _containerRef$current.closest('.export-map-instance')) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector('#default-deckgl-overlay-wrapper');
  return /*#__PURE__*/_react["default"].createElement("div", {
    ref: containerRef
  }, portalRoot ? /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react["default"].createElement("div", {
    className: "fixed-legend",
    ref: legendContentRef,
    style: _objectSpread(_objectSpread({}, positionStyles), {}, {
      position: 'absolute'
    })
  }, children), portalRoot) : null);
});
MapLegendPanelFactory.deps = [_mapControlTooltip["default"], _mapControlPanel["default"], _mapLegend["default"]];
var defaultActionIcons = {
  legend: function legend(props) {
    return /*#__PURE__*/_react["default"].createElement(_icons.Legend, (0, _extends2["default"])({}, props, {
      height: "18px"
    }));
  }
};
var MapLegendPanelComponent = function MapLegendPanelComponent(_ref3) {
  var _mapControls$mapLegen2, _rootContext$current;
  var layers = _ref3.layers,
    mapControls = _ref3.mapControls,
    scale = _ref3.scale,
    onToggleMapControl = _ref3.onToggleMapControl,
    isExport = _ref3.isExport,
    logoComponent = _ref3.logoComponent,
    _ref3$actionIcons = _ref3.actionIcons,
    actionIcons = _ref3$actionIcons === void 0 ? defaultActionIcons : _ref3$actionIcons,
    mapState = _ref3.mapState,
    onLayerVisConfigChange = _ref3.onLayerVisConfigChange,
    onToggleSplitMapViewport = _ref3.onToggleSplitMapViewport,
    onClickControlBtn = _ref3.onClickControlBtn,
    activeSidePanel = _ref3.activeSidePanel,
    setMapControlSettings = _ref3.setMapControlSettings,
    _ref3$isViewportUnsyn = _ref3.isViewportUnsyncAllowed,
    isViewportUnsyncAllowed = _ref3$isViewportUnsyn === void 0 ? true : _ref3$isViewportUnsyn,
    className = _ref3.className,
    MapControlTooltip = _ref3.MapControlTooltip,
    MapControlPanel = _ref3.MapControlPanel,
    MapLegend = _ref3.MapLegend;
  var isSidePanelShown = Boolean(activeSidePanel);
  var settings = mapControls === null || mapControls === void 0 || (_mapControls$mapLegen2 = mapControls.mapLegend) === null || _mapControls$mapLegen2 === void 0 ? void 0 : _mapControls$mapLegen2.settings;
  var mapLegend = (mapControls === null || mapControls === void 0 ? void 0 : mapControls.mapLegend) || {};
  var _ref4 = mapLegend || {},
    active = _ref4.active,
    disableEdit = _ref4.disableEdit;
  var rootContext = (0, _react.useContext)(_context.RootContext);
  var onClick = (0, _react.useCallback)(function () {
    var _mapControls$mapDraw;
    onClickControlBtn === null || onClickControlBtn === void 0 || onClickControlBtn();
    if (mapControls !== null && mapControls !== void 0 && (_mapControls$mapDraw = mapControls.mapDraw) !== null && _mapControls$mapDraw !== void 0 && _mapControls$mapDraw.active) {
      onToggleMapControl('mapDraw');
    }
    onToggleMapControl('mapLegend');
  }, [onClickControlBtn, onToggleMapControl, mapControls]);
  var onCloseClick = (0, _react.useCallback)(function (e) {
    e.preventDefault();
    onToggleMapControl('mapLegend');
  }, [onToggleMapControl]);
  if (!mapLegend.show) {
    return null;
  }
  var legendPanel = active ? /*#__PURE__*/_react["default"].createElement(MapControlPanel, {
    scale: scale,
    header: "header.layerLegend",
    onClick: onCloseClick,
    pinnable: false,
    disableClose: false,
    isExport: isExport,
    logoComponent: logoComponent,
    mapState: mapState,
    onToggleSplitMapViewport: onToggleSplitMapViewport,
    isViewportUnsyncAllowed: isViewportUnsyncAllowed,
    className: className
  }, /*#__PURE__*/_react["default"].createElement(MapLegend, {
    layers: layers,
    mapState: mapState,
    disableEdit: disableEdit,
    isExport: isExport,
    onLayerVisConfigChange: onLayerVisConfigChange
  })) : null;
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, active ? (0, _utils.hasPortableWidth)(_styles.breakPointValues) ? legendPanel : isExport ? /*#__PURE__*/_react["default"].createElement(ImageExportLegend, {
    isSidePanelShown: isSidePanelShown,
    settings: settings
  }, legendPanel) : ( /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react["default"].createElement(DraggableLegend, {
    isSidePanelShown: isSidePanelShown,
    mapControls: mapControls,
    setMapControlSettings: setMapControlSettings
  }, legendPanel), (_rootContext$current = rootContext === null || rootContext === void 0 ? void 0 : rootContext.current) !== null && _rootContext$current !== void 0 ? _rootContext$current : document.body)) : null, !isExport ? /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
    id: "show-legend",
    message: "tooltip.showLegend"
  }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.MapControlButton, {
    className: "map-control-button show-legend",
    onClick: onClick
  }, /*#__PURE__*/_react["default"].createElement(actionIcons.legend, {
    height: "22px"
  }))) : null);
};
function MapLegendPanelFactory(MapControlTooltip, MapControlPanel, MapLegend) {
  return function (props) {
    return /*#__PURE__*/_react["default"].createElement(MapLegendPanelComponent, (0, _extends2["default"])({}, props, {
      MapControlTooltip: MapControlTooltip,
      MapControlPanel: MapControlPanel,
      MapLegend: MapLegend
    }));
  };
}
var _default = exports["default"] = MapLegendPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,