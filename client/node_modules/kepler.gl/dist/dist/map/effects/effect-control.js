"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = EffectControlFactory;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _icons = require("../../common/icons");
var _styledComponents = require("../../common/styled-components");
var _mapControlTooltip = _interopRequireDefault(require("../map-control-tooltip"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

EffectControlFactory.deps = [_mapControlTooltip["default"]];
function EffectControlFactory(MapControlTooltip) {
  var defaultActionIcons = {
    effectsIcon: _icons.MagicWand
  };
  var EffectControl = function EffectControl(_ref) {
    var _mapControls$effect, _mapControls$effect2;
    var mapControls = _ref.mapControls,
      onToggleMapControl = _ref.onToggleMapControl,
      _ref$actionIcons = _ref.actionIcons,
      actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons;
    var onClick = (0, _react.useCallback)(function (event) {
      event.preventDefault();
      onToggleMapControl('effect');
    }, [onToggleMapControl]);
    var showControl = mapControls === null || mapControls === void 0 || (_mapControls$effect = mapControls.effect) === null || _mapControls$effect === void 0 ? void 0 : _mapControls$effect.show;
    if (!showControl) {
      return null;
    }
    var active = mapControls === null || mapControls === void 0 || (_mapControls$effect2 = mapControls.effect) === null || _mapControls$effect2 === void 0 ? void 0 : _mapControls$effect2.active;
    return /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "show-effect",
      message: active ? 'tooltip.hideEffectPanel' : 'tooltip.showEffectPanel'
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.MapControlButton, {
      className: "map-control-button toggle-effect",
      onClick: onClick,
      active: active
    }, /*#__PURE__*/_react["default"].createElement(actionIcons.effectsIcon, {
      height: "22px"
    })));
  };
  EffectControl.displayName = 'EffectControl';
  return /*#__PURE__*/_react["default"].memo(EffectControl);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfaWNvbnMiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9tYXBDb250cm9sVG9vbHRpcCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJFZmZlY3RDb250cm9sRmFjdG9yeSIsImRlcHMiLCJNYXBDb250cm9sVG9vbHRpcCIsImRlZmF1bHRBY3Rpb25JY29ucyIsImVmZmVjdHNJY29uIiwiTWFnaWNXYW5kIiwiRWZmZWN0Q29udHJvbCIsIl9yZWYiLCJfbWFwQ29udHJvbHMkZWZmZWN0IiwiX21hcENvbnRyb2xzJGVmZmVjdDIiLCJtYXBDb250cm9scyIsIm9uVG9nZ2xlTWFwQ29udHJvbCIsIl9yZWYkYWN0aW9uSWNvbnMiLCJhY3Rpb25JY29ucyIsIm9uQ2xpY2siLCJ1c2VDYWxsYmFjayIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzaG93Q29udHJvbCIsImVmZmVjdCIsInNob3ciLCJhY3RpdmUiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJtZXNzYWdlIiwiTWFwQ29udHJvbEJ1dHRvbiIsImNsYXNzTmFtZSIsImhlaWdodCIsImRpc3BsYXlOYW1lIiwibWVtbyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYXAvZWZmZWN0cy9lZmZlY3QtY29udHJvbC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2ssIENvbXBvbmVudFR5cGV9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtNYXBDb250cm9sc30gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5cbmltcG9ydCB7TWFnaWNXYW5kfSBmcm9tICcuLi8uLi9jb21tb24vaWNvbnMnO1xuaW1wb3J0IHtNYXBDb250cm9sQnV0dG9ufSBmcm9tICcuLi8uLi9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IE1hcENvbnRyb2xUb29sdGlwRmFjdG9yeSBmcm9tICcuLi9tYXAtY29udHJvbC10b29sdGlwJztcblxuaW50ZXJmYWNlIEVmZmVjdENvbnRyb2xJY29ucyB7XG4gIGVmZmVjdHNJY29uOiBDb21wb25lbnRUeXBlPGFueT47XG59XG5cbmV4cG9ydCB0eXBlIEVmZmVjdENvbnRyb2xQcm9wcyA9IHtcbiAgbWFwQ29udHJvbHM6IE1hcENvbnRyb2xzO1xuICBvblRvZ2dsZU1hcENvbnRyb2w6IChjb250cm9sOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGFjdGlvbkljb25zOiBFZmZlY3RDb250cm9sSWNvbnM7XG59O1xuXG5FZmZlY3RDb250cm9sRmFjdG9yeS5kZXBzID0gW01hcENvbnRyb2xUb29sdGlwRmFjdG9yeV07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEVmZmVjdENvbnRyb2xGYWN0b3J5KFxuICBNYXBDb250cm9sVG9vbHRpcDogUmV0dXJuVHlwZTx0eXBlb2YgTWFwQ29udHJvbFRvb2x0aXBGYWN0b3J5PlxuKTogUmVhY3QuRkM8RWZmZWN0Q29udHJvbFByb3BzPiB7XG4gIGNvbnN0IGRlZmF1bHRBY3Rpb25JY29ucyA9IHtcbiAgICBlZmZlY3RzSWNvbjogTWFnaWNXYW5kXG4gIH07XG5cbiAgY29uc3QgRWZmZWN0Q29udHJvbCA9ICh7XG4gICAgbWFwQ29udHJvbHMsXG4gICAgb25Ub2dnbGVNYXBDb250cm9sLFxuICAgIGFjdGlvbkljb25zID0gZGVmYXVsdEFjdGlvbkljb25zXG4gIH06IEVmZmVjdENvbnRyb2xQcm9wcykgPT4ge1xuICAgIGNvbnN0IG9uQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgIGV2ZW50ID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25Ub2dnbGVNYXBDb250cm9sKCdlZmZlY3QnKTtcbiAgICAgIH0sXG4gICAgICBbb25Ub2dnbGVNYXBDb250cm9sXVxuICAgICk7XG5cbiAgICBjb25zdCBzaG93Q29udHJvbCA9IG1hcENvbnRyb2xzPy5lZmZlY3Q/LnNob3c7XG4gICAgaWYgKCFzaG93Q29udHJvbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aXZlID0gbWFwQ29udHJvbHM/LmVmZmVjdD8uYWN0aXZlO1xuICAgIHJldHVybiAoXG4gICAgICA8TWFwQ29udHJvbFRvb2x0aXBcbiAgICAgICAgaWQ9XCJzaG93LWVmZmVjdFwiXG4gICAgICAgIG1lc3NhZ2U9e2FjdGl2ZSA/ICd0b29sdGlwLmhpZGVFZmZlY3RQYW5lbCcgOiAndG9vbHRpcC5zaG93RWZmZWN0UGFuZWwnfVxuICAgICAgPlxuICAgICAgICA8TWFwQ29udHJvbEJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT1cIm1hcC1jb250cm9sLWJ1dHRvbiB0b2dnbGUtZWZmZWN0XCJcbiAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgIGFjdGl2ZT17YWN0aXZlfVxuICAgICAgICA+XG4gICAgICAgICAgPGFjdGlvbkljb25zLmVmZmVjdHNJY29uIGhlaWdodD1cIjIycHhcIiAvPlxuICAgICAgICA8L01hcENvbnRyb2xCdXR0b24+XG4gICAgICA8L01hcENvbnRyb2xUb29sdGlwPlxuICAgICk7XG4gIH07XG5cbiAgRWZmZWN0Q29udHJvbC5kaXNwbGF5TmFtZSA9ICdFZmZlY3RDb250cm9sJztcbiAgcmV0dXJuIFJlYWN0Lm1lbW8oRWZmZWN0Q29udHJvbCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBSUEsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsaUJBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGtCQUFBLEdBQUFDLHNCQUFBLENBQUFKLE9BQUE7QUFBOEQsU0FBQUsseUJBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQTtFQUFBLElBQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQTtJQUFBLE9BQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBO0VBQUEsR0FBQUYsQ0FBQTtBQUFBO0FBQUEsU0FBQVAsd0JBQUFPLENBQUEsRUFBQUUsQ0FBQTtFQUFBLEtBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQTtFQUFBLGFBQUFBLENBQUEsZ0JBQUFLLE9BQUEsQ0FBQUwsQ0FBQSwwQkFBQUEsQ0FBQTtJQUFBLFdBQUFBO0VBQUE7RUFBQSxJQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUE7RUFBQSxJQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBO0VBQUEsSUFBQVEsQ0FBQTtNQUFBQyxTQUFBO0lBQUE7SUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQTtFQUFBLFNBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQTtJQUFBLElBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQTtJQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUE7RUFBQTtFQUFBLE9BQUFOLENBQUEsY0FBQVIsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFBQTtBQVQ5RDtBQUNBOztBQW9CQVcsb0JBQW9CLENBQUNDLElBQUksR0FBRyxDQUFDdkIsa0JBQUEsV0FBd0IsQ0FBQztBQUV2QyxTQUFTc0Isb0JBQW9CQSxDQUMxQ0UsaUJBQThELEVBQ2hDO0VBQzlCLElBQU1DLGtCQUFrQixHQUFHO0lBQ3pCQyxXQUFXLEVBQUU1QixNQUFBLENBQUE2QjtFQUNmLENBQUM7RUFFRCxJQUFNQyxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUFDLElBQUEsRUFJTztJQUFBLElBQUFDLG1CQUFBLEVBQUFDLG9CQUFBO0lBQUEsSUFIeEJDLFdBQVcsR0FBQUgsSUFBQSxDQUFYRyxXQUFXO01BQ1hDLGtCQUFrQixHQUFBSixJQUFBLENBQWxCSSxrQkFBa0I7TUFBQUMsZ0JBQUEsR0FBQUwsSUFBQSxDQUNsQk0sV0FBVztNQUFYQSxXQUFXLEdBQUFELGdCQUFBLGNBQUdULGtCQUFrQixHQUFBUyxnQkFBQTtJQUVoQyxJQUFNRSxPQUFPLEdBQUcsSUFBQXpDLE1BQUEsQ0FBQTBDLFdBQVcsRUFDekIsVUFBQUMsS0FBSyxFQUFJO01BQ1BBLEtBQUssQ0FBQ0MsY0FBYyxDQUFDLENBQUM7TUFDdEJOLGtCQUFrQixDQUFDLFFBQVEsQ0FBQztJQUM5QixDQUFDLEVBQ0QsQ0FBQ0Esa0JBQWtCLENBQ3JCLENBQUM7SUFFRCxJQUFNTyxXQUFXLEdBQUdSLFdBQVcsYUFBWEEsV0FBVyxnQkFBQUYsbUJBQUEsR0FBWEUsV0FBVyxDQUFFUyxNQUFNLGNBQUFYLG1CQUFBLHVCQUFuQkEsbUJBQUEsQ0FBcUJZLElBQUk7SUFDN0MsSUFBSSxDQUFDRixXQUFXLEVBQUU7TUFDaEIsT0FBTyxJQUFJO0lBQ2I7SUFFQSxJQUFNRyxNQUFNLEdBQUdYLFdBQVcsYUFBWEEsV0FBVyxnQkFBQUQsb0JBQUEsR0FBWEMsV0FBVyxDQUFFUyxNQUFNLGNBQUFWLG9CQUFBLHVCQUFuQkEsb0JBQUEsQ0FBcUJZLE1BQU07SUFDMUMsb0JBQ0VoRCxNQUFBLFlBQUFpRCxhQUFBLENBQUNwQixpQkFBaUI7TUFDaEJxQixFQUFFLEVBQUMsYUFBYTtNQUNoQkMsT0FBTyxFQUFFSCxNQUFNLEdBQUcseUJBQXlCLEdBQUc7SUFBMEIsZ0JBRXhFaEQsTUFBQSxZQUFBaUQsYUFBQSxDQUFDN0MsaUJBQUEsQ0FBQWdELGdCQUFnQjtNQUNmQyxTQUFTLEVBQUMsa0NBQWtDO01BQzVDWixPQUFPLEVBQUVBLE9BQVE7TUFDakJPLE1BQU0sRUFBRUE7SUFBTyxnQkFFZmhELE1BQUEsWUFBQWlELGFBQUEsQ0FBQ1QsV0FBVyxDQUFDVCxXQUFXO01BQUN1QixNQUFNLEVBQUM7SUFBTSxDQUFFLENBQ3hCLENBQ0QsQ0FBQztFQUV4QixDQUFDO0VBRURyQixhQUFhLENBQUNzQixXQUFXLEdBQUcsZUFBZTtFQUMzQyxvQkFBT3ZELE1BQUEsV0FBSyxDQUFDd0QsSUFBSSxDQUFDdkIsYUFBYSxDQUFDO0FBQ2xDIiwiaWdub3JlTGlzdCI6W119