"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = AiAssistantControlFactory;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _aiStar = _interopRequireDefault(require("../icons/ai-star"));
var _components = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/components/src");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 * AiAssistantControlProps
 * @param mapControls MapControls from kepler.gl
 * @param onToggleMapControl (control: string) => void
 * @param actionIcons AiAssistantControlIcons
 * @returns
 */

AiAssistantControlFactory.deps = [_components.MapControlTooltipFactory];

/**
 * AiAssistantControlFactory
 * @param MapControlTooltip
 * @returns
 */
function AiAssistantControlFactory(MapControlTooltip) {
  var defaultActionIcons = {
    aiAssistantIcon: _aiStar["default"]
  };
  var AiAssistantControl = function AiAssistantControl(_ref) {
    var _mapControls$aiAssist, _mapControls$aiAssist2;
    var mapControls = _ref.mapControls,
      onToggleMapControl = _ref.onToggleMapControl,
      _ref$actionIcons = _ref.actionIcons,
      actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons;
    var onClick = (0, _react.useCallback)(function (event) {
      event.preventDefault();
      onToggleMapControl('aiAssistant');
    }, [onToggleMapControl]);
    var showControl = mapControls === null || mapControls === void 0 || (_mapControls$aiAssist = mapControls.aiAssistant) === null || _mapControls$aiAssist === void 0 ? void 0 : _mapControls$aiAssist.show;
    if (!showControl) {
      return null;
    }
    var active = mapControls === null || mapControls === void 0 || (_mapControls$aiAssist2 = mapControls.aiAssistant) === null || _mapControls$aiAssist2 === void 0 ? void 0 : _mapControls$aiAssist2.active;
    return /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "show-ai-assistant",
      message: active ? 'tooltip.hideAiAssistantPanel' : 'tooltip.showAiAssistantPanel'
    }, /*#__PURE__*/_react["default"].createElement(_components.MapControlButton, {
      className: "map-control-button toggle-ai-assistant",
      onClick: onClick,
      active: active
    }, /*#__PURE__*/_react["default"].createElement(actionIcons.aiAssistantIcon, {
      height: "22px"
    })));
  };
  AiAssistantControl.displayName = 'AiAssistantControl';
  return /*#__PURE__*/_react["default"].memo(AiAssistantControl);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfYWlTdGFyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jb21wb25lbnRzIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiQWlBc3Npc3RhbnRDb250cm9sRmFjdG9yeSIsImRlcHMiLCJNYXBDb250cm9sVG9vbHRpcEZhY3RvcnkiLCJNYXBDb250cm9sVG9vbHRpcCIsImRlZmF1bHRBY3Rpb25JY29ucyIsImFpQXNzaXN0YW50SWNvbiIsIkFpQXNzaXN0YW50Q29udHJvbCIsIl9yZWYiLCJfbWFwQ29udHJvbHMkYWlBc3Npc3QiLCJfbWFwQ29udHJvbHMkYWlBc3Npc3QyIiwibWFwQ29udHJvbHMiLCJvblRvZ2dsZU1hcENvbnRyb2wiLCJfcmVmJGFjdGlvbkljb25zIiwiYWN0aW9uSWNvbnMiLCJvbkNsaWNrIiwidXNlQ2FsbGJhY2siLCJldmVudCIsInByZXZlbnREZWZhdWx0Iiwic2hvd0NvbnRyb2wiLCJhaUFzc2lzdGFudCIsInNob3ciLCJhY3RpdmUiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJtZXNzYWdlIiwiTWFwQ29udHJvbEJ1dHRvbiIsImNsYXNzTmFtZSIsImhlaWdodCIsImRpc3BsYXlOYW1lIiwibWVtbyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvYWktYXNzaXN0YW50LWNvbnRyb2wudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCBDb21wb25lbnRUeXBlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge01hcENvbnRyb2xzfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCBBaVN0YXIgZnJvbSAnLi4vaWNvbnMvYWktc3Rhcic7XG5pbXBvcnQge01hcENvbnRyb2xCdXR0b24sIE1hcENvbnRyb2xUb29sdGlwRmFjdG9yeX0gZnJvbSAnQGtlcGxlci5nbC9jb21wb25lbnRzJztcblxudHlwZSBBaUFzc2lzdGFudENvbnRyb2xJY29ucyA9IHtcbiAgYWlBc3Npc3RhbnRJY29uOiBDb21wb25lbnRUeXBlPHtcbiAgICBoZWlnaHQ/OiBzdHJpbmc7XG4gICAgd2lkdGg/OiBzdHJpbmc7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbiAgfT47XG59O1xuXG4vKipcbiAqIEFpQXNzaXN0YW50Q29udHJvbFByb3BzXG4gKiBAcGFyYW0gbWFwQ29udHJvbHMgTWFwQ29udHJvbHMgZnJvbSBrZXBsZXIuZ2xcbiAqIEBwYXJhbSBvblRvZ2dsZU1hcENvbnRyb2wgKGNvbnRyb2w6IHN0cmluZykgPT4gdm9pZFxuICogQHBhcmFtIGFjdGlvbkljb25zIEFpQXNzaXN0YW50Q29udHJvbEljb25zXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgdHlwZSBBaUFzc2lzdGFudENvbnRyb2xQcm9wcyA9IHtcbiAgbWFwQ29udHJvbHM6IE1hcENvbnRyb2xzO1xuICBvblRvZ2dsZU1hcENvbnRyb2w6IChjb250cm9sOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGFjdGlvbkljb25zOiBBaUFzc2lzdGFudENvbnRyb2xJY29ucztcbn07XG5cbkFpQXNzaXN0YW50Q29udHJvbEZhY3RvcnkuZGVwcyA9IFtNYXBDb250cm9sVG9vbHRpcEZhY3RvcnldO1xuXG4vKipcbiAqIEFpQXNzaXN0YW50Q29udHJvbEZhY3RvcnlcbiAqIEBwYXJhbSBNYXBDb250cm9sVG9vbHRpcFxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQWlBc3Npc3RhbnRDb250cm9sRmFjdG9yeShcbiAgTWFwQ29udHJvbFRvb2x0aXA6IFJldHVyblR5cGU8dHlwZW9mIE1hcENvbnRyb2xUb29sdGlwRmFjdG9yeT5cbik6IFJlYWN0LkZDPEFpQXNzaXN0YW50Q29udHJvbFByb3BzPiB7XG4gIGNvbnN0IGRlZmF1bHRBY3Rpb25JY29ucyA9IHtcbiAgICBhaUFzc2lzdGFudEljb246IEFpU3RhclxuICB9O1xuXG4gIGNvbnN0IEFpQXNzaXN0YW50Q29udHJvbCA9ICh7XG4gICAgbWFwQ29udHJvbHMsXG4gICAgb25Ub2dnbGVNYXBDb250cm9sLFxuICAgIGFjdGlvbkljb25zID0gZGVmYXVsdEFjdGlvbkljb25zXG4gIH06IEFpQXNzaXN0YW50Q29udHJvbFByb3BzKSA9PiB7XG4gICAgY29uc3Qgb25DbGljayA9IHVzZUNhbGxiYWNrKFxuICAgICAgZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBvblRvZ2dsZU1hcENvbnRyb2woJ2FpQXNzaXN0YW50Jyk7XG4gICAgICB9LFxuICAgICAgW29uVG9nZ2xlTWFwQ29udHJvbF1cbiAgICApO1xuXG4gICAgY29uc3Qgc2hvd0NvbnRyb2wgPSBtYXBDb250cm9scz8uYWlBc3Npc3RhbnQ/LnNob3c7XG4gICAgaWYgKCFzaG93Q29udHJvbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aXZlID0gbWFwQ29udHJvbHM/LmFpQXNzaXN0YW50Py5hY3RpdmU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxNYXBDb250cm9sVG9vbHRpcFxuICAgICAgICBpZD1cInNob3ctYWktYXNzaXN0YW50XCJcbiAgICAgICAgbWVzc2FnZT17YWN0aXZlID8gJ3Rvb2x0aXAuaGlkZUFpQXNzaXN0YW50UGFuZWwnIDogJ3Rvb2x0aXAuc2hvd0FpQXNzaXN0YW50UGFuZWwnfVxuICAgICAgPlxuICAgICAgICA8TWFwQ29udHJvbEJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT1cIm1hcC1jb250cm9sLWJ1dHRvbiB0b2dnbGUtYWktYXNzaXN0YW50XCJcbiAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgIGFjdGl2ZT17YWN0aXZlfVxuICAgICAgICA+XG4gICAgICAgICAgPGFjdGlvbkljb25zLmFpQXNzaXN0YW50SWNvbiBoZWlnaHQ9XCIyMnB4XCIgLz5cbiAgICAgICAgPC9NYXBDb250cm9sQnV0dG9uPlxuICAgICAgPC9NYXBDb250cm9sVG9vbHRpcD5cbiAgICApO1xuICB9O1xuXG4gIEFpQXNzaXN0YW50Q29udHJvbC5kaXNwbGF5TmFtZSA9ICdBaUFzc2lzdGFudENvbnRyb2wnO1xuICByZXR1cm4gUmVhY3QubWVtbyhBaUFzc2lzdGFudENvbnRyb2wpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUFpRixTQUFBSSx5QkFBQUMsQ0FBQTtFQUFBLHlCQUFBQyxPQUFBO0VBQUEsSUFBQUMsQ0FBQSxPQUFBRCxPQUFBO0lBQUFFLENBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBO0lBQUEsT0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUE7RUFBQSxHQUFBRixDQUFBO0FBQUE7QUFBQSxTQUFBTix3QkFBQU0sQ0FBQSxFQUFBRSxDQUFBO0VBQUEsS0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBO0VBQUEsYUFBQUEsQ0FBQSxnQkFBQUssT0FBQSxDQUFBTCxDQUFBLDBCQUFBQSxDQUFBO0lBQUEsV0FBQUE7RUFBQTtFQUFBLElBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQTtFQUFBLElBQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUE7RUFBQSxJQUFBUSxDQUFBO01BQUFDLFNBQUE7SUFBQTtJQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBO0VBQUEsU0FBQUMsQ0FBQSxJQUFBZCxDQUFBLG9CQUFBYyxDQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxDQUFBO0lBQUEsSUFBQUcsQ0FBQSxHQUFBUCxDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBO0lBQUFHLENBQUEsS0FBQUEsQ0FBQSxDQUFBVixHQUFBLElBQUFVLENBQUEsQ0FBQUMsR0FBQSxJQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUosQ0FBQSxFQUFBTSxDQUFBLEVBQUFHLENBQUEsSUFBQVQsQ0FBQSxDQUFBTSxDQUFBLElBQUFkLENBQUEsQ0FBQWMsQ0FBQTtFQUFBO0VBQUEsT0FBQU4sQ0FBQSxjQUFBUixDQUFBLEVBQUFHLENBQUEsSUFBQUEsQ0FBQSxDQUFBZSxHQUFBLENBQUFsQixDQUFBLEVBQUFRLENBQUEsR0FBQUEsQ0FBQTtBQUFBO0FBTmpGO0FBQ0E7O0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU9BVyx5QkFBeUIsQ0FBQ0MsSUFBSSxHQUFHLENBQUN0QixXQUFBLENBQUF1Qix3QkFBd0IsQ0FBQzs7QUFFM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLFNBQVNGLHlCQUF5QkEsQ0FDL0NHLGlCQUE4RCxFQUMzQjtFQUNuQyxJQUFNQyxrQkFBa0IsR0FBRztJQUN6QkMsZUFBZSxFQUFFNUIsT0FBQTtFQUNuQixDQUFDO0VBRUQsSUFBTTZCLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBa0JBLENBQUFDLElBQUEsRUFJTztJQUFBLElBQUFDLHFCQUFBLEVBQUFDLHNCQUFBO0lBQUEsSUFIN0JDLFdBQVcsR0FBQUgsSUFBQSxDQUFYRyxXQUFXO01BQ1hDLGtCQUFrQixHQUFBSixJQUFBLENBQWxCSSxrQkFBa0I7TUFBQUMsZ0JBQUEsR0FBQUwsSUFBQSxDQUNsQk0sV0FBVztNQUFYQSxXQUFXLEdBQUFELGdCQUFBLGNBQUdSLGtCQUFrQixHQUFBUSxnQkFBQTtJQUVoQyxJQUFNRSxPQUFPLEdBQUcsSUFBQXhDLE1BQUEsQ0FBQXlDLFdBQVcsRUFDekIsVUFBQUMsS0FBSyxFQUFJO01BQ1BBLEtBQUssQ0FBQ0MsY0FBYyxDQUFDLENBQUM7TUFDdEJOLGtCQUFrQixDQUFDLGFBQWEsQ0FBQztJQUNuQyxDQUFDLEVBQ0QsQ0FBQ0Esa0JBQWtCLENBQ3JCLENBQUM7SUFFRCxJQUFNTyxXQUFXLEdBQUdSLFdBQVcsYUFBWEEsV0FBVyxnQkFBQUYscUJBQUEsR0FBWEUsV0FBVyxDQUFFUyxXQUFXLGNBQUFYLHFCQUFBLHVCQUF4QkEscUJBQUEsQ0FBMEJZLElBQUk7SUFDbEQsSUFBSSxDQUFDRixXQUFXLEVBQUU7TUFDaEIsT0FBTyxJQUFJO0lBQ2I7SUFFQSxJQUFNRyxNQUFNLEdBQUdYLFdBQVcsYUFBWEEsV0FBVyxnQkFBQUQsc0JBQUEsR0FBWEMsV0FBVyxDQUFFUyxXQUFXLGNBQUFWLHNCQUFBLHVCQUF4QkEsc0JBQUEsQ0FBMEJZLE1BQU07SUFDL0Msb0JBQ0UvQyxNQUFBLFlBQUFnRCxhQUFBLENBQUNuQixpQkFBaUI7TUFDaEJvQixFQUFFLEVBQUMsbUJBQW1CO01BQ3RCQyxPQUFPLEVBQUVILE1BQU0sR0FBRyw4QkFBOEIsR0FBRztJQUErQixnQkFFbEYvQyxNQUFBLFlBQUFnRCxhQUFBLENBQUMzQyxXQUFBLENBQUE4QyxnQkFBZ0I7TUFDZkMsU0FBUyxFQUFDLHdDQUF3QztNQUNsRFosT0FBTyxFQUFFQSxPQUFRO01BQ2pCTyxNQUFNLEVBQUVBO0lBQU8sZ0JBRWYvQyxNQUFBLFlBQUFnRCxhQUFBLENBQUNULFdBQVcsQ0FBQ1IsZUFBZTtNQUFDc0IsTUFBTSxFQUFDO0lBQU0sQ0FBRSxDQUM1QixDQUNELENBQUM7RUFFeEIsQ0FBQztFQUVEckIsa0JBQWtCLENBQUNzQixXQUFXLEdBQUcsb0JBQW9CO0VBQ3JELG9CQUFPdEQsTUFBQSxXQUFLLENBQUN1RCxJQUFJLENBQUN2QixrQkFBa0IsQ0FBQztBQUN2QyIsImlnbm9yZUxpc3QiOltdfQ==