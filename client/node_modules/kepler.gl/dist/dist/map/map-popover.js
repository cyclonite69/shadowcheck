"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = MapPopoverFactory;
exports.getSelectedFeature = getSelectedFeature;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _mapPopoverContent = _interopRequireDefault(require("./map-popover-content"));
var _icons = require("../common/icons");
var _reactIntl = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-intl");
var _localization = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/localization/src");
var _context = require("../context");
var _layers = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/layers/src");
var _commonUtils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/common-utils/src");
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _reducers = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/reducers/src");
var _react2 = require("@floating-ui/react");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
var SELECTABLE_LAYERS = [_constants.LAYER_TYPES.hexagonId, _constants.LAYER_TYPES.geojson];
var MAX_WIDTH = 500;
var MAX_HEIGHT = 600;
var StyledMapPopover = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n\n  max-width: ", "px;\n  max-height: ", "px;\n  padding: 14px;\n  & > * + * {\n    margin-top: 6px;\n  }\n  ", ";\n  font-family: ", ";\n  font-size: 11px;\n  font-weight: 500;\n  background-color: ", ";\n  color: ", ";\n  z-index: 98; /* should be below 99 which is side pane */\n  overflow-x: auto;\n  box-shadow: ", ";\n\n  &:hover {\n    background-color: ", ";\n  }\n\n  .primary-label {\n    color: ", ";\n    font-size: 10px;\n  }\n\n  .map-popover__layer-info,\n  .coordingate-hover-info {\n    & > * + * {\n      margin-top: 7px;\n    }\n  }\n\n  table {\n    width: auto;\n    display: grid;\n    border-collapse: collapse;\n    row-gap: 5px;\n    column-gap: 5px;\n  }\n\n  .coordingate-hover-info > table {\n    grid-template-columns: auto auto auto;\n  }\n  .map-popover__layer-info > table {\n    grid-template-columns: auto auto;\n  }\n\n  tbody,\n  tr {\n    display: contents;\n  }\n\n  td {\n    border-color: transparent;\n    color: ", ";\n  }\n\n  td.row__value {\n    text-align: right;\n    font-weight: 500;\n    color: ", ";\n  }\n"])), MAX_WIDTH, MAX_HEIGHT, function (props) {
  return props.theme.scrollBar;
}, function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.panelBackground;
}, function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.theme.panelBoxShadow;
}, function (props) {
  return "".concat(props.theme.panelBackground);
}, function (props) {
  return props.theme.notificationColors.success;
}, function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.theme.textColorHl;
});
var PinnedButtons = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-self: center;\n  align-items: center;\n  justify-items: center;\n  & > * + * {\n    margin-left: 10px;\n  }\n"])));
var PopoverContent = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  & > * + * {\n    margin-top: 12px;\n  }\n"])));
var StyledIcon = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n\n  &:hover {\n    cursor: pointer;\n    color: ", ";\n  }\n"])), function (props) {
  return props.theme.activeColor;
}, function (props) {
  return props.theme.linkBtnColor;
});
var StyledSelectGeometry = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  color: ", ";\n  svg {\n    margin-right: 6px;\n  }\n\n  &:hover {\n    cursor: pointer;\n    color: ", ";\n  }\n"])), function (props) {
  return props.theme.textColorHl;
}, function (props) {
  return props.theme.linkBtnColor;
});
MapPopoverFactory.deps = [_mapPopoverContent["default"]];
function getSelectedFeature(layerHoverProp) {
  var _layer$config, _layer$config2;
  var layer = layerHoverProp === null || layerHoverProp === void 0 ? void 0 : layerHoverProp.layer;
  var fieldIdx;
  var selectedFeature;
  switch (layer === null || layer === void 0 ? void 0 : layer.type) {
    case _constants.LAYER_TYPES.hexagonId:
      fieldIdx = (_layer$config = layer.config) === null || _layer$config === void 0 || (_layer$config = _layer$config.columns) === null || _layer$config === void 0 || (_layer$config = _layer$config.hex_id) === null || _layer$config === void 0 ? void 0 : _layer$config.fieldIdx;
      selectedFeature = (0, _commonUtils.idToPolygonGeo)({
        id: (0, _reducers.getLayerHoverPropValue)(layerHoverProp === null || layerHoverProp === void 0 ? void 0 : layerHoverProp.data, fieldIdx)
      }, {
        isClosed: true
      });
      break;
    case _constants.LAYER_TYPES.geojson:
      fieldIdx = (_layer$config2 = layer.config) === null || _layer$config2 === void 0 || (_layer$config2 = _layer$config2.columns) === null || _layer$config2 === void 0 || (_layer$config2 = _layer$config2.geojson) === null || _layer$config2 === void 0 ? void 0 : _layer$config2.fieldIdx;
      selectedFeature = (0, _layers.parseGeoJsonRawFeature)((0, _reducers.getLayerHoverPropValue)(layerHoverProp === null || layerHoverProp === void 0 ? void 0 : layerHoverProp.data, fieldIdx));
      break;
    default:
      break;
  }
  if (selectedFeature) {
    return _objectSpread(_objectSpread({}, selectedFeature), {}, {
      // unique id should be assigned to features in the editor
      id: (0, _commonUtils.generateHashId)(8)
    });
  } else {
    return null;
  }
}
function MapPopoverFactory(MapPopoverContent) {
  var MapPopover = function MapPopover(_ref) {
    var _layerHoverProp$layer, _layerHoverProp$layer2;
    var x = _ref.x,
      y = _ref.y,
      frozen = _ref.frozen,
      coordinate = _ref.coordinate,
      layerHoverProp = _ref.layerHoverProp,
      isBase = _ref.isBase,
      zoom = _ref.zoom,
      container = _ref.container,
      onClose = _ref.onClose,
      onSetFeatures = _ref.onSetFeatures,
      setSelectedFeature = _ref.setSelectedFeature,
      featureCollection = _ref.featureCollection;
    var _useState = (0, _react.useState)('start'),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      horizontalPlacement = _useState2[0],
      setHorizontalPlacement = _useState2[1];
    var moveLeft = function moveLeft() {
      return setHorizontalPlacement('end');
    };
    var moveRight = function moveRight() {
      return setHorizontalPlacement('start');
    };
    var rootContext = (0, _react.useContext)(_context.RootContext);
    var _useFloating = (0, _react2.useFloating)({
        placement: "".concat(horizontalPlacement == 'end' ? 'left' : 'right', "-start"),
        middleware: [(0, _react2.offset)({
          mainAxis: 20,
          alignmentAxis: 20
        }), (0, _react2.flip)()]
      }),
      refs = _useFloating.refs,
      context = _useFloating.context,
      floatingStyles = _useFloating.floatingStyles;
    var onSetSelectedFeature = (0, _react.useCallback)(function () {
      var clickContext = {
        mapIndex: 0,
        rightClick: true,
        position: {
          x: x,
          y: y
        }
      };
      var selectedFeature = getSelectedFeature(layerHoverProp);
      if (selectedFeature) {
        setSelectedFeature(selectedFeature, clickContext);
        var updatedFeatures = featureCollection ? [].concat((0, _toConsumableArray2["default"])(featureCollection.features), [selectedFeature]) : [selectedFeature];
        onSetFeatures(updatedFeatures);
      }
      onClose();
    }, [onClose, onSetFeatures, x, y, setSelectedFeature, layerHoverProp, featureCollection]);
    var containerBounds = container === null || container === void 0 ? void 0 : container.getBoundingClientRect();
    var clientPoint = (0, _react2.useClientPoint)(context, {
      x: ((containerBounds === null || containerBounds === void 0 ? void 0 : containerBounds.left) || 0) + x,
      y: ((containerBounds === null || containerBounds === void 0 ? void 0 : containerBounds.top) || 0) + y
    });
    var _useInteractions = (0, _react2.useInteractions)([clientPoint]),
      getFloatingProps = _useInteractions.getFloatingProps;
    return /*#__PURE__*/_react["default"].createElement(_react2.FloatingPortal, {
      root: rootContext === null || rootContext === void 0 ? void 0 : rootContext.current
    }, /*#__PURE__*/_react["default"].createElement(StyledMapPopover, (0, _extends2["default"])({
      className: "map-popover",
      ref: refs.setFloating,
      style: floatingStyles
    }, getFloatingProps()), frozen ? /*#__PURE__*/_react["default"].createElement(PinnedButtons, null, horizontalPlacement === 'start' && /*#__PURE__*/_react["default"].createElement(StyledIcon, {
      className: "popover-arrow-left",
      onClick: moveLeft
    }, /*#__PURE__*/_react["default"].createElement(_icons.ArrowLeft, null)), /*#__PURE__*/_react["default"].createElement(StyledIcon, {
      className: "popover-pin",
      onClick: onClose
    }, /*#__PURE__*/_react["default"].createElement(_icons.Pin, {
      height: "16px"
    })), horizontalPlacement === 'end' && /*#__PURE__*/_react["default"].createElement(StyledIcon, {
      className: "popover-arrow-right",
      onClick: moveRight
    }, /*#__PURE__*/_react["default"].createElement(_icons.ArrowRight, null)), isBase && /*#__PURE__*/_react["default"].createElement("div", {
      className: "primary-label"
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "mapPopover.primary"
    }))) : null, /*#__PURE__*/_react["default"].createElement(PopoverContent, null, /*#__PURE__*/_react["default"].createElement(MapPopoverContent, {
      coordinate: coordinate,
      zoom: zoom,
      layerHoverProp: layerHoverProp
    })), layerHoverProp !== null && layerHoverProp !== void 0 && (_layerHoverProp$layer = layerHoverProp.layer) !== null && _layerHoverProp$layer !== void 0 && _layerHoverProp$layer.type && SELECTABLE_LAYERS.includes(layerHoverProp === null || layerHoverProp === void 0 || (_layerHoverProp$layer2 = layerHoverProp.layer) === null || _layerHoverProp$layer2 === void 0 ? void 0 : _layerHoverProp$layer2.type) && frozen ? /*#__PURE__*/_react["default"].createElement(StyledSelectGeometry, {
      className: "select-geometry",
      onClick: onSetSelectedFeature
    }, /*#__PURE__*/_react["default"].createElement(_icons.CursorPoint, null), "Select Geometry") : null));
  };
  return (0, _reactIntl.injectIntl)(MapPopover);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,