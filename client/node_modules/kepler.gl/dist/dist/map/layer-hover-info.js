"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledLayerName = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _styledComponents = _interopRequireDefault(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/styled-components"));
var _styledComponents2 = require("../common/styled-components");
var _icons = require("../common/icons");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _commonUtils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/common-utils/src");
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
var _reducers = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/reducers/src");
var _reactIntl = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react-intl");
var _excluded = ["fieldsToShow"];
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
var StyledLayerName = exports.StyledLayerName = (0, _styledComponents["default"])(_styledComponents2.CenterFlexbox)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  font-size: 12px;\n  letter-spacing: 0.43px;\n  text-transform: capitalize;\n\n  svg {\n    margin-right: 4px;\n  }\n"])), function (props) {
  return props.theme.textColorHl;
});
var StyledTable = _styledComponents["default"].table(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  & .row__delta-value {\n    text-align: right;\n    margin-left: 6px;\n\n    &.positive {\n      color: ", ";\n    }\n\n    &.negative {\n      color: ", ";\n    }\n  }\n  & .row__value,\n  & .row__name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: no-wrap;\n  }\n"])), function (props) {
  return props.theme.notificationColors.success;
}, function (props) {
  return props.theme.negativeBtnActBgd;
});
var StyledDivider = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  // offset divider to reach popover edge\n  margin-left: -14px;\n  margin-right: -14px;\n  border-bottom: 1px solid ", ";\n"])), function (props) {
  return props.theme.panelBorderColor;
});
var Row = function Row(_ref) {
  var name = _ref.name,
    value = _ref.value,
    deltaValue = _ref.deltaValue,
    url = _ref.url;
  // Set 'url' to 'value' if it looks like a url
  if (!url && value && typeof value === 'string' && value.match(/^http/)) {
    url = value;
  }
  var asImg = /<img>/.test(name);
  return /*#__PURE__*/_react["default"].createElement("tr", {
    className: "layer-hover-info__row",
    key: name
  }, /*#__PURE__*/_react["default"].createElement("td", {
    className: "row__name"
  }, asImg ? name.replace('<img>', '') : name), /*#__PURE__*/_react["default"].createElement("td", {
    className: "row__value"
  }, asImg ? /*#__PURE__*/_react["default"].createElement("img", {
    src: value
  }) : url ? /*#__PURE__*/_react["default"].createElement("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: url
  }, value) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("span", null, value), (0, _commonUtils.notNullorUndefined)(deltaValue) ? /*#__PURE__*/_react["default"].createElement("span", {
    className: "row__delta-value ".concat((deltaValue === null || deltaValue === void 0 ? void 0 : deltaValue.toString().charAt(0)) === '+' ? 'positive' : 'negative')
  }, deltaValue) : null)));
};
var EntryInfo = function EntryInfo(_ref2) {
  var fieldsToShow = _ref2.fieldsToShow,
    props = (0, _objectWithoutProperties2["default"])(_ref2, _excluded);
  return /*#__PURE__*/_react["default"].createElement("tbody", null, fieldsToShow.map(function (item) {
    return /*#__PURE__*/_react["default"].createElement(EntryInfoRow, (0, _extends2["default"])({
      key: item.name,
      item: item
    }, props));
  }));
};
var EntryInfoRow = function EntryInfoRow(_ref3) {
  var layer = _ref3.layer,
    item = _ref3.item,
    fields = _ref3.fields,
    data = _ref3.data,
    primaryData = _ref3.primaryData,
    compareType = _ref3.compareType,
    currentTime = _ref3.currentTime;
  var fieldIdx = fields.findIndex(function (f) {
    return f.name === item.name;
  });
  if (fieldIdx < 0) {
    return null;
  }
  var field = fields[fieldIdx];
  var fieldValueAccessor = layer.accessVSFieldValue(field, currentTime);
  var value = fieldValueAccessor(field, data instanceof _utils.DataRow ? {
    index: data._rowIndex
  } : data);
  var primaryValue = primaryData ? fieldValueAccessor(field, primaryData instanceof _utils.DataRow ? {
    index: primaryData._rowIndex
  } : primaryData) : null;
  var displayValue = (0, _reducers.getTooltipDisplayValue)({
    item: item,
    field: field,
    value: value
  });
  var displayDeltaValue = primaryData ? (0, _reducers.getTooltipDisplayDeltaValue)({
    field: field,
    value: value,
    primaryValue: primaryValue,
    compareType: compareType
  }) : null;
  return /*#__PURE__*/_react["default"].createElement(Row, {
    name: field.displayName || field.name,
    value: displayValue,
    deltaValue: displayDeltaValue
  });
};

// TODO: supporting comparative value for aggregated cells as well
var CellInfo = function CellInfo(_ref4) {
  var fieldsToShow = _ref4.fieldsToShow,
    data = _ref4.data,
    layer = _ref4.layer;
  var _ref5 = layer.config,
    colorField = _ref5.colorField,
    sizeField = _ref5.sizeField;
  var colorValue = (0, _react.useMemo)(function () {
    if (colorField && layer.visualChannels.color) {
      var item = fieldsToShow.find(function (field) {
        return field.name === colorField.name;
      });
      return (0, _reducers.getTooltipDisplayValue)({
        item: item,
        field: colorField,
        value: data.colorValue
      });
    }
    return null;
  }, [fieldsToShow, colorField, layer, data.colorValue]);
  var elevationValue = (0, _react.useMemo)(function () {
    if (sizeField && layer.visualChannels.size) {
      var item = fieldsToShow.find(function (field) {
        return field.name === sizeField.name;
      });
      return (0, _reducers.getTooltipDisplayValue)({
        item: item,
        field: sizeField,
        value: data.elevationValue
      });
    }
    return null;
  }, [fieldsToShow, sizeField, layer, data.elevationValue]);
  var aggregatedData = (0, _react.useMemo)(function () {
    if (data.aggregatedData && fieldsToShow) {
      return fieldsToShow.reduce(function (acc, field) {
        var _data$aggregatedData;
        var dataForField = (_data$aggregatedData = data.aggregatedData) === null || _data$aggregatedData === void 0 ? void 0 : _data$aggregatedData[field.name];
        if (dataForField !== null && dataForField !== void 0 && dataForField.measure && field.name !== (colorField === null || colorField === void 0 ? void 0 : colorField.name)) {
          acc.push({
            name: "".concat((0, _utils.capitalizeFirstLetter)(dataForField.measure), " of ").concat(field.name),
            value: dataForField.value
          });
        }
        return acc;
      }, []);
    }
    return [];
  }, [data.aggregatedData, fieldsToShow, colorField === null || colorField === void 0 ? void 0 : colorField.name]);
  var colorMeasure = layer.getVisualChannelDescription('color').measure;
  var sizeMeasure = layer.getVisualChannelDescription('size').measure;
  return /*#__PURE__*/_react["default"].createElement("tbody", null, /*#__PURE__*/_react["default"].createElement(Row, {
    name: 'total points',
    key: "count",
    value: String(data.points && data.points.length)
  }), colorField && layer.visualChannels.color && colorMeasure ? /*#__PURE__*/_react["default"].createElement(Row, {
    name: colorMeasure,
    key: "color",
    value: colorValue || 'N/A'
  }) : null, sizeField && layer.visualChannels.size && sizeMeasure ? /*#__PURE__*/_react["default"].createElement(Row, {
    name: sizeMeasure,
    key: "size",
    value: elevationValue || 'N/A'
  }) : null, aggregatedData.map(function (dataForField, idx) {
    return /*#__PURE__*/_react["default"].createElement(Row, {
      name: dataForField.name,
      key: "data_".concat(idx),
      value: dataForField.value || 'N/A'
    });
  }));
};
var LayerHoverInfoFactory = function LayerHoverInfoFactory() {
  var LayerHoverInfo = function LayerHoverInfo(props) {
    var data = props.data,
      layer = props.layer;
    var intl = (0, _reactIntl.useIntl)();
    if (!data || !layer) {
      return null;
    }
    var hasFieldsToShow = data.fieldValues && Object.keys(data.fieldValues).length > 0 || props.fieldsToShow && props.fieldsToShow.length > 0;
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "map-popover__layer-info"
    }, /*#__PURE__*/_react["default"].createElement(StyledLayerName, {
      className: "map-popover__layer-name"
    }, /*#__PURE__*/_react["default"].createElement(_icons.Layers, {
      height: "12px"
    }), props.layer.config.label), hasFieldsToShow && /*#__PURE__*/_react["default"].createElement(StyledDivider, null), /*#__PURE__*/_react["default"].createElement(StyledTable, null, data.fieldValues ? /*#__PURE__*/_react["default"].createElement("tbody", null, data.fieldValues.map(function (_ref6, i) {
      var labelMessage = _ref6.labelMessage,
        value = _ref6.value;
      return /*#__PURE__*/_react["default"].createElement(Row, {
        key: i,
        name: intl.formatMessage({
          id: labelMessage
        }),
        value: value
      });
    })) : props.layer.isAggregated ? /*#__PURE__*/_react["default"].createElement(CellInfo, props) : /*#__PURE__*/_react["default"].createElement(EntryInfo, props)), hasFieldsToShow && /*#__PURE__*/_react["default"].createElement(StyledDivider, null));
  };
  LayerHoverInfo.propTypes = {
    fields: _propTypes["default"].arrayOf(_propTypes["default"].any),
    fieldsToShow: _propTypes["default"].arrayOf(_propTypes["default"].any),
    layer: _propTypes["default"].object,
    data: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].any), _propTypes["default"].object])
  };
  return LayerHoverInfo;
};
var _default = exports["default"] = LayerHoverInfoFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfc3R5bGVkQ29tcG9uZW50czIiLCJfaWNvbnMiLCJfcHJvcFR5cGVzIiwiX2NvbW1vblV0aWxzIiwiX3V0aWxzIiwiX3JlZHVjZXJzIiwiX3JlYWN0SW50bCIsIl9leGNsdWRlZCIsIl90ZW1wbGF0ZU9iamVjdCIsIl90ZW1wbGF0ZU9iamVjdDIiLCJfdGVtcGxhdGVPYmplY3QzIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiU3R5bGVkTGF5ZXJOYW1lIiwiZXhwb3J0cyIsIkNlbnRlckZsZXhib3giLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsMiIsInByb3BzIiwidGhlbWUiLCJ0ZXh0Q29sb3JIbCIsIlN0eWxlZFRhYmxlIiwidGFibGUiLCJub3RpZmljYXRpb25Db2xvcnMiLCJzdWNjZXNzIiwibmVnYXRpdmVCdG5BY3RCZ2QiLCJTdHlsZWREaXZpZGVyIiwiZGl2IiwicGFuZWxCb3JkZXJDb2xvciIsIlJvdyIsIl9yZWYiLCJuYW1lIiwidmFsdWUiLCJkZWx0YVZhbHVlIiwidXJsIiwibWF0Y2giLCJhc0ltZyIsInRlc3QiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwia2V5IiwicmVwbGFjZSIsInNyYyIsInRhcmdldCIsInJlbCIsImhyZWYiLCJGcmFnbWVudCIsIm5vdE51bGxvclVuZGVmaW5lZCIsImNvbmNhdCIsInRvU3RyaW5nIiwiY2hhckF0IiwiRW50cnlJbmZvIiwiX3JlZjIiLCJmaWVsZHNUb1Nob3ciLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwibWFwIiwiaXRlbSIsIkVudHJ5SW5mb1JvdyIsIl9leHRlbmRzMiIsIl9yZWYzIiwibGF5ZXIiLCJmaWVsZHMiLCJkYXRhIiwicHJpbWFyeURhdGEiLCJjb21wYXJlVHlwZSIsImN1cnJlbnRUaW1lIiwiZmllbGRJZHgiLCJmaW5kSW5kZXgiLCJmIiwiZmllbGQiLCJmaWVsZFZhbHVlQWNjZXNzb3IiLCJhY2Nlc3NWU0ZpZWxkVmFsdWUiLCJEYXRhUm93IiwiaW5kZXgiLCJfcm93SW5kZXgiLCJwcmltYXJ5VmFsdWUiLCJkaXNwbGF5VmFsdWUiLCJnZXRUb29sdGlwRGlzcGxheVZhbHVlIiwiZGlzcGxheURlbHRhVmFsdWUiLCJnZXRUb29sdGlwRGlzcGxheURlbHRhVmFsdWUiLCJkaXNwbGF5TmFtZSIsIkNlbGxJbmZvIiwiX3JlZjQiLCJfcmVmNSIsImNvbmZpZyIsImNvbG9yRmllbGQiLCJzaXplRmllbGQiLCJjb2xvclZhbHVlIiwidXNlTWVtbyIsInZpc3VhbENoYW5uZWxzIiwiY29sb3IiLCJmaW5kIiwiZWxldmF0aW9uVmFsdWUiLCJzaXplIiwiYWdncmVnYXRlZERhdGEiLCJyZWR1Y2UiLCJhY2MiLCJfZGF0YSRhZ2dyZWdhdGVkRGF0YSIsImRhdGFGb3JGaWVsZCIsIm1lYXN1cmUiLCJwdXNoIiwiY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIiwiY29sb3JNZWFzdXJlIiwiZ2V0VmlzdWFsQ2hhbm5lbERlc2NyaXB0aW9uIiwic2l6ZU1lYXN1cmUiLCJTdHJpbmciLCJwb2ludHMiLCJsZW5ndGgiLCJpZHgiLCJMYXllckhvdmVySW5mb0ZhY3RvcnkiLCJMYXllckhvdmVySW5mbyIsImludGwiLCJ1c2VJbnRsIiwiaGFzRmllbGRzVG9TaG93IiwiZmllbGRWYWx1ZXMiLCJrZXlzIiwiTGF5ZXJzIiwiaGVpZ2h0IiwibGFiZWwiLCJfcmVmNiIsImxhYmVsTWVzc2FnZSIsImZvcm1hdE1lc3NhZ2UiLCJpZCIsImlzQWdncmVnYXRlZCIsInByb3BUeXBlcyIsImFycmF5T2YiLCJhbnkiLCJvYmplY3QiLCJvbmVPZlR5cGUiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvbGF5ZXItaG92ZXItaW5mby50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlTWVtb30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQge0NvbXBhcmVUeXBlLCBGaWVsZCwgTWVyZ2UsIFRvb2x0aXBGaWVsZH0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge0NlbnRlckZsZXhib3h9IGZyb20gJy4uL2NvbW1vbi9zdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQge0xheWVyc30gZnJvbSAnLi4vY29tbW9uL2ljb25zJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge25vdE51bGxvclVuZGVmaW5lZH0gZnJvbSAnQGtlcGxlci5nbC9jb21tb24tdXRpbHMnO1xuaW1wb3J0IHtEYXRhUm93fSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcbmltcG9ydCB7TGF5ZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvbGF5ZXJzJztcbmltcG9ydCB7XG4gIEFnZ3JlZ2F0aW9uTGF5ZXJIb3ZlckRhdGEsXG4gIExheWVySG92ZXJQcm9wLFxuICBnZXRUb29sdGlwRGlzcGxheURlbHRhVmFsdWUsXG4gIGdldFRvb2x0aXBEaXNwbGF5VmFsdWVcbn0gZnJvbSAnQGtlcGxlci5nbC9yZWR1Y2Vycyc7XG5pbXBvcnQge3VzZUludGx9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHtWaXNTdGF0ZX0gZnJvbSAnQGtlcGxlci5nbC9zY2hlbWFzJztcbmltcG9ydCB7Y2FwaXRhbGl6ZUZpcnN0TGV0dGVyfSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IFN0eWxlZExheWVyTmFtZSA9IHN0eWxlZChDZW50ZXJGbGV4Ym94KWBcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUudGV4dENvbG9ySGx9O1xuICBmb250LXNpemU6IDEycHg7XG4gIGxldHRlci1zcGFjaW5nOiAwLjQzcHg7XG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xuXG4gIHN2ZyB7XG4gICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gIH1cbmA7XG5cbmNvbnN0IFN0eWxlZFRhYmxlID0gc3R5bGVkLnRhYmxlYFxuICAmIC5yb3dfX2RlbHRhLXZhbHVlIHtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBtYXJnaW4tbGVmdDogNnB4O1xuXG4gICAgJi5wb3NpdGl2ZSB7XG4gICAgICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5ub3RpZmljYXRpb25Db2xvcnMuc3VjY2Vzc307XG4gICAgfVxuXG4gICAgJi5uZWdhdGl2ZSB7XG4gICAgICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5uZWdhdGl2ZUJ0bkFjdEJnZH07XG4gICAgfVxuICB9XG4gICYgLnJvd19fdmFsdWUsXG4gICYgLnJvd19fbmFtZSB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICB3aGl0ZS1zcGFjZTogbm8td3JhcDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkRGl2aWRlciA9IHN0eWxlZC5kaXZgXG4gIC8vIG9mZnNldCBkaXZpZGVyIHRvIHJlYWNoIHBvcG92ZXIgZWRnZVxuICBtYXJnaW4tbGVmdDogLTE0cHg7XG4gIG1hcmdpbi1yaWdodDogLTE0cHg7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAke3Byb3BzID0+IHByb3BzLnRoZW1lLnBhbmVsQm9yZGVyQ29sb3J9O1xuYDtcblxuaW50ZXJmYWNlIFJvd1Byb3BzIHtcbiAgbmFtZTogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nO1xuICBkZWx0YVZhbHVlPzogc3RyaW5nIHwgbnVsbDtcbiAgdXJsPzogc3RyaW5nO1xufVxuXG5jb25zdCBSb3c6IFJlYWN0LkZDPFJvd1Byb3BzPiA9ICh7bmFtZSwgdmFsdWUsIGRlbHRhVmFsdWUsIHVybH0pID0+IHtcbiAgLy8gU2V0ICd1cmwnIHRvICd2YWx1ZScgaWYgaXQgbG9va3MgbGlrZSBhIHVybFxuICBpZiAoIXVybCAmJiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLm1hdGNoKC9eaHR0cC8pKSB7XG4gICAgdXJsID0gdmFsdWU7XG4gIH1cblxuICBjb25zdCBhc0ltZyA9IC88aW1nPi8udGVzdChuYW1lKTtcbiAgcmV0dXJuIChcbiAgICA8dHIgY2xhc3NOYW1lPVwibGF5ZXItaG92ZXItaW5mb19fcm93XCIga2V5PXtuYW1lfT5cbiAgICAgIDx0ZCBjbGFzc05hbWU9XCJyb3dfX25hbWVcIj57YXNJbWcgPyBuYW1lLnJlcGxhY2UoJzxpbWc+JywgJycpIDogbmFtZX08L3RkPlxuICAgICAgPHRkIGNsYXNzTmFtZT1cInJvd19fdmFsdWVcIj5cbiAgICAgICAge2FzSW1nID8gKFxuICAgICAgICAgIDxpbWcgc3JjPXt2YWx1ZX0gLz5cbiAgICAgICAgKSA6IHVybCA/IChcbiAgICAgICAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCIgaHJlZj17dXJsfT5cbiAgICAgICAgICAgIHt2YWx1ZX1cbiAgICAgICAgICA8L2E+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XG4gICAgICAgICAgICB7bm90TnVsbG9yVW5kZWZpbmVkKGRlbHRhVmFsdWUpID8gKFxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHJvd19fZGVsdGEtdmFsdWUgJHtcbiAgICAgICAgICAgICAgICAgIGRlbHRhVmFsdWU/LnRvU3RyaW5nKCkuY2hhckF0KDApID09PSAnKycgPyAncG9zaXRpdmUnIDogJ25lZ2F0aXZlJ1xuICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2RlbHRhVmFsdWV9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICApO1xufTtcblxuZXhwb3J0IHR5cGUgRW50cnlJbmZvUHJvcHMgPSBNZXJnZTxMYXllckhvdmVyUHJvcCwge2ZpZWxkc1RvU2hvdzogVG9vbHRpcEZpZWxkW119PjtcblxuY29uc3QgRW50cnlJbmZvOiBSZWFjdC5GQzxFbnRyeUluZm9Qcm9wcz4gPSAoe2ZpZWxkc1RvU2hvdywgLi4ucHJvcHN9KSA9PiAoXG4gIDx0Ym9keT5cbiAgICB7ZmllbGRzVG9TaG93Lm1hcChpdGVtID0+IChcbiAgICAgIDxFbnRyeUluZm9Sb3cga2V5PXtpdGVtLm5hbWV9IGl0ZW09e2l0ZW19IHsuLi5wcm9wc30gLz5cbiAgICApKX1cbiAgPC90Ym9keT5cbik7XG5cbmV4cG9ydCB0eXBlIEVudHJ5SW5mb1Jvd1Byb3BzID0ge1xuICBkYXRhOiBMYXllckhvdmVyUHJvcFsnZGF0YSddO1xuICBmaWVsZHM6IEZpZWxkW107XG4gIGxheWVyOiBMYXllcjtcbiAgcHJpbWFyeURhdGE/OiBMYXllckhvdmVyUHJvcFsncHJpbWFyeURhdGEnXTtcbiAgY29tcGFyZVR5cGU/OiBDb21wYXJlVHlwZTtcbiAgY3VycmVudFRpbWU/OiBWaXNTdGF0ZVsnYW5pbWF0aW9uQ29uZmlnJ11bJ2N1cnJlbnRUaW1lJ107XG4gIGl0ZW06IFRvb2x0aXBGaWVsZDtcbn07XG5cbmNvbnN0IEVudHJ5SW5mb1JvdzogUmVhY3QuRkM8RW50cnlJbmZvUm93UHJvcHM+ID0gKHtcbiAgbGF5ZXIsXG4gIGl0ZW0sXG4gIGZpZWxkcyxcbiAgZGF0YSxcbiAgcHJpbWFyeURhdGEsXG4gIGNvbXBhcmVUeXBlLFxuICBjdXJyZW50VGltZVxufSkgPT4ge1xuICBjb25zdCBmaWVsZElkeCA9IGZpZWxkcy5maW5kSW5kZXgoZiA9PiBmLm5hbWUgPT09IGl0ZW0ubmFtZSk7XG4gIGlmIChmaWVsZElkeCA8IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBmaWVsZCA9IGZpZWxkc1tmaWVsZElkeF07XG4gIGNvbnN0IGZpZWxkVmFsdWVBY2Nlc3NvciA9IGxheWVyLmFjY2Vzc1ZTRmllbGRWYWx1ZShmaWVsZCwgY3VycmVudFRpbWUpO1xuICBjb25zdCB2YWx1ZSA9IGZpZWxkVmFsdWVBY2Nlc3NvcihmaWVsZCwgZGF0YSBpbnN0YW5jZW9mIERhdGFSb3cgPyB7aW5kZXg6IGRhdGEuX3Jvd0luZGV4fSA6IGRhdGEpO1xuICBjb25zdCBwcmltYXJ5VmFsdWUgPSBwcmltYXJ5RGF0YVxuICAgID8gZmllbGRWYWx1ZUFjY2Vzc29yKFxuICAgICAgICBmaWVsZCxcbiAgICAgICAgcHJpbWFyeURhdGEgaW5zdGFuY2VvZiBEYXRhUm93ID8ge2luZGV4OiBwcmltYXJ5RGF0YS5fcm93SW5kZXh9IDogcHJpbWFyeURhdGFcbiAgICAgIClcbiAgICA6IG51bGw7XG4gIGNvbnN0IGRpc3BsYXlWYWx1ZSA9IGdldFRvb2x0aXBEaXNwbGF5VmFsdWUoe2l0ZW0sIGZpZWxkLCB2YWx1ZX0pO1xuXG4gIGNvbnN0IGRpc3BsYXlEZWx0YVZhbHVlID0gcHJpbWFyeURhdGFcbiAgICA/IGdldFRvb2x0aXBEaXNwbGF5RGVsdGFWYWx1ZSh7XG4gICAgICAgIGZpZWxkLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgcHJpbWFyeVZhbHVlLFxuICAgICAgICBjb21wYXJlVHlwZVxuICAgICAgfSlcbiAgICA6IG51bGw7XG5cbiAgcmV0dXJuIChcbiAgICA8Um93XG4gICAgICBuYW1lPXtmaWVsZC5kaXNwbGF5TmFtZSB8fCBmaWVsZC5uYW1lfVxuICAgICAgdmFsdWU9e2Rpc3BsYXlWYWx1ZX1cbiAgICAgIGRlbHRhVmFsdWU9e2Rpc3BsYXlEZWx0YVZhbHVlfVxuICAgIC8+XG4gICk7XG59O1xuXG4vLyBUT0RPOiBzdXBwb3J0aW5nIGNvbXBhcmF0aXZlIHZhbHVlIGZvciBhZ2dyZWdhdGVkIGNlbGxzIGFzIHdlbGxcbmNvbnN0IENlbGxJbmZvID0gKHtcbiAgZmllbGRzVG9TaG93LFxuICBkYXRhLFxuICBsYXllclxufToge1xuICBkYXRhOiBBZ2dyZWdhdGlvbkxheWVySG92ZXJEYXRhO1xuICBmaWVsZHNUb1Nob3c6IFRvb2x0aXBGaWVsZFtdO1xuICBsYXllcjogTGF5ZXI7XG59KSA9PiB7XG4gIGNvbnN0IHtjb2xvckZpZWxkLCBzaXplRmllbGR9ID0gbGF5ZXIuY29uZmlnIGFzIGFueTtcblxuICBjb25zdCBjb2xvclZhbHVlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKGNvbG9yRmllbGQgJiYgbGF5ZXIudmlzdWFsQ2hhbm5lbHMuY29sb3IpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBmaWVsZHNUb1Nob3cuZmluZChmaWVsZCA9PiBmaWVsZC5uYW1lID09PSBjb2xvckZpZWxkLm5hbWUpO1xuICAgICAgcmV0dXJuIGdldFRvb2x0aXBEaXNwbGF5VmFsdWUoe2l0ZW0sIGZpZWxkOiBjb2xvckZpZWxkLCB2YWx1ZTogZGF0YS5jb2xvclZhbHVlfSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LCBbZmllbGRzVG9TaG93LCBjb2xvckZpZWxkLCBsYXllciwgZGF0YS5jb2xvclZhbHVlXSk7XG5cbiAgY29uc3QgZWxldmF0aW9uVmFsdWUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoc2l6ZUZpZWxkICYmIGxheWVyLnZpc3VhbENoYW5uZWxzLnNpemUpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBmaWVsZHNUb1Nob3cuZmluZChmaWVsZCA9PiBmaWVsZC5uYW1lID09PSBzaXplRmllbGQubmFtZSk7XG4gICAgICByZXR1cm4gZ2V0VG9vbHRpcERpc3BsYXlWYWx1ZSh7aXRlbSwgZmllbGQ6IHNpemVGaWVsZCwgdmFsdWU6IGRhdGEuZWxldmF0aW9uVmFsdWV9KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sIFtmaWVsZHNUb1Nob3csIHNpemVGaWVsZCwgbGF5ZXIsIGRhdGEuZWxldmF0aW9uVmFsdWVdKTtcblxuICBjb25zdCBhZ2dyZWdhdGVkRGF0YSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChkYXRhLmFnZ3JlZ2F0ZWREYXRhICYmIGZpZWxkc1RvU2hvdykge1xuICAgICAgcmV0dXJuIGZpZWxkc1RvU2hvdy5yZWR1Y2UoKGFjYywgZmllbGQpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YUZvckZpZWxkID0gZGF0YS5hZ2dyZWdhdGVkRGF0YT8uW2ZpZWxkLm5hbWVdO1xuICAgICAgICBpZiAoZGF0YUZvckZpZWxkPy5tZWFzdXJlICYmIGZpZWxkLm5hbWUgIT09IGNvbG9yRmllbGQ/Lm5hbWUpIHtcbiAgICAgICAgICBhY2MucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBgJHtjYXBpdGFsaXplRmlyc3RMZXR0ZXIoZGF0YUZvckZpZWxkLm1lYXN1cmUpfSBvZiAke2ZpZWxkLm5hbWV9YCxcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhRm9yRmllbGQudmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwgW10gYXMge25hbWU6IHN0cmluZzsgdmFsdWU/OiBzdHJpbmd9W10pO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH0sIFtkYXRhLmFnZ3JlZ2F0ZWREYXRhLCBmaWVsZHNUb1Nob3csIGNvbG9yRmllbGQ/Lm5hbWVdKTtcblxuICBjb25zdCBjb2xvck1lYXN1cmUgPSBsYXllci5nZXRWaXN1YWxDaGFubmVsRGVzY3JpcHRpb24oJ2NvbG9yJykubWVhc3VyZTtcbiAgY29uc3Qgc2l6ZU1lYXN1cmUgPSBsYXllci5nZXRWaXN1YWxDaGFubmVsRGVzY3JpcHRpb24oJ3NpemUnKS5tZWFzdXJlO1xuICByZXR1cm4gKFxuICAgIDx0Ym9keT5cbiAgICAgIDxSb3cgbmFtZT17J3RvdGFsIHBvaW50cyd9IGtleT1cImNvdW50XCIgdmFsdWU9e1N0cmluZyhkYXRhLnBvaW50cyAmJiBkYXRhLnBvaW50cy5sZW5ndGgpfSAvPlxuICAgICAge2NvbG9yRmllbGQgJiYgbGF5ZXIudmlzdWFsQ2hhbm5lbHMuY29sb3IgJiYgY29sb3JNZWFzdXJlID8gKFxuICAgICAgICA8Um93IG5hbWU9e2NvbG9yTWVhc3VyZX0ga2V5PVwiY29sb3JcIiB2YWx1ZT17Y29sb3JWYWx1ZSB8fCAnTi9BJ30gLz5cbiAgICAgICkgOiBudWxsfVxuICAgICAge3NpemVGaWVsZCAmJiBsYXllci52aXN1YWxDaGFubmVscy5zaXplICYmIHNpemVNZWFzdXJlID8gKFxuICAgICAgICA8Um93IG5hbWU9e3NpemVNZWFzdXJlfSBrZXk9XCJzaXplXCIgdmFsdWU9e2VsZXZhdGlvblZhbHVlIHx8ICdOL0EnfSAvPlxuICAgICAgKSA6IG51bGx9XG4gICAgICB7YWdncmVnYXRlZERhdGEubWFwKChkYXRhRm9yRmllbGQsIGlkeCkgPT4gKFxuICAgICAgICA8Um93IG5hbWU9e2RhdGFGb3JGaWVsZC5uYW1lfSBrZXk9e2BkYXRhXyR7aWR4fWB9IHZhbHVlPXtkYXRhRm9yRmllbGQudmFsdWUgfHwgJ04vQSd9IC8+XG4gICAgICApKX1cbiAgICA8L3Rib2R5PlxuICApO1xufTtcblxuY29uc3QgTGF5ZXJIb3ZlckluZm9GYWN0b3J5ID0gKCkgPT4ge1xuICBjb25zdCBMYXllckhvdmVySW5mbyA9IHByb3BzID0+IHtcbiAgICBjb25zdCB7ZGF0YSwgbGF5ZXJ9ID0gcHJvcHM7XG4gICAgY29uc3QgaW50bCA9IHVzZUludGwoKTtcbiAgICBpZiAoIWRhdGEgfHwgIWxheWVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBoYXNGaWVsZHNUb1Nob3cgPVxuICAgICAgKGRhdGEuZmllbGRWYWx1ZXMgJiYgT2JqZWN0LmtleXMoZGF0YS5maWVsZFZhbHVlcykubGVuZ3RoID4gMCkgfHxcbiAgICAgIChwcm9wcy5maWVsZHNUb1Nob3cgJiYgcHJvcHMuZmllbGRzVG9TaG93Lmxlbmd0aCA+IDApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFwLXBvcG92ZXJfX2xheWVyLWluZm9cIj5cbiAgICAgICAgPFN0eWxlZExheWVyTmFtZSBjbGFzc05hbWU9XCJtYXAtcG9wb3Zlcl9fbGF5ZXItbmFtZVwiPlxuICAgICAgICAgIDxMYXllcnMgaGVpZ2h0PVwiMTJweFwiIC8+XG4gICAgICAgICAge3Byb3BzLmxheWVyLmNvbmZpZy5sYWJlbH1cbiAgICAgICAgPC9TdHlsZWRMYXllck5hbWU+XG4gICAgICAgIHtoYXNGaWVsZHNUb1Nob3cgJiYgPFN0eWxlZERpdmlkZXIgLz59XG4gICAgICAgIDxTdHlsZWRUYWJsZT5cbiAgICAgICAgICB7ZGF0YS5maWVsZFZhbHVlcyA/IChcbiAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAge2RhdGEuZmllbGRWYWx1ZXMubWFwKCh7bGFiZWxNZXNzYWdlLCB2YWx1ZX0sIGkpID0+IChcbiAgICAgICAgICAgICAgICA8Um93IGtleT17aX0gbmFtZT17aW50bC5mb3JtYXRNZXNzYWdlKHtpZDogbGFiZWxNZXNzYWdlfSl9IHZhbHVlPXt2YWx1ZX0gLz5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICkgOiBwcm9wcy5sYXllci5pc0FnZ3JlZ2F0ZWQgPyAoXG4gICAgICAgICAgICA8Q2VsbEluZm8gey4uLnByb3BzfSAvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8RW50cnlJbmZvIHsuLi5wcm9wc30gLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1N0eWxlZFRhYmxlPlxuICAgICAgICB7aGFzRmllbGRzVG9TaG93ICYmIDxTdHlsZWREaXZpZGVyIC8+fVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICBMYXllckhvdmVySW5mby5wcm9wVHlwZXMgPSB7XG4gICAgZmllbGRzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuYW55KSxcbiAgICBmaWVsZHNUb1Nob3c6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hbnkpLFxuICAgIGxheWVyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGRhdGE6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hbnkpLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcbiAgcmV0dXJuIExheWVySG92ZXJJbmZvO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGF5ZXJIb3ZlckluZm9GYWN0b3J5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGlCQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFFQSxJQUFBRyxrQkFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksTUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssVUFBQSxHQUFBSCxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQU0sWUFBQSxHQUFBTixPQUFBO0FBQ0EsSUFBQU8sTUFBQSxHQUFBUCxPQUFBO0FBRUEsSUFBQVEsU0FBQSxHQUFBUixPQUFBO0FBTUEsSUFBQVMsVUFBQSxHQUFBVCxPQUFBO0FBQW1DLElBQUFVLFNBQUE7QUFBQSxJQUFBQyxlQUFBLEVBQUFDLGdCQUFBLEVBQUFDLGdCQUFBLEVBbEJuQztBQUNBO0FBQUEsU0FBQUMseUJBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQTtFQUFBLElBQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFB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QUFFLENBQUMsZUFDckNoRCxNQUFBLFlBQUE0RCxhQUFBLENBQUNqQixXQUFXLFFBQ1R5QyxJQUFJLENBQUNvRCxXQUFXLGdCQUNmeEksTUFBQSxZQUFBNEQsYUFBQSxnQkFDR3dCLElBQUksQ0FBQ29ELFdBQVcsQ0FBQzNELEdBQUcsQ0FBQyxVQUFBZ0UsS0FBQSxFQUF3QjNHLENBQUM7TUFBQSxJQUF2QjRHLFlBQVksR0FBQUQsS0FBQSxDQUFaQyxZQUFZO1FBQUV4RixLQUFLLEdBQUF1RixLQUFBLENBQUx2RixLQUFLO01BQUEsb0JBQ3pDdEQsTUFBQSxZQUFBNEQsYUFBQSxDQUFDVCxHQUFHO1FBQUNXLEdBQUcsRUFBRTVCLENBQUU7UUFBQ21CLElBQUksRUFBRWdGLElBQUksQ0FBQ1UsYUFBYSxDQUFDO1VBQUNDLEVBQUUsRUFBRUY7UUFBWSxDQUFDLENBQUU7UUFBQ3hGLEtBQUssRUFBRUE7TUFBTSxDQUFFLENBQUM7SUFBQSxDQUM1RSxDQUNJLENBQUMsR0FDTmQsS0FBSyxDQUFDMEMsS0FBSyxDQUFDK0QsWUFBWSxnQkFDMUJqSixNQUFBLFlBQUE0RCxhQUFBLENBQUMyQyxRQUFRLEVBQUsvRCxLQUFRLENBQUMsZ0JBRXZCeEMsTUFBQSxZQUFBNEQsYUFBQSxDQUFDYSxTQUFTLEVBQUtqQyxLQUFRLENBRWQsQ0FBQyxFQUNiK0YsZUFBZSxpQkFBSXZJLE1BQUEsWUFBQTRELGFBQUEsQ0FBQ1osYUFBYSxNQUFFLENBQ2pDLENBQUM7RUFFVixDQUFDO0VBRURvRixjQUFjLENBQUNjLFNBQVMsR0FBRztJQUN6Qi9ELE1BQU0sRUFBRTVFLFVBQUEsV0FBUyxDQUFDNEksT0FBTyxDQUFDNUksVUFBQSxXQUFTLENBQUM2SSxHQUFHLENBQUM7SUFDeEN6RSxZQUFZLEVBQUVwRSxVQUFBLFdBQVMsQ0FBQzRJLE9BQU8sQ0FBQzVJLFVBQUEsV0FBUyxDQUFDNkksR0FBRyxDQUFDO0lBQzlDbEUsS0FBSyxFQUFFM0UsVUFBQSxXQUFTLENBQUM4SSxNQUFNO0lBQ3ZCakUsSUFBSSxFQUFFN0UsVUFBQSxXQUFTLENBQUMrSSxTQUFTLENBQUMsQ0FBQy9JLFVBQUEsV0FBUyxDQUFDNEksT0FBTyxDQUFDNUksVUFBQSxXQUFTLENBQUM2SSxHQUFHLENBQUMsRUFBRTdJLFVBQUEsV0FBUyxDQUFDOEksTUFBTSxDQUFDO0VBQ2hGLENBQUM7RUFDRCxPQUFPakIsY0FBYztBQUN2QixDQUFDO0FBQUMsSUFBQW1CLFFBQUEsR0FBQWxILE9BQUEsY0FFYThGLHFCQUFxQiIsImlnbm9yZUxpc3QiOltdfQ==