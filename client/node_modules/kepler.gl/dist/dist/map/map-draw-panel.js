"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _constants = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/constants/src");
var _icons = require("../common/icons");
var _styledComponents = require("../common/styled-components");
var _toolbarItem = _interopRequireDefault(require("../common/toolbar-item"));
var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));
var _mapControlToolbar = _interopRequireDefault(require("./map-control-toolbar"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

MapDrawPanelFactory.deps = [_mapControlTooltip["default"], _mapControlToolbar["default"]];
function MapDrawPanelFactory(MapControlTooltip, MapControlToolbar) {
  var defaultActionIcons = {
    visible: _icons.EyeSeen,
    hidden: _icons.EyeUnseen,
    polygon: _icons.DrawPolygon,
    cursor: _icons.CursorClick,
    innerPolygon: _icons.Polygon,
    rectangle: _icons.Rectangle
  };
  var MapDrawPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var _mapControls$mapDraw, _mapControls$mapDraw2;
    var editor = _ref.editor,
      mapControls = _ref.mapControls,
      onToggleMapControl = _ref.onToggleMapControl,
      onSetEditorMode = _ref.onSetEditorMode,
      _ref$actionIcons = _ref.actionIcons,
      actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons;
    var isActive = mapControls === null || mapControls === void 0 || (_mapControls$mapDraw = mapControls.mapDraw) === null || _mapControls$mapDraw === void 0 ? void 0 : _mapControls$mapDraw.active;
    var onToggleMenuPanel = (0, _react.useCallback)(function () {
      return onToggleMapControl('mapDraw');
    }, [onToggleMapControl]);
    if (!(mapControls !== null && mapControls !== void 0 && (_mapControls$mapDraw2 = mapControls.mapDraw) !== null && _mapControls$mapDraw2 !== void 0 && _mapControls$mapDraw2.show)) {
      return null;
    }
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "map-draw-controls",
      style: {
        position: 'relative'
      }
    }, isActive ? /*#__PURE__*/_react["default"].createElement(MapControlToolbar, {
      show: isActive
    }, /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
      className: "edit-feature",
      onClick: function onClick() {
        return onSetEditorMode(_constants.EDITOR_MODES.EDIT);
      },
      label: "toolbar.select",
      icon: actionIcons.cursor,
      active: editor.mode === _constants.EDITOR_MODES.EDIT
    }), /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
      className: "draw-feature",
      onClick: function onClick() {
        return onSetEditorMode(_constants.EDITOR_MODES.DRAW_POLYGON);
      },
      label: "toolbar.polygon",
      icon: actionIcons.innerPolygon,
      active: editor.mode === _constants.EDITOR_MODES.DRAW_POLYGON
    }), /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
      className: "draw-rectangle",
      onClick: function onClick() {
        return onSetEditorMode(_constants.EDITOR_MODES.DRAW_RECTANGLE);
      },
      label: "toolbar.rectangle",
      icon: actionIcons.rectangle,
      active: editor.mode === _constants.EDITOR_MODES.DRAW_RECTANGLE
    })) : null, /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "map-draw",
      message: "tooltip.DrawOnMap"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.MapControlButton, {
      className: (0, _classnames["default"])('map-control-button', 'map-draw', {
        isActive: isActive
      }),
      onClick: function onClick(e) {
        e.preventDefault();
        onToggleMenuPanel();
      },
      active: isActive
    }, /*#__PURE__*/_react["default"].createElement(actionIcons.polygon, {
      height: "18px"
    }))));
  });
  MapDrawPanel.displayName = 'MapDrawPanel';
  return MapDrawPanel;
}
var _default = exports["default"] = MapDrawPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfY2xhc3NuYW1lcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY29uc3RhbnRzIiwiX2ljb25zIiwiX3N0eWxlZENvbXBvbmVudHMiLCJfdG9vbGJhckl0ZW0iLCJfbWFwQ29udHJvbFRvb2x0aXAiLCJfbWFwQ29udHJvbFRvb2xiYXIiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJNYXBEcmF3UGFuZWxGYWN0b3J5IiwiZGVwcyIsIk1hcENvbnRyb2xUb29sdGlwIiwiTWFwQ29udHJvbFRvb2xiYXIiLCJkZWZhdWx0QWN0aW9uSWNvbnMiLCJ2aXNpYmxlIiwiRXllU2VlbiIsImhpZGRlbiIsIkV5ZVVuc2VlbiIsInBvbHlnb24iLCJEcmF3UG9seWdvbiIsImN1cnNvciIsIkN1cnNvckNsaWNrIiwiaW5uZXJQb2x5Z29uIiwiUG9seWdvbiIsInJlY3RhbmdsZSIsIlJlY3RhbmdsZSIsIk1hcERyYXdQYW5lbCIsIm1lbW8iLCJfcmVmIiwiX21hcENvbnRyb2xzJG1hcERyYXciLCJfbWFwQ29udHJvbHMkbWFwRHJhdzIiLCJlZGl0b3IiLCJtYXBDb250cm9scyIsIm9uVG9nZ2xlTWFwQ29udHJvbCIsIm9uU2V0RWRpdG9yTW9kZSIsIl9yZWYkYWN0aW9uSWNvbnMiLCJhY3Rpb25JY29ucyIsImlzQWN0aXZlIiwibWFwRHJhdyIsImFjdGl2ZSIsIm9uVG9nZ2xlTWVudVBhbmVsIiwidXNlQ2FsbGJhY2siLCJzaG93IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInN0eWxlIiwicG9zaXRpb24iLCJvbkNsaWNrIiwiRURJVE9SX01PREVTIiwiRURJVCIsImxhYmVsIiwiaWNvbiIsIm1vZGUiLCJEUkFXX1BPTFlHT04iLCJEUkFXX1JFQ1RBTkdMRSIsImlkIiwibWVzc2FnZSIsIk1hcENvbnRyb2xCdXR0b24iLCJwcmV2ZW50RGVmYXVsdCIsImhlaWdodCIsImRpc3BsYXlOYW1lIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hcC9tYXAtZHJhdy1wYW5lbC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlQ2FsbGJhY2t9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQge0VESVRPUl9NT0RFU30gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtDdXJzb3JDbGljaywgRHJhd1BvbHlnb24sIEV5ZVNlZW4sIEV5ZVVuc2VlbiwgUG9seWdvbiwgUmVjdGFuZ2xlfSBmcm9tICcuLi9jb21tb24vaWNvbnMnO1xuaW1wb3J0IHtNYXBDb250cm9sQnV0dG9ufSBmcm9tICcuLi9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IFRvb2xiYXJJdGVtIGZyb20gJy4uL2NvbW1vbi90b29sYmFyLWl0ZW0nO1xuaW1wb3J0IE1hcENvbnRyb2xUb29sdGlwRmFjdG9yeSBmcm9tICcuL21hcC1jb250cm9sLXRvb2x0aXAnO1xuaW1wb3J0IE1hcENvbnRyb2xUb29sYmFyRmFjdG9yeSBmcm9tICcuL21hcC1jb250cm9sLXRvb2xiYXInO1xuaW1wb3J0IHtFZGl0b3IsIE1hcENvbnRyb2xzfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCB7QmFzZVByb3BzfSBmcm9tICcuLi9jb21tb24vaWNvbnMnO1xuXG5NYXBEcmF3UGFuZWxGYWN0b3J5LmRlcHMgPSBbTWFwQ29udHJvbFRvb2x0aXBGYWN0b3J5LCBNYXBDb250cm9sVG9vbGJhckZhY3RvcnldO1xuXG5leHBvcnQgdHlwZSBNYXBEcmF3UGFuZWxQcm9wcyA9IHtcbiAgZWRpdG9yOiBFZGl0b3I7XG4gIG1hcENvbnRyb2xzOiBNYXBDb250cm9scztcbiAgb25Ub2dnbGVNYXBDb250cm9sOiAoY29udHJvbDogc3RyaW5nKSA9PiB2b2lkO1xuICBvblNldEVkaXRvck1vZGU6IChtb2RlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIG9uVG9nZ2xlRWRpdG9yVmlzaWJpbGl0eTogKCkgPT4gdm9pZDtcbiAgYWN0aW9uSWNvbnM6IHtbaWQ6IHN0cmluZ106IFJlYWN0LkNvbXBvbmVudFR5cGU8UGFydGlhbDxCYXNlUHJvcHM+Pn07XG59O1xuXG5mdW5jdGlvbiBNYXBEcmF3UGFuZWxGYWN0b3J5KFxuICBNYXBDb250cm9sVG9vbHRpcDogUmV0dXJuVHlwZTx0eXBlb2YgTWFwQ29udHJvbFRvb2x0aXBGYWN0b3J5PixcbiAgTWFwQ29udHJvbFRvb2xiYXI6IFJldHVyblR5cGU8dHlwZW9mIE1hcENvbnRyb2xUb29sYmFyRmFjdG9yeT5cbikge1xuICBjb25zdCBkZWZhdWx0QWN0aW9uSWNvbnMgPSB7XG4gICAgdmlzaWJsZTogRXllU2VlbixcbiAgICBoaWRkZW46IEV5ZVVuc2VlbixcbiAgICBwb2x5Z29uOiBEcmF3UG9seWdvbixcbiAgICBjdXJzb3I6IEN1cnNvckNsaWNrLFxuICAgIGlubmVyUG9seWdvbjogUG9seWdvbixcbiAgICByZWN0YW5nbGU6IFJlY3RhbmdsZVxuICB9O1xuXG4gIGNvbnN0IE1hcERyYXdQYW5lbDogUmVhY3QuRkM8TWFwRHJhd1BhbmVsUHJvcHM+ID0gUmVhY3QubWVtbyhcbiAgICAoe1xuICAgICAgZWRpdG9yLFxuICAgICAgbWFwQ29udHJvbHMsXG4gICAgICBvblRvZ2dsZU1hcENvbnRyb2wsXG4gICAgICBvblNldEVkaXRvck1vZGUsXG4gICAgICBhY3Rpb25JY29ucyA9IGRlZmF1bHRBY3Rpb25JY29uc1xuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IGlzQWN0aXZlID0gbWFwQ29udHJvbHM/Lm1hcERyYXc/LmFjdGl2ZTtcbiAgICAgIGNvbnN0IG9uVG9nZ2xlTWVudVBhbmVsID0gdXNlQ2FsbGJhY2soXG4gICAgICAgICgpID0+IG9uVG9nZ2xlTWFwQ29udHJvbCgnbWFwRHJhdycpLFxuICAgICAgICBbb25Ub2dnbGVNYXBDb250cm9sXVxuICAgICAgKTtcbiAgICAgIGlmICghbWFwQ29udHJvbHM/Lm1hcERyYXc/LnNob3cpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcC1kcmF3LWNvbnRyb2xzXCIgc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJ319PlxuICAgICAgICAgIHtpc0FjdGl2ZSA/IChcbiAgICAgICAgICAgIDxNYXBDb250cm9sVG9vbGJhciBzaG93PXtpc0FjdGl2ZX0+XG4gICAgICAgICAgICAgIDxUb29sYmFySXRlbVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXQtZmVhdHVyZVwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25TZXRFZGl0b3JNb2RlKEVESVRPUl9NT0RFUy5FRElUKX1cbiAgICAgICAgICAgICAgICBsYWJlbD1cInRvb2xiYXIuc2VsZWN0XCJcbiAgICAgICAgICAgICAgICBpY29uPXthY3Rpb25JY29ucy5jdXJzb3J9XG4gICAgICAgICAgICAgICAgYWN0aXZlPXtlZGl0b3IubW9kZSA9PT0gRURJVE9SX01PREVTLkVESVR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxUb29sYmFySXRlbVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImRyYXctZmVhdHVyZVwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25TZXRFZGl0b3JNb2RlKEVESVRPUl9NT0RFUy5EUkFXX1BPTFlHT04pfVxuICAgICAgICAgICAgICAgIGxhYmVsPVwidG9vbGJhci5wb2x5Z29uXCJcbiAgICAgICAgICAgICAgICBpY29uPXthY3Rpb25JY29ucy5pbm5lclBvbHlnb259XG4gICAgICAgICAgICAgICAgYWN0aXZlPXtlZGl0b3IubW9kZSA9PT0gRURJVE9SX01PREVTLkRSQVdfUE9MWUdPTn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPFRvb2xiYXJJdGVtXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZHJhdy1yZWN0YW5nbGVcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uU2V0RWRpdG9yTW9kZShFRElUT1JfTU9ERVMuRFJBV19SRUNUQU5HTEUpfVxuICAgICAgICAgICAgICAgIGxhYmVsPVwidG9vbGJhci5yZWN0YW5nbGVcIlxuICAgICAgICAgICAgICAgIGljb249e2FjdGlvbkljb25zLnJlY3RhbmdsZX1cbiAgICAgICAgICAgICAgICBhY3RpdmU9e2VkaXRvci5tb2RlID09PSBFRElUT1JfTU9ERVMuRFJBV19SRUNUQU5HTEV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L01hcENvbnRyb2xUb29sYmFyPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDxNYXBDb250cm9sVG9vbHRpcCBpZD1cIm1hcC1kcmF3XCIgbWVzc2FnZT1cInRvb2x0aXAuRHJhd09uTWFwXCI+XG4gICAgICAgICAgICA8TWFwQ29udHJvbEJ1dHRvblxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ21hcC1jb250cm9sLWJ1dHRvbicsICdtYXAtZHJhdycsIHtpc0FjdGl2ZX0pfVxuICAgICAgICAgICAgICBvbkNsaWNrPXtlID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgb25Ub2dnbGVNZW51UGFuZWwoKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgYWN0aXZlPXtpc0FjdGl2ZX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGFjdGlvbkljb25zLnBvbHlnb24gaGVpZ2h0PVwiMThweFwiIC8+XG4gICAgICAgICAgICA8L01hcENvbnRyb2xCdXR0b24+XG4gICAgICAgICAgPC9NYXBDb250cm9sVG9vbHRpcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cbiAgKTtcblxuICBNYXBEcmF3UGFuZWwuZGlzcGxheU5hbWUgPSAnTWFwRHJhd1BhbmVsJztcbiAgcmV0dXJuIE1hcERyYXdQYW5lbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFwRHJhd1BhbmVsRmFjdG9yeTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFFQSxJQUFBRyxVQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxNQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxpQkFBQSxHQUFBTCxPQUFBO0FBQ0EsSUFBQU0sWUFBQSxHQUFBSixzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQU8sa0JBQUEsR0FBQUwsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFRLGtCQUFBLEdBQUFOLHNCQUFBLENBQUFGLE9BQUE7QUFBNkQsU0FBQVMseUJBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQTtFQUFBLElBQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQTtJQUFBLE9BQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBO0VBQUEsR0FBQUYsQ0FBQTtBQUFBO0FBQUEsU0FBQVgsd0JBQUFXLENBQUEsRUFBQUUsQ0FBQTtFQUFBLEtBQUFBLENBQUEsSUFB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