"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/node_modules/react"));
var _headless = _interopRequireDefault(require("@tippyjs/react/headless"));
var _utils = require("/Users/ihordykhta/Desktop/unfolded/kepler.gl/src/utils/src");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      (0, _defineProperty2["default"])(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
} // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// @ts-nocheck
var isTestEnv = (0, _utils.isTest)();

/**
 * Lazy mounting tippy content
 * https://gist.github.com/atomiks/520f4b0c7b537202a23a3059d4eec908
 */
// eslint-disable-next-line react/display-name
var LazyTippy = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  // Mount in test env for easier testing
  var _useState = (0, _react.useState)(isTestEnv),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    mounted = _useState2[0],
    setMounted = _useState2[1];
  var lazyPlugin = {
    fn: function fn() {
      return {
        onMount: function onMount() {
          return setMounted(true);
        },
        onHidden: function onHidden() {
          return setMounted(false);
        }
      };
    }
  };
  var computedProps = _objectSpread({}, props);
  computedProps.plugins = [lazyPlugin].concat((0, _toConsumableArray2["default"])(props.plugins || []));
  if (props.render) {
    computedProps.render = function () {
      return mounted ? props.render.apply(props, arguments) : '';
    };
  } else {
    computedProps.content = mounted ? props.content : '';
  }
  return /*#__PURE__*/_react["default"].createElement(_headless["default"], (0, _extends2["default"])({}, computedProps, {
    ref: ref
  }));
});
var _default = exports["default"] = LazyTippy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfaGVhZGxlc3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3V0aWxzIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0Iiwib3duS2V5cyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiaXNUZXN0RW52IiwiaXNUZXN0IiwiTGF6eVRpcHB5IiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwibW91bnRlZCIsInNldE1vdW50ZWQiLCJsYXp5UGx1Z2luIiwiZm4iLCJvbk1vdW50Iiwib25IaWRkZW4iLCJjb21wdXRlZFByb3BzIiwicGx1Z2lucyIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJyZW5kZXIiLCJjb250ZW50IiwiY3JlYXRlRWxlbWVudCIsIl9leHRlbmRzMiIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXAvbGF6eS10aXBweS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCBSZWFjdCwge3VzZVN0YXRlLCBmb3J3YXJkUmVmfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGlwcHkgZnJvbSAnQHRpcHB5anMvcmVhY3QvaGVhZGxlc3MnO1xuaW1wb3J0IHR5cGUge1RpcHB5UHJvcHN9IGZyb20gJ0B0aXBweWpzL3JlYWN0JztcbmltcG9ydCB7aXNUZXN0fSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcblxuY29uc3QgaXNUZXN0RW52ID0gaXNUZXN0KCk7XG5cbi8qKlxuICogTGF6eSBtb3VudGluZyB0aXBweSBjb250ZW50XG4gKiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9hdG9taWtzLzUyMGY0YjBjN2I1MzcyMDJhMjNhMzA1OWQ0ZWVjOTA4XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9kaXNwbGF5LW5hbWVcbmNvbnN0IExhenlUaXBweSA9IGZvcndhcmRSZWYoKHByb3BzOiBUaXBweVByb3BzLCByZWYpID0+IHtcbiAgLy8gTW91bnQgaW4gdGVzdCBlbnYgZm9yIGVhc2llciB0ZXN0aW5nXG4gIGNvbnN0IFttb3VudGVkLCBzZXRNb3VudGVkXSA9IHVzZVN0YXRlKGlzVGVzdEVudik7XG5cbiAgY29uc3QgbGF6eVBsdWdpbiA9IHtcbiAgICBmbjogKCkgPT4gKHtcbiAgICAgIG9uTW91bnQ6ICgpID0+IHNldE1vdW50ZWQodHJ1ZSksXG4gICAgICBvbkhpZGRlbjogKCkgPT4gc2V0TW91bnRlZChmYWxzZSlcbiAgICB9KVxuICB9O1xuXG4gIGNvbnN0IGNvbXB1dGVkUHJvcHMgPSB7Li4ucHJvcHN9O1xuXG4gIGNvbXB1dGVkUHJvcHMucGx1Z2lucyA9IFtsYXp5UGx1Z2luLCAuLi4ocHJvcHMucGx1Z2lucyB8fCBbXSldO1xuXG4gIGlmIChwcm9wcy5yZW5kZXIpIHtcbiAgICBjb21wdXRlZFByb3BzLnJlbmRlciA9ICguLi5hcmdzKSA9PiAobW91bnRlZCA/IHByb3BzLnJlbmRlciguLi5hcmdzKSA6ICcnKTtcbiAgfSBlbHNlIHtcbiAgICBjb21wdXRlZFByb3BzLmNvbnRlbnQgPSBtb3VudGVkID8gcHJvcHMuY29udGVudCA6ICcnO1xuICB9XG5cbiAgcmV0dXJuIDxUaXBweSB7Li4uY29tcHV0ZWRQcm9wc30gcmVmPXtyZWZ9IC8+O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IExhenlUaXBweTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBSUEsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsU0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBQUcsTUFBQSxHQUFBSCxPQUFBO0FBQXdDLFNBQUFJLHlCQUFBQyxDQUFBO0VBQUEseUJBQUFDLE9BQUE7RUFBQSxJQUFBQyxDQUFBLE9BQUFELE9BQUE7SUFBQUUsQ0FBQSxPQUFBRixPQUFBO0VBQUEsUUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLENBQUE7SUFBQSxPQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQTtFQUFBLEdBQUFGLENBQUE7QUFBQTtBQUFBLFNBQUFOLHdCQUFBTSxDQUFBLEVBQUFFLENBQUE7RUFBQSxLQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUE7RUFBQSxhQUFBQSxDQUFBLGdCQUFBSyxPQUFBLENBQUFMLENBQUEsMEJBQUFBLENBQUE7SUFBQSxXQUFBQTtFQUFBO0VBQUEsSUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBO0VBQUEsSUFBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQTtFQUFBLElBQUFRLENBQUE7TUFBQUMsU0FBQTtJQUFBO0lBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FB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