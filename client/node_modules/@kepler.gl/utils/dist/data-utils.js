"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MIN_LONGITUDE = exports.MIN_LATITUDE = exports.MAX_LONGITUDE = exports.MAX_LATITUDE = exports.FIELD_DISPLAY_FORMAT = void 0;
exports.applyCustomFormat = applyCustomFormat;
exports.applyDefaultFormat = applyDefaultFormat;
exports.applyValueMap = applyValueMap;
exports.clamp = clamp;
exports.datetimeFormatter = datetimeFormatter;
exports.floatFormatter = exports.defaultFormatter = void 0;
exports.formatNumber = formatNumber;
exports.getBooleanFormatter = getBooleanFormatter;
exports.getColumnFormatter = getColumnFormatter;
exports.getFormatter = getFormatter;
exports.getLatLngBounds = getLatLngBounds;
exports.getRoundingDecimalFromStep = getRoundingDecimalFromStep;
exports.getSampleData = getSampleData;
exports.getSortingFunction = getSortingFunction;
exports.hasOwnProperty = hasOwnProperty;
exports.isNumber = isNumber;
exports.normalizeSliderValue = normalizeSliderValue;
exports.numberSort = numberSort;
exports.parseFieldValue = void 0;
exports.preciseRound = preciseRound;
exports.reverseFormatNumber = reverseFormatNumber;
exports.roundToFour = roundToFour;
exports.roundValToStep = roundValToStep;
exports.timeToUnixMilli = timeToUnixMilli;
exports.uint8ArrayToHex = uint8ArrayToHex;
exports.unique = unique;
exports.validateCoordinate = validateCoordinate;
exports.validateLatitude = validateLatitude;
exports.validateLongitude = validateLongitude;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var arrow = _interopRequireWildcard(require("apache-arrow"));
var _assert = _interopRequireDefault(require("assert"));
var _d3Format = require("d3-format");
var _momentTimezone = _interopRequireDefault(require("moment-timezone"));
var _arrow = require("@loaders.gl/arrow");
var _constants = require("@kepler.gl/constants");
var _commonUtils = require("@kepler.gl/common-utils");
var _plot = require("./plot");
var _utils = require("./utils");
var _FIELD_DISPLAY_FORMAT; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof3(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// We need threat latitude differently otherwise mercator project view throws
// a projection matrix error
// Uncaught Error: Pixel project matrix not invertible
// at WebMercatorViewport16.Viewport6 (viewport.js:81:13)
var MAX_LATITUDE = exports.MAX_LATITUDE = 89.9;
var MIN_LATITUDE = exports.MIN_LATITUDE = -89.9;
var MAX_LONGITUDE = exports.MAX_LONGITUDE = 180;
var MIN_LONGITUDE = exports.MIN_LONGITUDE = -180;

/**
 * Validates a latitude value.
 * Ensures that the latitude is within the defined minimum and maximum latitude bounds.
 * If the value is out of bounds, it returns the nearest bound value.
 * @param latitude - The latitude value to validate.
 * @returns The validated latitude value.
 */
function validateLatitude(latitude) {
  return validateCoordinate(latitude !== null && latitude !== void 0 ? latitude : 0, MIN_LATITUDE, MAX_LATITUDE);
}

/**
 * Validates a longitude value.
 * Ensures that the longitude is within the defined minimum and maximum longitude bounds.
 * If the value is out of bounds, it returns the nearest bound value.
 * @param longitude - The longitude value to validate.
 * @returns The validated longitude value.
 */
function validateLongitude(longitude) {
  return validateCoordinate(longitude !== null && longitude !== void 0 ? longitude : 0, MIN_LONGITUDE, MAX_LONGITUDE);
}

/**
 * Validates a coordinate value.
 * Ensures that the value is within the specified minimum and maximum bounds.
 * If the value is out of bounds, it returns the nearest bound value.
 * @param value - The coordinate value to validate.
 * @param minValue - The minimum bound for the value.
 * @param maxValue - The maximum bound for the value.
 * @returns The validated coordinate value.
 */
function validateCoordinate(value, minValue, maxValue) {
  if (value <= minValue) {
    return minValue;
  }
  if (value >= maxValue) {
    return maxValue;
  }
  return value;
}

/**
 * simple getting unique values of an array
 * Note: filters out null and undefined values
 *
 * @param values
 * @returns unique values
 */
function unique(values) {
  var results = [];
  var uniqueSet = new Set(values);
  uniqueSet.forEach(function (v) {
    if ((0, _commonUtils.notNullorUndefined)(v)) {
      results.push(v);
    }
  });
  return results;
}
function getLatLngBounds(points, idx, limit) {
  var lats = points.map(function (d) {
    return Number(Array.isArray(d)) && d[idx];
  }).filter(Number.isFinite).sort(numberSort);
  if (!lats.length) {
    return null;
  }

  // clamp to limit
  return [Math.max(lats[0], limit[0]), Math.min(lats[lats.length - 1], limit[1])];
}
function clamp(_ref) {
  var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
    min = _ref2[0],
    max = _ref2[1];
  var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return val <= min ? min : val >= max ? max : val;
}
function getSampleData(data) {
  var sampleSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  var getValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (d) {
    return d;
  };
  var sampleStep = Math.max(Math.floor(data.length / sampleSize), 1);
  var output = [];
  for (var i = 0; i < data.length; i += sampleStep) {
    output.push(getValue(data[i]));
  }
  return output;
}

/**
 * Convert different time format to unix milliseconds
 */
function timeToUnixMilli(value, format) {
  if ((0, _commonUtils.notNullorUndefined)(value)) {
    if (typeof value === 'string') {
      return _momentTimezone["default"].utc(value, format).valueOf();
    }
    if (typeof value === 'number') {
      return format === 'x' ? value * 1000 : value;
    }
    if (value instanceof Date) {
      return value.valueOf();
    }
  }
  return null;
}

/**
 * Whether d is a number, this filtered out NaN as well
 */
function isNumber(d) {
  return Number.isFinite(d);
}

/**
 * whether object has property
 * @param {string} prop
 * @returns {boolean} - yes or no
 */
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function numberSort(a, b) {
  return a - b;
}
function getSortingFunction(fieldType) {
  switch (fieldType) {
    case _constants.ALL_FIELD_TYPES.real:
    case _constants.ALL_FIELD_TYPES.integer:
    case _constants.ALL_FIELD_TYPES.timestamp:
      return numberSort;
    default:
      return undefined;
  }
}

/**
 * round number with exact number of decimals
 * return as a string
 */
function preciseRound(num, decimals) {
  var t = Math.pow(10, decimals);
  return (Math.round(num * t + (decimals > 0 ? 1 : 0) * (Math.sign(num) * (10 / Math.pow(100, decimals)))) / t).toFixed(decimals);
}

/**
 * round a giving number at most 4 decimal places
 * e.g. 10 -> 10, 1.12345 -> 1.2345, 2.0 -> 2
 */
function roundToFour(num) {
  // @ts-expect-error
  return Number("".concat(Math.round("".concat(num, "e+4")), "e-4"));
}
/**
 * get number of decimals to round to for slider from step
 * @param step
 * @returns- number of decimal
 */
function getRoundingDecimalFromStep(step) {
  if (isNaN(step)) {
    (0, _assert["default"])('step is not a number');
    (0, _assert["default"])(step);
  }
  var stepStr = step.toString();

  // in case the step is a very small number e.g. 1e-7, return decimal e.g. 7 directly
  var splitExponential = stepStr.split('e-');
  if (splitExponential.length === 2) {
    var coeffZero = splitExponential[0].split('.');
    var coeffDecimal = coeffZero.length === 1 ? 0 : coeffZero[1].length;
    return parseInt(splitExponential[1], 10) + coeffDecimal;
  }
  var splitZero = stepStr.split('.');
  if (splitZero.length === 1) {
    return 0;
  }
  return splitZero[1].length;
}

/**
 * If marks is provided, snap to marks, if not normalize to step
 * @param val
 * @param minValue
 * @param step
 * @param marks
 */
function normalizeSliderValue(val, minValue, step, marks) {
  if (marks && marks.length) {
    // Use in slider, given a number and an array of numbers, return the nears number from the array
    return (0, _plot.snapToMarks)(val, marks);
  }
  return roundValToStep(minValue, step, val);
}

/**
 * round the value to step for the slider
 * @param minValue
 * @param step
 * @param val
 * @returns - rounded number
 */
function roundValToStep(minValue, step, val) {
  if (!isNumber(step) || !isNumber(minValue)) {
    return val;
  }
  var decimal = getRoundingDecimalFromStep(step);
  var steps = Math.floor((val - minValue) / step);
  var remain = val - (steps * step + minValue);

  // has to round because javascript turns 0.1 into 0.9999999999999987
  remain = Number(preciseRound(remain, 8));
  var closest;
  if (remain === 0) {
    closest = val;
  } else if (remain < step / 2) {
    closest = steps * step + minValue;
  } else {
    closest = (steps + 1) * step + minValue;
  }

  // precise round return a string rounded to the defined decimal
  var rounded = preciseRound(closest, decimal);
  return Number(rounded);
}

/**
 * Get the value format based on field and format options
 * Used in render tooltip value
 */
var defaultFormatter = exports.defaultFormatter = function defaultFormatter(v) {
  return (0, _commonUtils.notNullorUndefined)(v) ? String(v) : '';
};
var floatFormatter = exports.floatFormatter = function floatFormatter(v) {
  return isNumber(v) ? String(roundToFour(v)) : '';
};

/**
 * Transforms a WKB in Uint8Array form into a hex WKB string.
 * @param uint8Array WKB in Uint8Array form.
 * @returns hex WKB string.
 */
function uint8ArrayToHex(data) {
  return Array.from(data).map(function (_byte) {
    return _byte.toString(16).padStart(2, '0');
  }).join('');
}
var FIELD_DISPLAY_FORMAT = exports.FIELD_DISPLAY_FORMAT = (_FIELD_DISPLAY_FORMAT = {}, (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES.string, defaultFormatter), _constants.ALL_FIELD_TYPES.timestamp, defaultFormatter), _constants.ALL_FIELD_TYPES.integer, defaultFormatter), _constants.ALL_FIELD_TYPES.real, defaultFormatter), _constants.ALL_FIELD_TYPES["boolean"], defaultFormatter), _constants.ALL_FIELD_TYPES.date, defaultFormatter), _constants.ALL_FIELD_TYPES.geojson, function (d) {
  return typeof d === 'string' ? d : (0, _utils.isPlainObject)(d) ? JSON.stringify(d) : Array.isArray(d) ? "[".concat(String(d), "]") : '';
}), _constants.ALL_FIELD_TYPES.geoarrow, function (data, field) {
  if (data instanceof arrow.Vector) {
    try {
      var _field$metadata;
      var encoding = field === null || field === void 0 || (_field$metadata = field.metadata) === null || _field$metadata === void 0 ? void 0 : _field$metadata.get('ARROW:extension:name');
      if (encoding) {
        var geometry = (0, _arrow.parseGeometryFromArrow)(data, encoding);
        return JSON.stringify(geometry);
      }
    } catch (error) {
      // ignore for now
    }
  } else if (data instanceof Uint8Array) {
    return uint8ArrayToHex(data);
  }
  return data;
}), _constants.ALL_FIELD_TYPES.object, function (value) {
  try {
    return JSON.stringify(value);
  } catch (e) {
    return String(value);
  }
}), _constants.ALL_FIELD_TYPES.array, function (d) {
  return JSON.stringify(d);
}), (0, _defineProperty2["default"])(_FIELD_DISPLAY_FORMAT, _constants.ALL_FIELD_TYPES.h3, defaultFormatter));

/**
 * Parse field value and type and return a string representation
 */
var parseFieldValue = exports.parseFieldValue = function parseFieldValue(value, type, field) {
  if (!(0, _commonUtils.notNullorUndefined)(value)) {
    return '';
  }
  // BigInt values cannot be serialized with JSON.stringify() directly
  // We need to explicitly convert them to strings using .toString()
  // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#use_within_json
  if (typeof value === 'bigint') {
    return value.toString();
  }
  return FIELD_DISPLAY_FORMAT[type] ? FIELD_DISPLAY_FORMAT[type](value, field) : String(value);
};

/**
 * Get the value format based on field and format options
 * Used in render tooltip value
 * @param format
 * @param field
 */
function getFormatter(format, field) {
  if (!format) {
    return defaultFormatter;
  }
  var tooltipFormat = Object.values(_constants.TOOLTIP_FORMATS).find(function (f) {
    return f[_constants.TOOLTIP_KEY] === format;
  });
  if (tooltipFormat) {
    return applyDefaultFormat(tooltipFormat);
  } else if (typeof format === 'string' && field) {
    return applyCustomFormat(format, field);
  }
  return defaultFormatter;
}
function getColumnFormatter(field) {
  var format = field.format,
    displayFormat = field.displayFormat;
  if (!format && !displayFormat) {
    return FIELD_DISPLAY_FORMAT[field.type];
  }
  var tooltipFormat = Object.values(_constants.TOOLTIP_FORMATS).find(function (f) {
    return f[_constants.TOOLTIP_KEY] === displayFormat;
  });
  if (tooltipFormat) {
    return applyDefaultFormat(tooltipFormat);
  } else if (typeof displayFormat === 'string' && field) {
    return applyCustomFormat(displayFormat, field);
  } else if ((0, _typeof2["default"])(displayFormat) === 'object') {
    return applyValueMap(displayFormat);
  }
  return defaultFormatter;
}
function applyValueMap(format) {
  return function (v) {
    return format[v];
  };
}
function applyDefaultFormat(tooltipFormat) {
  if (!tooltipFormat || !tooltipFormat.format) {
    return defaultFormatter;
  }
  switch (tooltipFormat.type) {
    case _constants.TOOLTIP_FORMAT_TYPES.DECIMAL:
      return (0, _d3Format.format)(tooltipFormat.format);
    case _constants.TOOLTIP_FORMAT_TYPES.DATE:
    case _constants.TOOLTIP_FORMAT_TYPES.DATE_TIME:
      return datetimeFormatter(null)(tooltipFormat.format);
    case _constants.TOOLTIP_FORMAT_TYPES.PERCENTAGE:
      return function (v) {
        return "".concat((0, _d3Format.format)(_constants.TOOLTIP_FORMATS.DECIMAL_DECIMAL_FIXED_2.format)(v), "%");
      };
    case _constants.TOOLTIP_FORMAT_TYPES.BOOLEAN:
      return getBooleanFormatter(tooltipFormat.format);
    default:
      return defaultFormatter;
  }
}
function getBooleanFormatter(format) {
  switch (format) {
    case '01':
      return function (v) {
        return v ? '1' : '0';
      };
    case 'yn':
      return function (v) {
        return v ? 'yes' : 'no';
      };
    default:
      return defaultFormatter;
  }
}
// Allow user to specify custom tooltip format via config
function applyCustomFormat(format, field) {
  switch (field.type) {
    case _constants.ALL_FIELD_TYPES.real:
    case _constants.ALL_FIELD_TYPES.integer:
      return (0, _d3Format.format)(format);
    case _constants.ALL_FIELD_TYPES.date:
    case _constants.ALL_FIELD_TYPES.timestamp:
      return datetimeFormatter(null)(format);
    default:
      return function (v) {
        return v;
      };
  }
}
function formatLargeNumber(n) {
  // SI-prefix with 4 significant digits
  return (0, _d3Format.format)('.4~s')(n);
}
function formatNumber(n, type) {
  switch (type) {
    case _constants.ALL_FIELD_TYPES.integer:
      if (n < 0) {
        return "-".concat(formatNumber(-n, 'integer'));
      }
      if (n < 1000) {
        return "".concat(Math.round(n));
      }
      if (n < 10 * 1000) {
        return (0, _d3Format.format)(',')(Math.round(n));
      }
      return formatLargeNumber(n);
    case _constants.ALL_FIELD_TYPES.real:
      if (n < 0) {
        return "-".concat(formatNumber(-n, 'number'));
      }
      if (n < 1000) {
        return (0, _d3Format.format)('.4~r')(n);
      }
      if (n < 10 * 1000) {
        return (0, _d3Format.format)(',.2~f')(n);
      }
      return formatLargeNumber(n);
    default:
      return formatNumber(n, 'real');
  }
}
var transformation = {
  Y: Math.pow(10, 24),
  Z: Math.pow(10, 21),
  E: Math.pow(10, 18),
  P: Math.pow(10, 15),
  T: Math.pow(10, 12),
  G: Math.pow(10, 9),
  M: Math.pow(10, 6),
  k: Math.pow(10, 3),
  h: Math.pow(10, 2),
  da: Math.pow(10, 1),
  d: Math.pow(10, -1),
  c: Math.pow(10, -2),
  m: Math.pow(10, -3),
  μ: Math.pow(10, -6),
  n: Math.pow(10, -9),
  p: Math.pow(10, -12),
  f: Math.pow(10, -15),
  a: Math.pow(10, -18),
  z: Math.pow(10, -21),
  y: Math.pow(10, -24)
};

/**
 * Convert a formatted number from string back to number
 */
function reverseFormatNumber(str) {
  var returnValue = null;
  var strNum = str.trim().replace(/,/g, '');
  Object.entries(transformation).forEach(function (d) {
    if (strNum.includes(d[0])) {
      returnValue = parseFloat(strNum) * d[1];
      return true;
    }
    return false;
  });

  // if no transformer found, convert to nuber regardless
  return returnValue === null ? Number(strNum) : returnValue;
}

/**
 * Format epoch milliseconds with a format string
 * @type timezone
 */
function datetimeFormatter(timezone) {
  return timezone ? function (format) {
    return function (ts) {
      return _momentTimezone["default"].utc(ts).tz(timezone).format(format);
    };
  } :
  // return empty string instead of 'Invalid date' if ts is undefined/null
  function (format) {
    return function (ts) {
      return ts ? _momentTimezone["default"].utc(ts).format(format) : '';
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,