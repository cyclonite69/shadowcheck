"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.getDatasetAttributesFromVectorTile = getDatasetAttributesFromVectorTile;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
var _table = require("@kepler.gl/table");
var _useFetchVectorTileMetadata = _interopRequireDefault(require("../../hooks/use-fetch-vector-tile-metadata"));
var _common = require("../../common");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var TilesetInputContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: grid;\n  grid-template-rows: repeat(3, 1fr);\n  row-gap: 18px;\n  font-size: 12px;\n"])));
var TilesetInputDescription = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  text-align: center;\n  color: ", ";\n  font-size: 11px;\n"])), function (props) {
  return props.theme.AZURE200;
});
function getDatasetAttributesFromVectorTile(_ref) {
  var name = _ref.name,
    dataUrl = _ref.dataUrl,
    metadataUrl = _ref.metadataUrl;
  return {
    name: name,
    type: _constants.DatasetType.VECTOR_TILE,
    metadata: {
      type: _constants.REMOTE_TILE,
      remoteTileFormat: (0, _commonUtils.isPMTilesUrl)(dataUrl) ? _constants.RemoteTileFormat.PMTILES : _constants.RemoteTileFormat.MVT,
      tilesetDataUrl: dataUrl,
      tilesetMetadataUrl: metadataUrl
    }
  };
}
var TilesetVectorForm = function TilesetVectorForm(_ref2) {
  var setResponse = _ref2.setResponse;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    tileName = _useState2[0],
    setTileName = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    tileUrl = _useState4[0],
    setTileUrl = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    metadataUrl = _useState6[0],
    setMetadataUrl = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
    initialFetchError = _useState8[0],
    setInitialFetchError = _useState8[1];
  var onTileNameChange = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    setTileName(event.target.value);
  }, [setTileName]);
  var onTileMetaUrlChange = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    setMetadataUrl(event.target.value);
  }, [setMetadataUrl]);
  var onTileUrlChange = (0, _react.useCallback)( /*#__PURE__*/function () {
    var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(event) {
      var newTileUrl, usePMTiles, potentialMetadataUrl, resp;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            event.preventDefault();
            newTileUrl = event.target.value;
            setTileUrl(newTileUrl);
            usePMTiles = (0, _commonUtils.isPMTilesUrl)(newTileUrl);
            potentialMetadataUrl = usePMTiles ? newTileUrl : (0, _table.getMetaUrl)(newTileUrl);
            if (!(!metadataUrl && potentialMetadataUrl)) {
              _context.next = 17;
              break;
            }
            if (!usePMTiles) {
              _context.next = 10;
              break;
            }
            _context.t0 = {
              ok: true
            };
            _context.next = 13;
            break;
          case 10:
            _context.next = 12;
            return fetch(potentialMetadataUrl);
          case 12:
            _context.t0 = _context.sent;
          case 13:
            resp = _context.t0;
            if (resp.ok) {
              setInitialFetchError(null);
              setMetadataUrl(potentialMetadataUrl);
            } else {
              setInitialFetchError(new Error("Metadata loading failed: ".concat(resp.status, " ").concat(resp.statusText)));
            }
            _context.next = 18;
            break;
          case 17:
            setInitialFetchError(null);
          case 18:
            if (!tileName) {
              setTileName(newTileUrl.split('/').pop() || newTileUrl);
            }
          case 19:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [setTileUrl, tileName, setMetadataUrl, metadataUrl]);
  var process = (0, _react.useMemo)(function () {
    return function (value) {
      return (0, _table.parseVectorMetadata)(value, {
        tileUrl: metadataUrl
      });
    };
  }, [metadataUrl]);
  var _useFetchVectorTileMe = (0, _useFetchVectorTileMetadata["default"])({
      metadataUrl: metadataUrl,
      tilesetUrl: tileUrl,
      remoteTileFormat: (0, _commonUtils.isPMTilesUrl)(metadataUrl) ? _constants.RemoteTileFormat.PMTILES : _constants.RemoteTileFormat.MVT,
      process: process
    }),
    metadata = _useFetchVectorTileMe.data,
    loading = _useFetchVectorTileMe.loading,
    metaError = _useFetchVectorTileMe.error;

  // reset initial fetch error if the metadata is available
  if (metadata && initialFetchError) {
    setInitialFetchError(null);
  }
  (0, _react.useEffect)(function () {
    if (tileName && tileUrl) {
      if ((metadata === null || metadata === void 0 ? void 0 : metadata.pmtilesType) === _constants.PMTilesType.RASTER) {
        return setResponse({
          metadata: metadata,
          dataset: null,
          loading: loading,
          error: new Error('For .pmtiles in raster format, please use the Raster Tile form.')
        });
      }
      var dataset = getDatasetAttributesFromVectorTile({
        name: tileName,
        dataUrl: tileUrl,
        metadataUrl: metadataUrl !== null && metadataUrl !== void 0 ? metadataUrl : undefined
      });
      setResponse({
        metadata: metadata,
        dataset: dataset,
        loading: loading,
        error: metaError || initialFetchError
      });
    } else {
      setResponse({
        metadata: metadata,
        dataset: null,
        loading: loading,
        error: metaError || initialFetchError
      });
    }
  }, [setResponse, metadata, loading, metaError, initialFetchError, tileUrl, tileName, metadataUrl]);
  (0, _react.useEffect)(function () {
    if (metadata) {
      var name = metadata.name;
      if (name) {
        setTileName(name);
      }
    }
  }, [metadata]);
  return /*#__PURE__*/_react["default"].createElement(TilesetInputContainer, null, /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: "tileset-name"
  }, "Name"), /*#__PURE__*/_react["default"].createElement(_common.InputLight, {
    id: "tileset-name",
    placeholder: "Name your tileset",
    value: tileName,
    onChange: onTileNameChange
  })), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: "tile-url"
  }, "Tileset URL"), /*#__PURE__*/_react["default"].createElement(_common.InputLight, {
    id: "tile-url",
    placeholder: "Tileset URL",
    value: tileUrl,
    onChange: onTileUrlChange
  }), /*#__PURE__*/_react["default"].createElement(TilesetInputDescription, null, "Requires {x}, {y}, {z} placeholders in URL or .pmtile extension.")), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: "tile-metadata"
  }, "Tileset metadata URL"), /*#__PURE__*/_react["default"].createElement(_common.InputLight, {
    id: "tile-metadata",
    placeholder: "Tileset metadata",
    value: metadataUrl !== null && metadataUrl !== void 0 ? metadataUrl : undefined,
    onChange: onTileMetaUrlChange
  }), /*#__PURE__*/_react["default"].createElement(TilesetInputDescription, null, "Optional, but recommended. Supports json, txt")));
};
var _default = exports["default"] = TilesetVectorForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,