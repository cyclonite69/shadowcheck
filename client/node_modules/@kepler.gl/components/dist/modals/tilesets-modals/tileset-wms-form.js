"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
var _table = require("@kepler.gl/table");
var _common = require("../../common");
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var TilesetInputContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: grid;\n  grid-template-rows: repeat(3, auto);\n  row-gap: 18px;\n  font-size: 12px;\n"])));
var TilesetInputDescription = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  text-align: center;\n  color: ", ";\n  font-size: 11px;\n"])), function (props) {
  return props.theme.AZURE200;
});
var ExampleUrlsContainer = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  text-align: left;\n  color: ", ";\n  font-size: 11px;\n\n  .example-url {\n    margin-top: 8px;\n    display: block;\n  }\n"])), function (props) {
  return props.theme.AZURE200;
});
var TilesetWMSForm = function TilesetWMSForm(_ref) {
  var setResponse = _ref.setResponse;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    layerName = _useState2[0],
    setLayerName = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    wmsUrl = _useState4[0],
    setWmsUrl = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    loading = _useState6[0],
    setLoading = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
    error = _useState8[0],
    setError = _useState8[1];
  var _useState9 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
    wmsData = _useState10[0],
    setWMSData = _useState10[1];
  var onLayerNameChange = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    setLayerName(event.target.value);
  }, [setLayerName]);
  var onWmsUrlChange = (0, _react.useCallback)( /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(event) {
      var newWmsUrl, data, datasetMetadata, serviceTitle;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            event.preventDefault();
            newWmsUrl = event.target.value;
            setWmsUrl(newWmsUrl);
            if ((0, _commonUtils.validateUrl)(newWmsUrl)) {
              _context.next = 6;
              break;
            }
            setWMSData(null);
            return _context.abrupt("return");
          case 6:
            _context.prev = 6;
            setLoading(true);
            setError(null);
            _context.next = 11;
            return (0, _table.getWMSCapabilities)(newWmsUrl);
          case 11:
            data = _context.sent;
            datasetMetadata = (0, _table.wmsCapabilitiesToDatasetMetadata)(data); // Extract name or title from GetCapabilities response
            serviceTitle = (data === null || data === void 0 ? void 0 : data.title) || (data === null || data === void 0 ? void 0 : data.name);
            if (serviceTitle && !layerName) {
              setLayerName(serviceTitle);
            }
            setWMSData({
              metadata: data,
              layers: datasetMetadata.layers,
              version: datasetMetadata.version
            });
            _context.next = 22;
            break;
          case 18:
            _context.prev = 18;
            _context.t0 = _context["catch"](6);
            setError(_context.t0 instanceof Error ? _context.t0 : new Error('Unknown error'));
            setWMSData(null);
          case 22:
            _context.prev = 22;
            setLoading(false);
            return _context.finish(22);
          case 25:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[6, 18, 22, 25]]);
    }));
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [layerName]);
  (0, _react.useEffect)(function () {
    if (layerName && wmsUrl) {
      var _wmsData$metadata;
      var dataset = {
        name: layerName,
        type: _constants.DatasetType.WMS_TILE,
        metadata: {
          type: _constants.REMOTE_TILE,
          remoteTileFormat: _constants.RemoteTileFormat.WMS,
          tilesetDataUrl: wmsUrl,
          tilesetMetadataUrl: "".concat(wmsUrl, "?service=WMS&request=GetCapabilities"),
          layers: (wmsData === null || wmsData === void 0 ? void 0 : wmsData.layers) || [],
          wmsVersion: (wmsData === null || wmsData === void 0 ? void 0 : wmsData.version) || '1.3.0'
        }
      };
      setResponse({
        metadata: (_wmsData$metadata = wmsData === null || wmsData === void 0 ? void 0 : wmsData.metadata) !== null && _wmsData$metadata !== void 0 ? _wmsData$metadata : null,
        dataset: dataset,
        loading: loading,
        error: error
      });
    } else {
      setResponse({
        metadata: null,
        dataset: null,
        loading: loading,
        error: error
      });
    }
  }, [setResponse, layerName, wmsUrl, wmsData, loading, error]);
  return /*#__PURE__*/_react["default"].createElement(TilesetInputContainer, null, /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: "layer-name"
  }, "Name"), /*#__PURE__*/_react["default"].createElement(_common.InputLight, {
    id: "layer-name",
    placeholder: "Name your WMS layer",
    value: layerName,
    onChange: onLayerNameChange
  })), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: "wms-url"
  }, "WMS URL"), /*#__PURE__*/_react["default"].createElement(_common.InputLight, {
    id: "wms-url",
    placeholder: "Enter WMS URL",
    value: wmsUrl,
    onChange: onWmsUrlChange
  }), /*#__PURE__*/_react["default"].createElement(TilesetInputDescription, null, "Provide a valid WMS service URL.")), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(TilesetInputDescription, null, "For example, try a public WMS URL:"), /*#__PURE__*/_react["default"].createElement(ExampleUrlsContainer, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "example-url"
  }, "\u2022 https://ows.terrestris.de/osm/service"), /*#__PURE__*/_react["default"].createElement("div", {
    className: "example-url"
  }, "\u2022 https://opengeo.ncep.noaa.gov/geoserver/conus/conus_cref_qcd/ows"), /*#__PURE__*/_react["default"].createElement("div", {
    className: "example-url"
  }, "\u2022 https://gibs.earthdata.nasa.gov/wms/epsg4326/best/wms.cgi"))));
};
var _default = exports["default"] = TilesetWMSForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,