"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayerLabelEditor = exports.HeaderWarning = exports.DragHandle = void 0;
exports.LayerPanelHeaderActionSectionFactory = LayerPanelHeaderActionSectionFactory;
exports.LayerTitleSectionFactory = LayerTitleSectionFactory;
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _panelHeaderAction = _interopRequireDefault(require("../panel-header-action"));
var _styledComponents2 = require("../../common/styled-components");
var _icons = require("../../common/icons");
var _localization = require("@kepler.gl/localization");
var _constants = require("@kepler.gl/constants");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var getBorderCss = function getBorderCss(status) {
  return (0, _styledComponents.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  border-top: 2px solid ", ";\n  border-bottom: 2px solid ", ";\n  border-right: 2px solid ", ";\n"])), function (_ref) {
    var theme = _ref.theme;
    return theme.notificationColors[status];
  }, function (_ref2) {
    var theme = _ref2.theme;
    return theme.notificationColors[status];
  }, function (_ref3) {
    var theme = _ref3.theme;
    return theme.notificationColors[status];
  });
};
var StyledLayerPanelHeader = (0, _styledComponents["default"])(_styledComponents2.StyledPanelHeader)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  height: ", "px;\n  position: relative;\n  align-items: stretch;\n\n  .layer__remove-layer {\n    opacity: 0;\n  }\n\n  .layer__drag-handle__placeholder {\n    height: 20px;\n    padding: 10px;\n  }\n\n  ", "\n\n  &:hover {\n    cursor: pointer;\n    background-color: ", ";\n\n    .layer__drag-handle {\n      opacity: 1;\n    }\n\n    .layer__remove-layer {\n      opacity: 1;\n    }\n  }\n"])), function (props) {
  return props.theme.layerPanelHeaderHeight;
}, function (props) {
  return props.warning ? getBorderCss('warning') : props.isValid ? '' : getBorderCss('error');
}, function (props) {
  return props.theme.panelBackgroundHover;
});
var HeaderLabelSection = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  color: ", ";\n  flex-grow: 1;\n  align-items: stretch;\n  // leave space for eye and collapse icon\n  padding-right: 50px;\n"])), function (props) {
  return props.theme.textColor;
});
var HeaderActionSection = _styledComponents["default"].div.withConfig({
  shouldForwardProp: _styledComponents2.shouldForwardProp
})(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  position: absolute;\n  height: 100%;\n  align-items: stretch;\n  right: 10px;\n  pointer-events: ", ";\n  &:hover {\n    .layer-panel__header__actions__hidden {\n      opacity: 1;\n      background-color: ", ";\n    }\n  }\n"])), function (props) {
  return props.isEditingLabel ? 'none' : 'all';
}, function (props) {
  return props.theme.panelBackgroundHover;
});
// Hiden actions only show up on hover
var StyledPanelHeaderHiddenActions = _styledComponents["default"].div.withConfig({
  shouldForwardProp: _styledComponents2.shouldForwardProp
}).attrs({
  className: 'layer-panel__header__actions__hidden'
})(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  opacity: 0;\n  display: flex;\n  align-items: center;\n  background-color: ", ";\n  transition:\n    opacity 0.4s ease,\n    background-color 0.4s ease;\n\n  &:hover {\n    opacity: 1;\n  }\n"])), function (props) {
  return props.isConfigActive ? props.theme.panelBackgroundHover : props.theme.panelBackground;
});
var StyledDragHandle = _styledComponents["default"].div(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  opacity: 0;\n  z-index: 1000;\n\n  &:hover {\n    cursor: move;\n    opacity: 1;\n    color: ", ";\n  }\n"])), function (props) {
  return props.theme.textColorHl;
});
var DragHandle = exports.DragHandle = function DragHandle(_ref4) {
  var className = _ref4.className,
    listeners = _ref4.listeners,
    children = _ref4.children;
  return /*#__PURE__*/_react["default"].createElement(StyledDragHandle, (0, _extends2["default"])({
    className: className
  }, listeners ? listeners : {}), children);
};
var noOp = function noOp(event) {
  event.stopPropagation();
  event.preventDefault();
};
var LayerLabelEditor = exports.LayerLabelEditor = function LayerLabelEditor(_ref5) {
  var layerId = _ref5.layerId,
    label = _ref5.label,
    onEdit = _ref5.onEdit,
    onFocus = _ref5.onFocus,
    onBlur = _ref5.onBlur;
  return /*#__PURE__*/_react["default"].createElement(_styledComponents2.InlineInput, {
    type: "text",
    className: "layer__title__editor",
    "data-testid": _constants.dataTestIds.layerTitleEditor,
    value: label,
    onClick: noOp,
    onChange: onEdit,
    onFocus: onFocus,
    onBlur: onBlur,
    id: "".concat(layerId, ":input-layer-label")
  });
};
function LayerTitleSectionFactory() {
  var StyledLayerTitleSection = _styledComponents["default"].div(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n    margin-left: 4px;\n    flex-grow: 1;\n    align-items: center;\n    display: flex;\n    .layer__title__inner {\n      flex-grow: 1;\n    }\n\n    .layer__title__type {\n      color: ", ";\n      font-size: 10px;\n      line-height: 12px;\n      letter-spacing: 0.37px;\n      text-transform: capitalize;\n    }\n  "])), function (props) {
    return props.theme.subtextColor;
  });
  var LayerTitleSection = function LayerTitleSection(_ref6) {
    var layerType = _ref6.layerType,
      layerId = _ref6.layerId,
      label = _ref6.label,
      onUpdateLayerLabel = _ref6.onUpdateLayerLabel,
      onFocus = _ref6.onFocus,
      onBlur = _ref6.onBlur;
    return /*#__PURE__*/_react["default"].createElement(StyledLayerTitleSection, {
      className: "layer__title"
    }, /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(LayerLabelEditor, {
      layerId: layerId,
      label: label,
      onEdit: onUpdateLayerLabel,
      onFocus: onFocus,
      onBlur: onBlur
    }), /*#__PURE__*/_react["default"].createElement("div", {
      className: "layer__title__type"
    }, layerType && /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "layer.type.".concat(layerType.toLowerCase())
    }))));
  };
  return LayerTitleSection;
}
LayerPanelHeaderActionSectionFactory.deps = [_panelHeaderAction["default"]];
function LayerPanelHeaderActionSectionFactory(PanelHeaderAction) {
  var LayerPanelHeaderActionSection = function LayerPanelHeaderActionSection(props) {
    var isConfigActive = props.isConfigActive,
      allowDuplicate = props.allowDuplicate,
      isVisible = props.isVisible,
      isValid = props.isValid,
      layerId = props.layerId,
      onToggleVisibility = props.onToggleVisibility,
      onResetIsValid = props.onResetIsValid,
      onToggleEnableConfig = props.onToggleEnableConfig,
      onDuplicateLayer = props.onDuplicateLayer,
      onRemoveLayer = props.onRemoveLayer,
      onZoomToLayer = props.onZoomToLayer,
      _props$showRemoveLaye = props.showRemoveLayer,
      showRemoveLayer = _props$showRemoveLaye === void 0 ? true : _props$showRemoveLaye,
      isEditingLabel = props.isEditingLabel,
      _props$actionIcons = props.actionIcons,
      actionIcons = _props$actionIcons === void 0 ? defaultActionIcons : _props$actionIcons;
    return /*#__PURE__*/_react["default"].createElement(HeaderActionSection, {
      className: "layer-panel__header__actions",
      isEditingLabel: isEditingLabel
    }, /*#__PURE__*/_react["default"].createElement(StyledPanelHeaderHiddenActions, {
      isConfigActive: isConfigActive
    }, showRemoveLayer ? /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
      className: "layer__remove-layer",
      testId: "remove-layer-action",
      id: layerId,
      tooltip: 'tooltip.removeLayer',
      onClick: onRemoveLayer,
      tooltipType: "error",
      IconComponent: actionIcons.remove
    }) : null, /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
      className: "layer__duplicate",
      id: layerId,
      tooltip: 'tooltip.duplicateLayer',
      onClick: onDuplicateLayer,
      IconComponent: actionIcons.duplicate,
      disabled: !allowDuplicate
    }), /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
      className: "layer__zoom-to-layer",
      id: layerId,
      tooltip: 'tooltip.zoomToLayer',
      onClick: onZoomToLayer,
      IconComponent: actionIcons.crosshairs
    })), isValid ? /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
      className: "layer__visibility-toggle",
      id: layerId,
      tooltip: isVisible ? 'tooltip.hideLayer' : 'tooltip.showLayer',
      onClick: onToggleVisibility,
      IconComponent: isVisible ? actionIcons.visible : actionIcons.hidden
    }) : /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
      className: "layer__is-valid-refresh",
      id: layerId,
      tooltip: 'tooltip.resetAfterError',
      onClick: onResetIsValid,
      IconComponent: actionIcons.resetIsValid
    }), /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
      className: (0, _classnames["default"])('layer__enable-config ', {
        'is-open': isConfigActive
      }),
      id: layerId,
      tooltip: 'tooltip.layerSettings',
      onClick: onToggleEnableConfig,
      IconComponent: actionIcons.enableConfig
    }));
  };
  return LayerPanelHeaderActionSection;
}
var StyledHeaderWaring = _styledComponents["default"].div(_templateObject8 || (_templateObject8 = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  right: -9px;\n  top: calc(50% - 9px);\n  color: ", ";\n"])), function (_ref7) {
  var theme = _ref7.theme;
  return theme.notificationColors.warning;
});
var HeaderWarning = exports.HeaderWarning = function HeaderWarning(_ref8) {
  var warning = _ref8.warning,
    id = _ref8.id;
  return /*#__PURE__*/_react["default"].createElement(StyledHeaderWaring, null, /*#__PURE__*/_react["default"].createElement(_icons.WarningSign, {
    "data-tip": true,
    "data-for": "layer-".concat(id, "-warning"),
    height: "16px"
  }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
    id: "layer-".concat(id, "-warning"),
    type: "warning",
    effect: "solid",
    textColor: "black"
  }, warning));
};
var defaultActionIcons = {
  remove: function remove(props) {
    return /*#__PURE__*/_react["default"].createElement(_icons.Trash, (0, _extends2["default"])({}, props, {
      height: "16px"
    }));
  },
  visible: function visible(props) {
    return /*#__PURE__*/_react["default"].createElement(_icons.EyeSeen, (0, _extends2["default"])({}, props, {
      height: "16px"
    }));
  },
  hidden: function hidden(props) {
    return /*#__PURE__*/_react["default"].createElement(_icons.EyeUnseen, (0, _extends2["default"])({}, props, {
      height: "16px"
    }));
  },
  enableConfig: function enableConfig(props) {
    return /*#__PURE__*/_react["default"].createElement(_icons.ArrowDown, (0, _extends2["default"])({}, props, {
      height: "18px"
    }));
  },
  duplicate: function duplicate(props) {
    return /*#__PURE__*/_react["default"].createElement(_icons.Copy, (0, _extends2["default"])({}, props, {
      height: "14px"
    }));
  },
  resetIsValid: _icons.Reset,
  crosshairs: function crosshairs(props) {
    return /*#__PURE__*/_react["default"].createElement(_icons.ZoomIn, (0, _extends2["default"])({}, props, {
      height: "14px"
    }));
  }
};
LayerPanelHeaderFactory.deps = [LayerTitleSectionFactory, LayerPanelHeaderActionSectionFactory];
function LayerPanelHeaderFactory(LayerTitleSection, LayerPanelHeaderActionSection) {
  var LayerPanelHeader = function LayerPanelHeader(props) {
    var isConfigActive = props.isConfigActive,
      _props$isDragNDropEna = props.isDragNDropEnabled,
      isDragNDropEnabled = _props$isDragNDropEna === void 0 ? true : _props$isDragNDropEna,
      isValid = props.isValid,
      warning = props.warning,
      label = props.label,
      layerId = props.layerId,
      layerType = props.layerType,
      labelRCGColorValues = props.labelRCGColorValues,
      onUpdateLayerLabel = props.onUpdateLayerLabel,
      onToggleEnableConfig = props.onToggleEnableConfig,
      listeners = props.listeners;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isEditingLabel = _useState2[0],
      setIsEditingLabel = _useState2[1];
    return /*#__PURE__*/_react["default"].createElement(StyledLayerPanelHeader, {
      className: (0, _classnames["default"])('layer-panel__header', {
        'sort--handle': !isConfigActive
      }),
      isValid: isValid,
      warning: warning,
      active: isConfigActive,
      labelRCGColorValues: labelRCGColorValues,
      onClick: onToggleEnableConfig
    }, warning ? /*#__PURE__*/_react["default"].createElement(HeaderWarning, {
      warning: warning,
      id: layerId
    }) : null, /*#__PURE__*/_react["default"].createElement(HeaderLabelSection, {
      className: "layer-panel__header__content"
    }, isDragNDropEnabled ? /*#__PURE__*/_react["default"].createElement(DragHandle, {
      className: "layer__drag-handle",
      listeners: listeners
    }, /*#__PURE__*/_react["default"].createElement(_icons.VertDots, {
      height: "20px"
    })) : /*#__PURE__*/_react["default"].createElement("div", {
      className: "layer__drag-handle__placeholder"
    }), /*#__PURE__*/_react["default"].createElement(LayerTitleSection, {
      layerId: layerId,
      label: label,
      onUpdateLayerLabel: onUpdateLayerLabel,
      layerType: layerType,
      onFocus: function onFocus() {
        setIsEditingLabel(true);
      },
      onBlur: function onBlur() {
        setIsEditingLabel(false);
      }
    })), /*#__PURE__*/_react["default"].createElement(LayerPanelHeaderActionSection, (0, _extends2["default"])({}, props, {
      isEditingLabel: isEditingLabel
    })));
  };
  return LayerPanelHeader;
}
var _default = exports["default"] = LayerPanelHeaderFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,