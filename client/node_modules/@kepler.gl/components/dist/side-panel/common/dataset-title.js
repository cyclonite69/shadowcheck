"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = DatasetTitleFactory;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _localization = require("@kepler.gl/localization");
var _layers = require("@kepler.gl/layers");
var _styledComponents2 = require("../../common/styled-components");
var _icons = require("../../common/icons");
var _datasetTag = _interopRequireDefault(require("./dataset-tag"));
var _customPicker = _interopRequireDefault(require("../layer-panel/custom-picker"));
var _ = require("../..");
var _utils = require("@kepler.gl/utils");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledDatasetTitle = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  display: flex;\n  align-items: center;\n\n  .source-data-arrow {\n    height: 16px;\n  }\n  &:hover {\n    cursor: ", ";\n\n    .dataset-name {\n      color: ", ";\n    }\n\n    .dataset-action {\n      color: ", ";\n      opacity: 1;\n    }\n\n    .dataset-action:hover {\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.$clickable ? 'pointer' : 'auto';
}, function (props) {
  return props.$clickable ? props.theme.textColorHl : props.theme.textColor;
}, function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.theme.textColorHl;
});
var DataTagAction = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-left: 12px;\n  height: 16px;\n  opacity: 0;\n"])));
var ShowDataTable = function ShowDataTable(_ref) {
  var id = _ref.id,
    showDatasetTable = _ref.showDatasetTable;
  return /*#__PURE__*/_react["default"].createElement(DataTagAction, {
    className: "dataset-action show-data-table",
    "data-tip": true,
    "data-for": "data-table-".concat(id)
  }, /*#__PURE__*/_react["default"].createElement(_layers.Table, {
    height: "16px",
    onClick: function onClick(e) {
      e.stopPropagation();
      showDatasetTable === null || showDatasetTable === void 0 || showDatasetTable(id);
    }
  }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
    id: "data-table-".concat(id),
    effect: "solid"
  }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: 'datasetTitle.showDataTable'
  }))));
};
var RemoveDataset = function RemoveDataset(_ref2) {
  var datasetKey = _ref2.datasetKey,
    removeDataset = _ref2.removeDataset;
  return /*#__PURE__*/_react["default"].createElement(DataTagAction, {
    className: "dataset-action remove-dataset",
    "data-tip": true,
    "data-for": "delete-".concat(datasetKey)
  }, /*#__PURE__*/_react["default"].createElement(_icons.Trash, {
    height: "16px",
    onClick: function onClick(e) {
      e.stopPropagation();
      removeDataset === null || removeDataset === void 0 || removeDataset(datasetKey);
    }
  }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
    id: "delete-".concat(datasetKey),
    effect: "solid",
    type: "error"
  }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: 'datasetTitle.removeDataset'
  }))));
};
DatasetTitleFactory.deps = [_datasetTag["default"]];
function DatasetTitleFactory(DatasetTag) {
  var DatasetTitle = function DatasetTitle(_ref3) {
    var showDatasetTable = _ref3.showDatasetTable,
      showDeleteDataset = _ref3.showDeleteDataset,
      onTitleClick = _ref3.onTitleClick,
      removeDataset = _ref3.removeDataset,
      dataset = _ref3.dataset,
      updateTableColor = _ref3.updateTableColor;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      displayColorPicker = _useState2[0],
      setDisplayColorPicker = _useState2[1];
    var root = (0, _react.useRef)(null);
    var datasetId = dataset.id;
    var _handleClick = (0, _react.useCallback)(function () {
      setDisplayColorPicker(!displayColorPicker);
    }, [setDisplayColorPicker, displayColorPicker]);
    var _handleClosePicker = (0, _react.useCallback)(function () {
      setDisplayColorPicker(false);
    }, [setDisplayColorPicker]);
    var _handleCustomPicker = (0, _react.useCallback)(function (color) {
      updateTableColor(datasetId, [color.rgb.r, color.rgb.g, color.rgb.b]);
    }, [updateTableColor, datasetId]);
    var _onClickTitle = (0, _react.useCallback)(function (e) {
      e.stopPropagation();
      if (typeof onTitleClick === 'function') {
        onTitleClick();
      } else if (typeof showDatasetTable === 'function') {
        if (dataset.disableDataOperation) return;
        showDatasetTable(datasetId);
      }
    }, [onTitleClick, showDatasetTable, datasetId, dataset.disableDataOperation]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "custom-palette-panel",
      ref: root
    }, /*#__PURE__*/_react["default"].createElement(StyledDatasetTitle, {
      className: "source-data-title",
      $clickable: Boolean(showDatasetTable || onTitleClick)
    }, /*#__PURE__*/_react["default"].createElement(DatasetTag, {
      dataset: dataset,
      onClick: _onClickTitle,
      updateTableColor: updateTableColor,
      onClickSquare: _handleClick
    }), /*#__PURE__*/_react["default"].createElement(_.Portaled, {
      isOpened: displayColorPicker !== false,
      left: 110,
      top: -50,
      onClose: _handleClosePicker
    }, /*#__PURE__*/_react["default"].createElement(_customPicker["default"], {
      color: (0, _utils.rgbToHex)(dataset.color),
      onChange: _handleCustomPicker
    })), showDatasetTable ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.CenterFlexbox, {
      className: "source-data-arrow"
    }, /*#__PURE__*/_react["default"].createElement(_icons.ArrowRight, {
      height: "12px"
    })) : null, showDatasetTable && !dataset.disableDataOperation ? /*#__PURE__*/_react["default"].createElement(ShowDataTable, {
      id: datasetId,
      showDatasetTable: showDatasetTable
    }) : null, showDeleteDataset ? /*#__PURE__*/_react["default"].createElement(RemoveDataset, {
      datasetKey: datasetId,
      removeDataset: removeDataset
    }) : null));
  };
  return DatasetTitle;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,