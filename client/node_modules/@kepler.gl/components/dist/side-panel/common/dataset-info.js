"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = DatasetInfoFactory;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _d3Format = require("d3-format");
var _constants = require("@kepler.gl/constants");
var _localization = require("@kepler.gl/localization");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var numFormat = (0, _d3Format.format)(',');
var StyledDataRowCount = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: 11px;\n  color: ", ";\n  padding-left: 19px;\n"])), function (props) {
  return props.theme.subtextColor;
});
function DatasetInfoFactory() {
  var DatasetInfo = function DatasetInfo(_ref) {
    var dataset = _ref.dataset;
    return /*#__PURE__*/_react["default"].createElement(StyledDataRowCount, {
      className: "source-data-rows"
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: dataset.type === _constants.DatasetType.VECTOR_TILE ? 'datasetInfo.vectorTile' : dataset.type === _constants.DatasetType.RASTER_TILE ? 'datasetInfo.rasterTile' : dataset.type === _constants.DatasetType.WMS_TILE ? 'datasetInfo.wmsTile' : 'datasetInfo.rowCount',
      values: {
        rowCount: numFormat(dataset.dataContainer.numRows())
      }
    }));
  };
  return DatasetInfo;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zdHlsZWRDb21wb25lbnRzIiwiX2QzRm9ybWF0IiwiX2NvbnN0YW50cyIsIl9sb2NhbGl6YXRpb24iLCJfdGVtcGxhdGVPYmplY3QiLCJudW1Gb3JtYXQiLCJmb3JtYXQiLCJTdHlsZWREYXRhUm93Q291bnQiLCJzdHlsZWQiLCJkaXYiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsMiIsInByb3BzIiwidGhlbWUiLCJzdWJ0ZXh0Q29sb3IiLCJEYXRhc2V0SW5mb0ZhY3RvcnkiLCJEYXRhc2V0SW5mbyIsIl9yZWYiLCJkYXRhc2V0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsIkZvcm1hdHRlZE1lc3NhZ2UiLCJpZCIsInR5cGUiLCJEYXRhc2V0VHlwZSIsIlZFQ1RPUl9USUxFIiwiUkFTVEVSX1RJTEUiLCJXTVNfVElMRSIsInZhbHVlcyIsInJvd0NvdW50IiwiZGF0YUNvbnRhaW5lciIsIm51bVJvd3MiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2lkZS1wYW5lbC9jb21tb24vZGF0YXNldC1pbmZvLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQge2Zvcm1hdH0gZnJvbSAnZDMtZm9ybWF0JztcblxuaW1wb3J0IHtEYXRhc2V0VHlwZX0gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuaW1wb3J0IHtGb3JtYXR0ZWRNZXNzYWdlfSBmcm9tICdAa2VwbGVyLmdsL2xvY2FsaXphdGlvbic7XG5pbXBvcnQge0RhdGFDb250YWluZXJJbnRlcmZhY2V9IGZyb20gJ0BrZXBsZXIuZ2wvdXRpbHMnO1xuXG5jb25zdCBudW1Gb3JtYXQgPSBmb3JtYXQoJywnKTtcblxudHlwZSBNaW5pRGF0YXNldCA9IHtcbiAgZGF0YUNvbnRhaW5lcjogRGF0YUNvbnRhaW5lckludGVyZmFjZTtcbiAgdHlwZT86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIERhdGFzZXRJbmZvUHJvcHMgPSB7XG4gIGRhdGFzZXQ6IE1pbmlEYXRhc2V0O1xufTtcblxuY29uc3QgU3R5bGVkRGF0YVJvd0NvdW50ID0gc3R5bGVkLmRpdmBcbiAgZm9udC1zaXplOiAxMXB4O1xuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5zdWJ0ZXh0Q29sb3J9O1xuICBwYWRkaW5nLWxlZnQ6IDE5cHg7XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEYXRhc2V0SW5mb0ZhY3RvcnkoKSB7XG4gIGNvbnN0IERhdGFzZXRJbmZvOiBSZWFjdC5GQzxEYXRhc2V0SW5mb1Byb3BzPiA9ICh7ZGF0YXNldH06IERhdGFzZXRJbmZvUHJvcHMpID0+IChcbiAgICA8U3R5bGVkRGF0YVJvd0NvdW50IGNsYXNzTmFtZT1cInNvdXJjZS1kYXRhLXJvd3NcIj5cbiAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlXG4gICAgICAgIGlkPXtcbiAgICAgICAgICBkYXRhc2V0LnR5cGUgPT09IERhdGFzZXRUeXBlLlZFQ1RPUl9USUxFXG4gICAgICAgICAgICA/ICdkYXRhc2V0SW5mby52ZWN0b3JUaWxlJ1xuICAgICAgICAgICAgOiBkYXRhc2V0LnR5cGUgPT09IERhdGFzZXRUeXBlLlJBU1RFUl9USUxFXG4gICAgICAgICAgICA/ICdkYXRhc2V0SW5mby5yYXN0ZXJUaWxlJ1xuICAgICAgICAgICAgOiBkYXRhc2V0LnR5cGUgPT09IERhdGFzZXRUeXBlLldNU19USUxFXG4gICAgICAgICAgICA/ICdkYXRhc2V0SW5mby53bXNUaWxlJ1xuICAgICAgICAgICAgOiAnZGF0YXNldEluZm8ucm93Q291bnQnXG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVzPXt7cm93Q291bnQ6IG51bUZvcm1hdChkYXRhc2V0LmRhdGFDb250YWluZXIubnVtUm93cygpKX19XG4gICAgICAvPlxuICAgIDwvU3R5bGVkRGF0YVJvd0NvdW50PlxuICApO1xuXG4gIHJldHVybiBEYXRhc2V0SW5mbztcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxpQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsU0FBQSxHQUFBRixPQUFBO0FBRUEsSUFBQUcsVUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksYUFBQSxHQUFBSixPQUFBO0FBQXlELElBQUFLLGVBQUEsRUFSekQ7QUFDQTtBQVVBLElBQU1DLFNBQVMsR0FBRyxJQUFBQyxnQkFBTSxFQUFDLEdBQUcsQ0FBQztBQVc3QixJQUFNQyxrQkFBa0IsR0FBR0MsNEJBQU0sQ0FBQ0MsR0FBRyxDQUFBTCxlQUFBLEtBQUFBLGVBQUEsT0FBQU0sdUJBQUEsa0ZBRTFCLFVBQUFDLEtBQUs7RUFBQSxPQUFJQSxLQUFLLENBQUNDLEtBQUssQ0FBQ0MsWUFBWTtBQUFBLEVBRTNDO0FBRWMsU0FBU0Msa0JBQWtCQSxDQUFBLEVBQUc7RUFDM0MsSUFBTUMsV0FBdUMsR0FBRyxTQUExQ0EsV0FBdUNBLENBQUFDLElBQUE7SUFBQSxJQUFLQyxPQUFPLEdBQUFELElBQUEsQ0FBUEMsT0FBTztJQUFBLG9CQUN2RHBCLE1BQUEsWUFBQXFCLGFBQUEsQ0FBQ1gsa0JBQWtCO01BQUNZLFNBQVMsRUFBQztJQUFrQixnQkFDOUN0QixNQUFBLFlBQUFxQixhQUFBLENBQUNmLGFBQUEsQ0FBQWlCLGdCQUFnQjtNQUNmQyxFQUFFLEVBQ0FKLE9BQU8sQ0FBQ0ssSUFBSSxLQUFLQyxzQkFBVyxDQUFDQyxXQUFXLEdBQ3BDLHdCQUF3QixHQUN4QlAsT0FBTyxDQUFDSyxJQUFJLEtBQUtDLHNCQUFXLENBQUNFLFdBQVcsR0FDeEMsd0JBQXdCLEdBQ3hCUixPQUFPLENBQUNLLElBQUksS0FBS0Msc0JBQVcsQ0FBQ0csUUFBUSxHQUNyQyxxQkFBcUIsR0FDckIsc0JBQ0w7TUFDREMsTUFBTSxFQUFFO1FBQUNDLFFBQVEsRUFBRXZCLFNBQVMsQ0FBQ1ksT0FBTyxDQUFDWSxhQUFhLENBQUNDLE9BQU8sQ0FBQyxDQUFDO01BQUM7SUFBRSxDQUNoRSxDQUNpQixDQUFDO0VBQUEsQ0FDdEI7RUFFRCxPQUFPZixXQUFXO0FBQ3BCIiwiaWdub3JlTGlzdCI6W119