"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledLayerName = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _styledComponents2 = require("../common/styled-components");
var _icons = require("../common/icons");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _commonUtils = require("@kepler.gl/common-utils");
var _utils = require("@kepler.gl/utils");
var _reducers = require("@kepler.gl/reducers");
var _reactIntl = require("react-intl");
var _excluded = ["fieldsToShow"];
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof3(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledLayerName = exports.StyledLayerName = (0, _styledComponents["default"])(_styledComponents2.CenterFlexbox)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  font-size: 12px;\n  letter-spacing: 0.43px;\n  text-transform: capitalize;\n\n  svg {\n    margin-right: 4px;\n  }\n"])), function (props) {
  return props.theme.textColorHl;
});
var StyledTable = _styledComponents["default"].table(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  & .row__delta-value {\n    text-align: right;\n    margin-left: 6px;\n\n    &.positive {\n      color: ", ";\n    }\n\n    &.negative {\n      color: ", ";\n    }\n  }\n  & .row__value,\n  & .row__name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: no-wrap;\n  }\n"])), function (props) {
  return props.theme.notificationColors.success;
}, function (props) {
  return props.theme.negativeBtnActBgd;
});
var StyledDivider = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  // offset divider to reach popover edge\n  margin-left: -14px;\n  margin-right: -14px;\n  border-bottom: 1px solid ", ";\n"])), function (props) {
  return props.theme.panelBorderColor;
});
var Row = function Row(_ref) {
  var name = _ref.name,
    value = _ref.value,
    deltaValue = _ref.deltaValue,
    url = _ref.url;
  // Set 'url' to 'value' if it looks like a url
  if (!url && value && typeof value === 'string' && value.match(/^http/)) {
    url = value;
  }
  var asImg = /<img>/.test(name);
  return /*#__PURE__*/_react["default"].createElement("tr", {
    className: "layer-hover-info__row",
    key: name
  }, /*#__PURE__*/_react["default"].createElement("td", {
    className: "row__name"
  }, asImg ? name.replace('<img>', '') : name), /*#__PURE__*/_react["default"].createElement("td", {
    className: "row__value"
  }, asImg ? /*#__PURE__*/_react["default"].createElement("img", {
    src: value
  }) : url ? /*#__PURE__*/_react["default"].createElement("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: url
  }, value) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("span", null, value), (0, _commonUtils.notNullorUndefined)(deltaValue) ? /*#__PURE__*/_react["default"].createElement("span", {
    className: "row__delta-value ".concat((deltaValue === null || deltaValue === void 0 ? void 0 : deltaValue.toString().charAt(0)) === '+' ? 'positive' : 'negative')
  }, deltaValue) : null)));
};
var EntryInfo = function EntryInfo(_ref2) {
  var fieldsToShow = _ref2.fieldsToShow,
    props = (0, _objectWithoutProperties2["default"])(_ref2, _excluded);
  return /*#__PURE__*/_react["default"].createElement("tbody", null, fieldsToShow.map(function (item) {
    return /*#__PURE__*/_react["default"].createElement(EntryInfoRow, (0, _extends2["default"])({
      key: item.name,
      item: item
    }, props));
  }));
};
var EntryInfoRow = function EntryInfoRow(_ref3) {
  var layer = _ref3.layer,
    item = _ref3.item,
    fields = _ref3.fields,
    data = _ref3.data,
    primaryData = _ref3.primaryData,
    compareType = _ref3.compareType,
    currentTime = _ref3.currentTime;
  var fieldIdx = fields.findIndex(function (f) {
    return f.name === item.name;
  });
  if (fieldIdx < 0) {
    return null;
  }
  var field = fields[fieldIdx];
  var fieldValueAccessor = layer.accessVSFieldValue(field, currentTime);
  var value = fieldValueAccessor(field, data instanceof _utils.DataRow ? {
    index: data._rowIndex
  } : data);

  // Handle WMS layer data in comparison mode - WMS layers don't have comparable field data
  var primaryValue = null;
  var displayDeltaValue = null;
  if (primaryData) {
    try {
      // Only calculate primary value if primaryData has a compatible structure
      if (primaryData instanceof _utils.DataRow || primaryData && (0, _typeof2["default"])(primaryData) === 'object' && 'index' in primaryData) {
        primaryValue = fieldValueAccessor(field, primaryData instanceof _utils.DataRow ? {
          index: primaryData._rowIndex
        } : primaryData);
        displayDeltaValue = (0, _reducers.getTooltipDisplayDeltaValue)({
          field: field,
          value: value,
          primaryValue: primaryValue,
          compareType: compareType
        });
      }
    } catch (error) {
      // If there's an error accessing primaryData (e.g., WMS layer data), skip comparison
      primaryValue = null;
    }
  }
  var displayValue = (0, _reducers.getTooltipDisplayValue)({
    item: item,
    field: field,
    value: value
  });
  return /*#__PURE__*/_react["default"].createElement(Row, {
    name: field.displayName || field.name,
    value: displayValue,
    deltaValue: displayDeltaValue
  });
};

// TODO: supporting comparative value for aggregated cells as well
var CellInfo = function CellInfo(_ref4) {
  var fieldsToShow = _ref4.fieldsToShow,
    data = _ref4.data,
    layer = _ref4.layer;
  var _ref5 = layer.config,
    colorField = _ref5.colorField,
    sizeField = _ref5.sizeField;
  var colorValue = (0, _react.useMemo)(function () {
    if (colorField && layer.visualChannels.color) {
      var item = fieldsToShow.find(function (field) {
        return field.name === colorField.name;
      });
      return (0, _reducers.getTooltipDisplayValue)({
        item: item,
        field: colorField,
        value: data.colorValue
      });
    }
    return null;
  }, [fieldsToShow, colorField, layer, data.colorValue]);
  var elevationValue = (0, _react.useMemo)(function () {
    if (sizeField && layer.visualChannels.size) {
      var item = fieldsToShow.find(function (field) {
        return field.name === sizeField.name;
      });
      return (0, _reducers.getTooltipDisplayValue)({
        item: item,
        field: sizeField,
        value: data.elevationValue
      });
    }
    return null;
  }, [fieldsToShow, sizeField, layer, data.elevationValue]);
  var aggregatedData = (0, _react.useMemo)(function () {
    if (data.aggregatedData && fieldsToShow) {
      return fieldsToShow.reduce(function (acc, field) {
        var _data$aggregatedData;
        var dataForField = (_data$aggregatedData = data.aggregatedData) === null || _data$aggregatedData === void 0 ? void 0 : _data$aggregatedData[field.name];
        if (dataForField !== null && dataForField !== void 0 && dataForField.measure && field.name !== (colorField === null || colorField === void 0 ? void 0 : colorField.name)) {
          acc.push({
            name: "".concat((0, _utils.capitalizeFirstLetter)(dataForField.measure), " of ").concat(field.name),
            value: dataForField.value
          });
        }
        return acc;
      }, []);
    }
    return [];
  }, [data.aggregatedData, fieldsToShow, colorField === null || colorField === void 0 ? void 0 : colorField.name]);
  var colorMeasure = layer.getVisualChannelDescription('color').measure;
  var sizeMeasure = layer.getVisualChannelDescription('size').measure;
  return /*#__PURE__*/_react["default"].createElement("tbody", null, /*#__PURE__*/_react["default"].createElement(Row, {
    name: 'total points',
    key: "count",
    value: String(data.points && data.points.length)
  }), colorField && layer.visualChannels.color && colorMeasure ? /*#__PURE__*/_react["default"].createElement(Row, {
    name: colorMeasure,
    key: "color",
    value: colorValue || 'N/A'
  }) : null, sizeField && layer.visualChannels.size && sizeMeasure ? /*#__PURE__*/_react["default"].createElement(Row, {
    name: sizeMeasure,
    key: "size",
    value: elevationValue || 'N/A'
  }) : null, aggregatedData.map(function (dataForField, idx) {
    return /*#__PURE__*/_react["default"].createElement(Row, {
      name: dataForField.name,
      key: "data_".concat(idx),
      value: dataForField.value || 'N/A'
    });
  }));
};
var LayerHoverInfoFactory = function LayerHoverInfoFactory() {
  var LayerHoverInfo = function LayerHoverInfo(props) {
    var data = props.data,
      layer = props.layer;
    var intl = (0, _reactIntl.useIntl)();
    if (!data || !layer) {
      return null;
    }
    var hasFieldsToShow = data.fieldValues && Object.keys(data.fieldValues).length > 0 || data.wmsFeatureData && data.wmsFeatureData.length > 0 || props.fieldsToShow && props.fieldsToShow.length > 0;
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "map-popover__layer-info"
    }, /*#__PURE__*/_react["default"].createElement(StyledLayerName, {
      className: "map-popover__layer-name"
    }, /*#__PURE__*/_react["default"].createElement(_icons.Layers, {
      height: "12px"
    }), props.layer.config.label), hasFieldsToShow && /*#__PURE__*/_react["default"].createElement(StyledDivider, null), /*#__PURE__*/_react["default"].createElement(StyledTable, null, data.wmsFeatureData ? /*#__PURE__*/_react["default"].createElement("tbody", null, data.wmsFeatureData.map(function (_ref6, i) {
      var name = _ref6.name,
        value = _ref6.value;
      return /*#__PURE__*/_react["default"].createElement(Row, {
        key: i,
        name: name,
        value: value
      });
    })) : data.fieldValues ? /*#__PURE__*/_react["default"].createElement("tbody", null, data.fieldValues.map(function (_ref7, i) {
      var labelMessage = _ref7.labelMessage,
        value = _ref7.value;
      return /*#__PURE__*/_react["default"].createElement(Row, {
        key: i,
        name: intl.formatMessage({
          id: labelMessage
        }),
        value: value
      });
    })) : props.layer.isAggregated ? /*#__PURE__*/_react["default"].createElement(CellInfo, props) : /*#__PURE__*/_react["default"].createElement(EntryInfo, props)), hasFieldsToShow && /*#__PURE__*/_react["default"].createElement(StyledDivider, null));
  };
  LayerHoverInfo.propTypes = {
    fields: _propTypes["default"].arrayOf(_propTypes["default"].any),
    fieldsToShow: _propTypes["default"].arrayOf(_propTypes["default"].any),
    layer: _propTypes["default"].object,
    data: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].any), _propTypes["default"].object])
  };
  return LayerHoverInfo;
};
var _default = exports["default"] = LayerHoverInfoFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,