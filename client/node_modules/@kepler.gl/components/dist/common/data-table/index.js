"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.TableSection = exports.Container = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _reactVirtualized = require("react-virtualized");
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _classnames2 = _interopRequireDefault(require("classnames"));
var _reselect = require("reselect");
var _get = _interopRequireDefault(require("lodash/get"));
var _debounce = _interopRequireDefault(require("lodash/debounce"));
var _icons = require("../icons");
var _grid = _interopRequireDefault(require("./grid"));
var _headerCell = _interopRequireDefault(require("./header-cell"));
var _utils = require("@kepler.gl/utils");
var _cellSize = require("./cell-size");
var _constants = require("@kepler.gl/constants");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var defaultHeaderRowHeight = 55;
var defaultHeaderStatsControlHeight = 40;
var defaultRowHeight = 32;
var overscanColumnCount = 10;
var overscanRowCount = 10;
// The default scrollbar width can range anywhere from 12px to 17px
var browserScrollBarWidth = 17;
var fieldToAlignRight = (0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, _constants.ALL_FIELD_TYPES.integer, true), _constants.ALL_FIELD_TYPES.real, true);
var pinnedClassList = {
  header: 'pinned-columns--header pinned-grid-container',
  rows: 'pinned-columns--rows pinned-grid-container'
};
var unpinnedClassList = {
  header: 'unpinned-columns--header unpinned-grid-container',
  rows: 'unpinned-columns--rows unpinned-grid-container'
};
var Container = exports.Container = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  font-size: 11px;\n  flex-grow: 1;\n  color: ", ";\n  width: 100%;\n  position: relative;\n  .ReactVirtualized__Grid:focus,\n  .ReactVirtualized__Grid:active {\n    outline: 0;\n  }\n  .body-grid {\n    ", "\n  }\n\n  .cell {\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n\n  *:focus {\n    outline: 0;\n  }\n\n  .results-table-wrapper {\n    position: relative;\n    min-height: 100%;\n    max-height: 100%;\n    display: flex;\n    flex-direction: row;\n    flex-grow: 1;\n    overflow: hidden;\n\n    .scroll-in-ui-thread.pinned-columns--header {\n      overflow: hidden;\n      border-bottom: 1px solid ", ";\n      padding-bottom: ", "px;\n    }\n    .scroll-in-ui-thread.unpinned-columns--header {\n      width: 100vw;\n      overflow: hidden;\n      border-bottom: 1px solid ", ";\n      // leave room for scrollbar\n      padding-bottom: ", "px;\n    }\n\n    .scroll-in-ui-thread::after {\n      content: '';\n      height: 100%;\n      left: 0;\n      position: absolute;\n      pointer-events: none;\n      top: 0;\n      width: 100%;\n    }\n\n    .grid-row {\n      position: relative;\n      display: flex;\n      flex-direction: row;\n    }\n    .grid-column {\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 auto;\n    }\n    .pinned-grid-container {\n      flex: 0 0 75px;\n      z-index: 10;\n      position: absolute;\n      left: 0;\n      top: 0;\n      border-right: 2px solid ", ";\n    }\n    .even-row {\n      background-color: ", ";\n    }\n    .odd-row {\n      background-color: ", ";\n    }\n    .cell,\n    .header-cell {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: flex-start;\n      text-align: center;\n      overflow: hidden;\n      // header border is rendered by header container\n      border-bottom: 0;\n      .n-sort-idx {\n        font-size: 9px;\n      }\n    }\n    .cell {\n      border-bottom: 1px solid ", ";\n      border-right: 1px solid ", ";\n      white-space: nowrap;\n      overflow: auto;\n      padding: 0 ", "px;\n      font-size: ", "px;\n\n      .result-link {\n        text-decoration: none;\n      }\n    }\n    .cell.end-cell,\n    .header-cell.end-cell {\n      border-right: none;\n      padding-right: ", "px;\n    }\n    .cell.first-cell,\n    .header-cell.first-cell {\n      padding-left: ", "px;\n    }\n    .cell.bottom-cell {\n      border-bottom: none;\n    }\n    .cell.align-right {\n      align-items: flex-end;\n    }\n  }\n\n  &:focus {\n    outline: none;\n  }\n"])), function (props) {
  return props.theme.dataTableTextColor;
}, function (props) {
  return props.hasCustomScrollBarStyle && props.theme.modalScrollBar;
}, function (props) {
  return props.theme.cellBorderColor;
}, browserScrollBarWidth, function (props) {
  return props.theme.cellBorderColor;
}, browserScrollBarWidth, function (props) {
  return props.theme.pinnedGridBorderColor;
}, function (props) {
  return props.theme.evenRowBackground;
}, function (props) {
  return props.theme.oddRowBackground;
}, function (props) {
  return props.theme.cellBorderColor;
}, function (props) {
  return props.theme.cellBorderColor;
}, function (props) {
  return props.theme.cellPaddingSide;
}, function (props) {
  return props.theme.cellFontSize;
}, function (props) {
  return props.theme.cellPaddingSide + props.theme.edgeCellPaddingSide;
}, function (props) {
  return props.theme.cellPaddingSide + props.theme.edgeCellPaddingSide;
});
var defaultColumnWidth = 200;
var columnWidthFunction = function columnWidthFunction(columns, cellSizeCache, ghost) {
  return function (_ref) {
    var index = _ref.index;
    return (columns[index] || {}).ghost ? ghost : cellSizeCache[columns[index]] || defaultColumnWidth;
  };
};
/*
 * This is an accessor method used to generalize getting a cell from a data row
 */
var defaultGetRowCell = function defaultGetRowCell(_ref2, formatter) {
  var dataContainer = _ref2.dataContainer,
    columns = _ref2.columns,
    column = _ref2.column,
    colMeta = _ref2.colMeta,
    rowIndex = _ref2.rowIndex,
    sortOrder = _ref2.sortOrder;
  var rowIdx = sortOrder && sortOrder.length ? (0, _get["default"])(sortOrder, rowIndex) : rowIndex;
  var type = colMeta[column].type;
  var value = dataContainer === null || dataContainer === void 0 ? void 0 : dataContainer.valueAt(rowIdx, columns.indexOf(column));
  return value === null || value === undefined || value === '' ? '' : formatter ? formatter(value) : (0, _utils.parseFieldValue)(value, type);
};
var StyledStatsControl = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  height: ", "px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: stretch;\n  position: absolute;\n  top: ", "px;\n  font-family: ", "px;\n  font-size: 12px;\n  color: ", ";\n  background-color: ", ";\n  &:hover {\n    cursor: pointer;\n  }\n\n  > div {\n    padding: 0px 24px;\n    display: flex;\n    align-items: center;\n\n    svg {\n      margin-left: 12px;\n      transition: transform 0.5s ease;\n      transform: rotate(", "deg);\n    }\n  }\n"])), function (props) {
  return props.theme.headerStatsControlHeight;
}, function (props) {
  return props.top;
}, function (props) {
  return props.theme.fontFamilyMedium;
}, function (props) {
  return props.theme.activeColor;
}, function (props) {
  return props.theme.headerCellStatsControlBackground;
}, function (props) {
  return props.showStats ? 180 : 0;
});
var StatsControl = function StatsControl(_ref3) {
  var top = _ref3.top,
    showStats = _ref3.showStats,
    toggleShowStats = _ref3.toggleShowStats;
  return /*#__PURE__*/_react["default"].createElement(StyledStatsControl, {
    top: top,
    showStats: showStats
  }, /*#__PURE__*/_react["default"].createElement("div", {
    onClick: toggleShowStats
  }, showStats ? 'Hide Column Stats' : 'Show Column Stats', /*#__PURE__*/_react["default"].createElement(_icons.ArrowDown, {
    height: "18px"
  })));
};
var TableSection = exports.TableSection = function TableSection(_ref4) {
  var classList = _ref4.classList,
    isPinned = _ref4.isPinned,
    columns = _ref4.columns,
    headerGridProps = _ref4.headerGridProps,
    fixedWidth = _ref4.fixedWidth,
    _ref4$fixedHeight = _ref4.fixedHeight,
    fixedHeight = _ref4$fixedHeight === void 0 ? undefined : _ref4$fixedHeight,
    onScroll = _ref4.onScroll,
    scrollTop = _ref4.scrollTop,
    dataGridProps = _ref4.dataGridProps,
    columnWidth = _ref4.columnWidth,
    _ref4$setGridRef = _ref4.setGridRef,
    setGridRef = _ref4$setGridRef === void 0 ? undefined : _ref4$setGridRef,
    headerCellRender = _ref4.headerCellRender,
    dataCellRender = _ref4.dataCellRender,
    _ref4$scrollLeft = _ref4.scrollLeft,
    scrollLeft = _ref4$scrollLeft === void 0 ? 0 : _ref4$scrollLeft;
  var headerHeight = headerGridProps.height;
  var headerStyle = (0, _react.useMemo)(function () {
    return {
      height: "".concat(headerHeight, "px")
    };
  }, [headerHeight]);
  var contentStyle = (0, _react.useMemo)(function () {
    return {
      top: "".concat(headerHeight, "px")
    };
  }, [headerHeight]);
  return /*#__PURE__*/_react["default"].createElement(_reactVirtualized.AutoSizer, null, function (_ref5) {
    var width = _ref5.width,
      height = _ref5.height;
    var gridDimension = {
      columnCount: columns.length,
      columnWidth: columnWidth,
      width: fixedWidth || width
    };
    var headerGridWidth = fixedWidth || width;
    var dataGridHeight = fixedHeight || height;
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
      className: (0, _classnames2["default"])('scroll-in-ui-thread', classList === null || classList === void 0 ? void 0 : classList.header),
      style: headerStyle
    }, /*#__PURE__*/_react["default"].createElement(_grid["default"], (0, _extends2["default"])({
      cellRenderer: headerCellRender
    }, headerGridProps, gridDimension, {
      height: headerGridProps.height + browserScrollBarWidth,
      width: headerGridWidth,
      scrollLeft: scrollLeft,
      onScroll: onScroll
    }))), /*#__PURE__*/_react["default"].createElement("div", {
      className: (0, _classnames2["default"])('scroll-in-ui-thread', classList === null || classList === void 0 ? void 0 : classList.rows),
      style: contentStyle
    }, /*#__PURE__*/_react["default"].createElement(_grid["default"], (0, _extends2["default"])({
      cellRenderer: dataCellRender
    }, dataGridProps, gridDimension, {
      className: isPinned ? 'pinned-grid' : 'body-grid',
      height: dataGridHeight - headerGridProps.height,
      onScroll: onScroll,
      scrollLeft: scrollLeft,
      scrollTop: scrollTop,
      setGridRef: setGridRef
    }))));
  });
};
var DUMMY_STYLE = {};
DataTableFactory.deps = [_headerCell["default"]];
function DataTableFactory(HeaderCell) {
  var DataTable = /*#__PURE__*/function (_Component) {
    function DataTable() {
      var _this;
      (0, _classCallCheck2["default"])(this, DataTable);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, DataTable, [].concat(args));
      (0, _defineProperty2["default"])(_this, "pinnedGrid", null);
      (0, _defineProperty2["default"])(_this, "unpinnedGrid", null);
      (0, _defineProperty2["default"])(_this, "hasMounted", false);
      (0, _defineProperty2["default"])(_this, "state", {
        cellSizeCache: {},
        moreOptionsColumn: null,
        showStats: true
      });
      (0, _defineProperty2["default"])(_this, "root", /*#__PURE__*/(0, _react.createRef)());
      (0, _defineProperty2["default"])(_this, "columns", function (props) {
        return props.columns;
      });
      (0, _defineProperty2["default"])(_this, "pinnedColumns", function (props) {
        return props.pinnedColumns;
      });
      (0, _defineProperty2["default"])(_this, "unpinnedColumns", (0, _reselect.createSelector)(_this.columns, _this.pinnedColumns, function (columns, pinnedColumns) {
        return !Array.isArray(pinnedColumns) ? columns : columns.filter(function (c) {
          return !pinnedColumns.includes(c);
        });
      }));
      (0, _defineProperty2["default"])(_this, "toggleMoreOptions", function (moreOptionsColumn) {
        if (_this.hasMounted) _this.setState({
          moreOptionsColumn: _this.state.moreOptionsColumn === moreOptionsColumn ? null : moreOptionsColumn
        });
      });
      (0, _defineProperty2["default"])(_this, "toggleShowStats", function () {
        if (_this.hasMounted) _this.setState({
          showStats: !_this.state.showStats
        });
      });
      (0, _defineProperty2["default"])(_this, "getCellSizeCache", function () {
        var _this$props = _this.props,
          _this$props$cellSizeC = _this$props.cellSizeCache,
          propsCache = _this$props$cellSizeC === void 0 ? {} : _this$props$cellSizeC,
          fixedWidth = _this$props.fixedWidth,
          _this$props$pinnedCol = _this$props.pinnedColumns,
          pinnedColumns = _this$props$pinnedCol === void 0 ? [] : _this$props$pinnedCol;
        var unpinnedColumns = _this.unpinnedColumns(_this.props);
        var width = fixedWidth ? fixedWidth : _this.root.current ? _this.root.current.clientWidth : 0;

        // pin column border is 2 pixel vs 1 pixel
        var adjustWidth = pinnedColumns.length ? width - 1 : width;
        var _ref6 = (0, _cellSize.adjustCellsToContainer)(adjustWidth, propsCache, pinnedColumns, unpinnedColumns),
          cellSizeCache = _ref6.cellSizeCache,
          ghost = _ref6.ghost;
        return {
          cellSizeCache: cellSizeCache,
          ghost: ghost
        };
      });
      (0, _defineProperty2["default"])(_this, "doScaleCellsToWidth", function () {
        if (_this.hasMounted) _this.setState(_this.getCellSizeCache());
      });
      (0, _defineProperty2["default"])(_this, "scaleCellsToWidth", (0, _debounce["default"])(_this.doScaleCellsToWidth, 300));
      (0, _defineProperty2["default"])(_this, "renderDataCell", function (columns, isPinned, props) {
        var _this$props$getRowCel;
        var getRowCell = (_this$props$getRowCel = _this.props.getRowCell) !== null && _this$props$getRowCel !== void 0 ? _this$props$getRowCel : defaultGetRowCell;
        var DataCellRenderer = function DataCellRenderer(cellInfo) {
          var columnIndex = cellInfo.columnIndex,
            key = cellInfo.key,
            style = cellInfo.style,
            rowIndex = cellInfo.rowIndex;
          var dataContainer = props.dataContainer,
            colMeta = props.colMeta;
          var column = columns[columnIndex];
          var isGhost = column.ghost;
          var formatter = isGhost ? null : (0, _utils.getColumnFormatter)(colMeta[column]);
          var rowCell = isGhost ? '' : getRowCell(_objectSpread(_objectSpread({}, props), {}, {
            column: column,
            rowIndex: rowIndex
          }), formatter);
          var type = isGhost ? null : colMeta[column].type;
          var lastRowIndex = dataContainer ? dataContainer.numRows() - 1 : 0;
          var endCell = columnIndex === columns.length - 1;
          var firstCell = columnIndex === 0;
          var bottomCell = rowIndex === lastRowIndex;
          var alignRight = fieldToAlignRight[Number(type)];
          var cell = /*#__PURE__*/_react["default"].createElement("div", {
            className: (0, _classnames2["default"])('cell', (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, rowIndex % 2 === 0 ? 'even-row' : 'odd-row', true), "row-".concat(rowIndex), true), 'pinned-cell', isPinned), 'first-cell', firstCell), 'end-cell', endCell), 'bottom-cell', bottomCell), 'align-right', alignRight)),
            key: key,
            style: style,
            title: isGhost ? undefined : rowCell
          }, "".concat(rowCell).concat(endCell ? '\n' : '\t'));
          return cell;
        };
        return DataCellRenderer;
      });
      return _this;
    }
    (0, _inherits2["default"])(DataTable, _Component);
    return (0, _createClass2["default"])(DataTable, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.hasMounted = true;
        window.addEventListener('resize', this.scaleCellsToWidth);
        this.scaleCellsToWidth();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.cellSizeCache !== prevProps.cellSizeCache || this.props.pinnedColumns !== prevProps.pinnedColumns) {
          this.scaleCellsToWidth();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.hasMounted = false;
        window.removeEventListener('resize', this.scaleCellsToWidth);
      }
    }, {
      key: "renderHeaderCell",
      value: function renderHeaderCell(columns, isPinned, props, toggleMoreOptions, moreOptionsColumn) {
        var _this2 = this;
        var HeaderCellRenderer = function HeaderCellRenderer(cellInfo) {
          return /*#__PURE__*/_react["default"].createElement(HeaderCell, {
            cellInfo: cellInfo,
            key: cellInfo.columnIndex,
            columns: columns,
            isPinned: isPinned,
            showStats: _this2.state.showStats,
            props: props,
            toggleMoreOptions: toggleMoreOptions,
            moreOptionsColumn: moreOptionsColumn
            // pass dummy style to prevent warnings from react-virtualized Grid
            ,
            style: DUMMY_STYLE
          });
        };
        return HeaderCellRenderer;
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;
        var _this$props2 = this.props,
          dataContainer = _this$props2.dataContainer,
          _this$props2$pinnedCo = _this$props2.pinnedColumns,
          pinnedColumns = _this$props2$pinnedCo === void 0 ? [] : _this$props2$pinnedCo,
          _this$props2$theme = _this$props2.theme,
          theme = _this$props2$theme === void 0 ? {} : _this$props2$theme,
          fixedWidth = _this$props2.fixedWidth,
          _this$props2$fixedHei = _this$props2.fixedHeight,
          fixedHeight = _this$props2$fixedHei === void 0 ? 0 : _this$props2$fixedHei,
          hasStats = _this$props2.hasStats,
          hasCustomScrollBarStyle = _this$props2.hasCustomScrollBarStyle;
        var unpinnedColumns = this.unpinnedColumns(this.props);
        var _this$state = this.state,
          _this$state$cellSizeC = _this$state.cellSizeCache,
          cellSizeCache = _this$state$cellSizeC === void 0 ? {} : _this$state$cellSizeC,
          moreOptionsColumn = _this$state.moreOptionsColumn,
          ghost = _this$state.ghost,
          showStats = _this$state.showStats;
        var unpinnedColumnsGhost = ghost ? [].concat((0, _toConsumableArray2["default"])(unpinnedColumns), [{
          ghost: true
        }]) : unpinnedColumns;
        var pinnedColumnsWidth = pinnedColumns.reduce(function (acc, val) {
          return acc + (0, _get["default"])(cellSizeCache, val, 0);
        }, 0);
        var hasPinnedColumns = Boolean(pinnedColumns.length);
        var _theme$headerRowHeigh = theme.headerRowHeight,
          headerRowHeight = _theme$headerRowHeigh === void 0 ? defaultHeaderRowHeight : _theme$headerRowHeigh,
          _theme$headerStatsCon = theme.headerStatsControlHeight,
          headerStatsControlHeight = _theme$headerStatsCon === void 0 ? defaultHeaderStatsControlHeight : _theme$headerStatsCon,
          _theme$headerRowWStat = theme.headerRowWStatsHeight,
          headerRowWStatsHeight = _theme$headerRowWStat === void 0 ? defaultHeaderRowHeight : _theme$headerRowWStat,
          _theme$rowHeight = theme.rowHeight,
          rowHeight = _theme$rowHeight === void 0 ? defaultRowHeight : _theme$rowHeight;
        var headerGridProps = {
          cellSizeCache: cellSizeCache,
          className: 'header-grid',
          height: !hasStats ? headerRowHeight : showStats ? headerRowWStatsHeight : headerRowHeight + headerStatsControlHeight,
          rowCount: 1,
          rowHeight: !hasStats ? headerRowHeight : showStats ? headerRowWStatsHeight : headerRowHeight + headerStatsControlHeight
        };
        var dataGridProps = {
          cellSizeCache: cellSizeCache,
          overscanColumnCount: overscanColumnCount,
          overscanRowCount: overscanRowCount,
          rowCount: dataContainer ? dataContainer.numRows() : 0,
          rowHeight: rowHeight
        };
        return /*#__PURE__*/_react["default"].createElement(Container, {
          className: "data-table-container",
          ref: this.root,
          hasCustomScrollBarStyle: hasCustomScrollBarStyle
        }, Object.keys(cellSizeCache).length ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_reactVirtualized.ScrollSync, null, function (_ref7) {
          var _onScroll = _ref7.onScroll,
            scrollLeft = _ref7.scrollLeft,
            scrollTop = _ref7.scrollTop;
          return /*#__PURE__*/_react["default"].createElement("div", {
            className: "results-table-wrapper"
          }, hasPinnedColumns && /*#__PURE__*/_react["default"].createElement("div", {
            key: "pinned-columns",
            className: "pinned-columns grid-row"
          }, /*#__PURE__*/_react["default"].createElement(TableSection, {
            classList: pinnedClassList,
            isPinned: true,
            columns: pinnedColumns,
            headerGridProps: headerGridProps,
            fixedWidth: pinnedColumnsWidth,
            onScroll: function onScroll(args) {
              return _onScroll(_objectSpread(_objectSpread({}, args), {}, {
                scrollLeft: scrollLeft
              }));
            },
            scrollTop: scrollTop,
            scrollLeft: scrollLeft,
            dataGridProps: dataGridProps,
            setGridRef: function setGridRef(pinnedGrid) {
              return _this3.pinnedGrid = pinnedGrid;
            },
            columnWidth: columnWidthFunction(pinnedColumns, cellSizeCache),
            headerCellRender: _this3.renderHeaderCell(pinnedColumns, true, _this3.props, _this3.toggleMoreOptions, moreOptionsColumn),
            dataCellRender: _this3.renderDataCell(pinnedColumns, true, _this3.props)
          })), /*#__PURE__*/_react["default"].createElement("div", {
            key: "unpinned-columns",
            style: {
              marginLeft: "".concat(hasPinnedColumns ? "".concat(pinnedColumnsWidth, "px") : '0')
            },
            className: "unpinned-columns grid-column"
          }, /*#__PURE__*/_react["default"].createElement(TableSection, {
            classList: unpinnedClassList,
            isPinned: false,
            columns: unpinnedColumnsGhost,
            headerGridProps: headerGridProps,
            fixedWidth: fixedWidth,
            fixedHeight: fixedHeight,
            onScroll: _onScroll,
            scrollTop: scrollTop,
            scrollLeft: scrollLeft,
            dataGridProps: dataGridProps,
            setGridRef: function setGridRef(unpinnedGrid) {
              return _this3.unpinnedGrid = unpinnedGrid;
            },
            columnWidth: columnWidthFunction(unpinnedColumnsGhost, cellSizeCache, ghost),
            headerCellRender: _this3.renderHeaderCell(unpinnedColumnsGhost, false, _this3.props, _this3.toggleMoreOptions, moreOptionsColumn),
            dataCellRender: _this3.renderDataCell(unpinnedColumnsGhost, false, _this3.props)
          })));
        }), hasStats ? /*#__PURE__*/_react["default"].createElement(StatsControl, {
          top: headerRowHeight,
          showStats: showStats,
          toggleShowStats: this.toggleShowStats
        }) : null) : null);
      }
    }]);
  }(_react.Component);
  (0, _defineProperty2["default"])(DataTable, "defaultProps", {
    dataContainer: null,
    pinnedColumns: [],
    colMeta: {},
    cellSizeCache: {},
    sortColumn: {},
    fixedWidth: null,
    fixedHeight: null,
    theme: {},
    hasStats: false,
    hasCustomScrollBarStyle: true
  });
  return (0, _styledComponents.withTheme)(DataTable);
}
var _default = exports["default"] = DataTableFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,