"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _classnames = _interopRequireDefault(require("classnames"));
var _icons = require("../icons");
var _constants = require("@kepler.gl/constants");
var _animationSpeedSlider = _interopRequireDefault(require("./animation-speed-slider"));
var _windowActionControl = _interopRequireDefault(require("./window-action-control"));
var _animationWindowControl = _interopRequireDefault(require("./animation-window-control"));
var _resetControl = _interopRequireDefault(require("./reset-control"));
var _playControl = _interopRequireDefault(require("./play-control"));
var _speedControl = _interopRequireDefault(require("./speed-control"));
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var DEFAULT_BUTTON_HEIGHT = '20px';
var StyledAnimationControls = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  position: relative;\n  width: ", "px;\n  &.disabled {\n    opacity: 0.4;\n    pointer-events: none;\n  }\n"])), function (props) {
  return props.width;
});
var DEFAULT_ICONS = {
  /* eslint-disable react/display-name */
  reset: function reset() {
    return /*#__PURE__*/_react["default"].createElement(_icons.Reset, {
      height: "16px"
    });
  },
  play: function play() {
    return /*#__PURE__*/_react["default"].createElement(_icons.Play, {
      height: "16px"
    });
  },
  pause: function pause() {
    return /*#__PURE__*/_react["default"].createElement(_icons.Pause, {
      height: "16px"
    });
  },
  "export": function _export() {
    return /*#__PURE__*/_react["default"].createElement(_icons.Save, {
      height: "16px"
    });
  },
  /* eslint-enable react/display-name */
  speed: function speed() {
    return /*#__PURE__*/_react["default"].createElement(_icons.Speed, {
      height: "16px"
    });
  },
  animationFree: _icons.FreeWindow,
  animationIncremental: _icons.AnchorWindow
};
function nop() {
  return;
}
var DEFAULT_ANIMATE_ITEMS = (0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, _constants.ANIMATION_WINDOW.free, {
  id: _constants.ANIMATION_WINDOW.free,
  icon: DEFAULT_ICONS.animationFree,
  tooltip: 'tooltip.animationByWindow'
}), _constants.ANIMATION_WINDOW.incremental, {
  id: _constants.ANIMATION_WINDOW.incremental,
  icon: DEFAULT_ICONS.animationIncremental,
  tooltip: 'tooltip.animationByIncremental'
});
PlaybackControlsFactory.deps = [
// keeping this for backwards compatibility but we can decide to drop it later
_animationSpeedSlider["default"], _windowActionControl["default"], _animationWindowControl["default"], _resetControl["default"], _playControl["default"]];
function PlaybackControlsFactory(AnimationSpeedSlider, WindowActionControl, AnimationWindowControl, ResetControl, PlayControl) {
  var PLAYBACK_CONTROLS_DEFAULT_ACTION_COMPONENTS = [PlayControl, (0, _speedControl["default"])(AnimationSpeedSlider), ResetControl, WindowActionControl, AnimationWindowControl];

  // eslint-disable-next-line complexity
  var PlaybackControls = function PlaybackControls(_ref) {
    var filter = _ref.filter,
      _ref$isAnimatable = _ref.isAnimatable,
      isAnimatable = _ref$isAnimatable === void 0 ? true : _ref$isAnimatable,
      isAnimating = _ref.isAnimating,
      width = _ref.width,
      speed = _ref.speed,
      _ref$animationWindow = _ref.animationWindow,
      animationWindow = _ref$animationWindow === void 0 ? _constants.ANIMATION_WINDOW.free : _ref$animationWindow,
      setFilterAnimationWindow = _ref.setFilterAnimationWindow,
      updateAnimationSpeed = _ref.updateAnimationSpeed,
      _ref$pauseAnimation = _ref.pauseAnimation,
      pauseAnimation = _ref$pauseAnimation === void 0 ? nop : _ref$pauseAnimation,
      _ref$resetAnimation = _ref.resetAnimation,
      resetAnimation = _ref$resetAnimation === void 0 ? nop : _ref$resetAnimation,
      _ref$startAnimation = _ref.startAnimation,
      startAnimation = _ref$startAnimation === void 0 ? nop : _ref$startAnimation,
      _ref$playbackIcons = _ref.playbackIcons,
      playbackIcons = _ref$playbackIcons === void 0 ? DEFAULT_ICONS : _ref$playbackIcons,
      _ref$animationItems = _ref.animationItems,
      animationItems = _ref$animationItems === void 0 ? DEFAULT_ANIMATE_ITEMS : _ref$animationItems,
      _ref$buttonStyle = _ref.buttonStyle,
      buttonStyle = _ref$buttonStyle === void 0 ? 'secondary' : _ref$buttonStyle,
      _ref$buttonHeight = _ref.buttonHeight,
      buttonHeight = _ref$buttonHeight === void 0 ? DEFAULT_BUTTON_HEIGHT : _ref$buttonHeight,
      _ref$playbackActionIt = _ref.playbackActionItems,
      playbackActionItems = _ref$playbackActionIt === void 0 ? PLAYBACK_CONTROLS_DEFAULT_ACTION_COMPONENTS : _ref$playbackActionIt;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isSpeedControlVisible = _useState2[0],
      toggleSpeedControl = _useState2[1];
    var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      showAnimationWindowControl = _useState4[0],
      setShowAnimationWindowControl = _useState4[1];
    var toggleAnimationWindowControl = (0, _react.useCallback)(function () {
      setShowAnimationWindowControl(!showAnimationWindowControl);
    }, [showAnimationWindowControl, setShowAnimationWindowControl]);
    var btnStyle = buttonStyle ? (0, _defineProperty2["default"])({}, buttonStyle, true) : {};
    var hideAndShowSpeedControl = (0, _react.useCallback)(function () {
      if (!isSpeedControlVisible) {
        toggleSpeedControl(true);
      } else {
        // TODO: A HACK to allow input onblur get triggered before the input is unmounted
        // A better solution should be invested, see https://github.com/facebook/react/issues/12363
        window.setTimeout(function () {
          return toggleSpeedControl(false);
        }, 200);
      }
    }, [isSpeedControlVisible, toggleSpeedControl]);
    return /*#__PURE__*/_react["default"].createElement(StyledAnimationControls, {
      className: (0, _classnames["default"])('playback-controls', {
        disabled: !isAnimatable
      }),
      width: width
    }, playbackActionItems.map(function (ActionComponent, index) {
      return /*#__PURE__*/_react["default"].createElement(ActionComponent, {
        key: index,
        toggleAnimationWindowControl: toggleAnimationWindowControl,
        showAnimationWindowControl: showAnimationWindowControl,
        btnStyle: btnStyle,
        hideAndShowSpeedControl: hideAndShowSpeedControl,
        animationItems: animationItems,
        animationWindow: animationWindow,
        buttonHeight: buttonHeight,
        filter: filter,
        setFilterAnimationWindow: setFilterAnimationWindow,
        updateAnimationSpeed: updateAnimationSpeed,
        isAnimating: isAnimating,
        pauseAnimation: pauseAnimation,
        resetAnimation: resetAnimation,
        startAnimation: startAnimation,
        playbackIcons: playbackIcons,
        isSpeedControlVisible: isSpeedControlVisible,
        speed: speed
      });
    }));
  };
  return PlaybackControls;
}
var _default = exports["default"] = PlaybackControlsFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,