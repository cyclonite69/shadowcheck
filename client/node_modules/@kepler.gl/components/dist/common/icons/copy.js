"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _base = _interopRequireDefault(require("./base"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var Copy = exports["default"] = /*#__PURE__*/function (_Component) {
  function Copy() {
    (0, _classCallCheck2["default"])(this, Copy);
    return _callSuper(this, Copy, arguments);
  }
  (0, _inherits2["default"])(Copy, _Component);
  return (0, _createClass2["default"])(Copy, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement(_base["default"], this.props, /*#__PURE__*/_react["default"].createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M11.8002 4.98792H6.4002C5.73745 4.98792 5.2002 5.52517 5.2002 6.18792V11.5879C5.2002 12.2507 5.73745 12.7879 6.4002 12.7879H11.8002C12.4629 12.7879 13.0002 12.2507 13.0002 11.5879V6.18792C13.0002 5.52517 12.4629 4.98792 11.8002 4.98792Z"
      }), /*#__PURE__*/_react["default"].createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M2.8 8.58796H2.2C1.88174 8.58796 1.57652 8.46154 1.35147 8.23649C1.12643 8.01145 1 7.70622 1 7.38796V1.98796C1 1.6697 1.12643 1.36448 1.35147 1.13944C1.57652 0.914392 1.88174 0.787964 2.2 0.787964H7.6C7.91826 0.787964 8.22348 0.914392 8.44853 1.13944C8.67357 1.36448 8.8 1.6697 8.8 1.98796V2.58796"
      }));
    }
  }]);
}(_react.Component);
(0, _defineProperty2["default"])(Copy, "defaultProps", {
  height: '14px',
  viewBox: '0 0 14 14',
  predefinedClassName: 'data-ex-icons-copy',
  style: {
    fill: 'none',
    stroke: 'currentColor'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfYmFzZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJfY2FsbFN1cGVyIiwibyIsIl9nZXRQcm90b3R5cGVPZjIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiYXBwbHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsIkNvcHkiLCJleHBvcnRzIiwiX0NvbXBvbmVudCIsIl9jbGFzc0NhbGxDaGVjazIiLCJhcmd1bWVudHMiLCJfaW5oZXJpdHMyIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsInByb3BzIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwiZCIsIkNvbXBvbmVudCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJoZWlnaHQiLCJ2aWV3Qm94IiwicHJlZGVmaW5lZENsYXNzTmFtZSIsInN0eWxlIiwiZmlsbCIsInN0cm9rZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vaWNvbnMvY29weS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQmFzZSwge0Jhc2VQcm9wc30gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29weSBleHRlbmRzIENvbXBvbmVudDxQYXJ0aWFsPEJhc2VQcm9wcz4+IHtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBoZWlnaHQ6ICcxNHB4JyxcbiAgICB2aWV3Qm94OiAnMCAwIDE0IDE0JyxcbiAgICBwcmVkZWZpbmVkQ2xhc3NOYW1lOiAnZGF0YS1leC1pY29ucy1jb3B5JyxcbiAgICBzdHlsZToge1xuICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgc3Ryb2tlOiAnY3VycmVudENvbG9yJ1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxCYXNlIHsuLi50aGlzLnByb3BzfT5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgICAgICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgICAgICAgIGQ9XCJNMTEuODAwMiA0Ljk4NzkySDYuNDAwMkM1LjczNzQ1IDQuOTg3OTIgNS4yMDAyIDUuNTI1MTcgNS4yMDAyIDYuMTg3OTJWMTEuNTg3OUM1LjIwMDIgMTIuMjUwNyA1LjczNzQ1IDEyLjc4NzkgNi40MDAyIDEyLjc4NzlIMTEuODAwMkMxMi40NjI5IDEyLjc4NzkgMTMuMDAwMiAxMi4yNTA3IDEzLjAwMDIgMTEuNTg3OVY2LjE4NzkyQzEzLjAwMDIgNS41MjUxNyAxMi40NjI5IDQuOTg3OTIgMTEuODAwMiA0Ljk4NzkyWlwiXG4gICAgICAgIC8+XG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAgICAgICBkPVwiTTIuOCA4LjU4Nzk2SDIuMkMxLjg4MTc0IDguNTg3OTYgMS41NzY1MiA4LjQ2MTU0IDEuMzUxNDcgOC4yMzY0OUMxLjEyNjQzIDguMDExNDUgMSA3LjcwNjIyIDEgNy4zODc5NlYxLjk4Nzk2QzEgMS42Njk3IDEuMTI2NDMgMS4zNjQ0OCAxLjM1MTQ3IDEuMTM5NDRDMS41NzY1MiAwLjkxNDM5MiAxLjg4MTc0IDAuNzg3OTY0IDIuMiAwLjc4Nzk2NEg3LjZDNy45MTgyNiAwLjc4Nzk2NCA4LjIyMzQ4IDAuOTE0MzkyIDguNDQ4NTMgMS4xMzk0NEM4LjY3MzU3IDEuMzY0NDggOC44IDEuNjY5NyA4LjggMS45ODc5NlYyLjU4Nzk2XCJcbiAgICAgICAgLz5cbiAgICAgIDwvQmFzZT5cbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQXVDLFNBQUFHLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBTCx3QkFBQUssQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLGdCQUFBSyxPQUFBLENBQUFMLENBQUEsMEJBQUFBLENBQUEsc0JBQUFBLENBQUEsUUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBLE9BQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUEsT0FBQVEsQ0FBQSxLQUFBQyxTQUFBLFVBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FB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