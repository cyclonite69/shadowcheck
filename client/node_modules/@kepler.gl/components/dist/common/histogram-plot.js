"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.HISTOGRAM_MASK_MODE = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _d3Scale = require("d3-scale");
var _d3Color = require("d3-color");
var _d3Array = require("d3-array");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// clipping mask constants
var HISTOGRAM_MASK_MODE = exports.HISTOGRAM_MASK_MODE = {
  NoMask: 0,
  Mask: 1,
  MaskWithOverlay: 2
};
var HISTOGRAM_MASK_BGCOLOR = '#FFFFFF';
var HISTOGRAM_MASK_FGCOLOR = '#000000';
var histogramStyle = {
  highlightW: 0.7,
  unHighlightedW: 0.4
};
var HistogramWrapper = _styledComponents["default"].svg(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  overflow: visible;\n"])));
var HistogramMaskRect = _styledComponents["default"].rect(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  fill: ", ";\n"])), function (props) {
  return props.theme.panelBackground;
});
var HistogramBreakLine = _styledComponents["default"].g(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  stroke: ", ";\n  stroke-width: 1px;\n  transform: translate(0, 0);\n"])), function (props) {
  return props.theme.histogramBreakLineColor;
});
var BarUnmemoized = _styledComponents["default"].rect(function (_ref) {
  var theme = _ref.theme,
    $inRange = _ref.$inRange,
    $isOverlay = _ref.$isOverlay,
    $color = _ref.$color;
  return "\n  ".concat($isOverlay ? "fill: ".concat($color !== null && $color !== void 0 ? $color : theme.histogramOverlayColor, ";") : $inRange ? "fill: ".concat($color !== null && $color !== void 0 ? $color : theme.histogramFillInRange, ";") : "fill: ".concat($color ? (0, _d3Color.hcl)($color).darker() : theme.histogramFillOutRange, ";"), "\n");
});
var Bar = /*#__PURE__*/_react["default"].memo(BarUnmemoized);
Bar.displayName = 'Bar';
var isBarInRange = function isBarInRange(bar, index, list, filterDomain, filterValue) {
  // first
  // if x0 <= domain[0] and current value[0] wasn't changed from the original domain
  var x0Condition = index === 0 ? bar.x0 <= filterDomain[0] && filterDomain[0] === filterValue[0] : false;
  // Last
  // if x1 >= domain[1] and current value[1] wasn't changed from the original domain
  var x1Condition = index === list.length - 1 ? bar.x1 >= filterDomain[1] && filterDomain[1] === filterValue[1] : false;
  return (x0Condition || bar.x0 >= filterValue[0]) && (x1Condition || bar.x1 <= filterValue[1]);
};
function HistogramPlotFactory() {
  var HistogramPlot = function HistogramPlot(_ref2) {
    var width = _ref2.width,
      height = _ref2.height,
      histogramsByGroup = _ref2.histogramsByGroup,
      colorsByGroup = _ref2.colorsByGroup,
      _ref2$isMasked = _ref2.isMasked,
      isMasked = _ref2$isMasked === void 0 ? HISTOGRAM_MASK_MODE.NoMask : _ref2$isMasked,
      _ref2$countProp = _ref2.countProp,
      countProp = _ref2$countProp === void 0 ? 'count' : _ref2$countProp,
      margin = _ref2.margin,
      isRanged = _ref2.isRanged,
      range = _ref2.range,
      value = _ref2.value,
      brushComponent = _ref2.brushComponent,
      breakLines = _ref2.breakLines;
    var undefinedToZero = function undefinedToZero(x) {
      return x ? x : 0;
    };
    var groupKeys = (0, _react.useMemo)(function () {
      return Object.keys(histogramsByGroup)
      // only keep non-empty groups
      .filter(function (key) {
        var _histogramsByGroup$ke;
        return ((_histogramsByGroup$ke = histogramsByGroup[key]) === null || _histogramsByGroup$ke === void 0 ? void 0 : _histogramsByGroup$ke.length) > 0;
      });
    }, [histogramsByGroup]);
    var domain = (0, _react.useMemo)(function () {
      var _min, _max;
      return range !== null && range !== void 0 ? range : [(_min = (0, _d3Array.min)(groupKeys, function (key) {
        return histogramsByGroup[key][0].x0;
      })) !== null && _min !== void 0 ? _min : 0, (_max = (0, _d3Array.max)(groupKeys, function (key) {
        return histogramsByGroup[key][histogramsByGroup[key].length - 1].x1;
      })) !== null && _max !== void 0 ? _max : 0];
    }, [range, histogramsByGroup, groupKeys]);
    var barWidth = (0, _react.useMemo)(function () {
      if (groupKeys.length === 0) return 0;
      // find histogramsByGroup with max number of bins
      var maxGroup = groupKeys.reduce(function (accu, key, _idx) {
        if (histogramsByGroup[key].length > accu.length) {
          return histogramsByGroup[key];
        }
        return accu;
      }, histogramsByGroup[groupKeys[0]]);

      // find the bin for measuring step
      var stdBinIdx = maxGroup.length > 1 ? 1 : 0;
      var xStep = maxGroup[stdBinIdx].x1 - maxGroup[stdBinIdx].x0;
      var maxBins = (domain[1] - domain[0]) / xStep;
      if (!maxBins) return 0;
      return width / maxBins / (isMasked ? 1 : groupKeys.length);
    }, [histogramsByGroup, domain, groupKeys, width, isMasked]);
    var x = (0, _react.useMemo)(function () {
      return (0, _d3Scale.scaleLinear)().domain(domain).range([barWidth, width]);
    }, [domain, width, barWidth]);
    var y = (0, _react.useMemo)(function () {
      return (0, _d3Scale.scaleLinear)().domain([0, Math.max(Number((0, _d3Array.max)(groupKeys, function (key) {
        return (0, _d3Array.max)(histogramsByGroup[key], function (d) {
          return d[countProp];
        });
      })), 1)]).range([0, height]);
    }, [histogramsByGroup, groupKeys, height, countProp]);
    if (groupKeys.length === 0) {
      return null;
    }
    var maskedHistogram = function maskedHistogram() {
      return /*#__PURE__*/_react["default"].createElement(HistogramWrapper, {
        width: width,
        height: height,
        style: {
          margin: "".concat(margin.top, "px ").concat(margin.right, "px ").concat(margin.bottom, "px ").concat(margin.left, "px")
        }
      }, /*#__PURE__*/_react["default"].createElement("defs", null, /*#__PURE__*/_react["default"].createElement("mask", {
        id: "histogram-mask"
      }, /*#__PURE__*/_react["default"].createElement("rect", {
        x: "0",
        y: "0",
        width: width,
        height: height + margin.bottom,
        fill: HISTOGRAM_MASK_BGCOLOR
      }), /*#__PURE__*/_react["default"].createElement("g", {
        key: "filtered-bins",
        className: "histogram-bars"
      }, histogramsByGroup.filteredBins.map(function (bar, idx, list) {
        var inRange = isBarInRange(bar, idx, list, domain, value);
        var wRatio = inRange ? histogramStyle.highlightW : histogramStyle.unHighlightedW;
        return /*#__PURE__*/_react["default"].createElement(Bar, {
          $isOverlay: false,
          $inRange: inRange,
          $color: HISTOGRAM_MASK_FGCOLOR,
          key: "mask-".concat(idx),
          height: y(bar[countProp]),
          width: barWidth * wRatio,
          x: x(bar.x0) + barWidth * (1 - wRatio) / 2,
          y: height - y(bar[countProp])
        });
      })))), /*#__PURE__*/_react["default"].createElement("g", {
        transform: "translate(0,0)"
      }, /*#__PURE__*/_react["default"].createElement(HistogramMaskRect, {
        x: "0",
        y: "0",
        width: "100%",
        height: height + margin.bottom,
        mask: "url(#histogram-mask)"
      })), isMasked === HISTOGRAM_MASK_MODE.MaskWithOverlay && /*#__PURE__*/_react["default"].createElement("g", {
        key: "bins",
        transform: "translate(0,0)",
        className: "overlay-histogram-bars"
      }, histogramsByGroup.bins.map(function (bar, idx, list) {
        var filterBar = histogramsByGroup.filteredBins[idx];
        var maskHeight = filterBar ? y(bar[countProp]) - y(filterBar[countProp]) : y(bar[countProp]);
        var inRange = isBarInRange(bar, idx, list, domain, value);
        var wRatio = inRange ? histogramStyle.highlightW : histogramStyle.unHighlightedW;
        return /*#__PURE__*/_react["default"].createElement(Bar, {
          $inRange: inRange,
          $isOverlay: true,
          key: "bar-".concat(idx),
          height: maskHeight,
          width: barWidth * wRatio,
          x: x(bar.x0) + barWidth * (1 - wRatio) / 2,
          y: height - y(bar[countProp])
        });
      })), /*#__PURE__*/_react["default"].createElement(HistogramBreakLine, null, (breakLines !== null && breakLines !== void 0 ? breakLines : []).map(function (pos, idx) {
        return /*#__PURE__*/_react["default"].createElement("path", {
          key: "mask-line-".concat(idx),
          strokeDasharray: "4,4",
          d: "M".concat(pos, ", 0 l0 100")
        });
      })), /*#__PURE__*/_react["default"].createElement("g", {
        transform: "translate(".concat(isRanged ? 0 : barWidth / 2, ", 0)")
      }, brushComponent));
    };
    return isMasked ? maskedHistogram() : /*#__PURE__*/_react["default"].createElement(HistogramWrapper, {
      width: width,
      height: height,
      style: {
        margin: "".concat(margin.top, "px ").concat(margin.right, "px ").concat(margin.bottom, "px ").concat(margin.left, "px")
      }
    }, /*#__PURE__*/_react["default"].createElement("g", null, groupKeys.map(function (key, i) {
      return /*#__PURE__*/_react["default"].createElement("g", {
        key: key,
        className: "histogram-bars"
      }, histogramsByGroup[key].map(function (bar, idx, list) {
        var inRange = isBarInRange(bar, idx, list, domain, value);
        var wRatio = inRange ? histogramStyle.highlightW : histogramStyle.unHighlightedW;
        var startX = x(undefinedToZero(bar.x0)) + barWidth * i + barWidth * (1 - wRatio) / 2;
        if (startX > 0 && startX + barWidth * histogramStyle.unHighlightedW <= width) {
          return /*#__PURE__*/_react["default"].createElement(Bar, {
            $isOverlay: false,
            $inRange: inRange,
            $color: colorsByGroup === null || colorsByGroup === void 0 ? void 0 : colorsByGroup[key],
            key: "bar-".concat(idx),
            height: y(bar[countProp]),
            width: barWidth * wRatio,
            x: startX,
            rx: 1,
            ry: 1,
            y: height - y(bar[countProp])
          });
        }
        return null;
      }));
    })), /*#__PURE__*/_react["default"].createElement("g", {
      transform: "translate(".concat(isRanged ? 0 : barWidth / 2, ", 0)")
    }, brushComponent));
  };
  var HistogramPlotWithGroups = function HistogramPlotWithGroups(props) {
    var groups = (0, _react.useMemo)(function () {
      return props.histogramsByGroup ? Object.keys(props.histogramsByGroup) : null;
    }, [props.histogramsByGroup]);
    if (!(groups !== null && groups !== void 0 && groups.length)) {
      return null;
    }
    return /*#__PURE__*/_react["default"].createElement(HistogramPlot, props);
  };
  return HistogramPlotWithGroups;
}
var _default = exports["default"] = HistogramPlotFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,