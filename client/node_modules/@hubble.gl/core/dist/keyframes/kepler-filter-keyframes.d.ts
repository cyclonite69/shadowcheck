import Keyframes, { KeyframeProps } from "./keyframes.js";
import { Easing } from "./easings.js";
export type KeplerFilter = {
    id: string;
    type: 'input' | 'range' | 'timeRange';
    animationWindow: 'free' | 'incremental' | 'point' | 'interval';
    value: [number, number];
    domain: [number, number];
    bins: {
        [id: string]: {
            [interval: string]: {
                x0: number;
                x1: number;
            }[];
        };
    };
    plotType: {
        type: string;
        interval: string;
    };
};
export type FilterDataType = {
    value: number | [number, number];
};
export declare function timeRangeKeyframes({ filter, timings }: {
    filter: KeplerFilter;
    timings: number[];
}): {
    keyframes: FilterDataType[];
    easings: Easing;
    timings?: number[];
};
export type TimeRangeKeyframeAccessor = ({ filter, timings }: {
    filter: KeplerFilter;
    timings: number[];
}) => {
    keyframes: FilterDataType[];
    easings: Easing;
    timings?: number[];
};
export type KeplerFilterKeyframeProps = Omit<Omit<KeyframeProps<FilterDataType>, 'keyframes'>, 'features'> & {
    getTimeRangeFilterKeyframes?: TimeRangeKeyframeAccessor;
    keyframes?: FilterDataType[];
    filter?: KeplerFilter;
    filterIdx?: number;
};
declare class KeplerFilterKeyframes extends Keyframes<FilterDataType> {
    id?: string;
    type?: 'input' | 'range' | 'timeRange' | 'select' | 'multiSelect' | 'polygon';
    filterIdx?: number;
    getTimeRangeFilterKeyframes?: ({ filter, timings }: {
        filter: KeplerFilter;
        timings: number[];
    }) => {
        keyframes: FilterDataType[];
        easings: Easing;
        timings?: number[];
    };
    animationWindow?: 'free' | 'incremental' | 'point' | 'interval';
    constructor({ filter, filterIdx, timings, keyframes, easings, interpolators, getTimeRangeFilterKeyframes }: KeplerFilterKeyframeProps);
    set({ filter, filterIdx, timings, keyframes, easings, interpolators }: Omit<KeplerFilterKeyframeProps, 'KeplerFilterKeyframeProps'>): void;
    getFrame(): number | number[] | FilterDataType;
    static _processParams({ filter, timings, keyframes, easings, interpolators, getTimeRangeFilterKeyframes }: Omit<KeplerFilterKeyframeProps, 'filterIdx'>): {
        features: string[];
        timings: number | number[];
        keyframes: FilterDataType[];
        easings: Easing | Easing[];
        interpolators: string | string[];
    };
}
export default KeplerFilterKeyframes;
//# sourceMappingURL=kepler-filter-keyframes.d.ts.map