import { type FrameEncoder, type FormatConfigs } from "../encoders/index.js";
import { AnimationManager } from "../animations/index.js";
import { type Timecode, VideoCapture } from "../capture/video-capture.js";
import type { Deck, Layer, DeckProps } from '@deck.gl/core/typed';
export default class DeckAdapter {
    deck?: Deck;
    animationManager: AnimationManager;
    shouldAnimate: boolean;
    enabled: boolean;
    glContext?: WebGLRenderingContext;
    videoCapture: VideoCapture;
    constructor({ animationManager, glContext }: {
        animationManager?: AnimationManager;
        glContext?: WebGLRenderingContext;
    });
    setDeck(deck: Deck): void;
    getProps({ deck, onNextFrame, extraProps }: {
        deck: Deck;
        onNextFrame?: (nextTimeMs: number) => void;
        extraProps?: DeckProps;
    }): {
        id?: string;
        width?: string | number;
        height?: string | number;
        style?: Partial<CSSStyleDeclaration>;
        useDevicePixels?: number | boolean;
        pickingRadius?: number;
        parameters?: any;
        layerFilter?: (context: import("@deck.gl/core/typed").FilterContext) => boolean;
        parent?: HTMLDivElement;
        canvas?: string | HTMLCanvasElement;
        gl?: WebGLRenderingContext;
        glOptions?: WebGLContextAttributes;
        layers?: import("@deck.gl/core/typed").LayersList;
        effects?: import("@deck.gl/core/typed").Effect[];
        views?: import("@deck.gl/core/typed").View<import("@deck.gl/core/typed/controllers/transition-manager").TransitionProps, {}> | import("@deck.gl/core/typed").View<import("@deck.gl/core/typed/controllers/transition-manager").TransitionProps, {}>[];
        controller?: boolean | import("@deck.gl/core/typed")._ConstructorOf<import("@deck.gl/core/typed").Controller<any>> | (import("@deck.gl/core/typed/controllers/controller").ControllerOptions & {
            type?: import("@deck.gl/core/typed")._ConstructorOf<import("@deck.gl/core/typed").Controller<any>>;
        });
        viewState?: any;
        initialViewState?: any;
        touchAction?: string;
        eventRecognizerOptions?: {
            [type: string]: import("mjolnir.js").RecognizerOptions;
        };
        _framebuffer?: any;
        _animate?: boolean;
        _pickable?: boolean;
        _typedArrayManagerProps?: import("@deck.gl/core/typed/utils/typed-array-manager").TypedArrayManagerOptions;
        onWebGLInitialized?: (gl: WebGLRenderingContext) => void;
        onResize?: (dimensions: {
            width: number;
            height: number;
        }) => void;
        onViewStateChange?: (params: import("@deck.gl/core/typed/controllers/controller").ViewStateChangeParameters & {
            viewId: string;
        }) => any;
        onInteractionStateChange?: (state: import("@deck.gl/core/typed/controllers/controller").InteractionState) => void;
        onBeforeRender?: (context: {
            gl: WebGLRenderingContext;
        }) => void;
        onAfterRender?: (context: {
            gl: WebGLRenderingContext;
        }) => void;
        onLoad?: () => void;
        onError?: (error: Error, layer?: Layer<{}>) => void;
        onHover?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirPointerEvent) => void;
        onClick?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        onDragStart?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        onDrag?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        onDragEnd?: (info: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirGestureEvent) => void;
        _customRender?: (reason: string) => void;
        _onMetrics?: (metrics: import("@deck.gl/core/typed/lib/deck").DeckMetrics) => void;
        getCursor?: (state: {
            isHovering: boolean;
            isDragging: boolean;
        }) => string;
        getTooltip?: (info: import("@deck.gl/core/typed").PickingInfo) => import("@deck.gl/core/typed/lib/tooltip").TooltipContent;
        debug?: boolean;
        drawPickingColors?: boolean;
    };
    render({ Encoder, formatConfigs, filename, timecode, onStopped, onSave, onComplete }: {
        Encoder?: typeof FrameEncoder;
        formatConfigs?: Partial<FormatConfigs>;
        filename?: string;
        timecode?: Timecode;
        onStopped?: () => void;
        onSave?: (blob: Blob | null) => void;
        onComplete?: () => void;
    }): void;
    stop({ onStopped, onSave, onComplete, abort }: {
        onStopped?: () => void;
        onSave?: (blob: Blob | null) => void;
        onComplete?: () => void;
        abort?: boolean;
    }): void;
    seek({ timeMs }: {
        timeMs: number;
    }): void;
    onAfterRender(proceedToNextFrame: (nextTimeMs: number) => void, readyToCapture?: boolean): void;
}
//# sourceMappingURL=deck-adapter.d.ts.map